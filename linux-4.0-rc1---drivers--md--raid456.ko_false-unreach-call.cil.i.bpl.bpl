var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: ref;

var $M.4: i32;

var $M.5: i8;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i24;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: i8;

var $M.14: [ref]i64;

var $M.15: [ref]ref;

var $M.16: [ref]i64;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: [ref]ref;

var $M.21: [ref]i64;

var $M.22: i8;

var $M.23: i32;

var $M.27: [ref]i64;

var $M.29: i32;

var $M.38: i32;

var $M.40: [ref]i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: [ref]i8;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i16;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.71: [ref]i8;

var $M.102: [ref]i8;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 973572);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const __ksymtab_raid5_set_cache_size: ref;

axiom __ksymtab_raid5_set_cache_size == $sub.ref(0, 1040);

const {:count 21} __kstrtab_raid5_set_cache_size: ref;

axiom __kstrtab_raid5_set_cache_size == $sub.ref(0, 2085);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 3113);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 4141);

const ldv_linux_kernel_locking_spinlock_spin_stripe_lock_of_stripe_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_stripe_lock_of_stripe_head == $sub.ref(0, 5169);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 6197);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 7225);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 8253);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_mddev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_mddev == $sub.ref(0, 9281);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 10309);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 11337);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 12365);

const ldv_linux_kernel_locking_spinlock_spin_hash_locks_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_hash_locks_of_r5conf == $sub.ref(0, 13393);

const ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf == $sub.ref(0, 14421);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 15449);

const ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN == $sub.ref(0, 16477);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 17502);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 18530);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 19558);

const devices_handle_discard_safely: ref;

axiom devices_handle_discard_safely == $sub.ref(0, 20583);

const raid5_skip_copy: ref;

axiom raid5_skip_copy == $sub.ref(0, 21655);

const raid5_group_thread_cnt: ref;

axiom raid5_group_thread_cnt == $sub.ref(0, 22727);

const raid5_preread_bypass_threshold: ref;

axiom raid5_preread_bypass_threshold == $sub.ref(0, 23799);

const raid5_stripecache_active: ref;

axiom raid5_stripecache_active == $sub.ref(0, 24871);

const raid5_stripecache_size: ref;

axiom raid5_stripecache_size == $sub.ref(0, 25943);

const {:count 6} raid5_attrs: ref;

axiom raid5_attrs == $sub.ref(0, 27015);

const raid5_attrs_group: ref;

axiom raid5_attrs_group == $sub.ref(0, 28071);

const raid4_personality: ref;

axiom raid4_personality == $sub.ref(0, 29279);

const raid5_personality: ref;

axiom raid5_personality == $sub.ref(0, 30487);

const raid6_personality: ref;

axiom raid6_personality == $sub.ref(0, 31695);

const raid5_wq: ref;

axiom raid5_wq == $sub.ref(0, 32727);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_reconfig_mutex_of_mddev: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_reconfig_mutex_of_mddev == $sub.ref(0, 33752);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 34777);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 35802);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 36827);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 37855);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 38895);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 39935);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 40975);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 42015);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 43055);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 44095);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 45135);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 46175);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 47215);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 48243);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 49271);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 50299);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 51327);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 52355);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 53383);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 54411);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 55437);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 56465);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 57493);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 58521);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 59549);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 60577);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 61605);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 62633);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 63661);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 64689);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 65717);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 66745);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 67773);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 68801);

const {:count 27} .str.5: ref;

axiom .str.5 == $sub.ref(0, 69852);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.6: ref;

axiom .str.6 == $sub.ref(0, 70910);

const {:count 19} .str.1: ref;

axiom .str.1 == $sub.ref(0, 71953);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.7: ref;

axiom .str.7 == $sub.ref(0, 73001);

const {:count 8} .str.2: ref;

axiom .str.2 == $sub.ref(0, 74033);

const {:count 12} .str.3: ref;

axiom .str.3 == $sub.ref(0, 75069);

const {:count 28} .str.4: ref;

axiom .str.4 == $sub.ref(0, 76121);

const {:count 6} .str.8: ref;

axiom .str.8 == $sub.ref(0, 77151);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 47} .str.129: ref;

axiom .str.129 == $sub.ref(0, 78222);

const {:count 38} .str.130: ref;

axiom .str.130 == $sub.ref(0, 79284);

const {:count 60} .str.131: ref;

axiom .str.131 == $sub.ref(0, 80368);

const {:count 36} .str.132: ref;

axiom .str.132 == $sub.ref(0, 81428);

const {:count 29} .str.133: ref;

axiom .str.133 == $sub.ref(0, 82481);

const {:count 16} .str.134: ref;

axiom .str.134 == $sub.ref(0, 83521);

const {:count 23} .str.135: ref;

axiom .str.135 == $sub.ref(0, 84568);

const {:count 24} .str.136: ref;

axiom .str.136 == $sub.ref(0, 85616);

const {:count 27} .str.137: ref;

axiom .str.137 == $sub.ref(0, 86667);

const {:count 31} .str.138: ref;

axiom .str.138 == $sub.ref(0, 87722);

const {:count 11} .str.139: ref;

axiom .str.139 == $sub.ref(0, 88757);

const {:count 26} .str.140: ref;

axiom .str.140 == $sub.ref(0, 89807);

const {:count 52} .str.141: ref;

axiom .str.141 == $sub.ref(0, 90883);

const {:count 49} .str.142: ref;

axiom .str.142 == $sub.ref(0, 91956);

const {:count 29} .str.143: ref;

axiom .str.143 == $sub.ref(0, 93009);

const {:count 7} .str.144: ref;

axiom .str.144 == $sub.ref(0, 94040);

const {:count 40} .str.145: ref;

axiom .str.145 == $sub.ref(0, 95104);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 4} .str.16: ref;

axiom .str.16 == $sub.ref(0, 96132);

const {:count 7} .str.152: ref;

axiom .str.152 == $sub.ref(0, 97163);

const {:count 19} .str.153: ref;

axiom .str.153 == $sub.ref(0, 98206);

const {:count 20} .str.20: ref;

axiom .str.20 == $sub.ref(0, 99250);

const {:count 21} .str.154: ref;

axiom .str.154 == $sub.ref(0, 100295);

const {:count 14} .str.26: ref;

axiom .str.26 == $sub.ref(0, 101333);

const {:count 90} .str.27: ref;

axiom .str.27 == $sub.ref(0, 102447);

const {:count 73} .str.28: ref;

axiom .str.28 == $sub.ref(0, 103544);

const {:count 18} .str.29: ref;

axiom .str.29 == $sub.ref(0, 104586);

const __tracepoint_block_bio_complete: ref;

axiom __tracepoint_block_bio_complete == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 29} .str.99: ref;

axiom .str.99 == $sub.ref(0, 105639);

const {:count 41} .str.32: ref;

axiom .str.32 == $sub.ref(0, 106704);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const debug_locks: ref;

axiom debug_locks == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const rcu_sched_lock_map: ref;

axiom rcu_sched_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 11} .str.85: ref;

axiom .str.85 == $sub.ref(0, 107739);

const {:count 41} .str.86: ref;

axiom .str.86 == $sub.ref(0, 108804);

const {:count 53} .str.87: ref;

axiom .str.87 == $sub.ref(0, 109881);

const {:count 40} .str.88: ref;

axiom .str.88 == $sub.ref(0, 110945);

const __tracepoint_block_bio_remap: ref;

axiom __tracepoint_block_bio_remap == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 23} .str.91: ref;

axiom .str.91 == $sub.ref(0, 111992);

const {:count 51} .str.92: ref;

axiom .str.92 == $sub.ref(0, 113067);

const {:count 9} .str.93: ref;

axiom .str.93 == $sub.ref(0, 114100);

const {:count 63} .str.94: ref;

axiom .str.94 == $sub.ref(0, 115187);

const {:count 68} .str.95: ref;

axiom .str.95 == $sub.ref(0, 116279);

const {:count 62} .str.96: ref;

axiom .str.96 == $sub.ref(0, 117365);

const {:count 62} .str.97: ref;

axiom .str.97 == $sub.ref(0, 118451);

const {:count 55} .str.98: ref;

axiom .str.98 == $sub.ref(0, 119530);

const {:count 24} .str.89: ref;

axiom .str.89 == $sub.ref(0, 120578);

const {:count 52} .str.90: ref;

axiom .str.90 == $sub.ref(0, 121654);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 17} .str.83: ref;

axiom .str.83 == $sub.ref(0, 122695);

const {:count 28} .str.84: ref;

axiom .str.84 == $sub.ref(0, 123747);

const {:count 19} .str.82: ref;

axiom .str.82 == $sub.ref(0, 124790);

const {:count 17} .str.64: ref;

axiom .str.64 == $sub.ref(0, 125831);

const {:count 16} .str.81: ref;

axiom .str.81 == $sub.ref(0, 126871);

const {:count 21} .str.80: ref;

axiom .str.80 == $sub.ref(0, 127916);

const {:count 25} .str.79: ref;

axiom .str.79 == $sub.ref(0, 128965);

const {:count 21} .str.78: ref;

axiom .str.78 == $sub.ref(0, 130010);

const {:count 17} .str.77: ref;

axiom .str.77 == $sub.ref(0, 131051);

const {:count 20} .str.65: ref;

axiom .str.65 == $sub.ref(0, 132095);

const {:count 44} .str.66: ref;

axiom .str.66 == $sub.ref(0, 133163);

const {:count 15} .str.75: ref;

axiom .str.75 == $sub.ref(0, 134202);

const {:count 20} .str.76: ref;

axiom .str.76 == $sub.ref(0, 135246);

const {:count 19} .str.72: ref;

axiom .str.72 == $sub.ref(0, 136289);

const {:count 39} .str.73: ref;

axiom .str.73 == $sub.ref(0, 137352);

const {:count 38} .str.74: ref;

axiom .str.74 == $sub.ref(0, 138414);

const {:count 21} .str.70: ref;

axiom .str.70 == $sub.ref(0, 139459);

const {:count 19} .str.71: ref;

axiom .str.71 == $sub.ref(0, 140502);

const {:count 27} .str.69: ref;

axiom .str.69 == $sub.ref(0, 141553);

const {:count 17} .str.68: ref;

axiom .str.68 == $sub.ref(0, 142594);

const {:count 16} .str.63: ref;

axiom .str.63 == $sub.ref(0, 143634);

const {:count 21} .str.67: ref;

axiom .str.67 == $sub.ref(0, 144679);

const {:count 47} .str.57: ref;

axiom .str.57 == $sub.ref(0, 145750);

const {:count 24} .str.61: ref;

axiom .str.61 == $sub.ref(0, 146798);

const {:count 45} .str.62: ref;

axiom .str.62 == $sub.ref(0, 147867);

const {:count 18} .str.49: ref;

axiom .str.49 == $sub.ref(0, 148909);

const {:count 25} .str.50: ref;

axiom .str.50 == $sub.ref(0, 149958);

const {:count 12} .str.54: ref;

axiom .str.54 == $sub.ref(0, 150994);

const {:count 33} .str.55: ref;

axiom .str.55 == $sub.ref(0, 152051);

const {:count 34} .str.56: ref;

axiom .str.56 == $sub.ref(0, 153109);

const {:count 12} .str.59: ref;

axiom .str.59 == $sub.ref(0, 154145);

const {:count 28} .str.60: ref;

axiom .str.60 == $sub.ref(0, 155197);

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 156235);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 157287);

const {:count 28} .str.53: ref;

axiom .str.53 == $sub.ref(0, 158339);

const {:count 43} .str.46: ref;

axiom .str.46 == $sub.ref(0, 159406);

const {:count 22} .str.48: ref;

axiom .str.48 == $sub.ref(0, 160452);

const {:count 22} .str.47: ref;

axiom .str.47 == $sub.ref(0, 161498);

const {:count 23} .str.39: ref;

axiom .str.39 == $sub.ref(0, 162545);

const {:count 61} .str.40: ref;

axiom .str.40 == $sub.ref(0, 163630);

const {:count 32} .str.41: ref;

axiom .str.41 == $sub.ref(0, 164686);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 165728);

const {:count 29} .str.43: ref;

axiom .str.43 == $sub.ref(0, 166781);

const {:count 35} .str.44: ref;

axiom .str.44 == $sub.ref(0, 167840);

const {:count 24} .str.45: ref;

axiom .str.45 == $sub.ref(0, 168888);

const {:count 12} .str.35: ref;

axiom .str.35 == $sub.ref(0, 169924);

const {:count 32} .str.36: ref;

axiom .str.36 == $sub.ref(0, 170980);

const {:count 36} .str.37: ref;

axiom .str.37 == $sub.ref(0, 172040);

const {:count 28} .str.38: ref;

axiom .str.38 == $sub.ref(0, 173092);

const {:count 26} .str.33: ref;

axiom .str.33 == $sub.ref(0, 174142);

const {:count 26} .str.34: ref;

axiom .str.34 == $sub.ref(0, 175192);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 176231);

const {:count 51} .str.31: ref;

axiom .str.31 == $sub.ref(0, 177306);

const {:count 22} .str.22: ref;

axiom .str.22 == $sub.ref(0, 178352);

const {:count 58} .str.23: ref;

axiom .str.23 == $sub.ref(0, 179434);

const {:count 6} .str.24: ref;

axiom .str.24 == $sub.ref(0, 180464);

const {:count 5} .str.25: ref;

axiom .str.25 == $sub.ref(0, 181493);

const {:count 15} .str.113: ref;

axiom .str.113 == $sub.ref(0, 182532);

const {:count 35} .str.114: ref;

axiom .str.114 == $sub.ref(0, 183591);

const {:count 44} .str.115: ref;

axiom .str.115 == $sub.ref(0, 184659);

const {:count 10} .str.149: ref;

axiom .str.149 == $sub.ref(0, 185693);

const {:count 10} .str.150: ref;

axiom .str.150 == $sub.ref(0, 186727);

const {:count 7} .str.151: ref;

axiom .str.151 == $sub.ref(0, 187758);

const {:count 42} .str.146: ref;

axiom .str.146 == $sub.ref(0, 188824);

const {:count 19} .str.147: ref;

axiom .str.147 == $sub.ref(0, 189867);

const cpu_present_mask: ref;

axiom cpu_present_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 19} .str.148: ref;

axiom .str.148 == $sub.ref(0, 190910);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 191950);

const {:count 14} .str.18: ref;

axiom .str.18 == $sub.ref(0, 192988);

const {:count 24} .str.19: ref;

axiom .str.19 == $sub.ref(0, 194036);

const {:count 26} .str.21: ref;

axiom .str.21 == $sub.ref(0, 195086);

const node_states: ref;

axiom node_states == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 4} .str.58: ref;

axiom .str.58 == $sub.ref(0, 196114);

const {:count 64} .str.116: ref;

axiom .str.116 == $sub.ref(0, 197202);

const {:count 8} .str.117: ref;

axiom .str.117 == $sub.ref(0, 198234);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const {:count 5} .str.119: ref;

axiom .str.119 == $sub.ref(0, 199263);

const {:count 55} .str.118: ref;

axiom .str.118 == $sub.ref(0, 200342);

const {:count 28} .str.127: ref;

axiom .str.127 == $sub.ref(0, 201394);

const {:count 15} .str.126: ref;

axiom .str.126 == $sub.ref(0, 202433);

const {:count 22} .str.103: ref;

axiom .str.103 == $sub.ref(0, 203479);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 204517);

const {:count 28} .str.105: ref;

axiom .str.105 == $sub.ref(0, 205569);

const {:count 25} .str.106: ref;

axiom .str.106 == $sub.ref(0, 206618);

const {:count 6} .str.100: ref;

axiom .str.100 == $sub.ref(0, 207648);

const {:count 23} .str.101: ref;

axiom .str.101 == $sub.ref(0, 208695);

const {:count 100} .str.102: ref;

axiom .str.102 == $sub.ref(0, 209819);

const {:count 35} .str.120: ref;

axiom .str.120 == $sub.ref(0, 210878);

const {:count 11} .str.121: ref;

axiom .str.121 == $sub.ref(0, 211913);

const {:count 2} .str.122: ref;

axiom .str.122 == $sub.ref(0, 212939);

const {:count 2} .str.123: ref;

axiom .str.123 == $sub.ref(0, 213965);

const {:count 3} .str.124: ref;

axiom .str.124 == $sub.ref(0, 214992);

const {:count 2} .str.125: ref;

axiom .str.125 == $sub.ref(0, 216018);

const {:count 62} .str.155: ref;

axiom .str.155 == $sub.ref(0, 217104);

const {:count 55} .str.156: ref;

axiom .str.156 == $sub.ref(0, 218183);

const {:count 56} .str.157: ref;

axiom .str.157 == $sub.ref(0, 219263);

const {:count 54} .str.158: ref;

axiom .str.158 == $sub.ref(0, 220341);

const {:count 76} .str.159: ref;

axiom .str.159 == $sub.ref(0, 221441);

const {:count 71} .str.160: ref;

axiom .str.160 == $sub.ref(0, 222536);

const {:count 36} .str.161: ref;

axiom .str.161 == $sub.ref(0, 223596);

const {:count 56} .str.162: ref;

axiom .str.162 == $sub.ref(0, 224676);

const {:count 60} .str.163: ref;

axiom .str.163 == $sub.ref(0, 225760);

const {:count 72} .str.164: ref;

axiom .str.164 == $sub.ref(0, 226856);

const {:count 49} .str.165: ref;

axiom .str.165 == $sub.ref(0, 227929);

const {:count 75} .str.166: ref;

axiom .str.166 == $sub.ref(0, 229028);

const {:count 75} .str.167: ref;

axiom .str.167 == $sub.ref(0, 230127);

const {:count 50} .str.168: ref;

axiom .str.168 == $sub.ref(0, 231201);

const {:count 59} .str.169: ref;

axiom .str.169 == $sub.ref(0, 232284);

const {:count 59} .str.170: ref;

axiom .str.170 == $sub.ref(0, 233367);

const {:count 38} .str.171: ref;

axiom .str.171 == $sub.ref(0, 234429);

const {:count 13} .str.107: ref;

axiom .str.107 == $sub.ref(0, 235466);

const {:count 49} .str.108: ref;

axiom .str.108 == $sub.ref(0, 236539);

const __tracepoint_block_unplug: ref;

axiom __tracepoint_block_unplug == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const {:count 19} .str.109: ref;

axiom .str.109 == $sub.ref(0, 237582);

const {:count 34} .str.110: ref;

axiom .str.110 == $sub.ref(0, 238640);

const {:count 18} .str.111: ref;

axiom .str.111 == $sub.ref(0, 239682);

const {:count 55} .str.112: ref;

axiom .str.112 == $sub.ref(0, 240761);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const {:count 6} .str.10: ref;

axiom .str.10 == $sub.ref(0, 241791);

const {:count 61} .str.128: ref;

axiom .str.128 == $sub.ref(0, 242876);

const {:count 6} .str.12: ref;

axiom .str.12 == $sub.ref(0, 243906);

const {:count 18} .str.172: ref;

axiom .str.172 == $sub.ref(0, 244948);

const {:count 20} .str.173: ref;

axiom .str.173 == $sub.ref(0, 245992);

const {:count 25} .str.174: ref;

axiom .str.174 == $sub.ref(0, 247041);

const {:count 17} .str.175: ref;

axiom .str.175 == $sub.ref(0, 248082);

const {:count 10} .str.176: ref;

axiom .str.176 == $sub.ref(0, 249116);

const {:count 10} .str.14: ref;

axiom .str.14 == $sub.ref(0, 250150);

const {:count 8} .str.15: ref;

axiom .str.15 == $sub.ref(0, 251182);

const .str: ref;

axiom .str == $sub.ref(0, 252207);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 253239);

const {:count 3} .str.1.195: ref;

axiom .str.1.195 == $sub.ref(0, 254266);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 255304);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 256332);

const raid5_set_cache_size: ref;

axiom raid5_set_cache_size == $sub.ref(0, 257364);

procedure raid5_set_cache_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed, $M.2;



implementation raid5_set_cache_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i15: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i35: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "raid5_set_cache_size:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i1, 17);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 32751);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $sub.i32(0, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i11 := $srem.i32($i10, 8);
    call {:si_unique_call 1} {:cexpr "hash"} boogie_si_record_i32($i11);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, $i13);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i27 := md_allow_write($p0);
    call {:si_unique_call 6} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i31 := $srem.i32($i30, 8);
    call {:si_unique_call 7} {:cexpr "hash"} boogie_si_record_i32($i31);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i1, $i33);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i35 := $i31;
    goto $bb26;

  $bb26:
    call $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i35 := raid5_set_cache_size_loop_$bb26($i1, $p4, $p32, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i35);
    goto $bb26_last;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i36 := grow_one_stripe($p4, $i35);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 9} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i35, 1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i43 := $srem.i32($i42, 8);
    call {:si_unique_call 10} {:cexpr "hash"} boogie_si_record_i32($i43);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p32);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i1, $i44);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i43;
    goto $bb32_dummy;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb8;

  $bb8:
    call $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i15 := raid5_set_cache_size_loop_$bb8($i1, $p4, $p12, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i15);
    goto $bb8_last;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i16 := drop_one_stripe($p4, $i15);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 3} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i15, 1);
    call {:si_unique_call 4} {:cexpr "hash"} boogie_si_record_i32($i22);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p12);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, $i25);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i24;
    goto $bb17_dummy;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i24 := 7;
    goto $bb16;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 258396);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const drop_one_stripe: ref;

axiom drop_one_stripe == $sub.ref(0, 259428);

procedure drop_one_stripe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation drop_one_stripe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "drop_one_stripe:arg:hash"} boogie_si_record_i32($i1);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 72));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ldv_spin_lock_irq_100($p5);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p6 := get_free_stripe($p0, $i1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 72));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} ldv_spin_unlock_irq_103($p10);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p6);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i15 := atomic_read($p14);
    call {:si_unique_call 16} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 18} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} shrink_buffers($p6);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p6);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} kmem_cache_free($p22, $p23);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} atomic_dec($p24);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i20 == 1;
    call {:si_unique_call 19} devirtbounce(0, .str.1, 1949, 12);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const md_allow_write: ref;

axiom md_allow_write == $sub.ref(0, 260460);

procedure md_allow_write($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation md_allow_write($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 23} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 24} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const grow_one_stripe: ref;

axiom grow_one_stripe == $sub.ref(0, 261492);

procedure grow_one_stripe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation grow_one_stripe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i9: i32;
  var vslice_dummy_var_12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 26} {:cexpr "grow_one_stripe:arg:hash"} boogie_si_record_i32($i1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p5 := kmem_cache_zalloc($p4, 208);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_12 := spinlock_check($p11);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} __raw_spin_lock_init($p15, .str.5, $p2);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i16 := grow_buffers($p6);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 31} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i1);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(70, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i21);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} atomic_set($p23, 1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} atomic_inc($p24);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} INIT_LIST_HEAD($p25);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} release_stripe($p6);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} shrink_buffers($p6);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} kmem_cache_free($p19, $p20);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const kmem_cache_zalloc: ref;

axiom kmem_cache_zalloc == $sub.ref(0, 262524);

procedure kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} {:cexpr "kmem_cache_zalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_check_alloc_flags($i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p2 := ldv_zalloc_unknown_size();
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 263556);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 264588);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    return;
}



const grow_buffers: ref;

axiom grow_buffers == $sub.ref(0, 265620);

procedure grow_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation grow_buffers($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i6: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 41} {:cexpr "num"} boogie_si_record_i32($i4);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $i11, $p14, $i15, $p18, $i19, $i20, $i6 := grow_buffers_loop_$bb4($p0, $i4, $p7, $i8, $i9, $i11, $p14, $i15, $p18, $i19, $i20, $i6);
    goto $bb4_last;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p7 := alloc_pages(208, 0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i6);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i11, 368)), $mul.ref(304, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i6);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i15, 368)), $mul.ref(312, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p7);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i6, 1);
    call {:si_unique_call 43} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, $i4);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i19;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb8;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;
}



const shrink_buffers: ref;

axiom shrink_buffers == $sub.ref(0, 266652);

procedure shrink_buffers($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation shrink_buffers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i30: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i6: i32;
  var vslice_dummy_var_13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 44} {:cexpr "num"} boogie_si_record_i32($i4);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p10, $p11, $i12, $i13, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $p33, $p34, $i35, $i36, $i37, $p40, $i41, $i42, $i6, vslice_dummy_var_13 := shrink_buffers_loop_$bb4($p0, $i4, $i7, $p10, $p11, $i12, $i13, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $p33, $p34, $i35, $i36, $i37, $p40, $i41, $i42, $i6, vslice_dummy_var_13);
    goto $bb4_last;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i7, 368)), $mul.ref(304, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i6);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i13, 368)), $mul.ref(312, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i12, $i18);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 45} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_13 := ldv__builtin_expect($i28, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i6);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i30, 368)), $mul.ref(304, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i6);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i37, 368)), $mul.ref(304, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} put_page($p34);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i6, 1);
    call {:si_unique_call 50} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, $i4);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i41;
    goto $bb13_dummy;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} warn_slowpath_null(.str.1, 490);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;
}



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 267684);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 268716);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 269748);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 270780);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    return;
}



const release_stripe: ref;

axiom release_stripe == $sub.ref(0, 271812);

procedure release_stripe($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation release_stripe($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i5 := atomic_add_unless($p4, $sub.i32(0, 1), 1);
    call {:si_unique_call 56} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 58} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i18 := test_and_set_bit(20, $p17);
    call {:si_unique_call 60} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(32, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1120, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i22 := llist_add($p20, $p21);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 67} {:cexpr "wakeup"} boogie_si_record_i8($i23);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} md_wakeup_thread($p28);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i29 := arch_local_irq_save();
    call {:si_unique_call 62} {:cexpr "flags"} boogie_si_record_i64($i29);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} trace_hardirqs_off();
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i31 := ldv___ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_111($p30);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 65} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i37 := arch_irqs_disabled_flags($i29);
    call {:si_unique_call 75} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} trace_hardirqs_on();
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} arch_local_irq_restore($i29);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} arch_local_irq_restore($i29);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} trace_hardirqs_off();
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} INIT_LIST_HEAD($p1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(70, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i35 := $sext.i16.i32($i34);
    call {:si_unique_call 70} {:cexpr "hash"} boogie_si_record_i32($i35);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} do_release_stripe($p3, $p0, $p1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} ldv_spin_unlock_102($p36);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} release_inactive_stripe_list($p3, $p1, $i35);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 272844);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 81} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 83} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 273876);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 85} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 274908);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 87} devirtbounce.1(0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const llist_add: ref;

axiom llist_add == $sub.ref(0, 275940);

procedure llist_add($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation llist_add($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i2 := llist_add_batch($p0, $p0, $p1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 89} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const md_wakeup_thread: ref;

axiom md_wakeup_thread == $sub.ref(0, 276972);

procedure md_wakeup_thread($p0: ref);
  free requires assertsPassed;



implementation md_wakeup_thread($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 278004);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i0 := arch_local_save_flags();
    call {:si_unique_call 91} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} arch_local_irq_disable();
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 279036);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_111: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_111 == $sub.ref(0, 280068);

procedure ldv___ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_111($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_111($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i1 := __ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock($p0);
    call {:si_unique_call 94} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i2 := ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_device_lock_of_r5conf();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 96} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const do_release_stripe: ref;

axiom do_release_stripe == $sub.ref(0, 281100);

procedure do_release_stripe($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_release_stripe($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i4 := list_empty($p3);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 100} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i11 := atomic_read($p10);
    call {:si_unique_call 103} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 105} {:cexpr "tmp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i18 := constant_test_bit(1, $p17);
    call {:si_unique_call 108} {:cexpr "tmp___11"} boogie_si_record_i32($i18);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i50 := stripe_operations_active($p1);
    call {:si_unique_call 112} {:cexpr "tmp___6"} boogie_si_record_i32($i50);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 114} {:cexpr "tmp___7"} boogie_si_record_i64($i54);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i57 := test_and_set_bit(6, $p56);
    call {:si_unique_call 128} {:cexpr "tmp___9"} boogie_si_record_i32($i57);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} atomic_dec($p66);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i68 := constant_test_bit(10, $p67);
    call {:si_unique_call 134} {:cexpr "tmp___10"} boogie_si_record_i32($i68);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} list_add_tail($p70, $p2);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i58 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i60 := atomic_sub_return(1, $p59);
    call {:si_unique_call 130} {:cexpr "tmp___8"} boogie_si_record_i32($i60);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i60, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} md_wakeup_thread($p65);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume $i55 == 1;
    call {:si_unique_call 126} devirtbounce(0, .str.1, 316, 12);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i21 := constant_test_bit(7, $p20);
    call {:si_unique_call 110} {:cexpr "tmp___4"} boogie_si_record_i32($i21);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i29 := constant_test_bit(9, $p28);
    call {:si_unique_call 119} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} clear_bit(7, $p39);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} clear_bit(9, $p40);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} raid5_wakeup_stripe_thread($p1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(720, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} list_add_tail($p44, $p45);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} md_wakeup_thread($p49);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(84, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(916, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i32, $i34);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(768, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} list_add_tail($p37, $p38);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i24 := constant_test_bit(6, $p23);
    call {:si_unique_call 116} {:cexpr "tmp___5"} boogie_si_record_i32($i24);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(752, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} list_add_tail($p26, $p27);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 106} devirtbounce(0, .str.1, 296, 12);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 101} devirtbounce(0, .str.1, 295, 12);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const ldv_spin_unlock_102: ref;

axiom ldv_spin_unlock_102 == $sub.ref(0, 282132);

procedure ldv_spin_unlock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_unlock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} spin_unlock($p0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const release_inactive_stripe_list: ref;

axiom release_inactive_stripe_list == $sub.ref(0, 283164);

procedure release_inactive_stripe_list($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation release_inactive_stripe_list($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "release_inactive_stripe_list:arg:hash"} boogie_si_record_i32($i2);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 8);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4, $i5 := $i2, 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i6, $i7, $i8 := 0, $i5, $i4;
    goto $bb4;

  $bb4:
    call $i9, $i10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $i6, $i7, $i8, $i39 := release_inactive_stripe_list_loop_$bb4($p0, $p1, $i9, $i10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $i6, $i7, $i8, $i39);
    goto $bb4_last;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $sub.i64(0, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref($i10, 16));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i12 := list_empty_careful($p11);
    call {:si_unique_call 140} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i6;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i7, 1);
    call {:si_unique_call 149} {:cexpr "size"} boogie_si_record_i32($i36);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i8, 1);
    call {:si_unique_call 150} {:cexpr "hash"} boogie_si_record_i32($i37);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i36, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i39 := $i35;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __wake_up($p41, 3, 1, $0.ref);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(784, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} md_wakeup_thread($p49);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7, $i8 := $i35, $i36, $i37;
    goto $bb15_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i8);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 72));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p17);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i8);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 16));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i22 := list_empty($p21);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i8);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 16));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} list_splice_tail_init($p11, $p30);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i8);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 72));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_spin_unlock_irqrestore_110($p34, $u0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb14;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i24 := list_empty($p11);
    call {:si_unique_call 145} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1112, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} atomic_dec($p26);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i4, $i5 := 7, 8;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_493;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 284196);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 285228);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 158} $i8 := devirtbounce.2(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 159} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 157} devirtbounce(0, .str.6, 809, 12);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 286260);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    return;
}



const list_empty_careful: ref;

axiom list_empty_careful == $sub.ref(0, 287292);

procedure list_empty_careful($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty_careful($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i6: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i6);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i7, $i10);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109 == $sub.ref(0, 288324);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 289356);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 290388);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_linux_usb_dev_atomic_dec($p0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    return;
}



const list_splice_tail_init: ref;

axiom list_splice_tail_init == $sub.ref(0, 291420);

procedure list_splice_tail_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_tail_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i2 := list_empty($p0);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __list_splice($p0, $p5, $p1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} INIT_LIST_HEAD($p0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_unlock_irqrestore_110: ref;

axiom ldv_spin_unlock_irqrestore_110 == $sub.ref(0, 292452);

procedure ldv_spin_unlock_irqrestore_110($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_spin_unlock_irqrestore_110($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "ldv_spin_unlock_irqrestore_110:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 293484);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 171} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN == $sub.ref(0, 294516);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i0 := $M.1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_assume($i5);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 174} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 295548);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 296580);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 297612);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} __VERIFIER_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 298644);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 299676);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_dec: ref;

axiom ldv_linux_usb_dev_atomic_dec == $sub.ref(0, 300708);

procedure ldv_linux_usb_dev_atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN == $sub.ref(0, 301740);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i0 := $M.1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_assume($i5);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 183} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 302772);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 303804);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf == $sub.ref(0, 304836);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ldv_assume($i5);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 188} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf"} boogie_si_record_i32(1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 305868);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} _raw_spin_unlock($p2);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 306900);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 307932);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 308964);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 309996);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} __list_add($p0, $p3, $p1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 311028);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 193} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    return;
}



const raid5_wakeup_stripe_thread: ref;

axiom raid5_wakeup_stripe_thread == $sub.ref(0, 312060);

procedure raid5_wakeup_stripe_thread($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation raid5_wakeup_stripe_thread($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p85: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i64: i32;
  var $i65: i32;
  var vslice_dummy_var_14: i1;
  var vslice_dummy_var_15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 194} {:cexpr "cpu"} boogie_si_record_i32($i4);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i5 := cpumask_check($i4);
    call {:si_unique_call 196} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i10 := variable_test_bit($i6, $p9);
    call {:si_unique_call 198} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i17 := list_empty($p16);
    call {:si_unique_call 202} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i40 := __cpu_to_node($i39);
    call {:si_unique_call 208} {:cexpr "tmp___4"} boogie_si_record_i32($i40);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i40);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 224)), $mul.ref(216, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p50 := $M.3;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} vslice_dummy_var_14 := queue_work_on($i49, $p50, $p53);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(32, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i56, 8);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $sub.i32(0, 1));
    call {:si_unique_call 210} {:cexpr "thread_cnt"} boogie_si_record_i32($i58);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32(1, $i60);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i58, 0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i63 := $and.i1($i61, $i62);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i63 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i64, $i65 := 1, $i58;
    goto $bb14;

  $bb14:
    call $p66, $p67, $i68, $p70, $i71, $i72, $p73, $p74, $i75, $p77, $p78, $i79, $p80, $p81, $p82, $i83, $p85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i65, vslice_dummy_var_15 := raid5_wakeup_stripe_thread_loop_$bb14($p0, $p42, $i43, $p59, $p66, $p67, $i68, $p70, $i71, $i72, $p73, $p74, $i75, $p77, $p78, $i79, $p80, $p81, $p82, $i83, $p85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i65, vslice_dummy_var_15);
    goto $bb14_last;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i64);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p67, $mul.ref($i68, 224)), $mul.ref(216, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i71);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i64);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p74, $mul.ref($i75, 224)), $mul.ref(216, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 1);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p80 := $M.3;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p42, $mul.ref($i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i64);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p82, $mul.ref($i83, 224)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_15 := queue_work_on($i79, $p80, $p85);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32($i65, 1);
    call {:si_unique_call 212} {:cexpr "thread_cnt"} boogie_si_record_i32($i87);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i64, 1);
    call {:si_unique_call 213} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p59);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i89, $i90);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i92 := $sgt.i32($i88, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i93 := $and.i1($i91, $i92);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i93 == 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i64, $i65 := $i89, $i88;
    goto $bb19_dummy;

  $bb16:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i88 := $i65;
    goto $bb18;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} md_wakeup_thread($p37);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i19 := __cpu_to_node($i15);
    call {:si_unique_call 204} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 40));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref($i22, 40)), $mul.ref(0, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} list_add_tail($p24, $p25);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref($i22, 40)), $mul.ref(32, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref($i22, 40)), $mul.ref(32, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p23);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i13 := cpumask_first($p12);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_813;
}



const stripe_operations_active: ref;

axiom stripe_operations_active == $sub.ref(0, 313092);

procedure stripe_operations_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation stripe_operations_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i11: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(92, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(96, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i9 := constant_test_bit(15, $p8);
    call {:si_unique_call 215} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i13 := constant_test_bit(16, $p12);
    call {:si_unique_call 217} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb12;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 314124);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i3 := atomic_add_return($i2, $p1);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 315156);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
    call {:si_unique_call 223} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_add_return: ref;

axiom ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 316188);

procedure ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 317220);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i2 := $uge.i32($i0, $i1);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 226} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 228} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_16 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 229} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 234} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} warn_slowpath_null(.str.7, 116);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 318252);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 237} $i2 := devirtbounce.4(0, $p1, $i0);
    call {:si_unique_call 238} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cpumask_first: ref;

axiom cpumask_first == $sub.ref(0, 319284);

procedure cpumask_first($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_first($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i5 := ldv_find_first_bit_4($p2, $i4);
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __cpu_to_node: ref;

axiom __cpu_to_node == $sub.ref(0, 320316);

procedure __cpu_to_node($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __cpu_to_node($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "__cpu_to_node:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 321348);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_find_first_bit_4: ref;

axiom ldv_find_first_bit_4 == $sub.ref(0, 322380);

procedure ldv_find_first_bit_4($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_find_first_bit_4($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "ldv_find_first_bit_4:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i2 := ldv_linux_lib_find_bit_find_first_bit($i1);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_lib_find_bit_find_first_bit: ref;

axiom ldv_linux_lib_find_bit_find_first_bit == $sub.ref(0, 323412);

procedure ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "ldv_linux_lib_find_bit_find_first_bit:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i1 := ldv_undef_ulong();
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i2 := $ule.i64($i1, $i0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} ldv_assume($i3);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} ldv_assume(1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_undef_ulong: ref;

axiom ldv_undef_ulong == $sub.ref(0, 324444);

procedure ldv_undef_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation ldv_undef_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 325476);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 326508);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    return;
}



const __ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock == $sub.ref(0, 327540);

procedure __ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_device_lock_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_device_lock_of_r5conf == $sub.ref(0, 328572);

procedure ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_device_lock_of_r5conf() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_atomic_dec_and_lock_device_lock_of_r5conf() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try($i2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_assume($i5);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i6 := ldv_undef_int();
    call {:si_unique_call 264} {:cexpr "atomic_value_after_dec"} boogie_si_record_i32($i6);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 265} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf"} boogie_si_record_i32(2);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try == $sub.ref(0, 329604);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} __VERIFIER_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 330636);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 331668);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 272} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 274} $i7 := devirtbounce.5(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 275} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 273} devirtbounce(0, .str.6, 804, 12);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 332700);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 279} $i7 := devirtbounce.5(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 280} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 278} devirtbounce(0, .str.6, 814, 12);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const llist_add_batch: ref;

axiom llist_add_batch == $sub.ref(0, 333732);

procedure llist_add_batch($p0: ref, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation llist_add_batch($p0: ref, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 334764);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 284} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i3 := atomic_read($p0);
    call {:si_unique_call 286} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 290} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 292} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 335796);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 296} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 297} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 298} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 299} $i10 := devirtbounce.8(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 300} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 336828);

procedure __cmpxchg_wrong_size();



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 337860);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 338892);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 339924);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "alloc_pages:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 306} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ldv_check_alloc_flags($i0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 340956);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 341988);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i0 := ldv_undef_int();
    call {:si_unique_call 313} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p2 := external_allocated_data();
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} ldv_assume($i5);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i6 := ldv_is_err($p2);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} ldv_assume($i8);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 343020);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p0 := external_alloc();
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 344052);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 345084);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 320} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 321} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 346116);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 324} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 347148);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 348180);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} __VERIFIER_error();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 349212);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 350244);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} __VERIFIER_error();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_zalloc_unknown_size: ref;

axiom ldv_zalloc_unknown_size == $sub.ref(0, 351276);

procedure ldv_zalloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_zalloc_unknown_size() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p0 := ldv_calloc_unknown_size();
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_calloc_unknown_size: ref;

axiom ldv_calloc_unknown_size == $sub.ref(0, 352308);

procedure ldv_calloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_calloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i0 := ldv_undef_int();
    call {:si_unique_call 334} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p2 := external_allocated_data();
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 336} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p2, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv_assume($i5);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i6 := ldv_is_err($p2);
    call {:si_unique_call 339} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} ldv_assume($i8);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 353340);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_spin_lock_irq_100: ref;

axiom ldv_spin_lock_irq_100 == $sub.ref(0, 354372);

procedure ldv_spin_lock_irq_100($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_spin_lock_irq_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} spin_lock_irq($p0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const get_free_stripe: ref;

axiom get_free_stripe == $sub.ref(0, 355404);

procedure get_free_stripe($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation get_free_stripe($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "get_free_stripe:arg:hash"} boogie_si_record_i32($i1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 16));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i6 := list_empty($p5);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(0, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} list_del_init($p14);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} remove_hash($p16);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} atomic_inc($p17);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(70, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i32($i19);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i1, $i20);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 350} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 16));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i30 := list_empty($p29);
    call {:si_unique_call 353} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p8 := $p16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1112, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} atomic_inc($p32);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    call {:si_unique_call 351} devirtbounce(0, .str.1, 476, 12);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const ldv_spin_unlock_irq_103: ref;

axiom ldv_spin_unlock_irq_103 == $sub.ref(0, 356436);

procedure ldv_spin_unlock_irq_103($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_spin_unlock_irq_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} spin_unlock_irq($p0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 357468);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 358500);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 359532);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} __list_del_entry($p0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} INIT_LIST_HEAD($p0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    return;
}



const remove_hash: ref;

axiom remove_hash == $sub.ref(0, 360564);

procedure remove_hash($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.0;



implementation remove_hash($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, .str.2);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, .str.3);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str.1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p5, .str.4);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.10, $p7);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 448);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p7, $i10);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p11, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.11, $p12);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} hlist_del_init($p20);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __dynamic_pr_debug.ref.ref.i64($p1, .str.4, $i19);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 361596);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32);



procedure __dynamic_pr_debug.ref.ref.i32.i64.ref.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: ref, p.5: ref, p.6: ref);



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);



procedure __dynamic_pr_debug.ref.ref.i32.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i64);



procedure __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i64.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32, p.5: i64);



procedure __dynamic_pr_debug.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64);



procedure __dynamic_pr_debug.ref.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32);



procedure __dynamic_pr_debug.ref.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32, p.5: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i32.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32, p.5: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i32.i64($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i64);



procedure __dynamic_pr_debug.ref.ref.ref.i64.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i32);



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);



procedure __dynamic_pr_debug.ref.ref.i64.i64.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const hlist_del_init: ref;

axiom hlist_del_init == $sub.ref(0, 362628);

procedure hlist_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del_init($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i1 := hlist_unhashed($p0);
    call {:si_unique_call 366} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} __hlist_del($p0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} INIT_HLIST_NODE($p0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hlist_unhashed: ref;

axiom hlist_unhashed == $sub.ref(0, 363660);

procedure hlist_unhashed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_unhashed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 364692);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const INIT_HLIST_NODE: ref;

axiom INIT_HLIST_NODE == $sub.ref(0, 365724);

procedure INIT_HLIST_NODE($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_HLIST_NODE($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 366756);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 367788);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} _raw_spin_lock_irq($p2);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 368820);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    return;
}



const make_request: ref;

axiom make_request == $sub.ref(0, 369852);

procedure make_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation make_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i1;
  var $i63: i8;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i85: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i64;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $p139: ref;
  var $i140: i1;
  var $p141: ref;
  var $i96: i8;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i1;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i8;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p171: ref;
  var $p172: ref;
  var $p170: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i62: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    call {:si_unique_call 373} {:cexpr "rw"} boogie_si_record_i32($i11);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p12 := get_current();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p12);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, autoremove_wake_function);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 8192);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 376} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} md_write_start($p0, $p1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i11, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 128);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 382} {:cexpr "tmp___2"} boogie_si_record_i64($i43);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, $sub.i64(0, 8));
    call {:si_unique_call 384} {:cexpr "logical_sector"} boogie_si_record_i64($i48);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i54, 9);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i51, $i56);
    call {:si_unique_call 385} {:cexpr "last_sector"} boogie_si_record_i64($i57);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} prepare_to_wait($p60, $p3, 2);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i61 := $ult.i64($i48, $i57);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} finish_wait($p186, $p3);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i187 := raid5_dec_bi_active_stripes($p1);
    call {:si_unique_call 436} {:cexpr "remaining"} boogie_si_record_i32($i187);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb103:
    assume $i188 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i11, 1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p192 := bdev_get_queue($p191);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} trace_block_bio_complete($p192, $p1, 0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} bio_endio($p1, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i189 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} md_write_end($p0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i62 := $i48;
    goto $bb20;

  $bb20:
    call $i63, $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $i96, $p142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $p171, $p172, $p170, $p173, $p174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i184, $i185, $i62 := make_request_loop_$bb20($p0, $p1, $p2, $p3, $p4, $p7, $i11, $i57, $i63, $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $i96, $p142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $p171, $p172, $p170, $p173, $p174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i184, $i185, $i62);
    goto $bb20_last;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb22;

  $bb22:
    call $i63, $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $i96, $p142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $p171, $p172, $p170 := make_request_loop_$bb22($p0, $p1, $p2, $p3, $p4, $p7, $i11, $i63, $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $i96, $p142, $i143, $i144, $p145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $p171, $p172, $p170, $i62);
    goto $bb22_last;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $p142, $i143, $i144, $p145 := make_request_loop_$bb23($p0, $p1, $p2, $p3, $p4, $p7, $i63, $p64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $i85, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $p141, $p142, $i143, $i144, $p145, $i62);
    goto $bb23_last;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i65 := read_seqcount_begin($p64);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i32($i65);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i63);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $sub.i64(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 391} {:cexpr "tmp___4"} boogie_si_record_i64($i73);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i98 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i99 := raid5_compute_sector($p7, $i62, $i98, $p2, $0.ref);
    call {:si_unique_call 397} {:cexpr "new_sector"} boogie_si_record_i64($i99);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p100, .str.2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p101, .str.107);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p102, .str.1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p103, .str.108);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.10, $p105);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 4718);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p105, $i108);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p109, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.11, $p110);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64($i114);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p116);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i117);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16384);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p120 := get_active_stripe($p7, $i99, $i98, $i119, 0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i122 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} clear_bit(0, $p183);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb52:
    assume $i122 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i98, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i124 := $zext.i1.i32($i123);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 403} {:cexpr "tmp___6"} boogie_si_record_i64($i126);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i143 := read_seqcount_retry($p142, $i65);
    call {:si_unique_call 410} {:cexpr "tmp___7"} boogie_si_record_i32($i143);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p145 := $p120;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i11, 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p145, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i163 := constant_test_bit(10, $p162);
    call {:si_unique_call 418} {:cexpr "tmp___9"} boogie_si_record_i32($i163);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i164 == 1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.12, $p2);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i168 := add_stripe_bio($p145, $p1, $i167, $i11);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 423} {:cexpr "tmp___10"} boogie_si_record_i32($i168);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p170 := $p145;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} set_bit(1, $p173);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} clear_bit(7, $p174);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.0, $p175);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 16);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} release_stripe_plug($p0, $p170);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i62, 8);
    call {:si_unique_call 433} {:cexpr "logical_sector"} boogie_si_record_i64($i184);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i185 := $ult.i64($i184, $i57);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i185 == 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb100:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i62 := $i184;
    goto $bb100_dummy;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i178 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i180 := test_and_set_bit(6, $p179);
    call {:si_unique_call 430} {:cexpr "tmp___11"} boogie_si_record_i32($i180);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i181 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} atomic_inc($p182);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb88:
    assume $i169 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} md_wakeup_thread($p172);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} release_stripe($p145);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} schedule();
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i63 := $i96;
    goto corral_source_split_1477_dummy;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i164 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} md_wakeup_thread($p166);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} release_stripe($p145);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} schedule();
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb46;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i146 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i149 := $uge.i64($i62, $i148);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb74;

  $bb75:
    assume $i149 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p150);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i152 := $ult.i64($i62, $i151);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb74;

  $bb77:
    assume $i152 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} release_stripe($p145);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p153 := get_current();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} flush_signals($p153);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} prepare_to_wait($p154, $p3, 1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i157 := $uge.i64($i62, $i156);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i161 := $i63;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i96 := $i161;
    goto $bb46;

  $bb79:
    assume $i157 == 1;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.0, $p158);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i160 := $ult.i64($i62, $i159);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb81;

  $bb82:
    assume $i160 == 1;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} schedule();
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i161 := 1;
    goto $bb84;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i144 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} release_stripe($p120);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557_dummy;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i127 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_lock_irq_136($p128);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i131 == 1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p135);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i137 := $ult.i64($i62, $i136);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i138 := 0;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_spin_unlock_irq_137($p139);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i138, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p141 := $p120;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} release_stripe($p141);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} schedule();
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb46;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i138 := 1;
    goto $bb64;

  $bb56:
    assume $i131 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.0, $p132);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i134 := $uge.i64($i62, $i133);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb61;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb59;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i115 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __dynamic_pr_debug.ref.ref.i64.i64($p4, .str.108, $i99, $i62);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb27:
    assume $i74 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock_irq_136($p75);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i84 := $uge.i64($i62, $i83);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i88 == 1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i94 := $uge.i64($i62, $i93);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} ldv_spin_unlock_irq_137($p97);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i98 := $i85;
    goto $bb48;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_spin_unlock_irq_137($p95);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} schedule();
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb46;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i88 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i91 := $ult.i64($i62, $i90);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb43;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb41;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i85 := 1;
    goto $bb37;

  $bb29:
    assume $i78 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i81 := $ult.i64($i62, $i80);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb34;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb32;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} prepare_to_wait($p67, $p3, 2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} make_discard_request($p0, $p1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, $sub.i64(0, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb7;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i35 := chunk_aligned_read($p0, $p1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 380} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} md_flush_request($p0, $p1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  corral_source_split_1557_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1422;

  corral_source_split_1477_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  $bb100_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;
}



const run: ref;

axiom run == $sub.ref(0, 370884);

procedure run($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $M.29, $M.49, $CurrAddr, $M.1, assertsPassed, $M.2, $M.21, $M.23, $M.22;



implementation run($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i64;
  var $i36: i64;
  var $i30: i32;
  var $i31: i64;
  var $i22: i32;
  var $i23: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i49: i64;
  var $i15: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i118: i1;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i64;
  var $i124: i1;
  var $i125: i1;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $i146: i32;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $p162: ref;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i64;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $p185: ref;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i64;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i64;
  var $i197: i64;
  var $i198: i1;
  var $i164: i64;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p205: ref;
  var $p206: ref;
  var $p204: ref;
  var $p208: ref;
  var $i209: i1;
  var $i210: i8;
  var $i211: i1;
  var $p212: ref;
  var $i213: i64;
  var $i214: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i64;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i64;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $p261: ref;
  var $p262: ref;
  var $i263: i64;
  var $i264: i1;
  var $p267: ref;
  var $p268: ref;
  var $i269: i64;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $p275: ref;
  var $i276: i64;
  var $i277: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $p293: ref;
  var $i294: i32;
  var $p295: ref;
  var $i296: i32;
  var $p297: ref;
  var $i298: i32;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i304: i32;
  var $p305: ref;
  var $i306: i32;
  var $p307: ref;
  var $i308: i32;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i265: i32;
  var $i266: i32;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $i226: i32;
  var $i227: i32;
  var $i228: i32;
  var $p318: ref;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i317: i32;
  var $i225: i32;
  var $i322: i32;
  var $p323: ref;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $p329: ref;
  var $i330: i32;
  var $p332: ref;
  var $i333: i64;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i64;
  var $i338: i64;
  var $p339: ref;
  var $p340: ref;
  var $i341: i64;
  var $p342: ref;
  var $p343: ref;
  var $i344: i32;
  var $i345: i1;
  var $p346: ref;
  var $i347: i64;
  var $i348: i1;
  var $p349: ref;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $p354: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $p362: ref;
  var $i363: i32;
  var $p364: ref;
  var $i365: i32;
  var $i366: i32;
  var $p367: ref;
  var $i368: i32;
  var $p369: ref;
  var $i370: i32;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $p375: ref;
  var $i376: i32;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $p380: ref;
  var $i381: i32;
  var $p382: ref;
  var $i383: i32;
  var $p385: ref;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $i389: i64;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i64;
  var $i401: i1;
  var $p402: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i64;
  var $i407: i1;
  var $p408: ref;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $i413: i64;
  var $p414: ref;
  var $p415: ref;
  var $i416: i64;
  var $i417: i1;
  var $p418: ref;
  var $i419: i32;
  var $p420: ref;
  var $i421: i32;
  var $i422: i32;
  var $i423: i64;
  var $i424: i32;
  var $p425: ref;
  var $i426: i32;
  var $i427: i32;
  var $i428: i64;
  var $i429: i64;
  var $i430: i32;
  var $i431: i32;
  var $p432: ref;
  var $p433: ref;
  var $p435: ref;
  var $i436: i64;
  var $i437: i32;
  var $i438: i64;
  var $i439: i1;
  var $i440: i32;
  var $i441: i64;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i32;
  var $i448: i32;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i32;
  var $p455: ref;
  var $i456: i32;
  var $i457: i32;
  var $i458: i32;
  var $p459: ref;
  var $p460: ref;
  var $p462: ref;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $i466: i1;
  var $i469: i32;
  var $i470: i32;
  var $i471: i32;
  var $i472: i32;
  var $i473: i32;
  var $i474: i1;
  var $i468: i32;
  var $i475: i32;
  var $i467: i32;
  var $p476: ref;
  var $p477: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i64;
  var $p496: ref;
  var $i497: i64;
  var $i498: i1;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $i507: i64;
  var $i508: i64;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $i514: i64;
  var $i515: i64;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i1;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p527: ref;
  var $i528: i8;
  var $i529: i32;
  var $i530: i1;
  var $i531: i8;
  var $i522: i8;
  var $i532: i8;
  var $i533: i1;
  var $i534: i1;
  var $i537: i8;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p500: ref;
  var $i501: i8;
  var $i545: i8;
  var $i499: i8;
  var $i546: i1;
  var $p547: ref;
  var $p548: ref;
  var $p550: ref;
  var $i551: i32;
  var $i552: i1;
  var $p553: ref;
  var $p554: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i1;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $i64: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1120, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $sub.i64(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i166, $i168);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i170 := $zext.i1.i32($i169);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i170);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i172 := ldv__builtin_expect($i171, 0);
    call {:si_unique_call 446} {:cexpr "tmp___6"} boogie_si_record_i64($i172);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i175, $i177);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i32($i178);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i181 := ldv__builtin_expect($i180, 0);
    call {:si_unique_call 468} {:cexpr "tmp___7"} boogie_si_record_i64($i181);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, 0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i184, $i186);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i188 := $zext.i1.i32($i187);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i188);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i190 := ldv__builtin_expect($i189, 0);
    call {:si_unique_call 471} {:cexpr "tmp___8"} boogie_si_record_i64($i190);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i195 := $zext.i1.i32($i194);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i197 := ldv__builtin_expect($i196, 0);
    call {:si_unique_call 474} {:cexpr "tmp___9"} boogie_si_record_i64($i197);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i197, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i164 := 0;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i202 := $eq.i64($i201, 0);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i202 == 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p204 := $p206;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p204);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i209 := IS_ERR($p208);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i210 := $zext.i1.i8($i209);
    call {:si_unique_call 478} {:cexpr "tmp___11"} boogie_si_record_i8($i210);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i8.i1($i210);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(712, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i15);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1392, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p218, $p217);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1392, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, $0.ref);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p221, $p204);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i224 := $slt.i32(0, $i223);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i225 := 0;
    assume {:branchcond $i224} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i322 := calc_degraded($p204);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p323, $i322);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i324 := has_failed($p204);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 499} {:cexpr "tmp___16"} boogie_si_record_i32($i324);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i333 := $load.i64($M.0, $p332);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i336 := $sub.i32(0, $i335);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i336);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i338 := $and.i64($i333, $i337);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p339, $i338);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i341 := $load.i64($M.0, $p340);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(624, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p342, $i341);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p343);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i345 := $sgt.i32($i344, $i225);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i358 == 1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p372 := mdname($p0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.0, $p375);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i379 := $sub.i32($i376, $i378);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.0, $p380);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.0, $p382);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_30 := printk.ref.ref.i32.i32.i32.i32(.str.167, $p372, $i374, $i379, $i381, $i383);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} print_raid5_conf($p204);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i386 := $load.i64($M.0, $p385);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i387 := $ne.i64($i386, $sub.i64(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1824, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.0, $p398);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i400 := $p2i.ref.i64($p399);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i401 := $eq.i64($i400, $p2i.ref.i64(raid5_attrs_group));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i401 == 1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1)), $mul.ref(48, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p405 := $load.ref($M.0, $p404);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i406 := $p2i.ref.i64($p405);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i407 := $ne.i64($i406, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i413 := raid5_size($p0, 0, 0);
    call {:si_unique_call 518} {:cexpr "tmp___23"} boogie_si_record_i64($i413);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} md_set_array_sectors($p0, $i413);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.0, $p414);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i416 := $p2i.ref.i64($p415);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i417 := $ne.i64($i416, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb162:
    assume $i417 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.0, $p420);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i422 := $sub.i32($i419, $i421);
    call {:si_unique_call 524} {:cexpr "data_disks"} boogie_si_record_i32($i422);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i422);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i64.i32($i423);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.0, $p425);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i427 := $shl.i32($i426, 9);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i427);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i429 := $udiv.i64($i428, 4096);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i430 := $trunc.i64.i32($i429);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i431 := $mul.i32($i424, $i430);
    call {:si_unique_call 525} {:cexpr "stripe"} boogie_si_record_i32($i431);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p433, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(16, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i436 := $load.i64($M.0, $p435);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i437 := $mul.i32($i431, 2);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i438 := $sext.i32.i64($i437);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i439 := $ult.i64($i436, $i438);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.0, $p446);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i448 := $shl.i32($i447, 9);
    call {:si_unique_call 526} {:cexpr "chunk_size"} boogie_si_record_i32($i448);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} blk_queue_io_min($p450, $i448);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.0, $p451);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.0, $p453);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.0, $p455);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i457 := $sub.i32($i454, $i456);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i458 := $mul.i32($i448, $i457);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} blk_queue_io_opt($p452, $i458);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.0, $p459);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($p460, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(74, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p462, 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i463 := $mul.i32($i431, 4096);
    call {:si_unique_call 529} {:cexpr "stripe"} boogie_si_record_i32($i463);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i464 := $add.i32($i463, $sub.i32(0, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i465 := $and.i32($i464, $i463);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i467 := $i463;
    assume {:branchcond $i466} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p476);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p477, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(60, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p479, $i467);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.0, $p480);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p481, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(56, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p483, $i467);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p485, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(73, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p487, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p489 := $load.ref($M.0, $p488);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} blk_queue_max_write_same_sectors($p489, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p492);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p493, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i495 := $p2i.ref.i64($p494);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i497 := $p2i.ref.i64($p496);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i498 := $ne.i64($i495, $i497);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i499 := 1;
    assume {:branchcond $i498} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i498 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i546 := $trunc.i8.i1($i499);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i546 == 1);
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} queue_flag_clear_unlocked(14, $p562);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb195:
    assume $i546 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($p548, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(48, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i551 := $load.i32($M.0, $p550);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i552 := $uge.i32($i551, $i467);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i552 == 1);
    goto $bb197;

  $bb198:
    assume $i552 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.0, $p553);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($p554, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(56, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.0, $p556);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i558 := $uge.i32($i557, $i467);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i558} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i558 == 1);
    goto $bb197;

  $bb200:
    assume $i558 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.0, $p559);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} queue_flag_set_unlocked(14, $p560);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb175:
    assume $i498 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p500, $i501 := $p492, 1;
    goto $bb178;

  $bb178:
    call $p502, $p503, $p504, $p505, $p506, $i507, $i508, $p509, $p510, $p511, $p512, $p513, $i514, $i515, $p516, $p517, $p518, $p519, $i520, $i521, $p523, $p524, $p525, $p527, $i528, $i529, $i530, $i531, $i522, $i532, $i533, $i534, $i537, $p539, $p540, $p541, $p542, $i543, $i544, $p500, $i501, $i545, vslice_dummy_var_32, vslice_dummy_var_33 := run_loop_$bb178($p0, $i497, $p502, $p503, $p504, $p505, $p506, $i507, $i508, $p509, $p510, $p511, $p512, $p513, $i514, $i515, $p516, $p517, $p518, $p519, $i520, $i521, $p523, $p524, $p525, $p527, $i528, $i529, $i530, $i531, $i522, $i532, $i533, $i534, $i537, $p539, $p540, $p541, $p542, $i543, $i544, $p500, $i501, $i545, vslice_dummy_var_32, vslice_dummy_var_33);
    goto $bb178_last;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p503 := $load.ref($M.0, $p502);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i507 := $load.i64($M.0, $p506);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i508 := $shl.i64($i507, 9);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} disk_stack_limits($p503, $p505, $i508);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.0, $p511);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i514 := $load.i64($M.0, $p513);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i515 := $shl.i64($i514, 9);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} disk_stack_limits($p510, $p512, $i515);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p517 := $load.ref($M.0, $p516);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p518 := bdev_get_queue($p517);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i520 := constant_test_bit(14, $p519);
    call {:si_unique_call 536} {:cexpr "tmp___25"} boogie_si_record_i32($i520);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i520, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i521 == 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.0, $p523);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p525 := bdev_get_queue($p524);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p525, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(73, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i528 := $load.i8($M.0, $p527);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i529 := $zext.i8.i32($i528);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    $i531 := $i501;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i522 := $i531;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i532 := $M.13;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i533 := $trunc.i8.i1($i532);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i533 == 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i534 := $trunc.i8.i1($i522);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i537 := 0;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p500, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.0, $p539);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p540);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p541, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i543 := $p2i.ref.i64($p542);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i544 := $ne.i64($i543, $i497);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i545 := $i537;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i499 := $i545;
    goto $bb177;

  $bb192:
    assume $i544 == 1;
    assume {:verifier.code 0} true;
    $p500, $i501 := $p540, $i537;
    goto $bb192_dummy;

  $bb188:
    assume $i534 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_32 := printk.ref(.str.169);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_33 := printk.ref(.str.170);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb186:
    assume $i533 == 1;
    assume {:verifier.code 0} true;
    $i537 := $i522;
    goto $bb191;

  $bb183:
    assume $i530 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i531 := 0;
    goto $bb185;

  $bb180:
    assume $i521 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i522 := 0;
    goto $bb182;

  $bb167:
    assume $i466 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i468 := $i463;
    goto $bb170;

  $bb170:
    call $i469, $i470, $i471, $i472, $i473, $i474, $i468, $i475 := run_loop_$bb170($i469, $i470, $i471, $i472, $i473, $i474, $i468, $i475);
    goto $bb170_last;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i468, $sub.i32(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i470 := $or.i32($i468, $i469);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i471 := $add.i32($i470, 1);
    call {:si_unique_call 530} {:cexpr "stripe"} boogie_si_record_i32($i471);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i472 := $add.i32($i471, $sub.i32(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i473 := $and.i32($i472, $i471);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i474 := $ne.i32($i473, 0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i475 := $i471;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i467 := $i475;
    goto $bb169;

  $bb172:
    assume $i474 == 1;
    assume {:verifier.code 0} true;
    $i468 := $i471;
    goto $bb172_dummy;

  $bb164:
    assume $i439 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i440 := $mul.i32($i431, 2);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i441 := $sext.i32.i64($i440);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p443, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(16, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p445, $i441);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb156:
    assume $i407 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i409 := ldv_sysfs_create_group_187($p408, raid5_attrs_group);
    call {:si_unique_call 521} {:cexpr "tmp___22"} boogie_si_record_i32($i409);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i410 := $ne.i32($i409, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb158:
    assume $i410 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p411 := mdname($p0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_31 := printk.ref.ref(.str.168, $p411);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb153:
    assume $i401 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1824, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p402, $0.ref);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i387 == 1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i389 := $load.i64($M.0, $p388);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p390, $i389);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} atomic_set($p391, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} clear_bit(1, $p392);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} clear_bit(7, $p393);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} set_bit(8, $p394);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} set_bit(0, $p395);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p396 := ldv_md_register_thread_186(md_do_sync, $p0, .str.117);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(568, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p397, $p396);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb152;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i358 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p359 := mdname($p0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p360);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.0, $p364);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i366 := $sub.i32($i363, $i365);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.0, $p367);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_29 := printk.ref.ref.i32.i32.i32.i32(.str.166, $p359, $i361, $i366, $i368, $i370);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb138:
    assume $i345 == 1;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1120, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i347 := $load.i64($M.0, $p346);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i348 := $ne.i64($i347, $sub.i64(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i348 == 1);
    goto $bb140;

  $bb141:
    assume $i348 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(668, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i351 == 1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p354 := mdname($p0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_28 := printk.ref.ref(.str.165, $p354);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} md_unregister_thread($p563);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} print_raid5_conf($p204);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} free_conf($p204);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p564, $0.ref);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p565 := mdname($p0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_25 := printk.ref.ref(.str.171, $p565);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb35;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i351 == 1;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p352 := mdname($p0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_27 := printk.ref.ref(.str.164, $p352);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb135:
    assume $i325 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p326 := mdname($p0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_26 := printk.ref.ref.i32.i32(.str.163, $p326, $i328, $i330);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i224 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i226, $i227, $i228 := 0, 0, 0;
    goto $bb93;

  $bb93:
    call $p229, $p230, $i231, $p233, $p234, $i235, $i236, $p237, $p238, $i239, $p241, $p242, $i243, $i244, $p245, $p246, $i247, $p249, $p250, $p251, $p252, $i253, $p255, $p256, $p257, $p258, $i259, $p261, $p262, $i263, $i264, $p267, $p268, $i269, $p271, $p272, $i273, $i274, $p275, $i276, $i277, $p279, $i280, $i281, $i282, $p283, $i284, $i285, $p286, $i287, $i288, $p289, $p290, $i291, $i292, $p293, $i294, $p295, $i296, $p297, $i298, $p299, $i300, $i301, $i302, $p303, $i304, $p305, $i306, $p307, $i308, $p309, $i310, $i311, $i312, $i313, $i265, $i266, $i314, $i315, $i316, $i226, $i227, $i228, $p318, $i319, $i320, $i321, $i317 := run_loop_$bb93($p0, $i164, $p204, $p222, $p229, $p230, $i231, $p233, $p234, $i235, $i236, $p237, $p238, $i239, $p241, $p242, $i243, $i244, $p245, $p246, $i247, $p249, $p250, $p251, $p252, $i253, $p255, $p256, $p257, $p258, $i259, $p261, $p262, $i263, $i264, $p267, $p268, $i269, $p271, $p272, $i273, $i274, $p275, $i276, $i277, $p279, $i280, $i281, $i282, $p283, $i284, $i285, $p286, $i287, $i288, $p289, $p290, $i291, $i292, $p293, $i294, $p295, $i296, $p297, $i298, $p299, $i300, $i301, $i302, $p303, $i304, $p305, $i306, $p307, $i308, $p309, $i310, $i311, $i312, $i313, $i265, $i266, $i314, $i315, $i316, $i226, $i227, $i228, $p318, $i319, $i320, $i321, $i317);
    goto $bb93_last;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i321 := $i227;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i225 := $i321;
    goto $bb92;

  $bb132:
    assume $i320 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i228);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p230, $mul.ref($i231, 16)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i236 := $eq.i64($i235, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p262 := $p234;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p262);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i264 := $eq.i64($i263, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i269 := $sext.i32.i64($i228);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p268, $mul.ref($i269, 16)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p262, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i280 := constant_test_bit(1, $p279);
    call {:si_unique_call 490} {:cexpr "tmp___12"} boogie_si_record_i32($i280);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(380, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p262, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.0, $p290);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i292 := $ult.i64($i291, $i164);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p262, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p303);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.0, $p305);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i311 := only_parity($i304, $i306, $i308, $i310);
    call {:si_unique_call 495} {:cexpr "tmp___14"} boogie_si_record_i32($i311);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i313 := $add.i32($i227, 1);
    call {:si_unique_call 496} {:cexpr "dirty_parity_disks"} boogie_si_record_i32($i313);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i313, $i226;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i314 := $add.i32($i228, 1);
    call {:si_unique_call 482} {:cexpr "i"} boogie_si_record_i32($i314);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.0, $p222);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i316 := $slt.i32($i314, $i315);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i317 := $i265;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i225 := $i317;
    goto $bb92;

  $bb130:
    assume $i316 == 1;
    assume {:verifier.code 0} true;
    $i226, $i227, $i228 := $i266, $i265, $i314;
    goto $bb130_dummy;

  $bb127:
    assume $i312 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i227, $i226;
    goto $bb103;

  $bb121:
    assume $i292 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p262, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p295);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p299);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i301 := only_parity($i294, $i296, $i298, $i300);
    call {:si_unique_call 493} {:cexpr "tmp___13"} boogie_si_record_i32($i301);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb123:
    assume $i302 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i227, $i226;
    goto $bb103;

  $bb115:
    assume $i285 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(384, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i288 := $sgt.i32($i287, 90);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb117;

  $bb118:
    assume $i288 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p262, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p289, $i164);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb112:
    assume $i281 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i282 := $add.i32($i226, 1);
    call {:si_unique_call 491} {:cexpr "working_disks"} boogie_si_record_i32($i282);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i227, $i282;
    goto $bb103;

  $bb105:
    assume $i274 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, $sub.i64(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb107;

  $bb108:
    assume $i277 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_24 := printk.ref(.str.162);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb101:
    assume $i264 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i227, $i226;
    goto $bb103;

  $bb95:
    assume $i236 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i228);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p238, $mul.ref($i239, 16)), $mul.ref(8, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i244 := $ne.i64($i243, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb97;

  $bb98:
    assume $i244 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i228);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p246, $mul.ref($i247, 16)), $mul.ref(8, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i253 := $sext.i32.i64($i228);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p252, $mul.ref($i253, 16)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p255, $0.ref);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p250, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} clear_bit(11, $p256);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i259 := $sext.i32.i64($i228);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p258, $mul.ref($i259, 16)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p261, $p250);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p262 := $p250;
    goto $bb100;

  $bb87:
    assume $i211 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p204);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i213 := PTR_ERR($p212);
    call {:si_unique_call 480} {:cexpr "tmp___10"} boogie_si_record_i64($i213);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i64.i32($i213);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i64 := $i214;
    goto $bb35;

  $bb84:
    assume $i202 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p203 := setup_conf($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p204 := $p203;
    goto $bb86;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i198 == 1;
    call {:si_unique_call 475} devirtbounce(0, .str.1, 6123, 12);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb78:
    assume $i191 == 1;
    call {:si_unique_call 472} devirtbounce(0, .str.1, 6122, 12);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb75:
    assume $i182 == 1;
    call {:si_unique_call 469} devirtbounce(0, .str.1, 6121, 12);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb72:
    assume $i173 == 1;
    call {:si_unique_call 466} devirtbounce(0, .str.1, 6120, 12);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb31:
    assume $i52 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 6);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i56 := (if $i55 == 1 then 2 else 1);
    call {:si_unique_call 444} {:cexpr "max_degraded"} boogie_si_record_i32($i56);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i58, $i60);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i66, $i68);
    call {:si_unique_call 449} {:cexpr "old_disks"} boogie_si_record_i32($i69);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    call {:si_unique_call 450} {:cexpr "here_new"} boogie_si_record_i64($i71);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i75, $i56);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i77 := $mul.i32($i73, $i76);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i79 := $urem.i64($i71, $i78);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    call {:si_unique_call 451} {:cexpr "_res"} boogie_si_record_i32($i80);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, $i56);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i86 := $mul.i32($i82, $i85);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i88 := $udiv.i64($i71, $i87);
    call {:si_unique_call 452} {:cexpr "here_new"} boogie_si_record_i64($i88);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i80, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i93);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i95 := $mul.i64($i88, $i94);
    call {:si_unique_call 455} {:cexpr "reshape_offset"} boogie_si_record_i64($i95);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    call {:si_unique_call 456} {:cexpr "here_old"} boogie_si_record_i64($i97);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i69, $i56);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i101 := $mul.i32($i99, $i100);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i103 := $udiv.i64($i97, $i102);
    call {:si_unique_call 457} {:cexpr "here_old"} boogie_si_record_i64($i103);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i106 == 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i139 == 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i153 := $mul.i64($i88, $i152);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i155);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i157 := $mul.i64($i103, $i156);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i158 := $sub.i64($i157, $i15);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i159 := $uge.i64($i153, $i158);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p162 := mdname($p0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_22 := printk.ref.ref(.str.161, $p162);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i164 := $i95;
    goto $bb71;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p160 := mdname($p0);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_23 := printk.ref.ref(.str.160, $p160);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb35;

  $bb62:
    assume $i139 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i143 := $mul.i64($i88, $i142);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i144 := $add.i64($i143, $i15);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i148 := $mul.i64($i103, $i147);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i149 := $ule.i64($i144, $i148);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb67;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb65;

  $bb40:
    assume $i106 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i110 := $mul.i64($i88, $i109);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i114 := $mul.i64($i103, $i113);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i110, $i114);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i118 := $slt.i64($i15, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i118 == 1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i120 := $i15;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i122);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i124 := $sge.i64($i120, $i123);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i124 == 1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(56, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i134 == 1;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p135 := mdname($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_21 := printk.ref.ref(.str.159, $p135);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb35;

  $bb48:
    assume $i124 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i125 := $slt.i64($i15, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i125 == 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i127 := $i15;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i131 := $sge.i64($i127, $i130);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i131 == 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i131 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb50:
    assume $i125 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i126 := $sub.i64(0, $i15);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb52;

  $bb45:
    assume $i118 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i119 := $sub.i64(0, $i15);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb47;

  $bb42:
    assume $i115 == 1;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p116 := mdname($p0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_20 := printk.ref.ref(.str.158, $p116);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb35;

  $bb37:
    assume $i89 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p90 := mdname($p0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_19 := printk.ref.ref(.str.157, $p90);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb35;

  $bb33:
    assume $i61 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p62 := mdname($p0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_18 := printk.ref.ref(.str.156, $p62);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb35;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, 0, 1;
    goto $bb7;

  $bb7:
    call $p19, $i20, $i21, $p24, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $i36, $i30, $i31, $i22, $i23, $p43, $p44, $p45, $p46, $i47, $i48, $p16, $i17, $i18, $i49 := run_loop_$bb7($p0, $i13, $p19, $i20, $i21, $p24, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $i36, $i30, $i31, $i22, $i23, $p43, $p44, $p45, $p46, $i47, $i48, $p16, $i17, $i18, $i49);
    goto $bb7_last;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i25, $i27);
    call {:si_unique_call 443} {:cexpr "diff"} boogie_si_record_i64($i28);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i18, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i41 := $i17;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30, $i31 := $i18, $i36;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i30, $i31;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, $i13);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i49 := $i23;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i15 := $i49;
    goto $bb6;

  $bb28:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p44, $i23, $i22;
    goto $bb28_dummy;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i64($i28, $i17);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb24;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i41 := $i28;
    goto $bb27;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i35 := $slt.i64($i28, $i17);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i36 := $i28;
    goto $bb21;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i30, $i31 := 0, $i28;
    goto $bb15;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i18, $i17;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p4 := mdname($p0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_17 := printk.ref.ref(.str.155, $p4);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb192_dummy:
    assume false;
    return;

  $bb178_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  $bb172_dummy:
    assume false;
    return;

  $bb170_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  $bb130_dummy:
    assume false;
    return;

  $bb93_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  $bb28_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;
}



const raid5_free: ref;

axiom raid5_free == $sub.ref(0, 371916);

procedure raid5_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation raid5_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} free_conf($p2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1824, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, raid5_attrs_group);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const status: ref;

axiom status == $sub.ref(0, 372948);

procedure status($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation status($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i24: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i32($i8, 2);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_34 := seq_printf.ref.ref.i32.i32.i32($p0, .str.120, $i6, $i9, $i11);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i16, $i18);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_35 := seq_printf.ref.ref.i32.i32($p0, .str.121, $i14, $i19);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_37 := seq_printf.ref.ref($p0, .str.125);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb4;

  $bb4:
    call $p25, $p26, $i27, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $i45, $i46, $i47, $i24, vslice_dummy_var_36 := status_loop_$bb4($p0, $p4, $p21, $p25, $p26, $i27, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $i45, $i46, $i47, $i24, vslice_dummy_var_36);
    goto $bb4_last;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i24);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $p43 := .str.123;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_36 := seq_printf.ref.ref.ref($p0, .str.124, $p43);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i24, 1);
    call {:si_unique_call 548} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p21);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, $i46);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i45;
    goto $bb12_dummy;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i24);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($i35, 16)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i40 := constant_test_bit(1, $p39);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $p42 := .str.123;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p43 := $p42;
    goto $bb11;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p42 := .str.122;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;
}



const error: ref;

axiom error == $sub.ref(0, 373980);

procedure error($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.2, $CurrAddr, assertsPassed, $M.29;



implementation error($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.2);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.100);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p9, .str.1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p10, .str.101);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.10, $p12);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 2188);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p12, $i15);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p16, 0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.11, $p17);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_127($p23);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} clear_bit(1, $p24);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i25 := calc_degraded($p6);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_spin_unlock_irqrestore_128($p27, $u0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} set_bit(3, $p28);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} set_bit(6, $p29);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} set_bit(0, $p30);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} set_bit(0, $p31);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p32 := mdname($p0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p36 := bdevname($p34, $p35);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p37 := mdname($p0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i39, $i41);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_38 := printk.ref.ref.ref.ref.i32(.str.102, $p37, $p36, $p32, $i42);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __dynamic_pr_debug.ref.ref($p3, .str.101);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const raid5_add_disk: ref;

axiom raid5_add_disk == $sub.ref(0, 375012);

procedure raid5_add_disk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation raid5_add_disk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i67: i32;
  var $i68: i1;
  var $i46: i32;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $i70: i32;
  var $i93: i32;
  var $i66: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    call {:si_unique_call 567} {:cexpr "last"} boogie_si_record_i32($i7);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(680, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(928, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $i11);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i24, $i25 := 0, $i7;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i28 := $sge.i32($i27, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i44 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, $i25);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i69 := $sle.i32($i44, $i25);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 17);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i66 := $i93;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} print_raid5_conf($p4);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i13 := $i66;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb37:
    assume $i69 == 1;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i70 := $i44;
    goto $bb40;

  $bb40:
    call $p71, $p72, $i73, $p74, $p75, $p76, $p77, $i78, $i79, $p80, $p81, $i82, $i83, $i84, $p85, $i94, $i95, $i70 := raid5_add_disk_loop_$bb40($p4, $i25, $p71, $p72, $i73, $p74, $p75, $p76, $p77, $i78, $i79, $p80, $p81, $i82, $i83, $i84, $p85, $i94, $i95, $i70);
    goto $bb40_last;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i70);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p72, $mul.ref($i73, 16));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p72, $mul.ref($i73, 16)), $mul.ref(0, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i78 := constant_test_bit(10, $p77);
    call {:si_unique_call 578} {:cexpr "tmp___2"} boogie_si_record_i32($i78);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i70, 1);
    call {:si_unique_call 583} {:cexpr "disk"} boogie_si_record_i32($i94);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i95 := $sle.i32($i94, $i25);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i95 == 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb49:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i70 := $i94;
    goto $bb49_dummy;

  $bb42:
    assume $i79 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p72, $mul.ref($i73, 16)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i84, $p85 := $i70, $p74;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb44;

  $bb45:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} clear_bit(1, $p86);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} set_bit(11, $p87);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i84);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} ldv_check_for_read_section();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p90 := ldv_undef_ptr();
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p85, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p90);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb47;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    goto $bb25;

  $bb25:
    call $p47, $p48, $i49, $p50, $p51, $p52, $i53, $i54, $i55, $p56, $i67, $i68, $i46 := raid5_add_disk_loop_$bb25($p4, $i25, $p47, $p48, $i49, $p50, $p51, $p52, $i53, $i54, $i55, $p56, $i67, $i68, $i46);
    goto $bb25_last;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i46);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 16));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p48, $mul.ref($i49, 16)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i55, $p56 := $i46, $p50;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i46, 1);
    call {:si_unique_call 576} {:cexpr "disk"} boogie_si_record_i32($i67);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i68 := $sle.i32($i67, $i25);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i68 == 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i67;
    goto $bb34_dummy;

  $bb27:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} clear_bit(1, $p57);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i55);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, $i55);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_check_for_read_section();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p63 := ldv_undef_ptr();
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p63);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb32;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i31 := $sge.i32($i30, $i24);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(0, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb16;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 571} {:cexpr "first"} boogie_si_record_i32($i43);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb21;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 570} {:cexpr "last"} boogie_si_record_i32($i23);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i23, $i23;
    goto $bb13;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i17 := has_failed($p4);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 569} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb49_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  $bb34_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;
}



const raid5_remove_disk: ref;

axiom raid5_remove_disk == $sub.ref(0, 376044);

procedure raid5_remove_disk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation raid5_remove_disk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p17: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i64: i32;
  var $i35: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 584} {:cexpr "number"} boogie_si_record_i32($i6);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} print_raid5_conf($p4);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i11, $i14);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i18, $i21);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i27 := $sge.i32($i6, $i26);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i33 := constant_test_bit(1, $p32);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(536, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i37 := atomic_read($p36);
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i40 := constant_test_bit(0, $p39);
    call {:si_unique_call 593} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} synchronize_rcu();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(536, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i62 := atomic_read($p61);
    call {:si_unique_call 598} {:cexpr "tmp___3"} boogie_si_record_i32($i62);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i63 == 1);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i68 == 1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} clear_bit(10, $p77);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i35 := $i64;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} print_raid5_conf($p4);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb7;

  $bb42:
    assume $i68 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p70);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} clear_bit(11, $p74);
    call {:si_unique_call 600} devirtbounce.1(0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $0.ref);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} clear_bit(10, $p76);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i63 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 16);
    goto $bb41;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(680, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(928, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i43, $i45);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb23;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i47 := has_failed($p4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 595} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i52 == 1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i55, $i56);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i6, $i59);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 16);
    goto $bb16;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb29;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 16);
    goto $bb16;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 16);
    goto $bb16;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, $sub.i64(0, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} clear_bit(1, $p31);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb3;
}



const raid5_spare_active: ref;

axiom raid5_spare_active == $sub.ref(0, 377076);

procedure raid5_spare_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed, $M.29, $CurrAddr;



implementation raid5_spare_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i38: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i61: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i8: i32;
  var $i9: i32;
  var $i92: i32;
  var $i7: i32;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_188($p93);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i94 := calc_degraded($p3);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} ldv_spin_unlock_irqrestore_128($p96, $u0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} print_raid5_conf($p3);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $i44, $i45, $i38, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i61, $i89, $i90, $i91, $i8, $i9, $i92 := raid5_spare_active_loop_$bb4($p3, $p4, $p10, $p11, $i12, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $i44, $i45, $i38, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i61, $i89, $i90, $i91, $i8, $i9, $i92);
    goto $bb4_last;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $i8;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i61 := $i88;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i9, 1);
    call {:si_unique_call 614} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p4);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i89, $i90);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i92 := $i61;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i7 := $i92;
    goto $bb3;

  $bb40:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i61, $i89;
    goto $bb40_dummy;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, $sub.i64(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb30;

  $bb31:
    assume $i70 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i74 := constant_test_bit(0, $p73);
    call {:si_unique_call 616} {:cexpr "tmp___1"} boogie_si_record_i32($i74);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i8;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb39;

  $bb33:
    assume $i75 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i79 := test_and_set_bit(1, $p78);
    call {:si_unique_call 618} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i8;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb38;

  $bb35:
    assume $i80 == 1;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i8, 1);
    call {:si_unique_call 619} {:cexpr "count"} boogie_si_record_i32($i81);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} sysfs_notify_dirent_safe($p85);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i86 := $i81;
    goto $bb37;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, $sub.i64(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i26 := constant_test_bit(0, $p25);
    call {:si_unique_call 604} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i31 := test_and_set_bit(1, $p30);
    call {:si_unique_call 606} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i42 := test_and_set_bit(1, $p41);
    call {:si_unique_call 609} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i8;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} sysfs_notify_dirent_safe($p60);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i61 := $i38;
    goto $bb27;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} set_bit(0, $p52);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} sysfs_notify_dirent_safe($p56);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i8, 1);
    call {:si_unique_call 610} {:cexpr "count"} boogie_si_record_i32($i44);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb20;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i8, 1);
    call {:si_unique_call 607} {:cexpr "count"} boogie_si_record_i32($i37);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb17;

  $bb40_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;
}



const sync_request: ref;

axiom sync_request == $sub.ref(0, 378108);

procedure sync_request($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.12, $CurrAddr, assertsPassed, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation sync_request($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i83: i32;
  var $i84: i32;
  var $i97: i32;
  var $i82: i32;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $i15: i64;
  var vslice_dummy_var_39: i64;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 627} {:cexpr "sync_request:arg:sector_nr"} boogie_si_record_i64($i1);
    call {:si_unique_call 628} {:cexpr "sync_request:arg:go_faster"} boogie_si_record_i32($i3);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    call {:si_unique_call 629} {:cexpr "max_sector"} boogie_si_record_i64($i10);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i11 := $uge.i64($i1, $i10);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __might_sleep(.str.1, 5082, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 2);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} INIT_LIST_HEAD($p29);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i32 := prepare_to_wait_event($p31, $p5, 2);
    call {:si_unique_call 640} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 2);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i35 == 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $i36, $i37, $i38 := sync_request_loop_$bb18($p5, $p31, $p33, $i36, $i37, $i38);
    goto $bb18_last;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} schedule();
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i36 := prepare_to_wait_event($p31, $p5, 2);
    call {:si_unique_call 644} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p33);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 2);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb22_dummy;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} finish_wait($p39, $p5);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i41 := constant_test_bit(8, $p40);
    call {:si_unique_call 637} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i48 := $sge.i32($i45, $i47);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i56 := constant_test_bit(6, $p55);
    call {:si_unique_call 651} {:cexpr "tmp___4"} boogie_si_record_i32($i56);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} bitmap_cond_end_sync($p72, $i1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p73 := get_active_stripe($p8, $i1, 0, 1, 0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $p78 := $p73;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32(0, $i80);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i82 := 0;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_40 := bitmap_start_sync($p99, $i1, $p4, $i82);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p78, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} set_bit(2, $p101);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p78, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} set_bit(1, $p102);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} release_stripe($p78);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i15 := 8;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i81 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i83, $i84 := 0, 0;
    goto $bb50;

  $bb50:
    call $p85, $p86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i83, $i84, $i97 := sync_request_loop_$bb50($p8, $p79, $p85, $p86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i83, $i84, $i97);
    goto $bb50_last;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i83);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref($i87, 16)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i84;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i83, 1);
    call {:si_unique_call 658} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p79);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i94, $i95);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i97 := $i93;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i82 := $i97;
    goto $bb49;

  $bb55:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i83, $i84 := $i94, $i93;
    goto $bb55_dummy;

  $bb52:
    assume $i92 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i93 := 1;
    goto $bb54;

  $bb44:
    assume $i75 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p76 := get_active_stripe($p8, $i1, 0, 0, 0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_39 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p78 := $p76;
    goto $bb46;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i57 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb34;

  $bb35:
    assume $i60 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i63 := bitmap_start_sync($p62, $i1, $p4, 1);
    call {:si_unique_call 653} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.14, $p4);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i64($i65, 7);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i66 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.14, $p4);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i68 := $udiv.i64($i67, 8);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p4, $i68);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.14, $p4);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i70 := $mul.i64($i69, 8);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i15 := $i70;
    goto $bb5;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i50 := constant_test_bit(1, $p49);
    call {:si_unique_call 648} {:cexpr "tmp___3"} boogie_si_record_i32($i50);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i51 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i53, $i1);
    call {:si_unique_call 649} {:cexpr "rv"} boogie_si_record_i64($i54);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i15 := $i54;
    goto $bb5;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i43 := reshape_request($p0, $i1, $p2);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 646} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb5;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i13 := constant_test_bit(8, $p12);
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(584, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, $i10);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} bitmap_close_sync($p25);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(584, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} bitmap_end_sync($p20, $i22, $p4, 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} end_reshape($p8);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb55_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3110;
}



const raid5_resize: ref;

axiom raid5_resize == $sub.ref(0, 379140);

procedure raid5_resize($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation raid5_resize($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i16: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} {:cexpr "raid5_resize:arg:sectors"} boogie_si_record_i64($i1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i1, $i5);
    call {:si_unique_call 664} {:cexpr "sectors"} boogie_si_record_i64($i6);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i9 := raid5_size($p0, $i6, $i8);
    call {:si_unique_call 666} {:cexpr "newsize"} boogie_si_record_i64($i9);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(488, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} md_set_array_sectors($p0, $i9);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} set_capacity($p26, $i28);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_41 := revalidate_disk($p30);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64($i6, $i33);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i6);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(624, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i6);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1120, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i64($i36, $i38);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1120, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i41);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} set_bit(5, $p43);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i23 := bitmap_resize($p22, $i6, 0, 0);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, $i9);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;
}



const raid5_size: ref;

axiom raid5_size == $sub.ref(0, 380172);

procedure raid5_size($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation raid5_size($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "raid5_size:arg:sectors"} boogie_si_record_i64($i1);
    call {:si_unique_call 674} {:cexpr "raid5_size:arg:raid_disks"} boogie_si_record_i32($i2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i1, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64(0, $i20);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i9, $i21);
    call {:si_unique_call 678} {:cexpr "sectors"} boogie_si_record_i64($i22);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64(0, $i25);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i22, $i26);
    call {:si_unique_call 679} {:cexpr "sectors"} boogie_si_record_i64($i27);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i17, $i29);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i32 := $mul.i64($i27, $i31);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 676} {:cexpr "_min1"} boogie_si_record_i32($i12);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 677} {:cexpr "_min2"} boogie_si_record_i32($i14);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, $i14);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb9;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    call {:si_unique_call 675} {:cexpr "sectors"} boogie_si_record_i64($i8);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const raid6_check_reshape: ref;

axiom raid6_check_reshape == $sub.ref(0, 381204);

procedure raid6_check_reshape($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation raid6_check_reshape($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 680} {:cexpr "new_chunk"} boogie_si_record_i32($i2);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i2, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i25 := check_reshape($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 686} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i13 := is_power_of_2($i12);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 684} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i2, 7);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i20, $i22);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i8 := algorithm_valid_raid6($i7);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;
}



const raid5_start_reshape: ref;

axiom raid5_start_reshape == $sub.ref(0, 382236);

procedure raid5_start_reshape($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.21, $M.23, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation raid5_start_reshape($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i22: i32;
  var $p23: ref;
  var $i40: i32;
  var $i21: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p131: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p114: ref;
  var $p148: ref;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p194: ref;
  var $i195: i64;
  var $p196: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p193: ref;
  var $p204: ref;
  var $i205: i16;
  var $i206: i32;
  var $i207: i32;
  var $i208: i16;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i7: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i8 := check_stripe_cache($p0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i10 := has_failed($p3);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 692} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i21 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i21, $i42);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i45, $i47);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i43, $i48);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i51, $i53);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i55 := raid5_size($p0, 0, $i54);
    call {:si_unique_call 699} {:cexpr "tmp___5"} boogie_si_record_i64($i55);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i58 := $ult.i64($i55, $i57);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} atomic_set($p61, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_spin_lock_irq_136($p62);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} write_seqcount_begin($p63);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i68, $i70);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i87 := $sext.i16.i32($i86);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    call {:si_unique_call 705} devirtbounce.1(0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i93 == 1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, 0);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p97);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i98);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} write_seqcount_end($p100);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} ldv_spin_unlock_irq_137($p101);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} mddev_suspend($p0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} mddev_resume($p0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i104 := $sge.i32($i103, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, $i153);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, $i156);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} set_bit(0, $p158);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} clear_bit(1, $p159);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} clear_bit(7, $p160);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} set_bit(8, $p161);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} set_bit(0, $p162);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p163 := ldv_md_register_thread_194(md_do_sync, $p0, .str.117);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(568, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, $p163);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(568, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i214 := $load.i64($M.0, jiffies);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(704, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i214);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(568, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} md_wakeup_thread($p217);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} md_new_event($p0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb64:
    assume $i168 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p169, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_spin_lock_irq_136($p170);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} write_seqcount_begin($p171);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    call {:si_unique_call 732} {:cexpr "tmp___10"} boogie_si_record_i32($i173);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, $i173);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i173);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    call {:si_unique_call 733} {:cexpr "tmp___11"} boogie_si_record_i32($i177);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i177);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    call {:si_unique_call 734} {:cexpr "tmp___12"} boogie_si_record_i32($i181);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $i181);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i189, $i191);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    call {:si_unique_call 735} devirtbounce.1(0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i205 := $load.i16($M.0, $p204);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i206 := $sext.i16.i32($i205);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i207 := $sub.i32($i206, 1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i16($i207);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, $i208);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p210, $sub.i64(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p211, $sub.i64(0, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} write_seqcount_end($p212);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} ldv_spin_unlock_irq_137($p213);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i192 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p193 := $p186;
    goto $bb69;

  $bb69:
    call $p194, $i195, $p196, $p198, $p199, $p200, $p201, $i202, $i203, $p193 := raid5_start_reshape_loop_$bb69($i191, $p194, $i195, $p196, $p198, $p199, $p200, $p201, $i202, $i203, $p193);
    goto $bb69_last;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p193, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, $i195);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p193, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, $i191);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i203 == 1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb71:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $p193 := $p199;
    goto $bb71_dummy;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i104 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i110, $i112);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_192($p148);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i149 := calc_degraded($p3);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i149);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_spin_unlock_irqrestore_128($p151, $u0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i113 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p114 := $p107;
    goto $bb39;

  $bb39:
    call $p115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $p123, $i124, $p125, $i126, $i127, $p128, $p129, $i130, $p132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p131, $p142, $p143, $p144, $p145, $i146, $i147, $p114 := raid5_start_reshape_loop_$bb39($p0, $p3, $i112, $p115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $p123, $i124, $p125, $i126, $i127, $p128, $p129, $i130, $p132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p131, $p142, $p143, $p144, $p145, $i146, $i147, $p114);
    goto $bb39_last;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i116, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i136 := $sge.i32($i133, $i135);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p131 := $p114;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, $i112);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i147 == 1);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb60:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $p114 := $p143;
    goto $bb60_dummy;

  $bb54:
    assume $i136 == 1;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i138 := constant_test_bit(0, $p137);
    call {:si_unique_call 719} {:cexpr "tmp___8"} boogie_si_record_i32($i138);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i139 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} set_bit(1, $p140);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i119 := constant_test_bit(0, $p118);
    call {:si_unique_call 712} {:cexpr "tmp___9"} boogie_si_record_i32($i119);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i120 == 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb43:
    assume $i120 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i121 := raid5_add_disk($p0, $p114);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 714} {:cexpr "tmp___7"} boogie_si_record_i32($i121);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p131 := $p114;
    goto $bb53;

  $bb45:
    assume $i122 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i127 := $sge.i32($i124, $i126);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i127 == 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p129, 0);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i130 := sysfs_link_rdev($p0, $p114);
    call {:si_unique_call 717} {:cexpr "tmp___6"} boogie_si_record_i32($i130);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i127 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} set_bit(1, $p128);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i93 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i94 := raid5_size($p0, 0, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i94);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i58 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p59 := mdname($p0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_42 := printk.ref.ref(.str.116, $p59);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i22, $p23 := 0, $p14;
    goto $bb14;

  $bb14:
    call $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $p37, $i38, $i39, $i22, $p23, $i40 := raid5_start_reshape_loop_$bb14($i19, $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $p37, $i38, $i39, $i22, $p23, $i40);
    goto $bb14_last;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i25 := constant_test_bit(1, $p24);
    call {:si_unique_call 694} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i22;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i19);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i40 := $i32;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i21 := $i40;
    goto $bb13;

  $bb22:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i22, $p23 := $i32, $p35;
    goto $bb22_dummy;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i28 := constant_test_bit(0, $p27);
    call {:si_unique_call 696} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i22;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb21;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i22, 1);
    call {:si_unique_call 697} {:cexpr "spares"} boogie_si_record_i32($i30);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb20;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 28);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;

  $bb71_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  $bb60_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;
}



const raid5_finish_reshape: ref;

axiom raid5_finish_reshape == $sub.ref(0, 383268);

procedure raid5_finish_reshape($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed;



implementation raid5_finish_reshape($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i30: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i5 := constant_test_bit(3, $p4);
    call {:si_unique_call 741} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_spin_lock_irq_136($p18);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i19 := calc_degraded($p3);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ldv_spin_unlock_irq_137($p21);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 750} {:cexpr "d"} boogie_si_record_i32($i23);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i25, $i27);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i23, $i28);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $sub.i64(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i30 := $i23;
    goto $bb9;

  $bb9:
    call $p31, $p32, $i33, $p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i30 := raid5_finish_reshape_loop_$bb9($p3, $p24, $p26, $p31, $p32, $i33, $p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i30);
    goto $bb9_last;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref($i33, 16)), $mul.ref(0, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i30);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 16)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i30, 1);
    call {:si_unique_call 753} {:cexpr "d"} boogie_si_record_i32($i49);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p24);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p26);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i50, $i51);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i49, $i52);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i49;
    goto $bb17_dummy;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} clear_bit(1, $p48);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} clear_bit(1, $p39);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i10 := raid5_size($p0, 0, 0);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} md_set_array_sectors($p0, $i10);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} set_capacity($p12, $i14);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_43 := revalidate_disk($p16);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;
}



const raid5_quiesce: ref;

axiom raid5_quiesce == $sub.ref(0, 384300);

procedure raid5_quiesce($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.1, assertsPassed, $M.45;



implementation raid5_quiesce($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 755} {:cexpr "raid5_quiesce:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} lock_all_device_hash_locks_irq($p5);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} __wake_up($p31, 3, 1, $0.ref);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} __wake_up($p32, 3, 1, $0.ref);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} unlock_all_device_hash_locks_irq($p5);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} lock_all_device_hash_locks_irq($p5);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 2);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i12 := atomic_read($p11);
    call {:si_unique_call 759} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} INIT_LIST_HEAD($p17);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(804, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call $p20, $i21, $p22, $i23, $i24, $i25, $i26 := raid5_quiesce_loop_$bb22($p2, $p5, $p19, $p20, $i21, $p22, $i23, $i24, $i25, $i26);
    goto $bb22_last;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i21 := prepare_to_wait_event($p20, $p2, 2);
    call {:si_unique_call 770} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i23 := atomic_read($p22);
    call {:si_unique_call 772} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} unlock_all_device_hash_locks_irq($p5);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} schedule();
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} lock_all_device_hash_locks_irq($p5);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796_dummy;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i25 := atomic_read($p19);
    call {:si_unique_call 774} {:cexpr "tmp___3"} boogie_si_record_i32($i25);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume $i26 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} finish_wait($p27, $p2);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} unlock_all_device_hash_locks_irq($p5);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} __wake_up($p29, 3, 1, $0.ref);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(804, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i15 := atomic_read($p14);
    call {:si_unique_call 765} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} __wake_up($p9, 3, 1, $0.ref);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3796_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_3779;
}



const raid6_takeover: ref;

axiom raid6_takeover == $sub.ref(0, 385332);

procedure raid6_takeover($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid6_takeover($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(8, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, $p2i.ref.i64(raid5_personality));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 253);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 2);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 4);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 5);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p38 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p6 := $p38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i37 := 5;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 6);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p46 := setup_conf($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p6 := $p46;
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i33 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i37 := 20;
    goto $bb39;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i37 := 19;
    goto $bb39;

  $bb22:
    assume $i27 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := 18;
    goto $bb39;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i37 := 17;
    goto $bb39;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := 16;
    goto $bb39;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p18 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p6 := $p18;
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p14 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p6 := $p14;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p10 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p6 := $p10;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p5 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const raid5_congested: ref;

axiom raid5_congested == $sub.ref(0, 386364);

procedure raid5_congested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation raid5_congested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "raid5_congested:arg:bits"} boogie_si_record_i32($i1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(1112, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i13 := atomic_read($p12);
    call {:si_unique_call 787} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;
}



const raid5_mergeable_bvec: ref;

axiom raid5_mergeable_bvec == $sub.ref(0, 387396);

procedure raid5_mergeable_bvec($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation raid5_mergeable_bvec($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i5 := get_start_sect($p4);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i5);
    call {:si_unique_call 790} {:cexpr "sector"} boogie_si_record_i64($i8);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 791} {:cexpr "chunk_sectors"} boogie_si_record_i32($i10);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 9);
    call {:si_unique_call 792} {:cexpr "bio_sectors"} boogie_si_record_i32($i13);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, $i25);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i29, 1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i8, $i32);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i13);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i33, $i34);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i30, $i35);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i37 := $shl.i64($i36, 9);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    call {:si_unique_call 794} {:cexpr "max"} boogie_si_record_i32($i38);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i43 := $ule.i32($i40, $i42);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i13, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb13;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i21 := $i46;
    goto $bb3;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb10;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 793} {:cexpr "chunk_sectors"} boogie_si_record_i32($i28);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;
}



const get_start_sect: ref;

axiom get_start_sect == $sub.ref(0, 388428);

procedure get_start_sect($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_start_sect($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(256, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.15, $p1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1584)), $mul.ref(0, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.16, $p3);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 389460);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "ERR_PTR:arg:error___0"} boogie_si_record_i64($i0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const setup_conf: ref;

axiom setup_conf == $sub.ref(0, 390492);

procedure setup_conf($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation setup_conf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p76: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i24;
  var $i196: i24;
  var $i197: i24;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i1;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $i219: i1;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p220: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i1;
  var $p215: ref;
  var $p258: ref;
  var $i259: i32;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i32;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i1;
  var $p278: ref;
  var $i279: i32;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $i286: i64;
  var $i287: i64;
  var $i288: i64;
  var $i289: i64;
  var $i290: i64;
  var $i291: i64;
  var $i292: i32;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p298: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $p311: ref;
  var $i313: i64;
  var $i314: i1;
  var $p315: ref;
  var $p317: ref;
  var $p23: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p365: ref;
  var $p366: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p374: ref;
  var $p375: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p383: ref;
  var $p384: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p392: ref;
  var $p393: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p401: ref;
  var $p402: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p410: ref;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: ref;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: ref;
  var vslice_dummy_var_63: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p12 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 4);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 2);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 5);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 6);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 6);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i64 == 1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 9);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 4095);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i81 := is_power_of_2($i80);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    call {:si_unique_call 829} {:cexpr "tmp___9"} boogie_si_record_i8($i82);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p93 := kzalloc(1544, 208);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i97 := alloc_thread_groups($p94, 0, $p2, $p3, $p4);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 835} {:cexpr "tmp___12"} boogie_si_record_i32($i97);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i98 == 1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p94);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i314 := $ne.i64($i313, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i314 == 1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p317 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p23 := $p317;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb114:
    assume $i314 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} free_conf($p94);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p315 := ERR_PTR($sub.i64(0, 5));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p23 := $p315;
    goto $bb3;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i98 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.17, $p2);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1536, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.18, $p3);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.19, $p4);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_50 := spinlock_check($p105);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} __raw_spin_lock_init($p109, .str.133, $p5);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __seqcount_init($p110, .str.134, $p6);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __init_waitqueue_head($p111, .str.135, $p7);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} __init_waitqueue_head($p112, .str.136, $p8);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(720, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} INIT_LIST_HEAD($p113);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(736, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} INIT_LIST_HEAD($p114);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(752, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} INIT_LIST_HEAD($p115);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(768, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} INIT_LIST_HEAD($p116);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1120, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} init_llist_head($p117);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} atomic_set($p118, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} atomic_set($p119, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(804, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} atomic_set($p120, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(816, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(680, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, $sub.i32(0, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(928, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $i124);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, $sub.i64(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i131 == 1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i136, $i138);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $i139);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    call {:si_unique_call 849} {:cexpr "_max1"} boogie_si_record_i32($i142);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    call {:si_unique_call 850} {:cexpr "_max2"} boogie_si_record_i32($i144);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i145 := $sgt.i32($i142, $i144);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i145 == 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i146 := $i144;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i147 := scribble_len($i146);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(944, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p148, $i147);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i146);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i150 := $mul.i64($i149, 16);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p151 := kzalloc($i150, 208);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $p151);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i157 := $eq.i64($i156, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p158, $p0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p159 := kzalloc(4096, 208);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(0, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, $p159);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p160);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i162, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_51 := spinlock_check($p165);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} __raw_spin_lock_init($p170, .str.137, $p9);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(1, 72));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_52 := spinlock_check($p173);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p176, $mul.ref(1, 72)), $mul.ref(0, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __raw_spin_lock_init($p179, .str.138, $p10);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($p362, $mul.ref(2, 72));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} vslice_dummy_var_53 := spinlock_check($p363);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p365);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p366, $mul.ref(2, 72)), $mul.ref(0, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p368);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __raw_spin_lock_init($p369, .str.138, $p10);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p370);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($p371, $mul.ref(3, 72));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_59 := spinlock_check($p372);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p375, $mul.ref(3, 72)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __raw_spin_lock_init($p378, .str.138, $p10);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($p380, $mul.ref(4, 72));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_60 := spinlock_check($p381);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p384 := $bitcast.ref.ref($p383);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p384, $mul.ref(4, 72)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} __raw_spin_lock_init($p387, .str.138, $p10);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p389, $mul.ref(5, 72));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_61 := spinlock_check($p390);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p393, $mul.ref(5, 72)), $mul.ref(0, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p396 := $bitcast.ref.ref($p395);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} __raw_spin_lock_init($p396, .str.138, $p10);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p398 := $bitcast.ref.ref($p397);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($p398, $mul.ref(6, 72));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_62 := spinlock_check($p399);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p401);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p402, $mul.ref(6, 72)), $mul.ref(0, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} __raw_spin_lock_init($p405, .str.138, $p10);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p407 := $bitcast.ref.ref($p406);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($p407, $mul.ref(7, 72));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_63 := spinlock_check($p408);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p410);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p411, $mul.ref(7, 72)), $mul.ref(0, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p413);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} __raw_spin_lock_init($p414, .str.138, $p10);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} INIT_LIST_HEAD($p181);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref(1, 16));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} INIT_LIST_HEAD($p342);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p344, $mul.ref(2, 16));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} INIT_LIST_HEAD($p345);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p347 := $bitcast.ref.ref($p346);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($p347, $mul.ref(3, 16));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} INIT_LIST_HEAD($p348);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($p350, $mul.ref(4, 16));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} INIT_LIST_HEAD($p351);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p353 := $bitcast.ref.ref($p352);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p353, $mul.ref(5, 16));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} INIT_LIST_HEAD($p354);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p356 := $bitcast.ref.ref($p355);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p356, $mul.ref(6, 16));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} INIT_LIST_HEAD($p357);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p359 := $bitcast.ref.ref($p358);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p359, $mul.ref(7, 16));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} INIT_LIST_HEAD($p360);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} INIT_LIST_HEAD($p183);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p320, $mul.ref(1, 16));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} INIT_LIST_HEAD($p321);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($p323, $mul.ref(2, 16));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} INIT_LIST_HEAD($p324);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p326 := $bitcast.ref.ref($p325);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p326, $mul.ref(3, 16));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} INIT_LIST_HEAD($p327);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p329, $mul.ref(4, 16));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} INIT_LIST_HEAD($p330);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p331);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p332, $mul.ref(5, 16));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} INIT_LIST_HEAD($p333);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p335, $mul.ref(6, 16));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} INIT_LIST_HEAD($p336);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1400, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p338 := $bitcast.ref.ref($p337);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($p338, $mul.ref(7, 16));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} INIT_LIST_HEAD($p339);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $i185);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i187 := raid5_alloc_percpu($p94);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 865} {:cexpr "tmp___16"} boogie_si_record_i32($i187);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p189, .str.2);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p190, .str.139);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p191, .str.1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p192, .str.140);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i195 := $load.i24($M.10, $p194);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i196 := $and.i24($i195, $sub.i24(0, 262144));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i197 := $or.i24($i196, 5908);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p194, $i197);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p198, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.11, $p199);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i64($i200);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i202 := $and.i64($i201, 1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i203 := ldv__builtin_expect($i202, 0);
    call {:si_unique_call 867} {:cexpr "tmp___18"} boogie_si_record_i64($i203);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i211, $i213);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, $i259);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p263, $i262);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 6);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i266 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p268, 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p271, $i270);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.0, $p272);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p274, $i273);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, $sub.i64(0, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i286 := $sext.i32.i64($i285);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i287 := $sext.i32.i64($i146);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i288 := $mul.i64($i287, 4232);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i289 := $add.i64($i288, 576);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i290 := $mul.i64($i286, $i289);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i291 := $udiv.i64($i290, 1024);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i64.i32($i291);
    call {:si_unique_call 878} {:cexpr "memory"} boogie_si_record_i32($i292);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1112, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} atomic_set($p293, 8);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i294 := grow_stripes($p94, 256);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 881} {:cexpr "tmp___25"} boogie_si_record_i32($i294);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i295 == 1);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p298 := mdname($p0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_56 := printk.ref.ref.i32(.str.143, $p298, $i292);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p1);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.0, $p301);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_57 := sprintf.ref.ref.i32($p300, .str.144, $i302);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p305 := ldv_md_register_thread_185(raid5d, $p0, $p304);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1392, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p306, $p305);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1392, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i310 := $eq.i64($i309, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p23 := $p93;
    goto $bb3;

  $bb111:
    assume $i310 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p311 := mdname($p0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_58 := printk.ref.ref(.str.145, $p311);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i295 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p296 := mdname($p0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_55 := printk.ref.ref.i32(.str.142, $p296, $i292);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i277 == 1;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.0, $p278);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, $i279);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p283, $i282);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i266 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, 2);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb72:
    assume $i214 == 1;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p215 := $p208;
    goto $bb75;

  $bb75:
    call $p216, $i217, $i218, $i219, $p221, $p222, $i223, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p232, $p233, $p234, $i235, $i236, $p237, $p238, $i239, $i240, $p241, $p242, $p243, $p244, $p245, $p247, $i248, $i249, $p250, $p220, $p252, $p253, $p254, $p255, $i256, $i257, $p215, vslice_dummy_var_54 := setup_conf_loop_$bb75($p0, $p12, $p94, $i146, $i213, $p216, $i217, $i218, $i219, $p221, $p222, $i223, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p232, $p233, $p234, $i235, $i236, $p237, $p238, $i239, $i240, $p241, $p242, $p243, $p244, $p245, $p247, $i248, $i249, $p250, $p220, $p252, $p253, $p254, $p255, $i256, $i257, $p215, vslice_dummy_var_54);
    goto $bb75_last;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    call {:si_unique_call 870} {:cexpr "raid_disk"} boogie_si_record_i32($i217);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i218 := $sge.i32($i217, $i146);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb79;

  $bb79:
    assume !($i218 == 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i219 := $slt.i32($i217, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i217);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p215, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i226 := constant_test_bit(11, $p225);
    call {:si_unique_call 872} {:cexpr "tmp___19"} boogie_si_record_i32($i226);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i227 == 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p222, $mul.ref($i223, 16)), $mul.ref(0, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i235, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p222, $mul.ref($i223, 16)), $mul.ref(0, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p237, $p215);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p215, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i239 := constant_test_bit(1, $p238);
    call {:si_unique_call 874} {:cexpr "tmp___22"} boogie_si_record_i32($i239);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i240 == 1);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p215, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i249 := $ne.i32($i248, $i217);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p220 := $p215;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p220, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p255);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i256, $i213);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i257 == 1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb99:
    assume $i257 == 1;
    assume {:verifier.code 0} true;
    $p215 := $p253;
    goto $bb99_dummy;

  $bb96:
    assume $i249 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, 1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i240 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p215, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p12);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p244 := bdevname($p242, $p243);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p245 := mdname($p0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_54 := printk.ref.ref.ref.i32(.str.141, $p245, $p244, $i217);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i236 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb84:
    assume $i227 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p222, $mul.ref($i223, 16)), $mul.ref(8, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i230 := $p2i.ref.i64($p229);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p222, $mul.ref($i223, 16)), $mul.ref(8, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p232, $p215);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i231 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p220 := $p215;
    goto $bb82;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb78;

  $bb69:
    assume $i204 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p205 := mdname($p0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} __dynamic_pr_debug.ref.ref.ref($p11, .str.140, $p205);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i188 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i163 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i157 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i145 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i146 := $i142;
    goto $bb47;

  $bb42:
    assume $i131 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p94, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i133);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i96 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i85 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p86 := mdname($p0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i88, 9);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_49 := printk.ref.ref.i32(.str.132, $p86, $i89);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p91 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p23 := $p91;
    goto $bb3;

  $bb28:
    assume $i83 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p71 := mdname($p0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32($i73, 9);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_48 := printk.ref.ref.i32(.str.132, $p71, $i74);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p76 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p23 := $p76;
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb24;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 3);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb19;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p56 := mdname($p0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_47 := printk.ref.ref.i32(.str.131, $p56, $i58);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p60 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p23 := $p60;
    goto $bb3;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i42 := algorithm_valid_raid6($i41);
    call {:si_unique_call 818} {:cexpr "tmp___4"} boogie_si_record_i32($i42);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p44 := mdname($p0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_46 := printk.ref.ref.i32(.str.130, $p44, $i46);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p48 := ERR_PTR($sub.i64(0, 5));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p23 := $p48;
    goto $bb3;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i29 := algorithm_valid_raid5($i28);
    call {:si_unique_call 813} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p31 := mdname($p0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_45 := printk.ref.ref.i32(.str.130, $p31, $i33);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p35 := ERR_PTR($sub.i64(0, 5));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p23 := $p35;
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p17 := mdname($p0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_44 := printk.ref.ref.i32(.str.129, $p17, $i19);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p21 := ERR_PTR($sub.i64(0, 5));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p23 := $p21;
    goto $bb3;

  $bb99_dummy:
    assume false;
    return;

  $bb75_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;
}



const mdname: ref;

axiom mdname == $sub.ref(0, 391524);

procedure mdname($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mdname($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p9 := .str.58;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1744)), $mul.ref(12, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p9 := $p7;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 392556);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 915} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 917} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 1} true;
    call {:si_unique_call 919} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 921} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 922} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);



procedure printk.ref.i64.i32.ref.ref.ref.ref.i32($p0: ref, p.1: i64, p.2: i32, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32.ref.ref.ref.ref.i32($p0: ref, p.1: i64, p.2: i32, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);



procedure printk.ref.ref.i64.ref($p0: ref, p.1: ref, p.2: i64, p.3: ref) returns ($r: i32);



procedure printk.ref.ref.i64.i64.ref($p0: ref, p.1: ref, p.2: i64, p.3: i64, p.4: ref) returns ($r: i32);



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const algorithm_valid_raid5: ref;

axiom algorithm_valid_raid5 == $sub.ref(0, 393588);

procedure algorithm_valid_raid5($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation algorithm_valid_raid5($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} {:cexpr "algorithm_valid_raid5:arg:layout"} boogie_si_record_i32($i0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 5);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const algorithm_valid_raid6: ref;

axiom algorithm_valid_raid6 == $sub.ref(0, 394620);

procedure algorithm_valid_raid6($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation algorithm_valid_raid6($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i2: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} {:cexpr "algorithm_valid_raid6:arg:layout"} boogie_si_record_i32($i0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 5);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i0, 8);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i3, 2);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i0, 16);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 4);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i2 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i2);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const is_power_of_2: ref;

axiom is_power_of_2 == $sub.ref(0, 395652);

procedure is_power_of_2($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_power_of_2($i0: i64) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} {:cexpr "is_power_of_2:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i0, $i3);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 396684);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 941} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const alloc_thread_groups: ref;

axiom alloc_thread_groups == $sub.ref(0, 397716);

procedure alloc_thread_groups($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.17, $M.19, $M.0, $CurrAddr, assertsPassed;



implementation alloc_thread_groups($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i43: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i32: i32;
  var $i8: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 945} {:cexpr "alloc_thread_groups:arg:cnt"} boogie_si_record_i32($i1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p3, $i1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 0);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i9 := num_node_state(0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p2, $i9);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 224);
    call {:si_unique_call 947} {:cexpr "size"} boogie_si_record_i64($i11);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.17, $p2);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i14 := $mul.i64($i11, $i13);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p15 := kzalloc($i14, 16);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.17, $p2);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 40);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p20 := kzalloc($i19, 16);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p4, $p20);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.19, $p4);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p16);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.17, $p2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32(0, $i30);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb14;

  $bb14:
    call $p33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $p44, $p45, $i46, $p48, $p49, $p50, $p52, $p53, $p54, $p56, $p58, $p60, $p61, $p62, $i63, $i64, $i43, $i65, $i66, $i67, $i32, $p68, $p69, $p70, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4 := alloc_thread_groups_loop_$bb14($p0, $i1, $p2, $p4, $p5, $p6, $p16, $p33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $p44, $p45, $i46, $p48, $p49, $p50, $p52, $p53, $p54, $p56, $p58, $p60, $p61, $p62, $i63, $i64, $i43, $i65, $i66, $i67, $i32, $p68, $p69, $p70, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4);
    goto $bb14_last;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.19, $p4);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i32);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 40));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref($i34, 40)), $mul.ref(0, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} INIT_LIST_HEAD($p36);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p33, $mul.ref($i34, 40)), $mul.ref(16, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i32, $i1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p16, $mul.ref($i39, 224));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p33, $mul.ref($i34, 40)), $mul.ref(24, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32(0, $i1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i32, 1);
    call {:si_unique_call 960} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.17, $p2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i65, $i66);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i67 == 1);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb28:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i65;
    goto $bb28_dummy;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb19;

  $bb19:
    call $p44, $p45, $i46, $p48, $p49, $p50, $p52, $p53, $p54, $p56, $p58, $p60, $p61, $p62, $i63, $i64, $i43, $p68, $p69, $p70, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4 := alloc_thread_groups_loop_$bb19($i1, $p5, $p6, $p33, $i34, $p35, $p44, $p45, $i46, $p48, $p49, $p50, $p52, $p53, $p54, $p56, $p58, $p60, $p61, $p62, $i63, $i64, $i43, $p68, $p69, $p70, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4);
    goto $bb19_last;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p33, $mul.ref($i34, 40)), $mul.ref(24, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i43);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(80, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p35);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(0, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __init_work($p49, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, 137438953408);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p6);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 954} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p53, $p54, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} lockdep_init_map($p56, .str.17, $p5, 0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} INIT_LIST_HEAD($p58);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, raid5_do_work);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD($p62);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(1, 16));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} INIT_LIST_HEAD($p70);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(2, 16));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} INIT_LIST_HEAD($p73);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(3, 16));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} INIT_LIST_HEAD($p76);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(4, 16));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} INIT_LIST_HEAD($p79);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(5, 16));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} INIT_LIST_HEAD($p82);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(6, 16));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} INIT_LIST_HEAD($p85);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p45, $mul.ref($i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(7, 16));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD($p88);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i43, 1);
    call {:si_unique_call 959} {:cexpr "j"} boogie_si_record_i32($i63);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, $i1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i63;
    goto $bb25_dummy;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p16);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} kfree($p27);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.19, $p4);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} kfree($p29);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb6;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p2, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p4, $0.ref);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  $bb28_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4699;
}



const __seqcount_init: ref;

axiom __seqcount_init == $sub.ref(0, 398748);

procedure __seqcount_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __seqcount_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} lockdep_init_map($p3, $p1, $p2, 0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 399780);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    return;
}



const init_llist_head: ref;

axiom init_llist_head == $sub.ref(0, 400812);

procedure init_llist_head($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation init_llist_head($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    return;
}



const scribble_len: ref;

axiom scribble_len == $sub.ref(0, 401844);

procedure scribble_len($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation scribble_len($i0: i32) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} {:cexpr "scribble_len:arg:num"} boogie_si_record_i32($i0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 2);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i3 := $mul.i64($i2, 16);
    call {:si_unique_call 969} {:cexpr "len"} boogie_si_record_i64($i3);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const raid5_alloc_percpu: ref;

axiom raid5_alloc_percpu == $sub.ref(0, 402876);

procedure raid5_alloc_percpu($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation raid5_alloc_percpu($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i23: i64;
  var $i44: i32;
  var $i22: i32;
  var $i36: i32;
  var $i8: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p1 := __alloc_percpu(16, 8);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, raid456_cpu_notify);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(952, 1)), $mul.ref(16, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(952, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i14 := register_cpu_notifier($p13);
    call {:si_unique_call 972} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} get_online_cpus();
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i17 := cpumask_next($sub.i32(0, 1), $p16);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 975} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    call {:si_unique_call 976} {:cexpr "cpu"} boogie_si_record_i64($i18);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i21 := $ult.i64($i18, $i20);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i22 := $i14;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $i22;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} put_online_cpus();
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb11;

  $bb11:
    call $p24, $p25, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i23, $i44 := raid5_alloc_percpu_loop_$bb11($p0, $p24, $p25, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i23, $i44);
    goto $bb11_last;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 977} $i26 := devirtbounce.10(0, $p25);
    call {:si_unique_call 978} {:cexpr "__ptr"} boogie_si_record_i64($i26);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i23, 8));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i26, $i28);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i31 := alloc_scratch_buffer($p0, $p30);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 980} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i23, $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i23);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i39 := cpumask_next($i37, $p38);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    call {:si_unique_call 985} {:cexpr "cpu"} boogie_si_record_i64($i40);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i40, $i42);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i44 := $i31;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i22 := $i44;
    goto $bb10;

  $bb17:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i40;
    goto $bb17_dummy;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_64 := printk.ref.ref.i64(.str.146, .str.147, $i33);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb15;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4840;
}



const bdevname: ref;

axiom bdevname == $sub.ref(0, 403908);

procedure bdevname($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdevname($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p2 := external_alloc();
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const grow_stripes: ref;

axiom grow_stripes == $sub.ref(0, 404940);

procedure grow_stripes($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation grow_stripes($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i57: i32;
  var $i58: i32;
  var $i49: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "grow_stripes:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 988} {:cexpr "_max1"} boogie_si_record_i32($i3);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 989} {:cexpr "_max2"} boogie_si_record_i32($i5);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i3, $i5);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_66 := sprintf.ref.ref.i32.ref($p23, .str.150, $i25, $p27);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_67 := sprintf.ref.ref.ref($p31, .str.151, $p33);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(836, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(836, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 368);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 576);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p46 := kmem_cache_create($p41, $i45, 0, 0, $0.ref);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p46);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i7);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i54 := $srem.i32($i53, 8);
    call {:si_unique_call 995} {:cexpr "hash"} boogie_si_record_i32($i54);
    call {:si_unique_call 996} {:cexpr "grow_stripes:arg:tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i1, 1);
    call {:si_unique_call 997} {:cexpr "num"} boogie_si_record_i32($i55);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i1, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i57, $i58 := $i55, $i54;
    goto $bb14;

  $bb14:
    call $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i57, $i58 := grow_stripes_loop_$bb14($p0, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i57, $i58);
    goto $bb14_last;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i59 := grow_one_stripe($p0, $i58);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 999} {:cexpr "tmp___0"} boogie_si_record_i32($i59);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i58, 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i66 := $srem.i32($i65, 8);
    call {:si_unique_call 1000} {:cexpr "hash"} boogie_si_record_i32($i66);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i57, 1);
    call {:si_unique_call 1001} {:cexpr "num"} boogie_si_record_i32($i67);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i57, 0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i57, $i58 := $i67, $i66;
    goto $bb19_dummy;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb9;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p16 := mdname($p15);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_65 := sprintf.ref.ref.i32.ref($p18, .str.149, $i20, $p16);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 405972);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);



const raid5d: ref;

axiom raid5d == $sub.ref(0, 407004);

procedure raid5d($p0: ref);



const ldv_md_register_thread_185: ref;

axiom ldv_md_register_thread_185 == $sub.ref(0, 408036);

procedure ldv_md_register_thread_185($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.17, $M.19, $M.21, $CurrAddr, $M.2, $M.23, $M.1, $M.22, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_md_register_thread_185($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p3 := md_register_thread($p0, $p1, $p2);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p4 := ldv_md_register_thread($p3, $p0, $p1, $p2);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const free_conf: ref;

axiom free_conf == $sub.ref(0, 409068);

procedure free_conf($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation free_conf($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} free_thread_groups($p0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} shrink_stripes($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} raid5_free_percpu($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} kfree($p3);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(0, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} kfree($p6);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} kfree($p7);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const free_thread_groups: ref;

axiom free_thread_groups == $sub.ref(0, 410100);

procedure free_thread_groups($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_thread_groups($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} kfree($p12);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} kfree($p9);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const shrink_stripes: ref;

axiom shrink_stripes == $sub.ref(0, 411132);

procedure shrink_stripes($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i1 := drop_one_stripe($p0, 0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 1013} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i12 := drop_one_stripe($p0, 1);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i16 := drop_one_stripe($p0, 2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i20 := drop_one_stripe($p0, 3);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i24 := drop_one_stripe($p0, 4);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i28 := drop_one_stripe($p0, 5);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i32 := drop_one_stripe($p0, 6);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i36 := drop_one_stripe($p0, 7);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} kmem_cache_destroy($p10);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb70:
    assume $i37 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    call $i38, $i39 := shrink_stripes_loop_$bb73($p0, $i38, $i39);
    goto $bb73_last;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i38 := drop_one_stripe($p0, 7);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i39 == 1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb75_dummy;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i33 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    call $i34, $i35 := shrink_stripes_loop_$bb64($p0, $i34, $i35);
    goto $bb64_last;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i34 := drop_one_stripe($p0, 6);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i35 == 1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb66_dummy;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i29 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    call $i30, $i31 := shrink_stripes_loop_$bb55($p0, $i30, $i31);
    goto $bb55_last;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i30 := drop_one_stripe($p0, 5);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i31 == 1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb57_dummy;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i25 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    call $i26, $i27 := shrink_stripes_loop_$bb46($p0, $i26, $i27);
    goto $bb46_last;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i26 := drop_one_stripe($p0, 4);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i27 == 1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb48_dummy;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i21 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call $i22, $i23 := shrink_stripes_loop_$bb37($p0, $i22, $i23);
    goto $bb37_last;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i22 := drop_one_stripe($p0, 3);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i23 == 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb39_dummy;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i17 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call $i18, $i19 := shrink_stripes_loop_$bb28($p0, $i18, $i19);
    goto $bb28_last;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i18 := drop_one_stripe($p0, 2);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i19 == 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb30_dummy;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call $i14, $i15 := shrink_stripes_loop_$bb19($p0, $i14, $i15);
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i14 := drop_one_stripe($p0, 1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb21_dummy;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $i3, $i4 := shrink_stripes_loop_$bb6($p0, $i3, $i4);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i3 := drop_one_stripe($p0, 0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb8_dummy;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb75_dummy:
    assume false;
    return;

  $bb73_last:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb66_dummy:
    assume false;
    return;

  $bb64_last:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb57_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb48_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const raid5_free_percpu: ref;

axiom raid5_free_percpu == $sub.ref(0, 412164);

procedure raid5_free_percpu($p0: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation raid5_free_percpu($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $i12: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(952, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} unregister_cpu_notifier($p5);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} get_online_cpus();
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i7 := cpumask_next($sub.i32(0, 1), $p6);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 1035} {:cexpr "cpu"} boogie_si_record_i64($i8);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i11 := $ult.i64($i8, $i10);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} put_online_cpus();
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} free_percpu($p29);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $p16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i12 := raid5_free_percpu_loop_$bb8($p0, $p13, $p14, $i15, $p16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i12);
    goto $bb8_last;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 1036} $i15 := devirtbounce.10(0, $p14);
    call {:si_unique_call 1037} {:cexpr "__ptr"} boogie_si_record_i64($i15);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i12, 8));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i15, $i17);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} free_scratch_buffer($p0, $p19);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i12);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i22 := cpumask_next($i20, $p21);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 1040} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    call {:si_unique_call 1041} {:cexpr "cpu"} boogie_si_record_i64($i23);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i23, $i25);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb10_dummy;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 413196);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} free_($p0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 414228);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1045} $free($p0);
    return;
}



const unregister_cpu_notifier: ref;

axiom unregister_cpu_notifier == $sub.ref(0, 415260);

procedure unregister_cpu_notifier($p0: ref);
  free requires assertsPassed;



implementation unregister_cpu_notifier($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    return;
}



const get_online_cpus: ref;

axiom get_online_cpus == $sub.ref(0, 416292);

procedure get_online_cpus();
  free requires assertsPassed;



implementation get_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    return;
}



const free_scratch_buffer: ref;

axiom free_scratch_buffer == $sub.ref(0, 417324);

procedure free_scratch_buffer($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_scratch_buffer($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} safe_put_page($p3);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} kfree($p5);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 418356);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i10 := ldv_find_next_bit_5($p5, $i7, $i9);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_68 := cpumask_check($i0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_online_cpus: ref;

axiom put_online_cpus == $sub.ref(0, 419388);

procedure put_online_cpus();
  free requires assertsPassed;



implementation put_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 420420);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    return;
}



const ldv_find_next_bit_5: ref;

axiom ldv_find_next_bit_5 == $sub.ref(0, 421452);

procedure ldv_find_next_bit_5($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_find_next_bit_5($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} {:cexpr "ldv_find_next_bit_5:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1053} {:cexpr "ldv_find_next_bit_5:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i3 := ldv_linux_lib_find_bit_find_next_bit($i1, $i2);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1055} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_find_bit_find_next_bit: ref;

axiom ldv_linux_lib_find_bit_find_next_bit == $sub.ref(0, 422484);

procedure ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1057} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i2 := ldv_undef_ulong();
    call {:si_unique_call 1059} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i1, $i0);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_assert_linux_lib_find_bit__offset_out_of_range($i4);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i2, $i0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_assume($i6);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_assume(1);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_find_bit__offset_out_of_range: ref;

axiom ldv_assert_linux_lib_find_bit__offset_out_of_range == $sub.ref(0, 423516);

procedure ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} {:cexpr "ldv_assert_linux_lib_find_bit__offset_out_of_range:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} __VERIFIER_error();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const safe_put_page: ref;

axiom safe_put_page == $sub.ref(0, 424548);

procedure safe_put_page($p0: ref);
  free requires assertsPassed;



implementation safe_put_page($p0: ref)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} put_page($p0);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 425580);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    return;
}



const md_register_thread: ref;

axiom md_register_thread == $sub.ref(0, 426612);

procedure md_register_thread($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation md_register_thread($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p3 := external_alloc();
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_md_register_thread: ref;

axiom ldv_md_register_thread == $sub.ref(0, 427644);

procedure ldv_md_register_thread($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.17, $M.19, $M.21, $CurrAddr, $M.2, $M.23, $M.1, $M.22, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_md_register_thread($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_dispatch_register_10_1($p2);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_10_1: ref;

axiom ldv_dispatch_register_10_1 == $sub.ref(0, 428676);

procedure ldv_dispatch_register_10_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.17, $M.19, $M.21, $CurrAddr, $M.2, $M.23, $M.1, $M.22, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_dispatch_register_10_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i1 := ldv_undef_int();
    call {:si_unique_call 1069} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 3);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 4);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_stop();
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i6 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p23 := ldv_xmalloc(16);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7($p26);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i5 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p19 := ldv_xmalloc(16);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6($p22);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p15 := ldv_xmalloc(16);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5($p18);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p11 := ldv_xmalloc(16);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4($p14);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p7 := ldv_xmalloc(16);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3($p10);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 429708);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $p1 := malloc($i0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_assume($i4);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1085} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_assume($i7);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3: ref;

axiom ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3 == $sub.ref(0, 430740);

procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.18, $M.17, $M.19, $M.0, $CurrAddr, $M.2, $M.23, $M.22, assertsPassed;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i8 := ldv_undef_int();
    call {:si_unique_call 1089} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3_loop_$bb7($p7, $p10, $i11, $i12, $p13, $i14, $i15);
    goto $bb7_last;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i11 := ldv_undef_int();
    call {:si_unique_call 1092} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_dummy_resourceless_instance_callback_3_3($u5, $p7, $p10);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_free($p10);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i14 := ldv_undef_int();
    call {:si_unique_call 1099} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11_dummy;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p13 := ldv_xmalloc(1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_dummy_resourceless_instance_callback_3_9($u4, $p7, $p13, $u0);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} ldv_free($p13);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_free($p6);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p10 := ldv_xmalloc(1);
    goto corral_source_split_5304;
}



const ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4: ref;

axiom ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4 == $sub.ref(0, 431772);

procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.23, $M.22, assertsPassed;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i8 := ldv_undef_int();
    call {:si_unique_call 1102} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4_loop_$bb7($p7, $p10, $i11, $i12, $p13, $i14, $i15);
    goto $bb7_last;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i11 := ldv_undef_int();
    call {:si_unique_call 1105} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_dummy_resourceless_instance_callback_4_3($u5, $p7, $p10);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} ldv_free($p10);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i14 := ldv_undef_int();
    call {:si_unique_call 1112} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11_dummy;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p13 := ldv_xmalloc(1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_dummy_resourceless_instance_callback_4_9($u4, $p7, $p13, $u0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} ldv_free($p13);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ldv_free($p6);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p10 := ldv_xmalloc(1);
    goto corral_source_split_5338;
}



const ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5: ref;

axiom ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5 == $sub.ref(0, 432804);

procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr, $M.23, $M.22, assertsPassed;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i8 := ldv_undef_int();
    call {:si_unique_call 1115} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5_loop_$bb7($p7, $p10, $i11, $i12, $p13, $i14, $i15);
    goto $bb7_last;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i11 := ldv_undef_int();
    call {:si_unique_call 1118} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_dummy_resourceless_instance_callback_5_3($u5, $p7, $p10);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_free($p10);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i14 := ldv_undef_int();
    call {:si_unique_call 1125} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11_dummy;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p13 := ldv_xmalloc(1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_dummy_resourceless_instance_callback_5_9($u4, $p7, $p13, $u0);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_free($p13);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_free($p6);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $p10 := ldv_xmalloc(1);
    goto corral_source_split_5372;
}



const ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6: ref;

axiom ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6 == $sub.ref(0, 433836);

procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.23, assertsPassed, $M.2;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i8 := ldv_undef_int();
    call {:si_unique_call 1128} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6_loop_$bb7($p7, $p10, $i11, $i12, $p13, $i14, $i15);
    goto $bb7_last;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i11 := ldv_undef_int();
    call {:si_unique_call 1131} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_dummy_resourceless_instance_callback_6_3($u5, $p7, $p10);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_free($p10);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i14 := ldv_undef_int();
    call {:si_unique_call 1138} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11_dummy;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p13 := ldv_xmalloc(1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_dummy_resourceless_instance_callback_6_9($u4, $p7, $p13, $u0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ldv_free($p13);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} ldv_free($p6);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p10 := ldv_xmalloc(1);
    goto corral_source_split_5406;
}



const ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7: ref;

axiom ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7 == $sub.ref(0, 434868);

procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i8 := ldv_undef_int();
    call {:si_unique_call 1141} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7_loop_$bb7($p7, $p10, $i11, $i12, $p13, $i14, $i15);
    goto $bb7_last;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i11 := ldv_undef_int();
    call {:si_unique_call 1144} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ldv_dummy_resourceless_instance_callback_7_3($u5, $p7, $p10);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} ldv_free($p10);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i14 := ldv_undef_int();
    call {:si_unique_call 1151} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb11_dummy;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p13 := ldv_xmalloc(1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} ldv_dummy_resourceless_instance_callback_7_9($u4, $p7, $p13, $u0);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_free($p13);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} ldv_free($p6);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $p10 := ldv_xmalloc(1);
    goto corral_source_split_5440;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 435900);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 436932);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} free_($p0);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_9: ref;

axiom ldv_dummy_resourceless_instance_callback_7_9 == $sub.ref(0, 437964);

procedure ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2;



implementation ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_69: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "ldv_dummy_resourceless_instance_callback_7_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} vslice_dummy_var_69 := raid5_store_stripe_cache_size($p1, $p2, $i3);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 438996);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_70: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_70 := stripe_cache_active_show($p1, $p2);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    return;
}



const stripe_cache_active_show: ref;

axiom stripe_cache_active_show == $sub.ref(0, 440028);

procedure stripe_cache_active_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation stripe_cache_active_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i8 := atomic_read($p7);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i9 := sprintf.ref.ref.i32($p1, .str.16, $i8);
    call {:si_unique_call 1159} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const raid5_store_stripe_cache_size: ref;

axiom raid5_store_stripe_cache_size == $sub.ref(0, 441060);

procedure raid5_store_stripe_cache_size($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2;



implementation raid5_store_stripe_cache_size($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i16: i32;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1161} {:cexpr "raid5_store_stripe_cache_size:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i2, 4095);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i6 := kstrtoul($p1, 10, $p3);
    call {:si_unique_call 1163} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i8 := mddev_lock($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    call {:si_unique_call 1165} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.21, $p3);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i19 := raid5_set_cache_size($p0, $i18);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 1167} {:cexpr "err"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} mddev_unlock($p0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i16, 0);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i16);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb16;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 442092);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 1171} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mddev_lock: ref;

axiom mddev_lock == $sub.ref(0, 443124);

procedure mddev_lock($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation mddev_lock($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(848, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i2 := ldv_mutex_lock_interruptible_96($p1);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const mddev_unlock: ref;

axiom mddev_unlock == $sub.ref(0, 444156);

procedure mddev_unlock($p0: ref);
  free requires assertsPassed;



implementation mddev_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_96: ref;

axiom ldv_mutex_lock_interruptible_96 == $sub.ref(0, 445188);

procedure ldv_mutex_lock_interruptible_96($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_interruptible_96($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_reconfig_mutex_of_mddev($p0);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    call {:si_unique_call 1175} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_reconfig_mutex_of_mddev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_reconfig_mutex_of_mddev == $sub.ref(0, 446220);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_reconfig_mutex_of_mddev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_reconfig_mutex_of_mddev($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i5 := ldv_undef_int();
    call {:si_unique_call 1178} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 1179} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_reconfig_mutex_of_mddev"} boogie_si_record_i8(1);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 447252);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} __VERIFIER_error();
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 448284);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_9: ref;

axiom ldv_dummy_resourceless_instance_callback_6_9 == $sub.ref(0, 449316);

procedure ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2;



implementation ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_71: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} {:cexpr "ldv_dummy_resourceless_instance_callback_6_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_71 := raid5_store_stripe_cache_size($p1, $p2, $i3);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 450348);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_72: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_72 := raid5_show_stripe_cache_size($p1, $p2);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const raid5_show_stripe_cache_size: ref;

axiom raid5_show_stripe_cache_size == $sub.ref(0, 451380);

procedure raid5_show_stripe_cache_size($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation raid5_show_stripe_cache_size($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_spin_lock_175($p2);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ldv_spin_unlock_176($p12);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i10 := sprintf.ref.ref.i32($p1, .str.16, $i9);
    call {:si_unique_call 1190} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_175: ref;

axiom ldv_spin_lock_175 == $sub.ref(0, 452412);

procedure ldv_spin_lock_175($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_spin_lock_175($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_mddev();
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} spin_lock($p0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_176: ref;

axiom ldv_spin_unlock_176 == $sub.ref(0, 453444);

procedure ldv_spin_unlock_176($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_spin_unlock_176($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_mddev();
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} spin_unlock($p0);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_mddev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_mddev == $sub.ref(0, 454476);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_mddev();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_mddev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_assume($i5);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1198} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_mddev"} boogie_si_record_i32(1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_mddev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_mddev == $sub.ref(0, 455508);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_mddev();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_mddev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ldv_assume($i5);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1201} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_mddev"} boogie_si_record_i32(2);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 456540);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} _raw_spin_lock($p2);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 457572);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_9: ref;

axiom ldv_dummy_resourceless_instance_callback_5_9 == $sub.ref(0, 458604);

procedure ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_73: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} {:cexpr "ldv_dummy_resourceless_instance_callback_5_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_73 := raid5_store_skip_copy($p1, $p2, $i3);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 459636);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_74: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_74 := raid5_show_skip_copy($p1, $p2);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const raid5_show_skip_copy: ref;

axiom raid5_show_skip_copy == $sub.ref(0, 460668);

procedure raid5_show_skip_copy($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation raid5_show_skip_copy($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} ldv_spin_lock_175($p2);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} ldv_spin_unlock_176($p12);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(820, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i10 := sprintf.ref.ref.i32($p1, .str.16, $i9);
    call {:si_unique_call 1208} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const raid5_store_skip_copy: ref;

axiom raid5_store_skip_copy == $sub.ref(0, 461700);

procedure raid5_store_skip_copy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation raid5_store_skip_copy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i20: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1211} {:cexpr "raid5_store_skip_copy:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i2, 4095);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i6 := kstrtoul($p1, 10, $p3);
    call {:si_unique_call 1213} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.21, $p3);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p3, $i11);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i12 := mddev_lock($p0);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 1215} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.21, $p3);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 1544)), $mul.ref(820, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i21, $i24);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $i12;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} mddev_unlock($p0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i20, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i53 := $i2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i5 := $i53;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i20);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb22;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} mddev_suspend($p0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.21, $p3);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 1544)), $mul.ref(820, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.21, $p3);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(32, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, $sub.i32(0, 9));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(32, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i46);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} mddev_resume($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(32, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 8);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(32, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i36);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const mddev_suspend: ref;

axiom mddev_suspend == $sub.ref(0, 462732);

procedure mddev_suspend($p0: ref);
  free requires assertsPassed;



implementation mddev_suspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    return;
}



const mddev_resume: ref;

axiom mddev_resume == $sub.ref(0, 463764);

procedure mddev_resume($p0: ref);
  free requires assertsPassed;



implementation mddev_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_9: ref;

axiom ldv_dummy_resourceless_instance_callback_4_9 == $sub.ref(0, 464796);

procedure ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_75: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} {:cexpr "ldv_dummy_resourceless_instance_callback_4_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_75 := raid5_store_preread_threshold($p1, $p2, $i3);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 465828);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_76 := raid5_show_preread_threshold($p1, $p2);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const raid5_show_preread_threshold: ref;

axiom raid5_show_preread_threshold == $sub.ref(0, 466860);

procedure raid5_show_preread_threshold($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation raid5_show_preread_threshold($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_spin_lock_175($p2);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} ldv_spin_unlock_176($p12);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(816, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i10 := sprintf.ref.ref.i32($p1, .str.16, $i9);
    call {:si_unique_call 1224} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const raid5_store_preread_threshold: ref;

axiom raid5_store_preread_threshold == $sub.ref(0, 467892);

procedure raid5_store_preread_threshold($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation raid5_store_preread_threshold($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $i22: i32;
  var $i16: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1227} {:cexpr "raid5_store_preread_threshold:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i2, 4095);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i6 := kstrtoul($p1, 10, $p3);
    call {:si_unique_call 1229} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i8 := mddev_lock($p0);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 1231} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.21, $p3);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64($i17, $i20);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.21, $p3);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 1544)), $mul.ref(816, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    assume {:verifier.code 0} true;
    $i22 := $i8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} mddev_unlock($p0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i16, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i5 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i16);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb19;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const ldv_dummy_resourceless_instance_callback_3_9: ref;

axiom ldv_dummy_resourceless_instance_callback_3_9 == $sub.ref(0, 468924);

procedure ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.18, $M.17, $M.19, $M.0, $M.2, $CurrAddr, $M.22, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_77: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} {:cexpr "ldv_dummy_resourceless_instance_callback_3_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_77 := raid5_store_group_thread_cnt($p1, $p2, $i3);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_3: ref;

axiom ldv_dummy_resourceless_instance_callback_3_3 == $sub.ref(0, 469956);

procedure ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_78: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_78 := raid5_show_group_thread_cnt($p1, $p2);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const raid5_show_group_thread_cnt: ref;

axiom raid5_show_group_thread_cnt == $sub.ref(0, 470988);

procedure raid5_show_group_thread_cnt($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation raid5_show_group_thread_cnt($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} ldv_spin_lock_175($p2);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1240, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} ldv_spin_unlock_176($p12);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i10 := sprintf.ref.ref.i32($p1, .str.16, $i9);
    call {:si_unique_call 1238} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const raid5_store_group_thread_cnt: ref;

axiom raid5_store_group_thread_cnt == $sub.ref(0, 472020);

procedure raid5_store_group_thread_cnt($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.18, $M.17, $M.19, $M.0, $M.2, $CurrAddr, $M.22, assertsPassed;



implementation raid5_store_group_thread_cnt($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i19: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1244} {:cexpr "raid5_store_group_thread_cnt:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i2, 4095);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i9 := kstrtoul($p1, 10, $p3);
    call {:si_unique_call 1246} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i11 := mddev_lock($p0);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1248} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.21, $p3);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i20, $i23);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i11;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i48;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} mddev_unlock($p0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i19, 0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i51 := $i2;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i8 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i19);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb28;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} mddev_suspend($p0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.21, $p3);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i32 := alloc_thread_groups($p16, $i31, $p5, $p6, $p4);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 1253} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} mddev_resume($p0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i48 := $i32;
    goto $bb25;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} ldv_spin_lock_irq_136($p34);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.17, $p5);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1536, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.18, $p6);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1540, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.19, $p4);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1528, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p39);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p16, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} ldv_spin_unlock_irq_137($p41);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p26);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p26);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} kfree($p47);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} kfree($p46);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p29 := $M.3;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} flush_workqueue($p29);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 473052);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_136: ref;

axiom ldv_spin_lock_irq_136 == $sub.ref(0, 474084);

procedure ldv_spin_lock_irq_136($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_lock_irq_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} spin_lock_irq($p0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_137: ref;

axiom ldv_spin_unlock_irq_137 == $sub.ref(0, 475116);

procedure ldv_spin_unlock_irq_137($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_unlock_irq_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf();
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} spin_unlock_irq($p0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf == $sub.ref(0, 476148);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ldv_assume($i5);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 1265} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf"} boogie_si_record_i32(2);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 477180);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1266} $r := $malloc($i0);
    return;
}



const md_check_recovery: ref;

axiom md_check_recovery == $sub.ref(0, 478212);

procedure md_check_recovery($p0: ref);



const blk_start_plug: ref;

axiom blk_start_plug == $sub.ref(0, 479244);

procedure blk_start_plug($p0: ref);



const release_stripe_list: ref;

axiom release_stripe_list == $sub.ref(0, 480276);

procedure release_stripe_list($p0: ref, $p1: ref) returns ($r: i32);



const bitmap_unplug: ref;

axiom bitmap_unplug == $sub.ref(0, 481308);

procedure bitmap_unplug($p0: ref);



const activate_bit_delay: ref;

axiom activate_bit_delay == $sub.ref(0, 482340);

procedure activate_bit_delay($p0: ref, $p1: ref);



const raid5_activate_delayed: ref;

axiom raid5_activate_delayed == $sub.ref(0, 483372);

procedure raid5_activate_delayed($p0: ref);



const retry_aligned_read: ref;

axiom retry_aligned_read == $sub.ref(0, 484404);

procedure retry_aligned_read($p0: ref, $p1: ref) returns ($r: i32);



const remove_bio_from_retry: ref;

axiom remove_bio_from_retry == $sub.ref(0, 485436);

procedure remove_bio_from_retry($p0: ref) returns ($r: ref);



const handle_active_stripes: ref;

axiom handle_active_stripes == $sub.ref(0, 486468);

procedure handle_active_stripes($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);



const dma_issue_pending_all: ref;

axiom dma_issue_pending_all == $sub.ref(0, 487500);

procedure dma_issue_pending_all();



const blk_finish_plug: ref;

axiom blk_finish_plug == $sub.ref(0, 488532);

procedure blk_finish_plug($p0: ref);



const __get_priority_stripe: ref;

axiom __get_priority_stripe == $sub.ref(0, 489564);

procedure __get_priority_stripe($p0: ref, $i1: i32) returns ($r: ref);



const handle_stripe: ref;

axiom handle_stripe == $sub.ref(0, 490596);

procedure handle_stripe($p0: ref);



const ___might_sleep: ref;

axiom ___might_sleep == $sub.ref(0, 491628);

procedure ___might_sleep($p0: ref, $i1: i32, $i2: i32);



const _cond_resched: ref;

axiom _cond_resched == $sub.ref(0, 492660);

procedure _cond_resched() returns ($r: i32);



const __release_stripe: ref;

axiom __release_stripe == $sub.ref(0, 493692);

procedure __release_stripe($p0: ref, $p1: ref, $p2: ref);



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 494724);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i1 := ldv_linux_usb_dev_atomic_dec_and_test($p0);
    call {:si_unique_call 1268} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_usb_dev_atomic_dec_and_test: ref;

axiom ldv_linux_usb_dev_atomic_dec_and_test == $sub.ref(0, 495756);

procedure ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 496788);

procedure test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 497820);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1270} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_138: ref;

axiom ldv_spin_lock_138 == $sub.ref(0, 498852);

procedure ldv_spin_lock_138($p0: ref);



const ldv_spin_unlock_139: ref;

axiom ldv_spin_unlock_139 == $sub.ref(0, 499884);

procedure ldv_spin_unlock_139($p0: ref);



const analyse_stripe: ref;

axiom analyse_stripe == $sub.ref(0, 500916);

procedure analyse_stripe($p0: ref, $p1: ref);



const rdev_dec_pending: ref;

axiom rdev_dec_pending == $sub.ref(0, 501948);

procedure rdev_dec_pending($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rdev_dec_pending($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i3 := constant_test_bit(0, $p2);
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(536, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i5 := atomic_dec_and_test($p4);
    call {:si_unique_call 1274} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i3, 0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} set_bit(5, $p8);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} md_wakeup_thread($p10);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const handle_failed_stripe: ref;

axiom handle_failed_stripe == $sub.ref(0, 502980);

procedure handle_failed_stripe($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);



const handle_failed_sync: ref;

axiom handle_failed_sync == $sub.ref(0, 504012);

procedure handle_failed_sync($p0: ref, $p1: ref, $p2: ref);



const handle_stripe_clean_event: ref;

axiom handle_stripe_clean_event == $sub.ref(0, 505044);

procedure handle_stripe_clean_event($p0: ref, $p1: ref, $i2: i32, $p3: ref);



const handle_stripe_fill: ref;

axiom handle_stripe_fill == $sub.ref(0, 506076);

procedure handle_stripe_fill($p0: ref, $p1: ref, $i2: i32);



const handle_stripe_dirtying: ref;

axiom handle_stripe_dirtying == $sub.ref(0, 507108);

procedure handle_stripe_dirtying($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const handle_parity_checks6: ref;

axiom handle_parity_checks6 == $sub.ref(0, 508140);

procedure handle_parity_checks6($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const handle_parity_checks5: ref;

axiom handle_parity_checks5 == $sub.ref(0, 509172);

procedure handle_parity_checks5($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const md_done_sync: ref;

axiom md_done_sync == $sub.ref(0, 510204);

procedure md_done_sync($p0: ref, $i1: i32, $i2: i32);



const get_active_stripe: ref;

axiom get_active_stripe == $sub.ref(0, 511236);

procedure get_active_stripe($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.0, $M.2, $CurrAddr, assertsPassed, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation get_active_stripe($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i1;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p127: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p76: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1280} {:cexpr "get_active_stripe:arg:sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 1281} {:cexpr "get_active_stripe:arg:previous"} boogie_si_record_i32($i2);
    call {:si_unique_call 1282} {:cexpr "get_active_stripe:arg:noblock"} boogie_si_record_i32($i3);
    call {:si_unique_call 1283} {:cexpr "get_active_stripe:arg:noquiesce"} boogie_si_record_i32($i4);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i8 := stripe_hash_locks_hash($i1);
    call {:si_unique_call 1285} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, .str.2);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, .str.49);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p11, .str.1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p12, .str.50);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.10, $p14);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 661);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p14, $i17);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p18, 0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.11, $p19);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1287} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i8);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 72));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} ldv_spin_lock_irq_100($p28);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $i73, $i74, $p75, $i77, $i78, $p79, $p80, $p81, $i82, $p83, $i84, $i85, $p86, $i87, $p88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $i101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p121, $i122, $p123, $p124, $p125, $p126, $p128, $i129, $i130, $p131, $p132, $i133, $i134, $p135, $i136, $i137, $p138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $p163, $p164, $p165, $p166, $p167, $p168, $p127, $i169, $i170, $p171 := get_active_stripe_loop_$bb4($p0, $i1, $i2, $i3, $i4, $p6, $p7, $i8, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $i73, $i74, $p75, $i77, $i78, $p79, $p80, $p81, $i82, $p83, $i84, $i85, $p86, $i87, $p88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $i101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p121, $i122, $p123, $p124, $p125, $p126, $p128, $i129, $i130, $p131, $p132, $i133, $i134, $p135, $i136, $i137, $p138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $p163, $p164, $p165, $p166, $p167, $p168, $p127, $i169, $i170, $p171);
    goto $bb4_last;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i4, 0);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} INIT_LIST_HEAD($p33);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i36 := prepare_to_wait_event($p35, $p6, 2);
    call {:si_unique_call 1293} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i4, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i41 := $or.i1($i39, $i40);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53 := get_active_stripe_loop_$bb15($p0, $p6, $i8, $p35, $p37, $i40, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53);
    goto $bb15_last;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i8);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 72));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_spin_unlock_irq_103($p45);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} schedule();
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i8);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 72));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} ldv_spin_lock_irq_100($p49);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i50 := prepare_to_wait_event($p35, $p6, 2);
    call {:si_unique_call 1299} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p37);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i53 := $or.i1($i52, $i40);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19_dummy;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} finish_wait($p54, $p6);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i2);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i57, $i59);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p64 := __find_stripe($p0, $i1, $i63);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i129 := atomic_add_unless($p128, 1, 0);
    call {:si_unique_call 1301} {:cexpr "tmp___13"} boogie_si_record_i32($i129);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p127 := $p64;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p127);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i169, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p171 := $p127;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p76 := $p171;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i8);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p173, $mul.ref($i174, 72));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv_spin_unlock_irq_103($p175);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $r := $p76;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb75_dummy;

  $bb57:
    assume $i130 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_spin_lock_101($p131);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i133 := atomic_read($p132);
    call {:si_unique_call 1323} {:cexpr "tmp___12"} boogie_si_record_i32($i133);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} atomic_inc($p167);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_spin_unlock_102($p168);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i134 == 1;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i136 := constant_test_bit(1, $p135);
    call {:si_unique_call 1325} {:cexpr "tmp___7"} boogie_si_record_i32($i136);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $i140 := list_empty($p139);
    call {:si_unique_call 1328} {:cexpr "tmp___8"} boogie_si_record_i32($i140);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i32($i141);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i142);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 1330} {:cexpr "tmp___9"} boogie_si_record_i64($i144);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} list_del_init($p153);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i157 == 1;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i162 := $sub.i32($i161, 1);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i162);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p166, $0.ref);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i145 == 1;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p64, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i147 := constant_test_bit(10, $p146);
    call {:si_unique_call 1332} {:cexpr "tmp___10"} boogie_si_record_i32($i147);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i149 := $zext.i1.i32($i148);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i149);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i151 := ldv__builtin_expect($i150, 0);
    call {:si_unique_call 1334} {:cexpr "tmp___11"} boogie_si_record_i64($i151);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i152 == 1;
    call {:si_unique_call 1335} devirtbounce(0, .str.1, 695, 12);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb61:
    assume $i137 == 1;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} atomic_inc($p138);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $p71 := $p64;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i3, 0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p71);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} init_stripe($p71, $i1, $i2);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} atomic_inc($p126);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p127 := $p71;
    goto $bb56;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i78 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, 1);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i8);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p81, $mul.ref($i82, 16));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i84 := list_empty($p83);
    call {:si_unique_call 1305} {:cexpr "tmp___2"} boogie_si_record_i32($i84);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} INIT_LIST_HEAD($p96);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call $p100, $i101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p121, $i122, $p123 := get_active_stripe_loop_$bb44($p0, $p7, $i8, $p98, $p99, $p100, $i101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $p117, $i118, $p119, $p120, $p121, $i122, $p123);
    goto $bb44_last;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i101 := prepare_to_wait_event($p100, $p7, 2);
    call {:si_unique_call 1312} {:cexpr "tmp___4"} boogie_si_record_i64($i101);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i8);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p103, $mul.ref($i104, 16));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i106 := list_empty($p105);
    call {:si_unique_call 1314} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i8);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p117, $mul.ref($i118, 72));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_spin_unlock_irq_103($p119);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} schedule();
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i8);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p121, $mul.ref($i122, 72));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_spin_lock_irq_100($p123);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174_dummy;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i107 == 1;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i108 := atomic_read($p98);
    call {:si_unique_call 1316} {:cexpr "tmp___6"} boogie_si_record_i32($i108);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i111 := $mul.i32($i110, 3);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i112 := $sdiv.i32($i111, 4);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i108, $i112);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  $bb49:
    assume !($i113 == 1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p99);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} finish_wait($p124, $p7);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb48;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i87 := atomic_read($p86);
    call {:si_unique_call 1309} {:cexpr "tmp___3"} boogie_si_record_i32($i87);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i90 := $mul.i32($i89, 3);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i91 := $sdiv.i32($i90, 4);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i87, $i91);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i92 == 1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb37;

  $bb25:
    assume $i72 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p71);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p75 := $p71;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb27;

  $bb28:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p76 := $p75;
    goto $bb30;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p70 := get_free_stripe($p0, $i8);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p71 := $p70;
    goto $bb24;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb6;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __dynamic_pr_debug.ref.ref.i64($p5, .str.50, $i1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6174_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6140;

  $bb75_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_6015;
}



const stripe_set_idx: ref;

axiom stripe_set_idx == $sub.ref(0, 512268);

procedure stripe_set_idx($i0: i64, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.12, $M.0, $CurrAddr;



implementation stripe_set_idx($i0: i64, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i19: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var vslice_dummy_var_79: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1340} {:cexpr "stripe_set_idx:arg:stripe"} boogie_si_record_i64($i0);
    call {:si_unique_call 1341} {:cexpr "stripe_set_idx:arg:previous"} boogie_si_record_i32($i2);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i12 := $urem.i64($i0, $i11);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 1342} {:cexpr "_res"} boogie_si_record_i32($i13);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i64($i0, $i14);
    call {:si_unique_call 1343} {:cexpr "stripe"} boogie_si_record_i64($i15);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i19, $i23);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i26 := $mul.i64($i15, $i25);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i8);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i26, $i27);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i13);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i28, $i29);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_79 := raid5_compute_sector($p1, $i30, $i2, $p4, $p3);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const schedule_reconstruction: ref;

axiom schedule_reconstruction == $sub.ref(0, 513300);

procedure schedule_reconstruction($p0: ref, $p1: ref, $i2: i32, $i3: i32);



const handle_stripe_expansion: ref;

axiom handle_stripe_expansion == $sub.ref(0, 514332);

procedure handle_stripe_expansion($p0: ref, $p1: ref);



const md_wait_for_blocked_rdev: ref;

axiom md_wait_for_blocked_rdev == $sub.ref(0, 515364);

procedure md_wait_for_blocked_rdev($p0: ref, $p1: ref);



const rdev_set_badblocks: ref;

axiom rdev_set_badblocks == $sub.ref(0, 516396);

procedure rdev_set_badblocks($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32);



const md_error: ref;

axiom md_error == $sub.ref(0, 517428);

procedure md_error($p0: ref, $p1: ref);



const rdev_clear_badblocks: ref;

axiom rdev_clear_badblocks == $sub.ref(0, 518460);

procedure rdev_clear_badblocks($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32);



const raid_run_ops: ref;

axiom raid_run_ops == $sub.ref(0, 519492);

procedure raid_run_ops($p0: ref, $i1: i64);



const ops_run_io: ref;

axiom ops_run_io == $sub.ref(0, 520524);

procedure ops_run_io($p0: ref, $p1: ref);



const return_io: ref;

axiom return_io == $sub.ref(0, 521556);

procedure return_io($p0: ref);



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 522588);

procedure clear_bit_unlock($i0: i64, $p1: ref);



const bdev_get_queue: ref;

axiom bdev_get_queue == $sub.ref(0, 523620);

procedure bdev_get_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdev_get_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1744)), $mul.ref(1664, 1));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const trace_block_bio_complete: ref;

axiom trace_block_bio_complete == $sub.ref(0, 524652);

procedure trace_block_bio_complete($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $M.29, $CurrAddr, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation trace_block_bio_complete($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} {:cexpr "trace_block_bio_complete:arg:error___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i3 := static_key_false($add.ref($add.ref(__tracepoint_block_bio_complete, $mul.ref(0, 56)), $mul.ref(8, 1)));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1347} {:cexpr "tmp___1"} boogie_si_record_i8($i4);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} rcu_read_lock_sched_notrace();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1358} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} rcu_read_unlock_sched_notrace();
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1(1);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i29 := rcu_read_lock_sched_held();
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    call {:si_unique_call 1360} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} lockdep_rcu_suspicious(.str.99, 320, .str.32);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb22;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} rcu_read_lock_sched_notrace();
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $add.ref($add.ref(__tracepoint_block_bio_complete, $mul.ref(0, 56)), $mul.ref(48, 1)));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i7 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1350} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p6);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} rcu_read_unlock_sched_notrace();
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    goto $bb14;

  $bb14:
    call $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24 := trace_block_bio_complete_loop_$bb14($p0, $p1, $i2, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24);
    goto $bb14_last;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p16);
    call {:si_unique_call 1354} devirtbounce.12($p19, $p18, $p0, $p1, $i2);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p14, $mul.ref(1, 16));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p20;
    goto $bb15_dummy;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i10 := rcu_read_lock_sched_held();
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 1352} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} lockdep_rcu_suspicious(.str.99, 320, .str.32);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;
}



const bio_endio: ref;

axiom bio_endio == $sub.ref(0, 525684);

procedure bio_endio($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bio_endio($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} {:cexpr "bio_endio:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    return;
}



const static_key_false: ref;

axiom static_key_false == $sub.ref(0, 526716);

procedure static_key_false($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation static_key_false($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i1 := arch_static_branch($p0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rcu_read_lock_sched_notrace: ref;

axiom rcu_read_lock_sched_notrace == $sub.ref(0, 527748);

procedure rcu_read_lock_sched_notrace();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation rcu_read_lock_sched_notrace()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} __preempt_count_add(1);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 1367} devirtbounce.1(0);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 528780);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1368} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_sched_held: ref;

axiom rcu_read_lock_sched_held == $sub.ref(0, 529812);

procedure rcu_read_lock_sched_held() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.2, $M.29, $M.18, $M.17, $M.19, $M.49, assertsPassed, $M.1, $CurrAddr, $M.21, $M.23, $M.22;



implementation rcu_read_lock_sched_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i21: i32;
  var $i18: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i3 := rcu_is_watching();
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i8 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1375} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, debug_locks);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i19 := preempt_count();
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 1379} {:cexpr "tmp___4"} boogie_si_record_i32($i19);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i22 := arch_local_save_flags();
    call {:si_unique_call 1381} {:cexpr "_flags"} boogie_si_record_i64($i22);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i23 := arch_irqs_disabled_flags($i22);
    call {:si_unique_call 1383} {:cexpr "tmp___5"} boogie_si_record_i32($i23);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i2 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb28;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb25;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb22;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i15 := lock_is_held(rcu_sched_lock_map);
    call {:si_unique_call 1377} {:cexpr "lockdep_opinion"} boogie_si_record_i32($i15);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb19;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 530844);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_unlock_sched_notrace: ref;

axiom rcu_read_unlock_sched_notrace == $sub.ref(0, 531876);

procedure rcu_read_unlock_sched_notrace();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation rcu_read_unlock_sched_notrace()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} devirtbounce.1(0);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} __preempt_count_sub(1);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 532908);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 1396} devirtbounce.14(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 1395} devirtbounce.13(0, __preempt_count, __preempt_count);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 1394} devirtbounce.13(0, __preempt_count, __preempt_count);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 533940);

procedure __bad_percpu_size();



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 534972);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1402} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 536004);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1403} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1404} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 537036);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1405} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 538068);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.2, $M.29, $M.18, $M.17, $M.19, $M.49, assertsPassed, $M.1, $CurrAddr, $M.21, $M.23, $M.22;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1407} $i2 := devirtbounce.11(0, __preempt_count);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    call {:si_unique_call 1408} {:cexpr "pfo_ret__"} boogie_si_record_i32($i2);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, 2147483647);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 539100);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(0, 1);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i6 == 1);
    call {:si_unique_call 1422} devirtbounce.14(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i6 == 1;
    call {:si_unique_call 1421} devirtbounce.13(0, __preempt_count, __preempt_count);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i5 == 1;
    call {:si_unique_call 1420} devirtbounce.13(0, __preempt_count, __preempt_count);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const arch_static_branch: ref;

axiom arch_static_branch == $sub.ref(0, 540132);

procedure arch_static_branch($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation arch_static_branch($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} devirtbounce.1(0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 541164);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1429} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 542196);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.29;



implementation rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 543228);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 544260);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const is_badblock: ref;

axiom is_badblock == $sub.ref(0, 545292);

procedure is_badblock($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27;



implementation is_badblock($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "is_badblock:arg:s"} boogie_si_record_i64($i1);
    call {:si_unique_call 1435} {:cexpr "is_badblock:arg:sectors"} boogie_si_record_i32($i2);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1437} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(656, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i17 := md_is_badblock($p13, $i16, $i2, $p3, $p4);
    call {:si_unique_call 1439} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $i17;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.27, $p3);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i19, $i21);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p3, $i22);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const md_sync_acct: ref;

axiom md_sync_acct == $sub.ref(0, 546324);

procedure md_sync_acct($p0: ref, $i1: i64);



const bio_reset: ref;

axiom bio_reset == $sub.ref(0, 547356);

procedure bio_reset($p0: ref);



const raid5_end_write_request: ref;

axiom raid5_end_write_request == $sub.ref(0, 548388);

procedure raid5_end_write_request($p0: ref, $i1: i32);



const raid5_end_read_request: ref;

axiom raid5_end_read_request == $sub.ref(0, 549420);

procedure raid5_end_read_request($p0: ref, $i1: i32);



const use_new_offset: ref;

axiom use_new_offset == $sub.ref(0, 550452);

procedure use_new_offset($p0: ref, $p1: ref) returns ($r: i32);



const disk_devt: ref;

axiom disk_devt == $sub.ref(0, 551484);

procedure disk_devt($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation disk_devt($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(1248, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const trace_block_bio_remap: ref;

axiom trace_block_bio_remap == $sub.ref(0, 552516);

procedure trace_block_bio_remap($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $M.29, $CurrAddr, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation trace_block_bio_remap($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} {:cexpr "trace_block_bio_remap:arg:dev"} boogie_si_record_i32($i2);
    call {:si_unique_call 1441} {:cexpr "trace_block_bio_remap:arg:from"} boogie_si_record_i64($i3);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i4 := static_key_false($add.ref($add.ref(__tracepoint_block_bio_remap, $mul.ref(0, 56)), $mul.ref(8, 1)));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1443} {:cexpr "tmp___1"} boogie_si_record_i8($i5);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} rcu_read_lock_sched_notrace();
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i27 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1454} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} rcu_read_unlock_sched_notrace();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1(1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i30 := rcu_read_lock_sched_held();
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    call {:si_unique_call 1456} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i31 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} lockdep_rcu_suspicious(.str.99, 622, .str.32);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb22;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} rcu_read_lock_sched_notrace();
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $add.ref($add.ref(__tracepoint_block_bio_remap, $mul.ref(0, 56)), $mul.ref(48, 1)));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i8 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1446} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} rcu_read_unlock_sched_notrace();
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p15 := $p7;
    goto $bb14;

  $bb14:
    call $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25 := trace_block_bio_remap_loop_$bb14($p0, $p1, $i2, $i3, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25);
    goto $bb14_last;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p17);
    call {:si_unique_call 1450} devirtbounce.15($p20, $p19, $p0, $p1, $i2, $i3);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p15, $mul.ref(1, 16));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p21;
    goto $bb15_dummy;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i11 := rcu_read_lock_sched_held();
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    call {:si_unique_call 1448} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} lockdep_rcu_suspicious(.str.99, 622, .str.32);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6599;
}



const generic_make_request: ref;

axiom generic_make_request == $sub.ref(0, 553548);

procedure generic_make_request($p0: ref);
  free requires assertsPassed;



implementation generic_make_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    return;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 554580);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 555612);

procedure atomic_add($i0: i32, $p1: ref);



const ldv_linux_usb_dev_atomic_add: ref;

axiom ldv_linux_usb_dev_atomic_add == $sub.ref(0, 556644);

procedure ldv_linux_usb_dev_atomic_add($i0: i32, $p1: ref);



const md_is_badblock: ref;

axiom md_is_badblock == $sub.ref(0, 557676);

procedure md_is_badblock($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation md_is_badblock($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} {:cexpr "md_is_badblock:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1460} {:cexpr "md_is_badblock:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1461} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1462} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_unlock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_unlock == $sub.ref(0, 558708);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i0 := $M.29;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i2);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i3 := $M.29;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $M.29 := $i4;
    call {:si_unique_call 1464} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i4);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_update_lock__more_unlocks: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__more_unlocks == $sub.ref(0, 559740);

procedure ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__more_unlocks:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} __VERIFIER_error();
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_lock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_lock == $sub.ref(0, 560772);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_lock()
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i0 := $M.29;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.29 := $i1;
    call {:si_unique_call 1467} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 561804);

procedure __bad_size_call_parameter();



const ops_run_biofill: ref;

axiom ops_run_biofill == $sub.ref(0, 562836);

procedure ops_run_biofill($p0: ref);



const ops_run_compute5: ref;

axiom ops_run_compute5 == $sub.ref(0, 563868);

procedure ops_run_compute5($p0: ref, $p1: ref) returns ($r: ref);



const ops_run_compute6_1: ref;

axiom ops_run_compute6_1 == $sub.ref(0, 564900);

procedure ops_run_compute6_1($p0: ref, $p1: ref) returns ($r: ref);



const ops_run_compute6_2: ref;

axiom ops_run_compute6_2 == $sub.ref(0, 565932);

procedure ops_run_compute6_2($p0: ref, $p1: ref) returns ($r: ref);



const async_tx_ack: ref;

axiom async_tx_ack == $sub.ref(0, 566964);

procedure async_tx_ack($p0: ref);



const ops_run_prexor: ref;

axiom ops_run_prexor == $sub.ref(0, 567996);

procedure ops_run_prexor($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const ops_run_biodrain: ref;

axiom ops_run_biodrain == $sub.ref(0, 569028);

procedure ops_run_biodrain($p0: ref, $p1: ref) returns ($r: ref);



const ops_run_reconstruct5: ref;

axiom ops_run_reconstruct5 == $sub.ref(0, 570060);

procedure ops_run_reconstruct5($p0: ref, $p1: ref, $p2: ref);



const ops_run_reconstruct6: ref;

axiom ops_run_reconstruct6 == $sub.ref(0, 571092);

procedure ops_run_reconstruct6($p0: ref, $p1: ref, $p2: ref);



const ops_run_check_p: ref;

axiom ops_run_check_p == $sub.ref(0, 572124);

procedure ops_run_check_p($p0: ref, $p1: ref);



const ops_run_check_pq: ref;

axiom ops_run_check_pq == $sub.ref(0, 573156);

procedure ops_run_check_pq($p0: ref, $p1: ref, $i2: i32);



const set_syndrome_sources: ref;

axiom set_syndrome_sources == $sub.ref(0, 574188);

procedure set_syndrome_sources($p0: ref, $p1: ref) returns ($r: i32);



const to_addr_conv: ref;

axiom to_addr_conv == $sub.ref(0, 575220);

procedure to_addr_conv($p0: ref, $p1: ref) returns ($r: ref);



const ops_complete_check: ref;

axiom ops_complete_check == $sub.ref(0, 576252);

procedure ops_complete_check($p0: ref);



const init_async_submit: ref;

axiom init_async_submit == $sub.ref(0, 577284);

procedure init_async_submit($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref);



const async_syndrome_val: ref;

axiom async_syndrome_val == $sub.ref(0, 578316);

procedure async_syndrome_val($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref, $p5: ref, $p6: ref) returns ($r: ref);



const raid6_d0: ref;

axiom raid6_d0 == $sub.ref(0, 579348);

procedure raid6_d0($p0: ref) returns ($r: i32);



const raid6_idx_to_slot: ref;

axiom raid6_idx_to_slot == $sub.ref(0, 580380);

procedure raid6_idx_to_slot($i0: i32, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);



const raid6_next_disk: ref;

axiom raid6_next_disk == $sub.ref(0, 581412);

procedure raid6_next_disk($i0: i32, $i1: i32) returns ($r: i32);



const async_xor_val: ref;

axiom async_xor_val == $sub.ref(0, 582444);

procedure async_xor_val($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref);



const async_trigger_callback: ref;

axiom async_trigger_callback == $sub.ref(0, 583476);

procedure async_trigger_callback($p0: ref) returns ($r: ref);



const ops_complete_reconstruct: ref;

axiom ops_complete_reconstruct == $sub.ref(0, 584508);

procedure ops_complete_reconstruct($p0: ref);



const async_gen_syndrome: ref;

axiom async_gen_syndrome == $sub.ref(0, 585540);

procedure async_gen_syndrome($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref) returns ($r: ref);



const async_memcpy: ref;

axiom async_memcpy == $sub.ref(0, 586572);

procedure async_memcpy($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64, $p5: ref) returns ($r: ref);



const async_xor: ref;

axiom async_xor == $sub.ref(0, 587604);

procedure async_xor($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64, $p5: ref) returns ($r: ref);



const ldv_spin_lock_irq_121: ref;

axiom ldv_spin_lock_irq_121 == $sub.ref(0, 588636);

procedure ldv_spin_lock_irq_121($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_spin_lock_irq_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_linux_kernel_locking_spinlock_spin_lock_stripe_lock_of_stripe_head();
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} spin_lock_irq($p0);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_122: ref;

axiom ldv_spin_unlock_irq_122 == $sub.ref(0, 589668);

procedure ldv_spin_unlock_irq_122($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_spin_unlock_irq_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_linux_kernel_locking_spinlock_spin_unlock_stripe_lock_of_stripe_head();
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} spin_unlock_irq($p0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const async_copy_data: ref;

axiom async_copy_data == $sub.ref(0, 590700);

procedure async_copy_data($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: ref);



const r5_next_bio: ref;

axiom r5_next_bio == $sub.ref(0, 591732);

procedure r5_next_bio($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation r5_next_bio($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} {:cexpr "r5_next_bio:arg:sector"} boogie_si_record_i64($i1);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 9);
    call {:si_unique_call 1473} {:cexpr "sectors"} boogie_si_record_i32($i5);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i5);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i8, $i9);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i1, 8);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i10, $i11);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 592764);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const bio_advance_iter: ref;

axiom bio_advance_iter == $sub.ref(0, 593796);

procedure bio_advance_iter($p0: ref, $p1: ref, $i2: i32);



const bvec_iter_advance: ref;

axiom bvec_iter_advance == $sub.ref(0, 594828);

procedure bvec_iter_advance($p0: ref, $p1: ref, $i2: i32);



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 595860);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);



const ldv_linux_kernel_locking_spinlock_spin_unlock_stripe_lock_of_stripe_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_stripe_lock_of_stripe_head == $sub.ref(0, 596892);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_stripe_lock_of_stripe_head();
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_stripe_lock_of_stripe_head()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i3 := $M.38;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} ldv_assume($i5);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1476} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stripe_lock_of_stripe_head"} boogie_si_record_i32(1);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_stripe_lock_of_stripe_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_stripe_lock_of_stripe_head == $sub.ref(0, 597924);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_stripe_lock_of_stripe_head();
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_stripe_lock_of_stripe_head()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i3 := $M.38;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} ldv_assume($i5);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1479} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stripe_lock_of_stripe_head"} boogie_si_record_i32(2);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const ops_complete_prexor: ref;

axiom ops_complete_prexor == $sub.ref(0, 598956);

procedure ops_complete_prexor($p0: ref);



const ops_complete_compute: ref;

axiom ops_complete_compute == $sub.ref(0, 599988);

procedure ops_complete_compute($p0: ref);



const async_raid6_datap_recov: ref;

axiom async_raid6_datap_recov == $sub.ref(0, 601020);

procedure async_raid6_datap_recov($i0: i32, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);



const async_raid6_2data_recov: ref;

axiom async_raid6_2data_recov == $sub.ref(0, 602052);

procedure async_raid6_2data_recov($i0: i32, $i1: i64, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: ref);



const mark_target_uptodate: ref;

axiom mark_target_uptodate == $sub.ref(0, 603084);

procedure mark_target_uptodate($p0: ref, $i1: i32);



const ops_complete_biofill: ref;

axiom ops_complete_biofill == $sub.ref(0, 604116);

procedure ops_complete_biofill($p0: ref);



const raid5_dec_bi_active_stripes: ref;

axiom raid5_dec_bi_active_stripes == $sub.ref(0, 605148);

procedure raid5_dec_bi_active_stripes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation raid5_dec_bi_active_stripes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i3 := atomic_sub_return(1, $p2);
    call {:si_unique_call 1481} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 65535);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const compute_blocknr: ref;

axiom compute_blocknr == $sub.ref(0, 606180);

procedure compute_blocknr($p0: ref, $i1: i32, $i2: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.12, $M.0, $CurrAddr;



implementation compute_blocknr($p0: ref, $i1: i32, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i17: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i23: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i58: i32;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i95: i32;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i109: i32;
  var $i121: i32;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i127: i32;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $i153: i16;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i102: i32;
  var $i45: i32;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i35: i64;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p4 := $alloc($mul.ref(576, $zext.i32.i64(1)));
    call {:si_unique_call 1484} {:cexpr "compute_blocknr:arg:i"} boogie_si_record_i32($i1);
    call {:si_unique_call 1485} {:cexpr "compute_blocknr:arg:previous"} boogie_si_record_i32($i2);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1486} {:cexpr "raid_disks"} boogie_si_record_i32($i8);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    call {:si_unique_call 1487} {:cexpr "data_disks"} boogie_si_record_i32($i11);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1488} {:cexpr "new_sector"} boogie_si_record_i64($i13);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i2, 0);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} {:cexpr "compute_blocknr:arg:dd_idx"} boogie_si_record_i32($i1);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i27 := $urem.i64($i13, $i26);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 1490} {:cexpr "_res"} boogie_si_record_i32($i28);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i17);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i64($i13, $i29);
    call {:si_unique_call 1491} {:cexpr "new_sector"} boogie_si_record_i64($i30);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i1, $i33);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 4);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 5);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 6);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i45 := $i1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i11);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i159 := $mul.i64($i30, $i158);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i45);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i159, $i160);
    call {:si_unique_call 1492} {:cexpr "chunk_number"} boogie_si_record_i64($i161);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i17);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i163 := $mul.i64($i161, $i162);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i28);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i163, $i164);
    call {:si_unique_call 1493} {:cexpr "r_sector"} boogie_si_record_i64($i165);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i166 := raid5_compute_sector($p6, $i165, $i2, $p3, $p4);
    call {:si_unique_call 1495} {:cexpr "check"} boogie_si_record_i64($i166);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i168 := $load.i64($M.0, $p167);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i166, $i168);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb146;

  $bb146:
    assume !($i169 == 1);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.12, $p3);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, $i1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i171 == 1);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p4);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(16, 4));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.40, $p173);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p175, $mul.ref(16, 4));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i174, $i177);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i35 := $i165;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p181 := mdname($p180);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_80 := printk.ref.ref(.str.57, $p181);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb9;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb145;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i73 := $sext.i16.i32($i72);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i1, $i73);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i23, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i23, 1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i23, 8);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i23, 9);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i23, 2);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i23, 3);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i23, 4);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i23, 5);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i23, 10);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i23, 16);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i23, 17);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i23, 18);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i23, 19);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i23, 20);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    call {:si_unique_call 1503} devirtbounce(0, .str.1, 2515, 12);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb113:
    assume $i88 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 1502} {:cexpr "i"} boogie_si_record_i32($i157);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i102 := $i157;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i45 := $i102;
    goto $bb24;

  $bb109:
    assume $i87 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.0, $p145);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i147 := $sext.i16.i32($i146);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i1, $i147);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i151 := $i1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i153 := $load.i16($M.0, $p152);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i154 := $sext.i16.i32($i153);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i155 := $xor.i32($i154, $sub.i32(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i151, $i155);
    call {:si_unique_call 1514} {:cexpr "i"} boogie_si_record_i32($i156);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i102 := $i156;
    goto $bb124;

  $bb140:
    assume $i148 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i11, 1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i1, $i149);
    call {:si_unique_call 1513} {:cexpr "i"} boogie_si_record_i32($i150);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb142;

  $bb105:
    assume $i86 == 1;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb101:
    assume $i85 == 1;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i141 := $sext.i16.i32($i140);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i142 := $sgt.i32($i1, $i141);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i144 := $i1;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i102 := $i144;
    goto $bb124;

  $bb137:
    assume $i142 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32($i1, 1);
    call {:si_unique_call 1512} {:cexpr "i"} boogie_si_record_i32($i143);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb139;

  $bb97:
    assume $i84 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb93:
    assume $i83 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i124 := $sext.i16.i32($i123);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i125 == 1);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i130 := $sext.i16.i32($i129);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i1, $i130);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i133 := $i1;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.0, $p134);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i136 := $sext.i16.i32($i135);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i137 := $xor.i32($i136, $sub.i32(0, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i133, $i137);
    call {:si_unique_call 1511} {:cexpr "i"} boogie_si_record_i32($i138);
    assume {:verifier.code 0} true;
    $i127 := $i138;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i102 := $i127;
    goto $bb124;

  $bb134:
    assume $i131 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i1, $i8);
    call {:si_unique_call 1510} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb136;

  $bb131:
    assume $i125 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32($i1, 1);
    call {:si_unique_call 1509} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb133;

  $bb89:
    assume $i82 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i102 := $i1;
    goto $bb124;

  $bb85:
    assume $i81 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i1, $sub.i32(0, 2));
    call {:si_unique_call 1501} {:cexpr "i"} boogie_si_record_i32($i121);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i102 := $i121;
    goto $bb124;

  $bb81:
    assume $i80 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i105 := $sext.i16.i32($i104);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i105, $i106);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i107 == 1);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.0, $p110);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i112 := $sext.i16.i32($i111);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i1, $i112);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i115 := $i1;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.0, $p116);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i118 := $sext.i16.i32($i117);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($sub.i32(0, 2), $i118);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i115, $i119);
    call {:si_unique_call 1508} {:cexpr "i"} boogie_si_record_i32($i120);
    assume {:verifier.code 0} true;
    $i109 := $i120;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i102 := $i109;
    goto $bb124;

  $bb128:
    assume $i113 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i1, $i8);
    call {:si_unique_call 1507} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i115 := $i114;
    goto $bb130;

  $bb125:
    assume $i107 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i108 := $sub.i32($i1, 1);
    call {:si_unique_call 1506} {:cexpr "i"} boogie_si_record_i32($i108);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb127;

  $bb77:
    assume $i79 == 1;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb73:
    assume $i78 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i91 := $sext.i16.i32($i90);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i91, $i92);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i93 == 1);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i98 := $sext.i16.i32($i97);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i1, $i98);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i101 := $i1;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i95 := $i101;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i102 := $i95;
    goto $bb124;

  $bb121:
    assume $i99 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i1, $sub.i32(0, 2));
    call {:si_unique_call 1505} {:cexpr "i"} boogie_si_record_i32($i100);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i101 := $i100;
    goto $bb123;

  $bb118:
    assume $i93 == 1;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i1, 1);
    call {:si_unique_call 1504} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb120;

  $bb69:
    assume $i77 == 1;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb61:
    assume $i75 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb58:
    assume $i74 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb9;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i23, 0);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i23, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i23, 2);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i23, 3);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i23, 4);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i23, 5);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    call {:si_unique_call 1497} devirtbounce(0, .str.1, 2457, 12);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i58 := $i1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i45 := $i58;
    goto $bb24;

  $bb41:
    assume $i50 == 1;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 1496} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i58 := $i70;
    goto $bb53;

  $bb37:
    assume $i49 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i61 := $sext.i16.i32($i60);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i1, $i61);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i68 := $xor.i32($i67, $sub.i32(0, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i64, $i68);
    call {:si_unique_call 1500} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i58 := $i69;
    goto $bb53;

  $bb54:
    assume $i62 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i1, $i8);
    call {:si_unique_call 1499} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb56;

  $bb33:
    assume $i48 == 1;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i47 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i54 := $sext.i16.i32($i53);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i1, $i54);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb53;

  $bb50:
    assume $i55 == 1;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i1, 1);
    call {:si_unique_call 1498} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb52;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := $i1;
    goto $bb24;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb9;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const raid5_compute_sector: ref;

axiom raid5_compute_sector == $sub.ref(0, 607212);

procedure raid5_compute_sector($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.12, $M.0;



implementation raid5_compute_sector($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i64)
{
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i14: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i20: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i62: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i64;
  var $i102: i64;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i111: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i127: i32;
  var $i132: i64;
  var $i133: i64;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i64;
  var $i144: i64;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i64;
  var $i156: i64;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i163: i32;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i179: i32;
  var $i184: i64;
  var $i185: i64;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i64;
  var $i198: i64;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i64;
  var $i208: i64;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i64;
  var $i217: i64;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i32;
  var $i227: i64;
  var $i228: i64;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i239: i64;
  var $i240: i1;
  var $i241: i16;
  var $p242: ref;
  var $i243: i16;
  var $p244: ref;
  var $i245: i16;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i64;
  var $i250: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} {:cexpr "raid5_compute_sector:arg:r_sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 1518} {:cexpr "raid5_compute_sector:arg:previous"} boogie_si_record_i32($i2);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i2, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i2, 0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    call {:si_unique_call 1519} {:cexpr "data_disks"} boogie_si_record_i32($i25);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i14);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i27 := $urem.i64($i1, $i26);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 1520} {:cexpr "_res"} boogie_si_record_i32($i28);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i14);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i64($i1, $i29);
    call {:si_unique_call 1521} {:cexpr "r_sector"} boogie_si_record_i64($i30);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i25);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i32 := $urem.i64($i30, $i31);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    call {:si_unique_call 1522} {:cexpr "_res___0"} boogie_si_record_i32($i33);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i25);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i35 := $udiv.i64($i30, $i34);
    call {:si_unique_call 1523} {:cexpr "stripe"} boogie_si_record_i64($i35);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i33);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 4);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 5);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 6);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := $sub.i32(0, 1), $sub.i32(0, 1), 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p4);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i14);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i248 := $mul.i64($i35, $i247);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i249 := $zext.i32.i64($i28);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i250 := $add.i64($i248, $i249);
    call {:si_unique_call 1563} {:cexpr "new_sector"} boogie_si_record_i64($i250);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $r := $i250;
    return;

  $bb146:
    assume $i240 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i32.i16($i45);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p242, $i241);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i16($i46);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p4, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p244, $i243);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i16($i47);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p4, $mul.ref(0, 576)), $mul.ref(68, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p246, $i245);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i8, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i8, 1);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i8, 2);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i8, 3);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i8, 4);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i8, 5);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i8, 8);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i8, 9);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i8, 10);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i8, 16);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i8, 17);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i8, 18);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i8, 19);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i8, 20);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    call {:si_unique_call 1560} devirtbounce(0, .str.1, 2397, 12);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb109:
    assume $i100 == 1;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.12, $p3);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i237 := $add.i32($i236, 1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i237);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i20, $sub.i32(0, 1));
    call {:si_unique_call 1559} {:cexpr "qd_idx"} boogie_si_record_i32($i238);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := 0, $i238, 0;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := $i116, $i117, $i118;
    goto $bb23;

  $bb105:
    assume $i99 == 1;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i226);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i228 := $urem.i64($i35, $i227);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i64.i32($i228);
    call {:si_unique_call 1557} {:cexpr "_res___15"} boogie_si_record_i32($i229);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i229, 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.12, $p3);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i230, $i231);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i234 := $srem.i32($i232, $i233);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i234);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i20, $sub.i32(0, 1));
    call {:si_unique_call 1558} {:cexpr "qd_idx"} boogie_si_record_i32($i235);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i229, $i235, 0;
    goto $bb120;

  $bb101:
    assume $i98 == 1;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i216 := $sext.i32.i64($i215);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i217 := $urem.i64($i35, $i216);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i64.i32($i217);
    call {:si_unique_call 1554} {:cexpr "_res___14"} boogie_si_record_i32($i218);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i219 := $sub.i32($i25, $i218);
    call {:si_unique_call 1555} {:cexpr "pd_idx"} boogie_si_record_i32($i219);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, 1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.12, $p3);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i220, $i221);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i223 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i224 := $srem.i32($i222, $i223);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i224);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i20, $sub.i32(0, 1));
    call {:si_unique_call 1556} {:cexpr "qd_idx"} boogie_si_record_i32($i225);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i219, $i225, 0;
    goto $bb120;

  $bb97:
    assume $i97 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i206);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i208 := $urem.i64($i35, $i207);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i64.i32($i208);
    call {:si_unique_call 1553} {:cexpr "_res___13"} boogie_si_record_i32($i209);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.12, $p3);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i211 := $sge.i32($i210, $i209);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i214 := $add.i32($i20, $sub.i32(0, 1));
    call {:si_unique_call 1562} {:cexpr "qd_idx"} boogie_si_record_i32($i214);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i209, $i214, 0;
    goto $bb120;

  $bb142:
    assume $i211 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.12, $p3);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i213);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb93:
    assume $i96 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i196);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i198 := $urem.i64($i35, $i197);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i64.i32($i198);
    call {:si_unique_call 1551} {:cexpr "_res___12"} boogie_si_record_i32($i199);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i200 := $sub.i32($i25, $i199);
    call {:si_unique_call 1552} {:cexpr "pd_idx"} boogie_si_record_i32($i200);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.12, $p3);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i202 := $sge.i32($i201, $i200);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i20, $sub.i32(0, 1));
    call {:si_unique_call 1561} {:cexpr "qd_idx"} boogie_si_record_i32($i205);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i200, $i205, 0;
    goto $bb120;

  $bb139:
    assume $i202 == 1;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.12, $p3);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i203, 1);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i204);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb89:
    assume $i95 == 1;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i20);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i185 := $urem.i64($i35, $i184);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i64.i32($i185);
    call {:si_unique_call 1548} {:cexpr "_res___11"} boogie_si_record_i32($i186);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i188 := $sub.i32($i187, $i186);
    call {:si_unique_call 1549} {:cexpr "pd_idx"} boogie_si_record_i32($i188);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i188, $i20);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, $sub.i32(0, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i191 := $srem.i32($i190, $i20);
    call {:si_unique_call 1550} {:cexpr "qd_idx"} boogie_si_record_i32($i191);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i188, 1);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.12, $p3);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i192, $i193);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i195 := $srem.i32($i194, $i20);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i195);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i188, $i191, 1;
    goto $bb120;

  $bb85:
    assume $i94 == 1;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i35, 1);
    call {:si_unique_call 1544} {:cexpr "stripe2"} boogie_si_record_i64($i168);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i20);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i170 := $urem.i64($i168, $i169);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i64.i32($i170);
    call {:si_unique_call 1545} {:cexpr "_res___10"} boogie_si_record_i32($i171);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32($i172, $i171);
    call {:si_unique_call 1546} {:cexpr "pd_idx"} boogie_si_record_i32($i173);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i174 := $add.i32($i173, 1);
    call {:si_unique_call 1547} {:cexpr "qd_idx"} boogie_si_record_i32($i174);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i173, $i175);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i176 == 1);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.12, $p3);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i181 := $sge.i32($i180, $i173);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i179 := $i174;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i173, $i179, 1;
    goto $bb120;

  $bb136:
    assume $i181 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.12, $p3);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i182, 2);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i183);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i176 == 1;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.12, $p3);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i177, 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i178);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i179 := 0;
    goto $bb135;

  $bb81:
    assume $i93 == 1;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i20);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i156 := $urem.i64($i35, $i155);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i64.i32($i156);
    call {:si_unique_call 1542} {:cexpr "_res___9"} boogie_si_record_i32($i157);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i157, 1);
    call {:si_unique_call 1543} {:cexpr "qd_idx"} boogie_si_record_i32($i158);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i157, $i159);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i160 == 1);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.12, $p3);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i165 := $sge.i32($i164, $i157);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i163 := $i158;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i157, $i163, 1;
    goto $bb120;

  $bb130:
    assume $i165 == 1;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.12, $p3);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i166, 2);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i167);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i160 == 1;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.12, $p3);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 1);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i162);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i163 := 0;
    goto $bb129;

  $bb77:
    assume $i92 == 1;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i25, 1);
    call {:si_unique_call 1541} {:cexpr "qd_idx"} boogie_si_record_i32($i154);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i25, $i154, 0;
    goto $bb120;

  $bb73:
    assume $i91 == 1;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.12, $p3);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i152, 2);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i153);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := 0, 1, 0;
    goto $bb120;

  $bb69:
    assume $i90 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i20);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i144 := $urem.i64($i35, $i143);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i64.i32($i144);
    call {:si_unique_call 1539} {:cexpr "_res___8"} boogie_si_record_i32($i145);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i145, 1);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i147 := $srem.i32($i146, $i20);
    call {:si_unique_call 1540} {:cexpr "qd_idx"} boogie_si_record_i32($i147);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i145, 2);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.12, $p3);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i148, $i149);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i151 := $srem.i32($i150, $i20);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i151);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i145, $i147, 0;
    goto $bb120;

  $bb65:
    assume $i89 == 1;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i20);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i133 := $urem.i64($i35, $i132);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i64.i32($i133);
    call {:si_unique_call 1536} {:cexpr "_res___7"} boogie_si_record_i32($i134);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i136 := $sub.i32($i135, $i134);
    call {:si_unique_call 1537} {:cexpr "pd_idx"} boogie_si_record_i32($i136);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i136, 1);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i138 := $srem.i32($i137, $i20);
    call {:si_unique_call 1538} {:cexpr "qd_idx"} boogie_si_record_i32($i138);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i136, 2);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.12, $p3);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i139, $i140);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i142 := $srem.i32($i141, $i20);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i142);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i136, $i138, 0;
    goto $bb120;

  $bb61:
    assume $i88 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i20);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i120 := $urem.i64($i35, $i119);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i64.i32($i120);
    call {:si_unique_call 1534} {:cexpr "_res___6"} boogie_si_record_i32($i121);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, 1);
    call {:si_unique_call 1535} {:cexpr "qd_idx"} boogie_si_record_i32($i122);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i121, $i123);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i124 == 1);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.12, $p3);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i129 := $sge.i32($i128, $i121);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i127 := $i122;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i121, $i127, 0;
    goto $bb120;

  $bb124:
    assume $i129 == 1;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.12, $p3);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 2);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i131);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i124 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.12, $p3);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i125, 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i126);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i127 := 0;
    goto $bb123;

  $bb57:
    assume $i87 == 1;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i20);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i102 := $urem.i64($i35, $i101);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    call {:si_unique_call 1531} {:cexpr "_res___5"} boogie_si_record_i32($i103);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, $i103);
    call {:si_unique_call 1532} {:cexpr "pd_idx"} boogie_si_record_i32($i105);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 1);
    call {:si_unique_call 1533} {:cexpr "qd_idx"} boogie_si_record_i32($i106);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i105, $i107);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i108 == 1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.12, $p3);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i113 := $sge.i32($i112, $i105);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i111 := $i106;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i105, $i111, 0;
    goto $bb120;

  $bb117:
    assume $i113 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.12, $p3);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, 2);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i115);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume $i108 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.12, $p3);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i110);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb116;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i8, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i8, 1);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i8, 2);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i8, 3);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i8, 4);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i8, 5);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    call {:si_unique_call 1530} devirtbounce(0, .str.1, 2280, 12);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb44:
    assume $i53 == 1;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i62 := $i25;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := $i62, $sub.i32(0, 1), 0;
    goto $bb23;

  $bb40:
    assume $i52 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.12, $p3);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 1);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i86);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb52;

  $bb36:
    assume $i51 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i20);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i79 := $urem.i64($i35, $i78);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    call {:si_unique_call 1529} {:cexpr "_res___4"} boogie_si_record_i32($i80);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.12, $p3);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i81, $i82);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i84 := $srem.i32($i83, $i20);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i84);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i62 := $i80;
    goto $bb52;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i20);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i71 := $urem.i64($i35, $i70);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    call {:si_unique_call 1527} {:cexpr "_res___3"} boogie_si_record_i32($i72);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i25, $i72);
    call {:si_unique_call 1528} {:cexpr "pd_idx"} boogie_si_record_i32($i73);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 1);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.12, $p3);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i74, $i75);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i77 := $srem.i32($i76, $i20);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i77);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i62 := $i73;
    goto $bb52;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i20);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i64 := $urem.i64($i35, $i63);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    call {:si_unique_call 1526} {:cexpr "_res___2"} boogie_si_record_i32($i65);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.12, $p3);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i67 := $sge.i32($i66, $i65);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i62 := $i65;
    goto $bb52;

  $bb53:
    assume $i67 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.12, $p3);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 1);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i69);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i20);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i55 := $urem.i64($i35, $i54);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 1524} {:cexpr "_res___1"} boogie_si_record_i32($i56);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i25, $i56);
    call {:si_unique_call 1525} {:cexpr "pd_idx"} boogie_si_record_i32($i57);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.12, $p3);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i59 := $sge.i32($i58, $i57);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i62 := $i57;
    goto $bb52;

  $bb49:
    assume $i59 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.12, $p3);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i61);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := $i25, $sub.i32(0, 1), 0;
    goto $bb23;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(636, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const async_tx_quiesce: ref;

axiom async_tx_quiesce == $sub.ref(0, 608244);

procedure async_tx_quiesce($p0: ref);



const stripe_hash_locks_hash: ref;

axiom stripe_hash_locks_hash == $sub.ref(0, 609276);

procedure stripe_hash_locks_hash($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation stripe_hash_locks_hash($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} {:cexpr "stripe_hash_locks_hash:arg:sect"} boogie_si_record_i64($i0);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 3);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 7);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 610308);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 611340);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 612372);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    return;
}



const __find_stripe: ref;

axiom __find_stripe == $sub.ref(0, 613404);

procedure __find_stripe($p0: ref, $i1: i64, $i2: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation __find_stripe($p0: ref, $i1: i64, $i2: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p30: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1570} {:cexpr "__find_stripe:arg:sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 1571} {:cexpr "__find_stripe:arg:generation"} boogie_si_record_i16($i2);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.51);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p7, .str.1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p8, .str.52);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.10, $p10);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 564);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p10, $i13);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p14, 0);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.11, $p15);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1573} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $p21 := stripe_hash($p0, $i1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, .str.2);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p51, .str.51);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p52, .str.1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p53, .str.53);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.10, $p55);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 568);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p55, $i58);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p59, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.11, $p60);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 1577} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p40 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $r := $p40;
    return;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} __dynamic_pr_debug.ref.ref.i64($p4, .str.53, $i1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p30 := $p27;
    goto $bb10;

  $bb10:
    call $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $p42, $p43, $i44, $i45, $p47, $i48, $i49, $p30 := __find_stripe_loop_$bb10($i1, $i2, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $p42, $p43, $i44, $i45, $p47, $i48, $i49, $p30);
    goto $bb10_last;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, $i1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p30 := $p47;
    goto $bb22_dummy;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p47 := $p43;
    goto $bb21;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p30, $mul.ref(0, 576)), $mul.ref(48, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i35);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i37 := $sext.i16.i32($i2);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, $i37);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p39 := $p30;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb14;

  $bb15:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p40 := $p39;
    goto $bb17;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p27 := $p23;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} __dynamic_pr_debug.ref.ref.i64($p3, .str.52, $i1);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;
}



const init_stripe: ref;

axiom init_stripe == $sub.ref(0, 614436);

procedure init_stripe($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.12, $CurrAddr, $M.2, $M.29, $M.18, $M.17, $M.19, $M.49, assertsPassed, $M.1, $M.21, $M.23, $M.22;



implementation init_stripe($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $i56: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i103: i1;
  var $i104: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $i66: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1580} {:cexpr "init_stripe:arg:sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 1581} {:cexpr "init_stripe:arg:previous"} boogie_si_record_i32($i2);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i7 := atomic_read($p6);
    call {:si_unique_call 1583} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1585} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i14 := constant_test_bit(1, $p13);
    call {:si_unique_call 1588} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1590} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $i20 := stripe_operations_active($p0);
    call {:si_unique_call 1593} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1595} {:cexpr "tmp___4"} boogie_si_record_i64($i24);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.2);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p27, .str.54);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, .str.1);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p29, .str.55);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.10, $p31);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 530);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p31, $i34);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p35, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.11, $p36);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 1598} {:cexpr "tmp___5"} boogie_si_record_i64($i40);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $p43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $p54, $i55, $p57, $i58, $i56, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p67, $p68, $i69, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i66, $i115, $i116, vslice_dummy_var_81, vslice_dummy_var_82 := init_stripe_loop_$bb13($p0, $i1, $i2, $p5, $p42, $p43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $p54, $i55, $p57, $i58, $i56, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p67, $p68, $i69, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i66, $i115, $i116, vslice_dummy_var_81, vslice_dummy_var_82);
    goto $bb13_last;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $i44 := read_seqcount_begin($p43);
    call {:si_unique_call 1601} {:cexpr "tmp___6"} boogie_si_record_i32($i44);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i2);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i47, $i49);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(48, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i51);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i2, 0);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i56 := $i58;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i56);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i1);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} stripe_set_idx($i1, $p5, $i2, $p0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, 0);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 1603} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i63, 1);
    call {:si_unique_call 1604} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i63, 0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i115 := read_seqcount_retry($p42, $i44);
    call {:si_unique_call 1617} {:cexpr "tmp___11"} boogie_si_record_i32($i115);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} insert_hash($p5, $p0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    call {:si_unique_call 1629} $i129 := devirtbounce.11(0, cpu_number);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    call {:si_unique_call 1630} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i129);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i129);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb42_dummy;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb20;

  $bb20:
    call $p67, $p68, $i69, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i66, vslice_dummy_var_81, vslice_dummy_var_82 := init_stripe_loop_$bb20($p0, $i2, $p67, $p68, $i69, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i66, vslice_dummy_var_81, vslice_dummy_var_82);
    goto $bb20_last;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i66);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i74 == 1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i78 == 1);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i82 == 1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i86 == 1);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i88 := constant_test_bit(1, $p87);
    call {:si_unique_call 1606} {:cexpr "tmp___9"} boogie_si_record_i32($i88);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p112, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} raid5_build_block($p0, $i66, $i2);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i113 := $sub.i32($i66, 1);
    call {:si_unique_call 1615} {:cexpr "i"} boogie_si_record_i32($i113);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i66, 0);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i114 == 1);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb39:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i66 := $i113;
    goto $bb39_dummy;

  $bb32:
    assume $i89 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i91 := constant_test_bit(1, $p90);
    call {:si_unique_call 1608} {:cexpr "tmp___7"} boogie_si_record_i32($i91);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p68, $mul.ref($i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_81 := printk.ref.i64.i32.ref.ref.ref.ref.i32(.str.56, $i93, $i66, $p95, $p97, $p99, $p101, $i91);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32(1, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i32($i103);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i104);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i106 := ldv__builtin_expect($i105, 0);
    call {:si_unique_call 1611} {:cexpr "tmp___8"} boogie_si_record_i64($i106);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32(1, 0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_82 := ldv__builtin_expect($i110, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i107 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} warn_slowpath_null(.str.1, 548);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb23;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb16;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} __dynamic_pr_debug.ref.ref.i64($p3, .str.55, $i1);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    call {:si_unique_call 1596} devirtbounce(0, .str.1, 527, 12);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb4:
    assume $i19 == 1;
    call {:si_unique_call 1591} devirtbounce(0, .str.1, 526, 12);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1586} devirtbounce(0, .str.1, 525, 12);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb39_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  $bb42_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_7620;
}



const ldv_spin_lock_101: ref;

axiom ldv_spin_lock_101 == $sub.ref(0, 615468);

procedure ldv_spin_lock_101($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_lock_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} spin_lock($p0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const read_seqcount_begin: ref;

axiom read_seqcount_begin == $sub.ref(0, 616500);

procedure read_seqcount_begin($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation read_seqcount_begin($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} seqcount_lockdep_reader_access($p0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i1 := raw_read_seqcount_begin($p0);
    call {:si_unique_call 1645} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const raid5_build_block: ref;

axiom raid5_build_block == $sub.ref(0, 617532);

procedure raid5_build_block($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $CurrAddr;



implementation raid5_build_block($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} {:cexpr "raid5_build_block:arg:i"} boogie_si_record_i32($i1);
    call {:si_unique_call 1647} {:cexpr "raid5_build_block:arg:previous"} boogie_si_record_i32($i2);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(0, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} bio_init($p7);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(272, 1));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(0, 1)), $mul.ref(114, 1));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 1);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(136, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} bio_init($p16);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(288, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(136, 1)), $mul.ref(120, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(136, 1)), $mul.ref(114, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(136, 1)), $mul.ref(80, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(360, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, 0);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i26 := compute_blocknr($p0, $i1, $i2);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref($i5, 368)), $mul.ref(352, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    return;
}



const read_seqcount_retry: ref;

axiom read_seqcount_retry == $sub.ref(0, 618564);

procedure read_seqcount_retry($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation read_seqcount_retry($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} {:cexpr "read_seqcount_retry:arg:start"} boogie_si_record_i32($i1);
    call {:si_unique_call 1652} devirtbounce.1(0);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $i2 := __read_seqcount_retry($p0, $i1);
    call {:si_unique_call 1654} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const insert_hash: ref;

axiom insert_hash == $sub.ref(0, 619596);

procedure insert_hash($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation insert_hash($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p5 := stripe_hash($p0, $i4);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.59);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str.1);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p9, .str.60);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.10, $p11);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 458);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p11, $i14);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p15, 0);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.11, $p16);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1658} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(0, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} hlist_add_head($p24, $p5);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} __dynamic_pr_debug.ref.ref.i64($p2, .str.60, $i23);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stripe_hash: ref;

axiom stripe_hash == $sub.ref(0, 620628);

procedure stripe_hash($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation stripe_hash($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} {:cexpr "stripe_hash:arg:sect"} boogie_si_record_i64($i1);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 3);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 511);
    call {:si_unique_call 1662} {:cexpr "hash"} boogie_si_record_i32($i4);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(0, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 8));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const hlist_add_head: ref;

axiom hlist_add_head == $sub.ref(0, 621660);

procedure hlist_add_head($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __read_seqcount_retry: ref;

axiom __read_seqcount_retry == $sub.ref(0, 622692);

procedure __read_seqcount_retry($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __read_seqcount_retry($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} {:cexpr "__read_seqcount_retry:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i1);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1665} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const bio_init: ref;

axiom bio_init == $sub.ref(0, 623724);

procedure bio_init($p0: ref);
  free requires assertsPassed;



implementation bio_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    return;
}



const seqcount_lockdep_reader_access: ref;

axiom seqcount_lockdep_reader_access == $sub.ref(0, 624756);

procedure seqcount_lockdep_reader_access($p0: ref);
  free requires assertsPassed;



implementation seqcount_lockdep_reader_access($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $i1 := arch_local_irq_save();
    call {:si_unique_call 1667} {:cexpr "flags"} boogie_si_record_i64($i1);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} trace_hardirqs_off();
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p2 := llvm.returnaddress(0);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} lock_acquire($p3, 0, 0, 2, 1, $0.ref, $i4);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p5 := llvm.returnaddress(0);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} lock_release($p6, 1, $i7);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $i8 := arch_irqs_disabled_flags($i1);
    call {:si_unique_call 1674} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} trace_hardirqs_on();
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} arch_local_irq_restore($i1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} arch_local_irq_restore($i1);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} trace_hardirqs_off();
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const raw_read_seqcount_begin: ref;

axiom raw_read_seqcount_begin == $sub.ref(0, 625788);

procedure raw_read_seqcount_begin($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation raw_read_seqcount_begin($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $i1 := __read_seqcount_begin($p0);
    call {:si_unique_call 1680} {:cexpr "tmp"} boogie_si_record_i32($i1);
    call {:si_unique_call 1681} devirtbounce.1(0);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __read_seqcount_begin: ref;

axiom __read_seqcount_begin == $sub.ref(0, 626820);

procedure __read_seqcount_begin($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __read_seqcount_begin($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1682} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1684} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13 := __read_seqcount_begin_loop_$bb4($p1, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p1);
    call {:si_unique_call 1686} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1688} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} cpu_relax();
    goto corral_source_split_7951;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 627852);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} rep_nop();
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 628884);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} devirtbounce.1(0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    return;
}



const llvm.returnaddress: ref;

axiom llvm.returnaddress == $sub.ref(0, 629916);

procedure llvm.returnaddress($i0: i32) returns ($r: ref);



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 630948);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1692} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1693} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1694} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1695} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 631980);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1697} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_add: ref;

axiom atomic64_add == $sub.ref(0, 633012);

procedure atomic64_add($i0: i64, $p1: ref);



const __trace_note_message: ref;

axiom __trace_note_message == $sub.ref(0, 634044);

procedure __trace_note_message.ref.ref.i64.i32.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32, p.5: i32);



procedure __trace_note_message.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);



const fetch_block: ref;

axiom fetch_block == $sub.ref(0, 635076);

procedure fetch_block($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const need_this_block: ref;

axiom need_this_block == $sub.ref(0, 636108);

procedure need_this_block($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const want_replace: ref;

axiom want_replace == $sub.ref(0, 637140);

procedure want_replace($p0: ref, $i1: i32) returns ($r: i32);



const md_write_end: ref;

axiom md_write_end == $sub.ref(0, 638172);

procedure md_write_end($p0: ref);
  free requires assertsPassed;



implementation md_write_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_endwrite: ref;

axiom bitmap_endwrite == $sub.ref(0, 639204);

procedure bitmap_endwrite($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32);



const raid5_set_bi_stripes: ref;

axiom raid5_set_bi_stripes == $sub.ref(0, 640236);

procedure raid5_set_bi_stripes($p0: ref, $i1: i32);



const raid5_bi_processed_stripes: ref;

axiom raid5_bi_processed_stripes == $sub.ref(0, 641268);

procedure raid5_bi_processed_stripes($p0: ref) returns ($r: i32);



const raid5_set_bi_processed_stripes: ref;

axiom raid5_set_bi_processed_stripes == $sub.ref(0, 642300);

procedure raid5_set_bi_processed_stripes($p0: ref, $i1: i32);



const add_stripe_bio: ref;

axiom add_stripe_bio == $sub.ref(0, 643332);

procedure add_stripe_bio($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.38, $CurrAddr, assertsPassed;



implementation add_stripe_bio($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i1;
  var $i31: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i41: i64;
  var $p44: ref;
  var $p39: ref;
  var $i40: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p50: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p49: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p70: ref;
  var $p48: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p85: ref;
  var $i86: i64;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i1;
  var $i131: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $p152: ref;
  var $i153: i64;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i64;
  var $i159: i64;
  var $i160: i1;
  var $p162: ref;
  var $i163: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $i149: i64;
  var $p150: ref;
  var $i181: i64;
  var $i182: i1;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $i188: i64;
  var $i183: i64;
  var $i180: i64;
  var $i148: i64;
  var $i189: i64;
  var $p192: ref;
  var $i193: i64;
  var $i194: i64;
  var $i195: i1;
  var $i196: i64;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i24;
  var $i207: i24;
  var $i208: i24;
  var $p209: ref;
  var $p210: ref;
  var $i211: i8;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $i221: i64;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $i243: i64;
  var $p246: ref;
  var $p247: ref;
  var $i242: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1700} {:cexpr "add_stripe_bio:arg:dd_idx"} boogie_si_record_i32($i2);
    call {:si_unique_call 1701} {:cexpr "add_stripe_bio:arg:forwrite"} boogie_si_record_i32($i3);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str.2);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, .str.113);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p10, .str.1);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p11, .str.114);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.10, $p13);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2635);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p13, $i16);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p17, 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.11, $p18);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1703} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} ldv_spin_lock_irq_121($p29);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i3, 0);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i2);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i41, 368)), $mul.ref(320, 1));
    assume {:verifier.code 0} true;
    $p39, $i40 := $p44, 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p39);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p48 := $p39;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p48);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p48);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 1709} {:cexpr "tmp___0"} boogie_si_record_i64($i102);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p48);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p1);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} raid5_inc_bi_active_stripes($p1);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i3, 0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p200, .str.2);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p201, .str.113);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p202, .str.1);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p203, .str.115);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i206 := $load.i24($M.10, $p205);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i207 := $and.i24($i206, $sub.i24(0, 262144));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i208 := $or.i24($i207, 2682);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p205, $i208);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p209, 0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.11, $p210);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i64($i211);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i213 := $and.i64($i212, 1);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i214 := ldv__builtin_expect($i213, 0);
    call {:si_unique_call 1721} {:cexpr "tmp___4"} boogie_si_record_i64($i214);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_spin_unlock_irq_122($p222);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i242 := 1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $r := $i242;
    return;

  $bb69:
    assume $i228 == 1;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i40, 0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb71;

  $bb72:
    assume $i229 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.0, $p234);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_83 := bitmap_startwrite($p233, $i235, 8, 0);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p7, $mul.ref(0, 1544)), $mul.ref(912, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i238, 1);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(84, 1));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i239);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} set_bit(9, $p241);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i215 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p48);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p216, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i219 := $load.i64($M.0, $p218);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.0, $p220);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} __dynamic_pr_debug.ref.ref.i64.i64.i32($p5, .str.115, $i219, $i221, $i2);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb45:
    assume $i130 == 1;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i2);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i131, 368)), $mul.ref(352, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    call {:si_unique_call 1716} {:cexpr "sector"} boogie_si_record_i64($i135);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i2);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i136, 368)), $mul.ref(336, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i2);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i141, 368)), $mul.ref(352, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, $p144);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 8);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i147 := $ult.i64($i135, $i146);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i148 := $i135;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i2);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i189, 368)), $mul.ref(352, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i193 := $load.i64($M.0, $p192);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i194 := $add.i64($i193, 8);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i195 := $uge.i64($i148, $i194);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i195 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i2);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i196, 368)), $mul.ref(360, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} set_bit(3, $p199);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb47:
    assume $i147 == 1;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i149, $p150 := $i135, $p140;
    goto $bb50;

  $bb50:
    call $p152, $i153, $p155, $i156, $i157, $i158, $i159, $i160, $p162, $i163, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $p174, $i175, $p176, $i177, $i178, $i179, $i149, $p150, $i181, $i182, $p185, $i186, $i187, $i188, $i183, $i180 := add_stripe_bio_loop_$bb50($p0, $i2, $p144, $p152, $i153, $p155, $i156, $i157, $i158, $i159, $i160, $p162, $i163, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $p174, $i175, $p176, $i177, $i178, $i179, $i149, $p150, $i181, $i182, $p185, $i186, $i187, $i188, $i183, $i180);
    goto $bb50_last;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p150);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, 0);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i183 := $i149;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i148 := $i183;
    goto $bb49;

  $bb57:
    assume $i182 == 1;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i186 := $load.i64($M.0, $p185);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i187 := $ule.i64($i186, $i149);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i188 := $i149;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i148 := $i188;
    goto $bb49;

  $bb59:
    assume $i187 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i157 := $lshr.i32($i156, 9);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i157);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i159 := $add.i64($i153, $i158);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i160 := $uge.i64($i159, $i149);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i170 := $i149;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i2);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i171, 368)), $mul.ref(352, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p174);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p176 := r5_next_bio($p150, $i175);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p144);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i178 := $add.i64($i177, 8);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i179 := $ult.i64($i170, $i178);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i180 := $i170;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i148 := $i180;
    goto $bb49;

  $bb55:
    assume $i179 == 1;
    assume {:verifier.code 0} true;
    $i149, $p150 := $i170, $p176;
    goto $bb55_dummy;

  $bb52:
    assume $i160 == 1;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.0, $p162);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i167 := $lshr.i32($i166, 9);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i168 := $zext.i32.i64($i167);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i163, $i168);
    call {:si_unique_call 1717} {:cexpr "sector"} boogie_si_record_i64($i169);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i170 := $i169;
    goto $bb54;

  $bb42:
    assume $i127 == 1;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p48);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $p128);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i114 == 1;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p48);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i116, $i119);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i32($i120);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i121);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 1713} {:cexpr "tmp___3"} boogie_si_record_i64($i123);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i124 == 1;
    call {:si_unique_call 1714} devirtbounce(0, .str.1, 2660, 12);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb30:
    assume $i103 == 1;
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i110 := ldv__builtin_expect($i109, 0);
    call {:si_unique_call 1711} {:cexpr "tmp___1"} boogie_si_record_i64($i110);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb35;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i112 := 1;
    goto $bb34;

  $bb24:
    assume $i82 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p48);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 9);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i93);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i89, $i94);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i96 := $ult.i64($i86, $i95);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb26;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i2);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i243, 368)), $mul.ref(360, 1));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} set_bit(7, $p246);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} ldv_spin_unlock_irq_122($p247);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i242 := 0;
    goto $bb75;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p49 := $p39;
    goto $bb13;

  $bb13:
    call $p50, $p52, $i53, $p54, $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $p49, $p71, $p73, $i74, $p76, $i77, $i78, $p79, $p70 := add_stripe_bio_loop_$bb13($p1, $p50, $p52, $i53, $p54, $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $p49, $p71, $p73, $i74, $p76, $i77, $i78, $p79, $p70);
    goto $bb13_last;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p49);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i78 := $ult.i64($i74, $i77);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p79 := $p49;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p48 := $p79;
    goto $bb12;

  $bb21:
    assume $i78 == 1;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p49);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i32($i57, 9);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i53, $i59);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i60, $i63);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p49);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p70 := $p65;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p48 := $p70;
    goto $bb12;

  $bb19:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $p49 := $p65;
    goto $bb19_dummy;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i2);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i31, 368)), $mul.ref(336, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p39, $i40 := $p34, $i38;
    goto $bb9;

  $bb6:
    assume $i37 == 1;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb8;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} __dynamic_pr_debug.ref.ref.i64.i64($p4, .str.114, $i26, $i28);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb55_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8156;

  $bb19_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;
}



const raid5_inc_bi_active_stripes: ref;

axiom raid5_inc_bi_active_stripes == $sub.ref(0, 644364);

procedure raid5_inc_bi_active_stripes($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation raid5_inc_bi_active_stripes($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} atomic_inc($p2);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_startwrite: ref;

axiom bitmap_startwrite == $sub.ref(0, 645396);

procedure bitmap_startwrite($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_startwrite($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} {:cexpr "bitmap_startwrite:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1728} {:cexpr "bitmap_startwrite:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1729} {:cexpr "bitmap_startwrite:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1730} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1731} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 646428);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __list_add($p0, $p1, $p3);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    return;
}



const llist_del_all: ref;

axiom llist_del_all == $sub.ref(0, 647460);

procedure llist_del_all($p0: ref) returns ($r: ref);



const llist_reverse_order: ref;

axiom llist_reverse_order == $sub.ref(0, 648492);

procedure llist_reverse_order($p0: ref) returns ($r: ref);



const llist_next: ref;

axiom llist_next == $sub.ref(0, 649524);

procedure llist_next($p0: ref) returns ($r: ref);



const __xchg_wrong_size: ref;

axiom __xchg_wrong_size == $sub.ref(0, 650556);

procedure __xchg_wrong_size();



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 651588);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1734} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1735} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $p5 := external_alloc();
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 652620);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1738} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $p2 := external_alloc();
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const raid456_cpu_notify: ref;

axiom raid456_cpu_notify == $sub.ref(0, 653652);

procedure raid456_cpu_notify($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const register_cpu_notifier: ref;

axiom register_cpu_notifier == $sub.ref(0, 654684);

procedure register_cpu_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_cpu_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1740} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_scratch_buffer: ref;

axiom alloc_scratch_buffer == $sub.ref(0, 655716);

procedure alloc_scratch_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_scratch_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 6);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 6);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} free_scratch_buffer($p0, $p1);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb11;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(944, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p17 := kmalloc($i16, 208);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $p9 := alloc_pages(208, 0);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_772:
    assume !assertsPassed;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 656748);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1746} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_check_alloc_flags($i1);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_after_alloc($p2);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 657780);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    return;
}



const notifier_from_errno: ref;

axiom notifier_from_errno == $sub.ref(0, 658812);

procedure notifier_from_errno($i0: i32) returns ($r: i32);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 659844);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    return;
}



const num_node_state: ref;

axiom num_node_state == $sub.ref(0, 660876);

procedure num_node_state($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation num_node_state($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} {:cexpr "num_node_state:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    $p2 := $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref($i1, 128));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $i3 := __nodes_weight($p2, 1024);
    call {:si_unique_call 1753} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 661908);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    return;
}



const raid5_do_work: ref;

axiom raid5_do_work == $sub.ref(0, 662940);

procedure raid5_do_work($p0: ref);



const __nodes_weight: ref;

axiom __nodes_weight == $sub.ref(0, 663972);

procedure __nodes_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __nodes_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} {:cexpr "__nodes_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $i4 := bitmap_weight($p3, $i1);
    call {:si_unique_call 1757} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 665004);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 1760} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 666036);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1761} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1762} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 667068);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1765} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_check_alloc_flags($i1);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p2 := ldv_zalloc($i0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_after_alloc($p2);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 668100);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 669132);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 1772} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $i2 := ldv_undef_int();
    call {:si_unique_call 1774} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $p4 := calloc($i0, $i1);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} ldv_assume($i7);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $i8 := ldv_is_err($p4);
    call {:si_unique_call 1778} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} ldv_assume($i10);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 670164);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} {:cexpr "ldv_err_ptr:arg:error___0"} boogie_si_record_i64($i0);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const lock_all_device_hash_locks_irq: ref;

axiom lock_all_device_hash_locks_irq == $sub.ref(0, 671196);

procedure lock_all_device_hash_locks_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, assertsPassed, $M.45;



implementation lock_all_device_hash_locks_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i3: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} arch_local_irq_disable();
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} trace_hardirqs_off();
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} ldv_spin_lock_104($p2);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb1;

  $bb1:
    call $p4, $p5, $i6, $p7, $i8, $i9, $i3 := lock_all_device_hash_locks_irq_loop_$bb1($p0, $p4, $p5, $i6, $p7, $i8, $i9, $i3);
    goto $bb1_last;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 72));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p7);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i3, 1);
    call {:si_unique_call 1785} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 7);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} ldv_spin_lock_101($p10);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i8;
    goto $bb3_dummy;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8407;
}



const unlock_all_device_hash_locks_irq: ref;

axiom unlock_all_device_hash_locks_irq == $sub.ref(0, 672228);

procedure unlock_all_device_hash_locks_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, assertsPassed;



implementation unlock_all_device_hash_locks_irq($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_spin_unlock_102($p1);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i2 := 8;
    goto $bb1;

  $bb1:
    call $p3, $p4, $i5, $i6, $p7, $i8, $i9, $i2 := unlock_all_device_hash_locks_irq_loop_$bb1($p0, $p3, $p4, $i5, $i6, $p7, $i8, $i9, $i2);
    goto $bb1_last;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $sub.i64(0, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref($i6, 72));
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} ldv_spin_unlock_108($p7);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i2, 1);
    call {:si_unique_call 1789} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} trace_hardirqs_on();
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} arch_local_irq_enable();
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i8;
    goto $bb3_dummy;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8424;
}



const ldv_spin_unlock_108: ref;

axiom ldv_spin_unlock_108 == $sub.ref(0, 673260);

procedure ldv_spin_unlock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv_spin_unlock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} spin_unlock($p0);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const arch_local_irq_enable: ref;

axiom arch_local_irq_enable == $sub.ref(0, 674292);

procedure arch_local_irq_enable();
  free requires assertsPassed;



implementation arch_local_irq_enable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1795} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1797} $i7 := devirtbounce.5(0, 47, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1798} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1796} devirtbounce(0, .str.6, 819, 12);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const ldv_spin_lock_104: ref;

axiom ldv_spin_lock_104 == $sub.ref(0, 675324);

procedure ldv_spin_lock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_spin_lock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_linux_kernel_locking_spinlock_spin_lock_hash_locks_of_r5conf();
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} spin_lock($p0);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105 == $sub.ref(0, 676356);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_hash_locks_of_r5conf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_hash_locks_of_r5conf == $sub.ref(0, 677388);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_hash_locks_of_r5conf();
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_hash_locks_of_r5conf()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i3 := $M.45;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} ldv_assume($i5);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1805} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_hash_locks_of_r5conf"} boogie_si_record_i32(2);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const md_set_array_sectors: ref;

axiom md_set_array_sectors == $sub.ref(0, 678420);

procedure md_set_array_sectors($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation md_set_array_sectors($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} {:cexpr "md_set_array_sectors:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    return;
}



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 679452);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    return;
}



const revalidate_disk: ref;

axiom revalidate_disk == $sub.ref(0, 680484);

procedure revalidate_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation revalidate_disk($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const calc_degraded: ref;

axiom calc_degraded == $sub.ref(0, 681516);

procedure calc_degraded($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation calc_degraded($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i48: i32;
  var $i44: i32;
  var $i39: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i5: i32;
  var $i6: i32;
  var $i59: i32;
  var $i4: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i113: i32;
  var $i109: i32;
  var $i104: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i70: i32;
  var $i71: i32;
  var $i124: i32;
  var $i69: i32;
  var $i125: i1;
  var $i65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} rcu_read_lock();
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} rcu_read_unlock();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i61, $i63);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} rcu_read_lock();
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32(0, $i67);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i69 := 0;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} rcu_read_unlock();
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i69, $i4);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i65 := $i4;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb93:
    assume $i125 == 1;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i65 := $i69;
    goto $bb47;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i68 == 1;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i70, $i71 := 0, 0;
    goto $bb52;

  $bb52:
    call $p72, $p73, $i74, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $p114, $i115, $p116, $i117, $i118, $i119, $i120, $i113, $i109, $i104, $i121, $i122, $i123, $i70, $i71, $i124 := calc_degraded_loop_$bb52($p0, $p66, $p72, $p73, $i74, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $p114, $i115, $p116, $i117, $i118, $i119, $i120, $i113, $i109, $i104, $i121, $i122, $i123, $i70, $i71, $i124);
    goto $bb52_last;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i71);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref($i74, 16)), $mul.ref(0, 1));
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i78 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1834} {:cexpr "tmp___6"} boogie_si_record_i32($i78);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p77);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $p100 := $p77;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i102 == 1);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p100, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $i106 := constant_test_bit(0, $p105);
    call {:si_unique_call 1847} {:cexpr "tmp___12"} boogie_si_record_i32($i106);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i107 == 1);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p100, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i111 := constant_test_bit(1, $p110);
    call {:si_unique_call 1851} {:cexpr "tmp___11"} boogie_si_record_i32($i111);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i112 == 1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i118 := $sle.i32($i115, $i117);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i120 := $i70;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i113 := $i120;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i109 := $i113;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i104 := $i109;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i71, 1);
    call {:si_unique_call 1848} {:cexpr "i"} boogie_si_record_i32($i121);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p66);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i121, $i122);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i124 := $i104;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i69 := $i124;
    goto $bb51;

  $bb90:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i70, $i71 := $i104, $i121;
    goto $bb90_dummy;

  $bb87:
    assume $i118 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i70, 1);
    call {:si_unique_call 1852} {:cexpr "degraded2"} boogie_si_record_i32($i119);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb89;

  $bb84:
    assume $i112 == 1;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i113 := $i70;
    goto $bb86;

  $bb81:
    assume $i107 == 1;
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i70, 1);
    call {:si_unique_call 1849} {:cexpr "degraded2"} boogie_si_record_i32($i108);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb83;

  $bb78:
    assume $i102 == 1;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i70, 1);
    call {:si_unique_call 1845} {:cexpr "degraded2"} boogie_si_record_i32($i103);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i104 := $i103;
    goto $bb80;

  $bb63:
    assume $i84 == 1;
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p77, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i86 := constant_test_bit(0, $p85);
    call {:si_unique_call 1839} {:cexpr "tmp___10"} boogie_si_record_i32($i86);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $p99 := $p77;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p100 := $p99;
    goto $bb77;

  $bb65:
    assume $i87 == 1;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i71);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p89, $mul.ref($i90, 16)), $mul.ref(8, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $i94 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1841} {:cexpr "tmp___8"} boogie_si_record_i32($i94);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p99 := $p93;
    goto $bb76;

  $bb67:
    assume $i95 == 1;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1(1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i96 == 1);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $i97 := rcu_read_lock_held();
    call {:si_unique_call 1843} {:cexpr "tmp___9"} boogie_si_record_i32($i97);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i98 == 1;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} lockdep_rcu_suspicious(.str.1, 621, .str.32);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb69;

  $bb54:
    assume $i79 == 1;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1(1);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i80 == 1);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i81 := rcu_read_lock_held();
    call {:si_unique_call 1836} {:cexpr "tmp___7"} boogie_si_record_i32($i81);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i82 == 1;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} lockdep_rcu_suspicious(.str.1, 619, .str.32);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb56;

  $bb45:
    assume $i64 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i65 := $i4;
    goto $bb47;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i5, $i6 := 0, 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i48, $i44, $i39, $i56, $i57, $i58, $i5, $i6, $i59 := calc_degraded_loop_$bb4($p0, $p1, $p7, $p8, $i9, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i48, $i44, $i39, $i56, $i57, $i58, $i5, $i6, $i59);
    goto $bb4_last;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1812} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p12);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p35 := $p12;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i41 := constant_test_bit(0, $p40);
    call {:si_unique_call 1825} {:cexpr "tmp___5"} boogie_si_record_i32($i41);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p35, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} $i46 := constant_test_bit(1, $p45);
    call {:si_unique_call 1829} {:cexpr "tmp___4"} boogie_si_record_i32($i46);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i47 == 1);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i53 := $sge.i32($i50, $i52);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i5;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i48 := $i55;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i44 := $i48;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i6, 1);
    call {:si_unique_call 1826} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p1);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i56, $i57);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i59 := $i39;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i4 := $i59;
    goto $bb3;

  $bb42:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i5, $i6 := $i39, $i56;
    goto $bb42_dummy;

  $bb39:
    assume $i53 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i5, 1);
    call {:si_unique_call 1830} {:cexpr "degraded"} boogie_si_record_i32($i54);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb41;

  $bb36:
    assume $i47 == 1;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i48 := $i5;
    goto $bb38;

  $bb33:
    assume $i42 == 1;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i5, 1);
    call {:si_unique_call 1827} {:cexpr "degraded"} boogie_si_record_i32($i43);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb35;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i5, 1);
    call {:si_unique_call 1823} {:cexpr "degraded"} boogie_si_record_i32($i38);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb32;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i21 := constant_test_bit(0, $p20);
    call {:si_unique_call 1817} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p34 := $p12;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb29;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i6);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i29 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1819} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $p28;
    goto $bb28;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1(1);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i32 := rcu_read_lock_held();
    call {:si_unique_call 1821} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i33 == 1;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} lockdep_rcu_suspicious(.str.1, 595, .str.32);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb21;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(1);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i16 := rcu_read_lock_held();
    call {:si_unique_call 1814} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} lockdep_rcu_suspicious(.str.1, 593, .str.32);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb90_dummy:
    assume false;
    return;

  $bb52_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8599;

  $bb42_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8491;
}



const check_stripe_cache: ref;

axiom check_stripe_cache == $sub.ref(0, 682548);

procedure check_stripe_cache($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_stripe_cache($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i36: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 9);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i64($i7, 4096);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 4);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64($i9, $i12);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 9);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i17, 4096);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 4);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64($i19, $i22);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1854} {:cexpr "_max1"} boogie_si_record_i32($i25);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 1855} {:cexpr "_max2"} boogie_si_record_i32($i27);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} $p28 := mdname($p0);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i25, $i27);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i30, 9);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i64($i32, 4096);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 4);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} vslice_dummy_var_84 := printk.ref.ref.i64(.str.118, $p28, $i34);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb9;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i30 := $i25;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;
}



const has_failed: ref;

axiom has_failed == $sub.ref(0, 683580);

procedure has_failed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation has_failed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $i15 := calc_degraded($p0);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    call {:si_unique_call 1859} {:cexpr "degraded"} boogie_si_record_i32($i15);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i15, $i17);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i9, $i11);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const write_seqcount_begin: ref;

axiom write_seqcount_begin == $sub.ref(0, 684612);

procedure write_seqcount_begin($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_seqcount_begin($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} write_seqcount_begin_nested($p0, 0);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    return;
}



const write_seqcount_end: ref;

axiom write_seqcount_end == $sub.ref(0, 685644);

procedure write_seqcount_end($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_seqcount_end($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $p1 := llvm.returnaddress(0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} lock_release($p2, 1, $i3);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} raw_write_seqcount_end($p0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_link_rdev: ref;

axiom sysfs_link_rdev == $sub.ref(0, 686676);

procedure sysfs_link_rdev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation sysfs_link_rdev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i4 := constant_test_bit(11, $p3);
    call {:si_unique_call 1866} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1)), $mul.ref(48, 1));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} vslice_dummy_var_85 := sprintf.ref.ref.i32($p11, .str.119, $i13);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(120, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} $i18 := sysfs_create_link($p15, $p16, $p17);
    call {:si_unique_call 1869} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_192: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_192 == $sub.ref(0, 687708);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_192($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_192($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_128: ref;

axiom ldv_spin_unlock_irqrestore_128 == $sub.ref(0, 688740);

procedure ldv_spin_unlock_irqrestore_128($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_unlock_irqrestore_128($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} {:cexpr "ldv_spin_unlock_irqrestore_128:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_linux_kernel_locking_spinlock_spin_unlock_device_lock_of_r5conf();
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const md_do_sync: ref;

axiom md_do_sync == $sub.ref(0, 689772);

procedure md_do_sync($p0: ref);



const ldv_md_register_thread_194: ref;

axiom ldv_md_register_thread_194 == $sub.ref(0, 690804);

procedure ldv_md_register_thread_194($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.17, $M.19, $M.21, $CurrAddr, $M.2, $M.23, $M.1, $M.22, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_md_register_thread_194($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p3 := md_register_thread($p0, $p1, $p2);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p4 := ldv_md_register_thread($p3, $p0, $p1, $p2);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const md_new_event: ref;

axiom md_new_event == $sub.ref(0, 691836);

procedure md_new_event($p0: ref);
  free requires assertsPassed;



implementation md_new_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 692868);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1877} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const raw_write_seqcount_end: ref;

axiom raw_write_seqcount_end == $sub.ref(0, 693900);

procedure raw_write_seqcount_end($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation raw_write_seqcount_end($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} devirtbounce.1(0);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    return;
}



const write_seqcount_begin_nested: ref;

axiom write_seqcount_begin_nested == $sub.ref(0, 694932);

procedure write_seqcount_begin_nested($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation write_seqcount_begin_nested($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} {:cexpr "write_seqcount_begin_nested:arg:subclass"} boogie_si_record_i32($i1);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} raw_write_seqcount_begin($p0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $p2 := llvm.returnaddress(0);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} lock_acquire($p3, $i1, 0, 0, 1, $0.ref, $i4);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    return;
}



const raw_write_seqcount_begin: ref;

axiom raw_write_seqcount_begin == $sub.ref(0, 695964);

procedure raw_write_seqcount_begin($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation raw_write_seqcount_begin($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    call {:si_unique_call 1884} devirtbounce.1(0);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    return;
}



const check_reshape: ref;

axiom check_reshape == $sub.ref(0, 696996);

procedure check_reshape($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation check_reshape($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i18 := has_failed($p3);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    call {:si_unique_call 1886} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i36 := check_stripe_cache($p0);
    call {:si_unique_call 1888} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i39, $i41);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i43 := resize_stripes($p3, $i42);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    call {:si_unique_call 1890} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i17 := $i43;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 28);
    goto $bb8;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, $sub.i64(0, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 6);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 2;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i31, $i33);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, $i29);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb8;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i29 := 4;
    goto $bb20;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb8;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, $i10);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;
}



const resize_stripes: ref;

axiom resize_stripes == $sub.ref(0, 698028);

procedure resize_stripes($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation resize_stripes($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i33: i32;
  var $i49: i32;
  var $i32: i32;
  var $i39: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i78: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i101: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p109: ref;
  var $i110: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i100: i32;
  var $i122: i32;
  var $i99: i32;
  var $i123: i1;
  var $i125: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i124: i32;
  var $i131: i16;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $i169: i32;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i64;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $i191: i32;
  var $i192: i64;
  var $i193: i1;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i211: i32;
  var $p212: ref;
  var $i213: i32;
  var $i214: i64;
  var $i215: i32;
  var $i216: i64;
  var $i217: i1;
  var $i194: i64;
  var $i210: i32;
  var $i218: i32;
  var $i219: i1;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $i233: i64;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $i241: i64;
  var $p244: ref;
  var $i245: i64;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i231: i32;
  var $i232: i32;
  var $i255: i32;
  var $i230: i32;
  var $i256: i32;
  var $i257: i1;
  var $i221: i32;
  var $i258: i32;
  var $i220: i32;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i32;
  var $p263: ref;
  var $p264: ref;
  var $i10: i32;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1894} {:cexpr "resize_stripes:arg:newsize"} boogie_si_record_i32($i1);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p2);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p2);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i1, $i8);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $i13 := md_allow_write($p12);
    call {:si_unique_call 1896} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(840, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(836, 1));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(1, $i18);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p16, $mul.ref($i20, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i24 := $mul.i64($i23, 368);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 576);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $p26 := kmem_cache_create($p21, $i25, 0, 0, $0.ref);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1898} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $i32;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i39, 0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p63, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p2);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i66, $i67);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} kmem_cache_destroy($p159);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i161 := $mul.i64($i160, 16);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $p162 := kzalloc($i161, 16);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i185 := $sub.i32(0, 12);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} get_online_cpus();
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i186 := scribble_len($i1);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(944, 1));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p187, $i186);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} $i189 := cpumask_next($sub.i32(0, 1), $p188);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    call {:si_unique_call 1943} {:cexpr "tmp___5"} boogie_si_record_i32($i189);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i189);
    call {:si_unique_call 1944} {:cexpr "cpu"} boogie_si_record_i64($i190);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i191);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i193 := $ult.i64($i190, $i192);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i210 := $i185;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} put_online_cpus();
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $i218 := list_empty($p2);
    call {:si_unique_call 1954} {:cexpr "tmp___7"} boogie_si_record_i32($i218);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i220 := $i210;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p259, $p26);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(836, 1));
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i262 := $sub.i32(1, $i261);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(836, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p263, $i262);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p264, $i1);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i10 := $i220;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb96:
    assume $i219 == 1;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i221 := $i210;
    goto $bb99;

  $bb99:
    call $p222, $p223, $p224, $p225, $p226, $p227, $i228, $i229, $i233, $p236, $p237, $i238, $i239, $p240, $i241, $p244, $i245, $p248, $i249, $i250, $i251, $i252, $i253, $i254, $i231, $i232, $i255, $i230, $i256, $i257, $i221, $i258 := resize_stripes_loop_$bb99($p0, $i1, $p2, $p222, $p223, $p224, $p225, $p226, $p227, $i228, $i229, $i233, $p236, $p237, $i238, $i239, $p240, $i241, $p244, $i245, $p248, $i249, $i250, $i251, $i252, $i253, $i254, $i231, $i232, $i255, $i230, $i256, $i257, $i221, $i258);
    goto $bb99_last;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p224, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} list_del_init($p226);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    call {:si_unique_call 1956} {:cexpr "i"} boogie_si_record_i32($i228);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i229 := $slt.i32($i228, $i1);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i230 := $i221;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} release_stripe($p225);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i256 := list_empty($p2);
    call {:si_unique_call 1961} {:cexpr "tmp___7"} boogie_si_record_i32($i256);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 0);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i258 := $i230;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i220 := $i258;
    goto $bb98;

  $bb115:
    assume $i257 == 1;
    assume {:verifier.code 0} true;
    $i221 := $i230;
    goto $bb115_dummy;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i229 == 1;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i231, $i232 := $i228, $i221;
    goto $bb104;

  $bb104:
    call $i233, $p236, $p237, $i238, $i239, $p240, $i241, $p244, $i245, $p248, $i249, $i250, $i251, $i252, $i253, $i254, $i231, $i232, $i255 := resize_stripes_loop_$bb104($i1, $p224, $i233, $p236, $p237, $i238, $i239, $p240, $i241, $p244, $i245, $p248, $i249, $i250, $i251, $i252, $i253, $i254, $i231, $i232, $i255);
    goto $bb104_last;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i233 := $sext.i32.i64($i231);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($add.ref($p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref($i233, 368)), $mul.ref(304, 1));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i239 := $eq.i64($i238, 0);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    $i252 := $i232;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i253 := $add.i32($i231, 1);
    call {:si_unique_call 1958} {:cexpr "i"} boogie_si_record_i32($i253);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i253, $i1);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i255 := $i252;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i230 := $i255;
    goto $bb103;

  $bb112:
    assume $i254 == 1;
    assume {:verifier.code 0} true;
    $i231, $i232 := $i253, $i252;
    goto $bb112_dummy;

  $bb106:
    assume $i239 == 1;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p240 := alloc_pages(16, 0);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i231);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref($i241, 368)), $mul.ref(304, 1));
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p240);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i245 := $sext.i32.i64($i231);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref($i245, 368)), $mul.ref(312, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p248, $p240);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p240);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i250 := $eq.i64($i249, 0);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $i251 := $i232;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i252 := $i251;
    goto $bb111;

  $bb108:
    assume $i250 == 1;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i251 := $sub.i32(0, 12);
    goto $bb110;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i193 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i194 := $i190;
    goto $bb87;

  $bb87:
    call $p195, $p196, $i197, $p198, $i199, $i200, $p201, $p202, $i203, $p204, $i205, $i206, $p207, $p208, $p209, $i211, $p212, $i213, $i214, $i215, $i216, $i217, $i194 := resize_stripes_loop_$bb87($p0, $p195, $p196, $i197, $p198, $i199, $i200, $p201, $p202, $i203, $p204, $i205, $i206, $p207, $p208, $p209, $i211, $p212, $i213, $i214, $i215, $i216, $i217, $i194);
    goto $bb87_last;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    call {:si_unique_call 1945} $i197 := devirtbounce.10(0, $p196);
    call {:si_unique_call 1946} {:cexpr "__ptr"} boogie_si_record_i64($i197);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i194, 8));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.0, $p198);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i197, $i199);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p201 := $i2p.i64.ref($i200);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(944, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.0, $p202);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $p204 := kmalloc($i203, 16);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i206 == 1);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i210 := $sub.i32(0, 12);
    goto $bb92;

  $bb89:
    assume $i206 == 1;
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p201, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} kfree($p208);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p201, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p204);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i64.i32($i194);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i213 := cpumask_next($i211, $p212);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    call {:si_unique_call 1950} {:cexpr "tmp___5"} boogie_si_record_i32($i213);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i214 := $zext.i32.i64($i213);
    call {:si_unique_call 1951} {:cexpr "cpu"} boogie_si_record_i64($i214);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i216 := $sext.i32.i64($i215);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i217 := $ult.i64($i214, $i216);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i217 == 1);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb93:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i194 := $i214;
    goto $bb93_dummy;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i165 == 1;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32(0, $i167);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} kfree($p183);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p162);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i185 := $i13;
    goto $bb83;

  $bb75:
    assume $i168 == 1;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb78;

  $bb78:
    call $i170, $p171, $p172, $p173, $i174, $p175, $p176, $p177, $i178, $i179, $i180, $i169, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7 := resize_stripes_loop_$bb78($p0, $p163, $p166, $i170, $p171, $p172, $p173, $i174, $p175, $p176, $p177, $i178, $i179, $i180, $i169, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7);
    goto $bb78_last;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i169);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p163, $mul.ref($i170, 16));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i169);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p173, $mul.ref($i174, 16));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p171);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p175);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 1937} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p176, $p177, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i169, 1);
    call {:si_unique_call 1938} {:cexpr "i"} boogie_si_record_i32($i178);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p166);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i178, $i179);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i180 == 1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb80:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i169 := $i178;
    goto $bb80_dummy;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i68 == 1;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i69, $i70, $p71 := 0, 0, $p64;
    goto $bb37;

  $bb37:
    call $p72, $p73, $i74, $p75, $i76, $i77, $p79, $p80, $p81, $i82, $p83, $p84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i78, $p94, $p95, $p96, $i97, $i98, $i101, $p104, $p105, $i106, $p109, $i110, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i100, $i122, $i99, $i123, $i125, $p128, $i129, $i130, $i124, $i131, $p132, $p133, $p134, $p135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p151, $p152, $p153, $p154, $p155, $i156, $i157, $i69, $i70, $p71 := resize_stripes_loop_$bb37($p0, $i1, $p4, $i67, $p72, $p73, $i74, $p75, $i76, $i77, $p79, $p80, $p81, $i82, $p83, $p84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i78, $p94, $p95, $p96, $i97, $i98, $i101, $p104, $p105, $i106, $p109, $i110, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i100, $i122, $i99, $i123, $i125, $p128, $i129, $i130, $i124, $i131, $p132, $p133, $p134, $p135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p151, $p152, $p153, $p154, $p155, $i156, $i157, $i69, $i70, $p71);
    goto $bb37_last;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} lock_device_hash_lock($p0, $i70);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i70);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p73, $mul.ref($i74, 16));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i76 := list_empty($p75);
    call {:si_unique_call 1913} {:cexpr "tmp___1"} boogie_si_record_i32($i76);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} INIT_LIST_HEAD($p79);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i82 := prepare_to_wait_event($p81, $p4, 2);
    call {:si_unique_call 1919} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i70);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p84, $mul.ref($i85, 16));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i87 := list_empty($p86);
    call {:si_unique_call 1921} {:cexpr "tmp___3"} boogie_si_record_i32($i87);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i89 := $i70;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i88 == 1);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    call $i90, $i91, $i92 := resize_stripes_loop_$bb46($p0, $p4, $p81, $p86, $i90, $i91, $i92, $i70);
    goto $bb46_last;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} unlock_device_hash_lock($p0, $i70);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} schedule();
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} lock_device_hash_lock($p0, $i70);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $i90 := prepare_to_wait_event($p81, $p4, 2);
    call {:si_unique_call 1927} {:cexpr "tmp___2"} boogie_si_record_i64($i90);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i91 := list_empty($p86);
    call {:si_unique_call 1929} {:cexpr "tmp___3"} boogie_si_record_i32($i91);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb50_dummy;

  $bb47:
    assume $i92 == 1;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i89 := $i70;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} finish_wait($p93, $p4);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i78 := $i89;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $p94 := get_free_stripe($p0, $i78);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} unlock_device_hash_lock($p0, $i78);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} atomic_set($p95, 1);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32(0, $i97);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i99 := 0;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i99, $i1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i78);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(70, 1));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, $i131);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p94);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} kmem_cache_free($p134, $p135);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i69, 1);
    call {:si_unique_call 1933} {:cexpr "cnt"} boogie_si_record_i32($i136);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i139 := $sdiv.i32($i138, 8);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i142 := $srem.i32($i141, 8);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i143 := $sgt.i32($i142, $i78);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i32($i143);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i139, $i144);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i146 := $sge.i32($i136, $i145);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i148, $i149 := $i78, $i136;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p153, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, $i67);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i157 == 1);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb70:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i69, $i70, $p71 := $i149, $i148, $p154;
    goto $bb70_dummy;

  $bb67:
    assume $i146 == 1;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i78, 1);
    call {:si_unique_call 1934} {:cexpr "hash"} boogie_si_record_i32($i147);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i148, $i149 := $i147, 0;
    goto $bb69;

  $bb59:
    assume $i123 == 1;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i124 := $i99;
    goto $bb62;

  $bb62:
    call $i125, $p128, $i129, $i130, $i124 := resize_stripes_loop_$bb62($i1, $i125, $p128, $i129, $i130, $i124, $p71);
    goto $bb62_last;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i125, 368)), $mul.ref(304, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p128, $0.ref);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i124, 1);
    call {:si_unique_call 1931} {:cexpr "i"} boogie_si_record_i32($i129);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, $i1);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i130 == 1);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb64:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i124 := $i129;
    goto $bb64_dummy;

  $bb51:
    assume $i98 == 1;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb54;

  $bb54:
    call $i101, $p104, $p105, $i106, $p109, $i110, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i100, $i122 := resize_stripes_loop_$bb54($p94, $p96, $i101, $p104, $p105, $i106, $p109, $i110, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i100, $i122, $p71);
    goto $bb54_last;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i101, 368)), $mul.ref(304, 1));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i100);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i106, 368)), $mul.ref(304, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $p105);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i100);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i110, 368)), $mul.ref(304, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i100);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i115, 368)), $mul.ref(312, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, $p114);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i100, 1);
    call {:si_unique_call 1930} {:cexpr "i"} boogie_si_record_i32($i119);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p96);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i119, $i120);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i122 := $i119;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i99 := $i122;
    goto $bb53;

  $bb56:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i100 := $i119;
    goto $bb56_dummy;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb44;

  $bb39:
    assume $i77 == 1;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i78 := $i70;
    goto $bb41;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i51 := list_empty($p2);
    call {:si_unique_call 1905} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} kmem_cache_destroy($p26);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60 := resize_stripes_loop_$bb28($p2, $p26, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60);
    goto $bb28_last;

  $bb29:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} list_del($p57);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p56);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} kmem_cache_free($p26, $p58);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i59 := list_empty($p2);
    call {:si_unique_call 1909} {:cexpr "tmp___0"} boogie_si_record_i32($i59);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i60 == 1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb30_dummy;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    goto $bb14;

  $bb14:
    call $p34, $p35, $i36, $i37, $i38, $p40, $p41, $p44, $p45, $p46, $i47, $i48, $i33, $i49, vslice_dummy_var_86 := resize_stripes_loop_$bb14($p0, $p2, $p3, $p26, $p34, $p35, $i36, $i37, $i38, $p40, $p41, $p44, $p45, $p46, $i47, $i48, $i33, $i49, vslice_dummy_var_86);
    goto $bb14_last;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $p34 := kmem_cache_zalloc($p26, 208);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i38 := $i33;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p35, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} vslice_dummy_var_86 := spinlock_check($p41);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 576)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} __raw_spin_lock_init($p45, .str.127, $p3);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p35, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} list_add($p46, $p2);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i33, 1);
    call {:si_unique_call 1903} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i32 := $i49;
    goto $bb13;

  $bb20:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i47;
    goto $bb20_dummy;

  $bb16:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb18;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb112_dummy:
    assume false;
    return;

  $bb104_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  $bb115_dummy:
    assume false;
    return;

  $bb99_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9222;

  $bb93_dummy:
    assume false;
    return;

  $bb87_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9182;

  $bb80_dummy:
    assume false;
    return;

  $bb78_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9144;

  $bb50_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb64_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  $bb56_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9060;

  $bb70_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9008;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8950;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 699060);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    return;
}



const lock_device_hash_lock: ref;

axiom lock_device_hash_lock == $sub.ref(0, 700092);

procedure lock_device_hash_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, assertsPassed;



implementation lock_device_hash_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} {:cexpr "lock_device_hash_lock:arg:hash"} boogie_si_record_i32($i1);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 72));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_spin_lock_irq_100($p5);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} ldv_spin_lock_101($p6);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;
}



const unlock_device_hash_lock: ref;

axiom unlock_device_hash_lock == $sub.ref(0, 701124);

procedure unlock_device_hash_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, assertsPassed;



implementation unlock_device_hash_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} {:cexpr "unlock_device_hash_lock:arg:hash"} boogie_si_record_i32($i1);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} ldv_spin_unlock_102($p2);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 72));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_spin_unlock_irq_103($p6);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;
}



const bitmap_resize: ref;

axiom bitmap_resize == $sub.ref(0, 702156);

procedure bitmap_resize($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_resize($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1968} {:cexpr "bitmap_resize:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1969} {:cexpr "bitmap_resize:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1970} {:cexpr "bitmap_resize:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1971} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const end_reshape: ref;

axiom end_reshape == $sub.ref(0, 703188);

procedure end_reshape($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation end_reshape($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p23: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $i68: i64;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i4 := constant_test_bit(3, $p3);
    call {:si_unique_call 1974} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} ldv_spin_lock_irq_136($p6);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i17, $i21);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 1976} devirtbounce.1(0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $sub.i64(0, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} ldv_spin_unlock_irq_137($p38);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} __wake_up($p39, 3, 1, $0.ref);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i47, $i49);
    call {:si_unique_call 1979} {:cexpr "data_disks"} boogie_si_record_i32($i50);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 9);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i57 := $udiv.i64($i56, 4096);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i52, $i58);
    call {:si_unique_call 1980} {:cexpr "stripe"} boogie_si_record_i32($i59);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(16, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i59, 2);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i69 := $ult.i64($i66, $i68);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i69 == 1;
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i59, 2);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 2024)), $mul.ref(1552, 1));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 3704)), $mul.ref(632, 1)), $mul.ref(16, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i71);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p23 := $p14;
    goto $bb6;

  $bb6:
    call $p24, $i25, $p26, $p28, $p29, $p30, $p31, $i32, $p33, $p34, $i35, $i36, $p23 := end_reshape_loop_$bb6($p18, $p24, $i25, $p26, $p28, $p29, $p30, $p31, $i32, $p33, $p34, $i35, $i36, $p23);
    goto $bb6_last;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i25);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p18);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i32, $i35);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p29;
    goto $bb8_dummy;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9333;
}



const bitmap_end_sync: ref;

axiom bitmap_end_sync == $sub.ref(0, 704220);

procedure bitmap_end_sync($p0: ref, $i1: i64, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation bitmap_end_sync($p0: ref, $i1: i64, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} {:cexpr "bitmap_end_sync:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1982} {:cexpr "bitmap_end_sync:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_close_sync: ref;

axiom bitmap_close_sync == $sub.ref(0, 705252);

procedure bitmap_close_sync($p0: ref);
  free requires assertsPassed;



implementation bitmap_close_sync($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    return;
}



const reshape_request: ref;

axiom reshape_request == $sub.ref(0, 706284);

procedure reshape_request($p0: ref, $i1: i64, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.12, assertsPassed, $CurrAddr, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation reshape_request($p0: ref, $i1: i64, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i34: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i58: i32;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $i116: i32;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $i124: i32;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $i120: i64;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $i172: i64;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $i204: i64;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i1;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i230: i32;
  var $i231: i32;
  var $p233: ref;
  var $i234: i16;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i16;
  var $i245: i32;
  var $i246: i1;
  var $i247: i64;
  var $i248: i64;
  var $i249: i1;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i254: i64;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $p263: ref;
  var $i264: i64;
  var $p267: ref;
  var $i232: i32;
  var $i253: i32;
  var $i229: i32;
  var $i239: i32;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $i219: i32;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i64;
  var $i281: i32;
  var $i282: i64;
  var $i283: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i32;
  var $i288: i64;
  var $i289: i64;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $i293: i64;
  var $i294: i64;
  var $i295: i64;
  var $i296: i64;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i64;
  var $p301: ref;
  var $i302: i64;
  var $i303: i1;
  var $p304: ref;
  var $i305: i64;
  var $i306: i64;
  var $i307: i64;
  var $i308: i1;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $i313: i64;
  var $i314: i1;
  var $i309: i64;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i1;
  var $i324: i64;
  var $i325: i64;
  var $p326: ref;
  var $i327: i64;
  var $i328: i64;
  var $i329: i64;
  var $p330: ref;
  var $i331: i64;
  var $p332: ref;
  var $i333: i64;
  var $i334: i64;
  var $i335: i1;
  var $p336: ref;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i64;
  var $p346: ref;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i350: i32;
  var $i351: i1;
  var $i352: i64;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i64;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $i382: i32;
  var $i383: i1;
  var $i384: i64;
  var $i385: i32;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $i389: i32;
  var $i390: i1;
  var $p391: ref;
  var $p392: ref;
  var $i393: i64;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i64;
  var $i49: i64;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1989} {:cexpr "reshape_request:arg:sector_nr"} boogie_si_record_i64($i1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1990} {:cexpr "raid_disks"} boogie_si_record_i32($i13);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i13, $i15);
    call {:si_unique_call 1991} {:cexpr "data_disks"} boogie_si_record_i32($i16);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i18, $i20);
    call {:si_unique_call 1992} {:cexpr "new_data_disks"} boogie_si_record_i32($i21);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i1, 0);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i52, $i54);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 2002} {:cexpr "reshape_sectors"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    call {:si_unique_call 2003} {:cexpr "writepos"} boogie_si_record_i64($i62);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i21);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i64 := $udiv.i64($i62, $i63);
    call {:si_unique_call 2004} {:cexpr "writepos"} boogie_si_record_i64($i64);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    call {:si_unique_call 2005} {:cexpr "readpos"} boogie_si_record_i64($i66);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i16);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i68 := $udiv.i64($i66, $i67);
    call {:si_unique_call 2006} {:cexpr "readpos"} boogie_si_record_i64($i68);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    call {:si_unique_call 2007} {:cexpr "safepos"} boogie_si_record_i64($i70);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i16);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i72 := $udiv.i64($i70, $i71);
    call {:si_unique_call 2008} {:cexpr "safepos"} boogie_si_record_i64($i72);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i58);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i64, $i87);
    call {:si_unique_call 2010} {:cexpr "writepos"} boogie_si_record_i64($i88);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i58);
    call {:si_unique_call 2011} {:cexpr "__min1___0"} boogie_si_record_i64($i89);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i90 := $ult.i64($i89, $i68);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i90 == 1);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i91 := $i68;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i92 := $sub.i64($i68, $i91);
    call {:si_unique_call 2015} {:cexpr "readpos"} boogie_si_record_i64($i92);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i58);
    call {:si_unique_call 2016} {:cexpr "__min1___1"} boogie_si_record_i64($i93);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i94 := $ult.i64($i93, $i72);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i94 == 1);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i95 := $i72;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i96 := $sub.i64($i72, $i95);
    call {:si_unique_call 2017} {:cexpr "safepos"} boogie_si_record_i64($i96);
    assume {:verifier.code 0} true;
    $i84, $i85, $i86 := $i88, $i92, $i96;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i99 == 1);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i58);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i50, $i121);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i84, $i122);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i124 := $zext.i1.i32($i123);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 2021} {:cexpr "tmp___3"} boogie_si_record_i64($i126);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i120 := $i50;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(712, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i130 := $slt.i64($i129, 0);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i130 == 1);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(712, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i84, $i141);
    call {:si_unique_call 2029} {:cexpr "writepos"} boogie_si_record_i64($i142);
    assume {:verifier.code 0} true;
    $i137, $i138, $i139 := $i142, $i85, $i86;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i145 == 1);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i148 := $ult.i64($i139, $i137);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(704, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p150);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.0, jiffies);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i153 := $sub.i64($i151, $i152);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 2500);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i155 := $slt.i64($i154, 0);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} INIT_LIST_HEAD($p4);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i218 := $slt.i32(0, $i58);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} ldv_spin_lock_irq_136($p275);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i278 == 1);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.0, $p285);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i287 := $mul.i32($i58, $i21);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i288 := $sext.i32.i64($i287);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i289 := $add.i64($i286, $i288);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p290, $i289);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} ldv_spin_unlock_irq_137($p291);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i21);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i293 := $mul.i64($i120, $i292);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $i294 := raid5_compute_sector($p11, $i293, 1, $p3, $0.ref);
    call {:si_unique_call 2093} {:cexpr "first_sector"} boogie_si_record_i64($i294);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i295 := $sext.i32.i64($i58);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i296 := $add.i64($i120, $i295);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i21);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i298 := $mul.i64($i296, $i297);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i299 := $sub.i64($i298, 1);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i300 := raid5_compute_sector($p11, $i299, 1, $p3, $0.ref);
    call {:si_unique_call 2095} {:cexpr "last_sector"} boogie_si_record_i64($i300);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i302 := $load.i64($M.0, $p301);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i303 := $uge.i64($i300, $i302);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    $i307 := $i300;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i308 := $ule.i64($i294, $i307);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i315 := list_empty($p4);
    call {:si_unique_call 2103} {:cexpr "tmp___17"} boogie_si_record_i32($i315);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 0);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i324 := $sext.i32.i64($i58);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i325 := $add.i64($i50, $i324);
    call {:si_unique_call 2108} {:cexpr "sector_nr"} boogie_si_record_i64($i325);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(592, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i327 := $load.i64($M.0, $p326);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i328 := $sub.i64($i325, $i327);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i329 := $mul.i64($i328, 2);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1136, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.0, $p330);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(592, 1));
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i333 := $load.i64($M.0, $p332);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i334 := $sub.i64($i331, $i333);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i335 := $uge.i64($i329, $i334);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i398 := $sext.i32.i64($i58);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i49 := $i398;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb166:
    assume $i335 == 1;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} __might_sleep(.str.1, 5030, 0);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i337 := atomic_read($p336);
    call {:si_unique_call 2111} {:cexpr "tmp___18"} boogie_si_record_i32($i337);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i338 == 1);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $i340 := constant_test_bit(3, $p339);
    call {:si_unique_call 2113} {:cexpr "tmp___19"} boogie_si_record_i32($i340);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} INIT_LIST_HEAD($p342);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p343, 0);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i345 := prepare_to_wait_event($p344, $p7, 2);
    call {:si_unique_call 2118} {:cexpr "tmp___20"} boogie_si_record_i64($i345);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i347 := atomic_read($p346);
    call {:si_unique_call 2120} {:cexpr "tmp___21"} boogie_si_record_i32($i347);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb175, $bb177;

  $bb177:
    assume !($i348 == 1);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    call $p349, $i350, $i351, $i352, $i353, $i354 := reshape_request_loop_$bb178($p0, $p7, $p344, $p346, $p349, $i350, $i351, $i352, $i353, $i354);
    goto $bb178_last;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $i350 := constant_test_bit(3, $p349);
    call {:si_unique_call 2122} {:cexpr "tmp___22"} boogie_si_record_i32($i350);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} schedule();
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i352 := prepare_to_wait_event($p344, $p7, 2);
    call {:si_unique_call 2126} {:cexpr "tmp___20"} boogie_si_record_i64($i352);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i353 := atomic_read($p346);
    call {:si_unique_call 2128} {:cexpr "tmp___21"} boogie_si_record_i32($i353);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 0);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb185_dummy;

  $bb179:
    assume $i354 == 1;
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} finish_wait($p355, $p7);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $i357 := atomic_read($p356);
    call {:si_unique_call 2115} {:cexpr "tmp___23"} boogie_si_record_i32($i357);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i360 := $load.i64($M.0, $p359);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p361, $i360);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(592, 1));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p362, $i325);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i363 := $load.i64($M.0, jiffies);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(704, 1));
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p364, $i363);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} set_bit(0, $p365);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} md_wakeup_thread($p367);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} __might_sleep(.str.1, 5040, 0);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $i369 := constant_test_bit(0, $p368);
    call {:si_unique_call 2133} {:cexpr "tmp___24"} boogie_si_record_i32($i369);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 0);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i370 == 1);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $i372 := constant_test_bit(3, $p371);
    call {:si_unique_call 2135} {:cexpr "tmp___25"} boogie_si_record_i32($i372);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} INIT_LIST_HEAD($p374);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p375, 0);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1312, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $i377 := prepare_to_wait_event($p376, $p8, 2);
    call {:si_unique_call 2140} {:cexpr "tmp___26"} boogie_si_record_i64($i377);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i379 := constant_test_bit(0, $p378);
    call {:si_unique_call 2142} {:cexpr "tmp___27"} boogie_si_record_i32($i379);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 0);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb197, $bb199;

  $bb199:
    assume !($i380 == 1);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    call $p381, $i382, $i383, $i384, $i385, $i386 := reshape_request_loop_$bb200($p0, $p8, $p376, $p378, $p381, $i382, $i383, $i384, $i385, $i386);
    goto $bb200_last;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i382 := constant_test_bit(3, $p381);
    call {:si_unique_call 2144} {:cexpr "tmp___28"} boogie_si_record_i32($i382);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i383 := $ne.i32($i382, 0);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} schedule();
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i384 := prepare_to_wait_event($p376, $p8, 2);
    call {:si_unique_call 2148} {:cexpr "tmp___26"} boogie_si_record_i64($i384);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i385 := constant_test_bit(0, $p378);
    call {:si_unique_call 2150} {:cexpr "tmp___27"} boogie_si_record_i32($i385);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 0);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i386 == 1);
    goto $bb207_dummy;

  $bb201:
    assume $i386 == 1;
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1312, 1));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} finish_wait($p387, $p8);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} $i389 := constant_test_bit(3, $p388);
    call {:si_unique_call 2137} {:cexpr "tmp___29"} boogie_si_record_i32($i389);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i389, 0);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} ldv_spin_lock_irq_136($p391);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i393 := $load.i64($M.0, $p392);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p394, $i393);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} ldv_spin_unlock_irq_137($p395);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} __wake_up($p396, 3, 1, $0.ref);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} sysfs_notify($p397, $0.ref, .str.126);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    goto $bb211;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb208:
    assume $i390 == 1;
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb203:
    assume $i383 == 1;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb198;

  $bb193:
    assume $i373 == 1;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume $i370 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb186:
    assume $i358 == 1;
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb181:
    assume $i351 == 1;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb176;

  $bb171:
    assume $i341 == 1;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume $i338 == 1;
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb158:
    assume $i316 == 1;
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    call $p317, $p318, $p319, $p320, $p321, $i322, $i323 := reshape_request_loop_$bb161($p4, $p317, $p318, $p319, $p320, $p321, $i322, $i323);
    goto $bb161_last;

  $bb162:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p319, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} list_del_init($p321);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} release_stripe($p320);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i322 := list_empty($p4);
    call {:si_unique_call 2107} {:cexpr "tmp___17"} boogie_si_record_i32($i322);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i323 == 1);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb163_dummy;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb150:
    assume $i308 == 1;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i309 := $i294;
    goto $bb153;

  $bb153:
    call $p310, $p311, $p312, $i313, $i314, $i309 := reshape_request_loop_$bb153($p11, $i307, $p310, $p311, $p312, $i313, $i314, $i309);
    goto $bb153_last;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $p310 := get_active_stripe($p11, $i309, 1, 0, 1);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p310, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} set_bit(11, $p311);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p310, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} set_bit(1, $p312);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} release_stripe($p310);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i313 := $add.i64($i309, 8);
    call {:si_unique_call 2101} {:cexpr "first_sector"} boogie_si_record_i64($i313);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i314 := $ule.i64($i313, $i307);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i314 == 1);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb155:
    assume $i314 == 1;
    assume {:verifier.code 0} true;
    $i309 := $i313;
    goto $bb155_dummy;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i303 == 1;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i305 := $load.i64($M.0, $p304);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i306 := $sub.i64($i305, 1);
    call {:si_unique_call 2096} {:cexpr "last_sector"} boogie_si_record_i64($i306);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i307 := $i306;
    goto $bb149;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb144:
    assume $i278 == 1;
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i280 := $load.i64($M.0, $p279);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i281 := $mul.i32($i58, $i21);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i281);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i283 := $sub.i64($i280, $i282);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p284, $i283);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    goto $bb146;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i218 == 1;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i219 := 0;
    goto $bb111;

  $bb111:
    call $i220, $i221, $p222, $p223, $p224, $p225, $i226, $i227, $i228, $i230, $i231, $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i253, $i229, $i239, $i268, $i269, $p270, $p271, $p272, $i273, $i274, $i219, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := reshape_request_loop_$bb111($p0, $p4, $p11, $i58, $i120, $i220, $i221, $p222, $p223, $p224, $p225, $i226, $i227, $i228, $i230, $i231, $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i253, $i229, $i239, $i268, $i269, $p270, $p271, $p272, $i273, $i274, $i219, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb111_last;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i220 := $sext.i32.i64($i219);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i120, $i220);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $p222 := get_active_stripe($p11, $i221, 0, 0, 1);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} set_bit(10, $p223);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} atomic_inc($p224);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    call {:si_unique_call 2074} {:cexpr "j"} boogie_si_record_i32($i226);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i227 := $sub.i32($i226, 1);
    call {:si_unique_call 2075} {:cexpr "j"} boogie_si_record_i32($i227);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i226, 0);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i229 := 0;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i268 := $i229;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 0);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} list_add($p272, $p4);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i273 := $add.i32($i219, 8);
    call {:si_unique_call 2089} {:cexpr "i"} boogie_si_record_i32($i273);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i273, $i58);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i274 == 1);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb141:
    assume $i274 == 1;
    assume {:verifier.code 0} true;
    $i219 := $i273;
    goto $bb141_dummy;

  $bb138:
    assume $i269 == 1;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} set_bit(12, $p270);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} set_bit(1, $p271);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb113:
    assume $i228 == 1;
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i230, $i231 := $i227, 0;
    goto $bb116;

  $bb116:
    call $i230, $i231, $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i253, $i239, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := reshape_request_loop_$bb116($p0, $p11, $p222, $i230, $i231, $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i253, $i239, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb116_last;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i232 := $i230;
    goto $bb117;

  $bb117:
    call $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i239, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := reshape_request_loop_$bb117($p0, $p11, $p222, $i231, $p233, $i234, $i235, $i236, $i237, $i238, $p240, $i241, $i242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i254, $p257, $p258, $p259, $i260, $p263, $i264, $p267, $i232, $i239, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb117_last;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i234 := $load.i16($M.0, $p233);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i235 := $sext.i16.i32($i234);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i232, $i235);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 6);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $i247 := compute_blocknr($p222, $i232, 0);
    call {:si_unique_call 2078} {:cexpr "s"} boogie_si_record_i64($i247);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i248 := raid5_size($p0, 0, 0);
    call {:si_unique_call 2080} {:cexpr "tmp___14"} boogie_si_record_i64($i248);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i249 := $ult.i64($i247, $i248);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i250 := $i232;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i254 := $sext.i32.i64($i232);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i254, 368)), $mul.ref(304, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $p259 := lowmem_page_address($p258);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 2083} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p259, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i232);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i260, 368)), $mul.ref(360, 1));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} set_bit(11, $p263);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i232);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i264, 368)), $mul.ref(360, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} set_bit(0, $p267);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i237 := $sub.i32($i232, 1);
    call {:si_unique_call 2076} {:cexpr "j"} boogie_si_record_i32($i237);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i232, 0);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i239 := $i231;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i268 := $i239;
    goto $bb136;

  $bb122:
    assume $i238 == 1;
    assume {:verifier.code 0} true;
    $i232 := $i237;
    goto $bb122_dummy;

  $bb131:
    assume $i249 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i251 := $sub.i32($i250, 1);
    call {:si_unique_call 2081} {:cexpr "j"} boogie_si_record_i32($i251);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i250, 0);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i253 := 1;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i229 := $i253;
    goto $bb115;

  $bb133:
    assume $i252 == 1;
    assume {:verifier.code 0} true;
    $i230, $i231 := $i251, 1;
    goto $bb133_dummy;

  $bb125:
    assume $i242 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p222, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i244 := $load.i16($M.0, $p243);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $i245 := $sext.i16.i32($i244);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i232, $i245);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb127;

  $bb128:
    assume $i246 == 1;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume $i236 == 1;
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} __might_sleep(.str.1, 4935, 0);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i157 := atomic_read($p156);
    call {:si_unique_call 2032} {:cexpr "tmp___4"} boogie_si_record_i32($i157);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i158 == 1);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i160 := constant_test_bit(3, $p159);
    call {:si_unique_call 2034} {:cexpr "tmp___5"} boogie_si_record_i32($i160);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} INIT_LIST_HEAD($p162);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, 0);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $i165 := prepare_to_wait_event($p164, $p5, 2);
    call {:si_unique_call 2039} {:cexpr "tmp___6"} boogie_si_record_i64($i165);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i167 := atomic_read($p166);
    call {:si_unique_call 2041} {:cexpr "tmp___7"} boogie_si_record_i32($i167);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb72, $bb74;

  $bb74:
    assume !($i168 == 1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    call $p169, $i170, $i171, $i172, $i173, $i174 := reshape_request_loop_$bb75($p0, $p5, $p164, $p166, $p169, $i170, $i171, $i172, $i173, $i174);
    goto $bb75_last;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} $i170 := constant_test_bit(3, $p169);
    call {:si_unique_call 2043} {:cexpr "tmp___8"} boogie_si_record_i32($i170);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} schedule();
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i172 := prepare_to_wait_event($p164, $p5, 2);
    call {:si_unique_call 2047} {:cexpr "tmp___6"} boogie_si_record_i64($i172);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i173 := atomic_read($p166);
    call {:si_unique_call 2049} {:cexpr "tmp___7"} boogie_si_record_i32($i173);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb82_dummy;

  $bb76:
    assume $i174 == 1;
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} finish_wait($p175, $p5);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $i177 := atomic_read($p176);
    call {:si_unique_call 2036} {:cexpr "tmp___9"} boogie_si_record_i32($i177);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.0, $p179);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p181, $i180);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(592, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p182, $i50);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, jiffies);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(704, 1));
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p184, $i183);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} set_bit(0, $p185);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} md_wakeup_thread($p187);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} __might_sleep(.str.1, 4944, 0);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i189 := $load.i64($M.0, $p188);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i190 == 1);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $i192 := constant_test_bit(3, $p191);
    call {:si_unique_call 2054} {:cexpr "tmp___10"} boogie_si_record_i32($i192);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} INIT_LIST_HEAD($p194);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 0);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1312, 1));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $i197 := prepare_to_wait_event($p196, $p6, 2);
    call {:si_unique_call 2059} {:cexpr "tmp___11"} boogie_si_record_i64($i197);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.0, $p198);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i200 := $eq.i64($i199, 0);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb93, $bb95;

  $bb95:
    assume !($i200 == 1);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    call $p201, $i202, $i203, $i204, $i205, $i206 := reshape_request_loop_$bb96($p0, $p6, $p196, $p198, $p201, $i202, $i203, $i204, $i205, $i206);
    goto $bb96_last;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $i202 := constant_test_bit(3, $p201);
    call {:si_unique_call 2061} {:cexpr "tmp___12"} boogie_si_record_i32($i202);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} schedule();
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} $i204 := prepare_to_wait_event($p196, $p6, 2);
    call {:si_unique_call 2065} {:cexpr "tmp___11"} boogie_si_record_i64($i204);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p198);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i206 := $eq.i64($i205, 0);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb103_dummy;

  $bb97:
    assume $i206 == 1;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1312, 1));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} finish_wait($p207, $p6);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i209 := constant_test_bit(3, $p208);
    call {:si_unique_call 2056} {:cexpr "tmp___13"} boogie_si_record_i32($i209);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} ldv_spin_lock_irq_136($p211);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i213 := $load.i64($M.0, $p212);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p214, $i213);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} ldv_spin_unlock_irq_137($p215);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} __wake_up($p216, 3, 1, $0.ref);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1));
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} sysfs_notify($p217, $0.ref, .str.126);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i210 == 1;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb18;

  $bb99:
    assume $i203 == 1;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb94;

  $bb89:
    assume $i193 == 1;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume $i190 == 1;
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i178 == 1;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb18;

  $bb78:
    assume $i171 == 1;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb73;

  $bb68:
    assume $i161 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume $i158 == 1;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i148 == 1;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i149 := $ugt.i64($i138, $i137);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb55;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb57;

  $bb51:
    assume $i145 == 1;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i146 := $ugt.i64($i139, $i137);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb55;

  $bb53:
    assume $i146 == 1;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i147 := $ult.i64($i138, $i137);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb55;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb57;

  $bb48:
    assume $i130 == 1;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(712, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i133 := $sub.i64($i86, $i132);
    call {:si_unique_call 2027} {:cexpr "safepos"} boogie_si_record_i64($i133);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(712, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i136 := $sub.i64($i85, $i135);
    call {:si_unique_call 2028} {:cexpr "readpos"} boogie_si_record_i64($i136);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i137, $i138, $i139 := $i84, $i136, $i133;
    goto $bb50;

  $bb45:
    assume $i127 == 1;
    call {:si_unique_call 2026} devirtbounce(0, .str.1, 4898, 12);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb36:
    assume $i99 == 1;
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 2019} {:cexpr "tmp___1"} boogie_si_record_i64($i105);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i58);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i110 := $sub.i64(0, $i109);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i111 := $and.i64($i108, $i110);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i58);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i113 := $sub.i64($i111, $i112);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i114 := $sub.i64($i113, $i84);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, $i50);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 2024} {:cexpr "tmp___2"} boogie_si_record_i64($i118);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i120 := $i84;
    goto $bb44;

  $bb41:
    assume $i119 == 1;
    call {:si_unique_call 2025} devirtbounce(0, .str.1, 4896, 12);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb38:
    assume $i106 == 1;
    call {:si_unique_call 2022} devirtbounce(0, .str.1, 4891, 12);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb33:
    assume $i94 == 1;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i95 := $i93;
    goto $bb35;

  $bb30:
    assume $i90 == 1;
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    goto $bb32;

  $bb24:
    assume $i75 == 1;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i58);
    call {:si_unique_call 2009} {:cexpr "__min1"} boogie_si_record_i64($i76);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i77 := $ult.i64($i76, $i64);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $i78 := $i64;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i79 := $sub.i64($i64, $i78);
    call {:si_unique_call 2012} {:cexpr "writepos"} boogie_si_record_i64($i79);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i58);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i68, $i80);
    call {:si_unique_call 2013} {:cexpr "readpos"} boogie_si_record_i64($i81);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i58);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i72, $i82);
    call {:si_unique_call 2014} {:cexpr "safepos"} boogie_si_record_i64($i83);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i84, $i85, $i86 := $i79, $i81, $i83;
    goto $bb29;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i78 := $i76;
    goto $bb28;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 2001} {:cexpr "reshape_sectors"} boogie_si_record_i32($i57);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb23;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i43 := $i1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i21);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i45 := $udiv.i64($i34, $i44);
    call {:si_unique_call 1998} {:cexpr "sector_nr"} boogie_si_record_i64($i45);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i50 := $i45;
    goto $bb20;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(592, 1));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i45);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(80, 1));
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} sysfs_notify($p48, $0.ref, .str.126);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i49 := $i45;
    goto $bb18;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    call {:si_unique_call 1999} {:cexpr "sector_nr"} boogie_si_record_i64($i42);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb15;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i26 := raid5_size($p0, 0, 0);
    call {:si_unique_call 1994} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i29 := $ult.i64($i28, $i26);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i30 := raid5_size($p0, 0, 0);
    call {:si_unique_call 1996} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i30, $i32);
    call {:si_unique_call 1997} {:cexpr "sector_nr"} boogie_si_record_i64($i33);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb9;

  $bb185_dummy:
    assume false;
    return;

  $bb178_last:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9952;

  $bb207_dummy:
    assume false;
    return;

  $bb200_last:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_10016;

  $bb163_dummy:
    assume false;
    return;

  $bb161_last:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb155_dummy:
    assume false;
    return;

  $bb153_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9878;

  $bb122_dummy:
    assume false;
    return;

  $bb117_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  $bb133_dummy:
    assume false;
    return;

  $bb116_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9765;

  $bb141_dummy:
    assume false;
    return;

  $bb111_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;

  $bb82_dummy:
    assume false;
    return;

  $bb75_last:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9649;

  $bb103_dummy:
    assume false;
    return;

  $bb96_last:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9711;
}



const bitmap_start_sync: ref;

axiom bitmap_start_sync == $sub.ref(0, 707316);

procedure bitmap_start_sync($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_start_sync($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2155} {:cexpr "bitmap_start_sync:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2156} {:cexpr "bitmap_start_sync:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2157} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const bitmap_cond_end_sync: ref;

axiom bitmap_cond_end_sync == $sub.ref(0, 708348);

procedure bitmap_cond_end_sync($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation bitmap_cond_end_sync($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} {:cexpr "bitmap_cond_end_sync:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 709380);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2160} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2161} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 2162} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sysfs_notify: ref;

axiom sysfs_notify == $sub.ref(0, 710412);

procedure sysfs_notify($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation sysfs_notify($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 711444);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sysfs_notify_dirent_safe: ref;

axiom sysfs_notify_dirent_safe == $sub.ref(0, 712476);

procedure sysfs_notify_dirent_safe($p0: ref);
  free requires assertsPassed;



implementation sysfs_notify_dirent_safe($p0: ref)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} sysfs_notify_dirent($p0);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_188: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_188 == $sub.ref(0, 713508);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_188($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_188($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;
}



const print_raid5_conf: ref;

axiom print_raid5_conf == $sub.ref(0, 714540);

procedure print_raid5_conf($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation print_raid5_conf($p0: ref)
{
  var $p1: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i21: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} vslice_dummy_var_87 := printk.ref(.str.103);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i11, $i15);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} vslice_dummy_var_89 := printk.ref.i32.i32.i32(.str.105, $i7, $i9, $i16);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32(0, $i19);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i43, $i44, $i45, $i21, vslice_dummy_var_90 := print_raid5_conf_loop_$bb8($p0, $p1, $p18, $p22, $p23, $i24, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i43, $i44, $i45, $i21, vslice_dummy_var_90);
    goto $bb8_last;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i21);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i21, 1);
    call {:si_unique_call 2174} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p18);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i43, $i44);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i43;
    goto $bb13_dummy;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $p35 := bdevname($p33, $p34);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p23, $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i39 := constant_test_bit(0, $p38);
    call {:si_unique_call 2172} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} vslice_dummy_var_90 := printk.ref.i32.i32.ref(.str.106, $i21, $i41, $p35);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} vslice_dummy_var_88 := printk.ref(.str.104);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10102;
}



const sysfs_notify_dirent: ref;

axiom sysfs_notify_dirent == $sub.ref(0, 715572);

procedure sysfs_notify_dirent($p0: ref);
  free requires assertsPassed;



implementation sysfs_notify_dirent($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} kernfs_notify($p0);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    return;
}



const kernfs_notify: ref;

axiom kernfs_notify == $sub.ref(0, 716604);

procedure kernfs_notify($p0: ref);
  free requires assertsPassed;



implementation kernfs_notify($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 717636);

procedure synchronize_rcu();
  free requires assertsPassed;
  modifies assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_synchronize_sched_38();
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;
}



const ldv_synchronize_sched_38: ref;

axiom ldv_synchronize_sched_38 == $sub.ref(0, 718668);

procedure ldv_synchronize_sched_38();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_synchronize_sched_38()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} ldv_check_for_read_section();
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;
}



const ldv_check_for_read_section: ref;

axiom ldv_check_for_read_section == $sub.ref(0, 719700);

procedure ldv_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_for_read_section()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section();
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section();
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} ldv_linux_kernel_rcu_update_lock_check_for_read_section();
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} ldv_linux_kernel_rcu_srcu_check_for_read_section();
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section == $sub.ref(0, 720732);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i2);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section == $sub.ref(0, 721764);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i2);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_for_read_section == $sub.ref(0, 722796);

procedure ldv_linux_kernel_rcu_update_lock_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i0 := $M.29;
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i2);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_srcu_check_for_read_section == $sub.ref(0, 723828);

procedure ldv_linux_kernel_rcu_srcu_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section == $sub.ref(0, 724860);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2187} __VERIFIER_error();
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section == $sub.ref(0, 725892);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2189} __VERIFIER_error();
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section == $sub.ref(0, 726924);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2191} __VERIFIER_error();
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section == $sub.ref(0, 727956);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2193} __VERIFIER_error();
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 728988);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2194} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2195} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_127: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_127 == $sub.ref(0, 730020);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_127($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} ldv_linux_kernel_locking_spinlock_spin_lock_device_lock_of_r5conf();
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 731052);

procedure seq_printf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2198} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2200} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2202} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2204} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 732084);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2207} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 733116);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 2209} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const only_parity: ref;

axiom only_parity == $sub.ref(0, 734148);

procedure only_parity($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation only_parity($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} {:cexpr "only_parity:arg:raid_disk"} boogie_si_record_i32($i0);
    call {:si_unique_call 2211} {:cexpr "only_parity:arg:algo"} boogie_si_record_i32($i1);
    call {:si_unique_call 2212} {:cexpr "only_parity:arg:raid_disks"} boogie_si_record_i32($i2);
    call {:si_unique_call 2213} {:cexpr "only_parity:arg:max_degraded"} boogie_si_record_i32($i3);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 4);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 5);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 20);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 16);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 17);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 18);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 19);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb25:
    assume $i10 == 1;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i0, $i18);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb44:
    assume $i19 == 1;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb32;

  $bb21:
    assume $i9 == 1;
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i0, 0);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i15 == 1);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb32;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb39;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i2, $i3);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i0, $i13);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i14 == 1;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb32;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, $i3);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i11 == 1;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb32;
}



const ldv_md_register_thread_186: ref;

axiom ldv_md_register_thread_186 == $sub.ref(0, 735180);

procedure ldv_md_register_thread_186($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.17, $M.19, $M.21, $CurrAddr, $M.2, $M.23, $M.1, $M.22, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_md_register_thread_186($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} $p3 := md_register_thread($p0, $p1, $p2);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $p4 := ldv_md_register_thread($p3, $p0, $p1, $p2);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;
}



const ldv_sysfs_create_group_187: ref;

axiom ldv_sysfs_create_group_187 == $sub.ref(0, 736212);

procedure ldv_sysfs_create_group_187($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49;



implementation ldv_sysfs_create_group_187($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i2 := ldv_linux_fs_sysfs_sysfs_create_group();
    call {:si_unique_call 2217} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_queue_io_min: ref;

axiom blk_queue_io_min == $sub.ref(0, 737244);

procedure blk_queue_io_min($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_io_min($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} {:cexpr "blk_queue_io_min:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_io_opt: ref;

axiom blk_queue_io_opt == $sub.ref(0, 738276);

procedure blk_queue_io_opt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_io_opt($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} {:cexpr "blk_queue_io_opt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_write_same_sectors: ref;

axiom blk_queue_max_write_same_sectors == $sub.ref(0, 739308);

procedure blk_queue_max_write_same_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_write_same_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} {:cexpr "blk_queue_max_write_same_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    return;
}



const disk_stack_limits: ref;

axiom disk_stack_limits == $sub.ref(0, 740340);

procedure disk_stack_limits($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation disk_stack_limits($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} {:cexpr "disk_stack_limits:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 741372);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} __set_bit($i2, $p3);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_clear_unlocked: ref;

axiom queue_flag_clear_unlocked == $sub.ref(0, 742404);

procedure queue_flag_clear_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_clear_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} {:cexpr "queue_flag_clear_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} __clear_bit($i2, $p3);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    return;
}



const md_unregister_thread: ref;

axiom md_unregister_thread == $sub.ref(0, 743436);

procedure md_unregister_thread($p0: ref);
  free requires assertsPassed;



implementation md_unregister_thread($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 744468);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 2227} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 745500);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 2229} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_fs_sysfs_sysfs_create_group: ref;

axiom ldv_linux_fs_sysfs_sysfs_create_group == $sub.ref(0, 746532);

procedure ldv_linux_fs_sysfs_sysfs_create_group() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49;



implementation ldv_linux_fs_sysfs_sysfs_create_group() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2231} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i2 := $M.49;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.49 := $i3;
    call {:si_unique_call 2232} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32($i3);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 747564);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i0 := ldv_undef_int();
    call {:si_unique_call 2234} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_assume($i2);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 748596);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 749628);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 2236} $p3 := devirtbounce.17(0, current_task);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 750660);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const md_flush_request: ref;

axiom md_flush_request == $sub.ref(0, 751692);

procedure md_flush_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation md_flush_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    return;
}



const md_write_start: ref;

axiom md_write_start == $sub.ref(0, 752724);

procedure md_write_start($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation md_write_start($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    return;
}



const chunk_aligned_read: ref;

axiom chunk_aligned_read == $sub.ref(0, 753756);

procedure chunk_aligned_read($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.12, $M.27, $M.2, $M.29, assertsPassed, $CurrAddr, $M.1, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation chunk_aligned_read($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p87: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $i156: i64;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $i10 := in_chunk_boundary($p0, $p1);
    call {:si_unique_call 2247} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $p29 := bio_clone_mddev($p1, 16, $p0);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, raid5_align_endio);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p1);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $i38 := raid5_compute_sector($p9, $i37, 0, $p2, $0.ref);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i46, 9);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i43, $i48);
    call {:si_unique_call 2253} {:cexpr "end_sector"} boogie_si_record_i64($i49);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} rcu_read_lock();
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.12, $p2);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p51, $mul.ref($i53, 16)), $mul.ref(8, 1));
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $i57 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2256} {:cexpr "tmp___1"} boogie_si_record_i32($i57);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p56);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p56, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $i65 := constant_test_bit(0, $p64);
    call {:si_unique_call 2261} {:cexpr "tmp___7"} boogie_si_record_i32($i65);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i69 := $ult.i64($i68, $i49);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $p96 := $p56;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i98 == 1);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} rcu_read_unlock();
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} bio_put($p29);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i98 == 1;
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p96, $mul.ref(0, 832)), $mul.ref(536, 1));
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} atomic_inc($p99);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} rcu_read_unlock();
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p96);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p96, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} __clear_bit(3, $p105);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $i106 := bio_fits_rdev($p29);
    call {:si_unique_call 2275} {:cexpr "tmp___8"} boogie_si_record_i32($i106);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i107 == 1);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i114 := $lshr.i32($i113, 9);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} $i115 := is_badblock($p96, $i110, $i114, $p4, $p5);
    call {:si_unique_call 2281} {:cexpr "tmp___9"} boogie_si_record_i32($i115);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p96, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.0, $p120);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i119, $i121);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p124, $i122);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} ldv_spin_lock_irq_136($p125);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} INIT_LIST_HEAD($p129);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 0);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $i132 := prepare_to_wait_event($p131, $p6, 2);
    call {:si_unique_call 2289} {:cexpr "tmp___10"} boogie_si_record_i64($i132);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb63, $bb65;

  $bb65:
    assume !($i135 == 1);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    call $p136, $p137, $i138, $i139, $i140 := chunk_aligned_read_loop_$bb66($p6, $p9, $p131, $p133, $p136, $p137, $i138, $i139, $i140);
    goto $bb66_last;

  $bb69:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_spin_unlock_irq_137($p136);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} schedule();
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_spin_lock_irq_136($p137);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i138 := prepare_to_wait_event($p131, $p6, 2);
    call {:si_unique_call 2295} {:cexpr "tmp___10"} boogie_si_record_i64($i138);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p133);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb70_dummy;

  $bb67:
    assume $i140 == 1;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} finish_wait($p141, $p6);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(804, 1));
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} atomic_inc($p142);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} ldv_spin_unlock_irq_137($p143);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} generic_make_request($p29);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb6;

  $bb71:
    assume $i147 == 1;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $i150 := disk_devt($p149);
    call {:si_unique_call 2297} {:cexpr "tmp___11"} boogie_si_record_i32($i150);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $p153 := bdev_get_queue($p152);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} trace_block_bio_remap($p153, $p29, $i150, $i156);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb64;

  $bb59:
    assume $i128 == 1;
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i116 == 1;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} bio_put($p29);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} rdev_dec_pending($p96, $p0);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb53:
    assume $i107 == 1;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} bio_put($p29);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} rdev_dec_pending($p96, $p0);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p9, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.12, $p2);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p71, $mul.ref($i73, 16)), $mul.ref(0, 1));
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $i77 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2263} {:cexpr "tmp___3"} boogie_si_record_i32($i77);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p76);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $p95 := $p76;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p96 := $p95;
    goto $bb48;

  $bb36:
    assume $i83 == 1;
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p76, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $i85 := constant_test_bit(0, $p84);
    call {:si_unique_call 2268} {:cexpr "tmp___5"} boogie_si_record_i32($i85);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i86 == 1);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p76, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $i89 := constant_test_bit(1, $p88);
    call {:si_unique_call 2270} {:cexpr "tmp___6"} boogie_si_record_i32($i89);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p94 := $p76;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p87 := $p94;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p95 := $p87;
    goto $bb47;

  $bb41:
    assume $i90 == 1;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p76, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i93 := $ult.i64($i92, $i49);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb43;

  $bb44:
    assume $i93 == 1;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p94 := $0.ref;
    goto $bb46;

  $bb38:
    assume $i86 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p87 := $0.ref;
    goto $bb40;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1(1);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i80 := rcu_read_lock_held();
    call {:si_unique_call 2265} {:cexpr "tmp___4"} boogie_si_record_i32($i80);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i81 == 1;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} lockdep_rcu_suspicious(.str.1, 4340, .str.32);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb29;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i58 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1(1);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $i60 := rcu_read_lock_held();
    call {:si_unique_call 2258} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i61 == 1;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} lockdep_rcu_suspicious(.str.1, 4337, .str.32);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.2);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.109);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, .str.1);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p15, .str.110);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.10, $p17);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 4313);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p17, $i20);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p21, 0);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.11, $p22);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 2249} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} __dynamic_pr_debug.ref.ref($p3, .str.110);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb70_dummy:
    assume false;
    return;

  $bb66_last:
    assume {:verifier.code 0} true;
    goto $bb69;
}



const make_discard_request: ref;

axiom make_discard_request == $sub.ref(0, 754788);

procedure make_discard_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.2, $M.38, $CurrAddr, $M.18, $M.17, $M.19, assertsPassed, $M.12, $M.29, $M.49, $M.21, $M.23, $M.22;



implementation make_discard_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i1;
  var $i93: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i101: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $i100: i32;
  var $i108: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i84: i32;
  var $p83: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $i125: i16;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i1;
  var $i132: i64;
  var $p135: ref;
  var $i136: i64;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i123: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i156: i32;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $i48: i64;
  var $i181: i32;
  var $i182: i1;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(528, 1));
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $sub.i64(0, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, $sub.i64(0, 8));
    call {:si_unique_call 2302} {:cexpr "logical_sector"} boogie_si_record_i64($i12);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 9);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i15, $i20);
    call {:si_unique_call 2303} {:cexpr "last_sector"} boogie_si_record_i64($i21);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i27, $i29);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i25, $i30);
    call {:si_unique_call 2304} {:cexpr "stripe_sectors"} boogie_si_record_i32($i31);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i12, $i32);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i33, 1);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i31);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i36 := $udiv.i64($i34, $i35);
    call {:si_unique_call 2305} {:cexpr "logical_sector"} boogie_si_record_i64($i36);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i31);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i38 := $udiv.i64($i21, $i37);
    call {:si_unique_call 2306} {:cexpr "last_sector"} boogie_si_record_i64($i38);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i42 := $mul.i64($i36, $i41);
    call {:si_unique_call 2307} {:cexpr "logical_sector"} boogie_si_record_i64($i42);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i46 := $mul.i64($i38, $i45);
    call {:si_unique_call 2308} {:cexpr "last_sector"} boogie_si_record_i64($i46);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i47 := $ult.i64($i42, $i46);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} $i181 := raid5_dec_bi_active_stripes($p1);
    call {:si_unique_call 2341} {:cexpr "remaining"} boogie_si_record_i32($i181);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume $i182 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} md_write_end($p0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} bio_endio($p1, 0);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i48 := $i42;
    goto $bb8;

  $bb8:
    call $p49, $p50, $p52, $p53, $p54, $p56, $p57, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $p78, $p79, $p80, $i81, $i82, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i108, $p111, $p112, $i113, $i114, $i115, $i84, $p83, $p116, $p117, $p118, $p119, $p120, $i121, $i122, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $p139, $i140, $i141, $i142, $i123, $p143, $p144, $p145, $p146, $p147, $i148, $i149, $p150, $i151, $p152, $i153, $i154, $i155, $p157, $p158, $p159, $i160, $i162, $i163, $i164, $i165, $i166, $i156, $p167, $i168, $i169, $p170, $p171, $p172, $p173, $p174, $p175, $i176, $i177, $p178, $i179, $i180, $i48, vslice_dummy_var_91 := make_discard_request_loop_$bb8($p0, $p1, $p2, $p5, $i46, $p49, $p50, $p52, $p53, $p54, $p56, $p57, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $p78, $p79, $p80, $i81, $i82, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i108, $p111, $p112, $i113, $i114, $i115, $i84, $p83, $p116, $p117, $p118, $p119, $p120, $i121, $i122, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $p139, $i140, $i141, $i142, $i123, $p143, $p144, $p145, $p146, $p147, $i148, $i149, $p150, $i151, $p152, $i153, $i154, $i155, $p157, $p158, $p159, $i160, $i162, $i163, $i164, $i165, $i166, $i156, $p167, $i168, $i169, $p170, $p171, $p172, $p173, $p174, $p175, $i176, $i177, $p178, $i179, $i180, $i48, vslice_dummy_var_91);
    goto $bb8_last;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $p49 := get_current();
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p49);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, autoremove_wake_function);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p54);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p60, $p61, $p62, $i63, $i64, $i65, $p68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $p78, $p79, $p80, $i81, $i82, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i108, $p111, $p112, $i113, $i114, $i115, $i84, $p83, $p116 := make_discard_request_loop_$bb10($p2, $p5, $p60, $p61, $p62, $i63, $i64, $i65, $p68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $p78, $p79, $p80, $i81, $i82, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i108, $p111, $p112, $i113, $i114, $i115, $i84, $p83, $p116, $i48);
    goto $bb10_last;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} prepare_to_wait($p61, $p2, 2);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i64 := $sext.i16.i32($i63);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i65, 368)), $mul.ref(360, 1));
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} set_bit(7, $p68);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} $i70 := constant_test_bit(3, $p69);
    call {:si_unique_call 2314} {:cexpr "tmp___0"} boogie_si_record_i32($i70);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i74 := $sext.i16.i32($i73);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i75, 368)), $mul.ref(360, 1));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} clear_bit(7, $p78);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} ldv_spin_lock_irq_121($p79);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32(0, $i81);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p83 := $p60;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p117 := $p83;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} set_bit(19, $p118);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} finish_wait($p119, $p2);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32(0, $i121);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} ldv_spin_unlock_irq_122($p143);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $p172 := $p117;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} set_bit(1, $p173);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} clear_bit(7, $p174);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} $i176 := test_and_set_bit(6, $p175);
    call {:si_unique_call 2336} {:cexpr "tmp___1"} boogie_si_record_i32($i176);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} release_stripe_plug($p0, $p172);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i48, 8);
    call {:si_unique_call 2339} {:cexpr "logical_sector"} boogie_si_record_i64($i179);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i180 := $ult.i64($i179, $i46);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i180 == 1);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb65:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i179;
    goto $bb65_dummy;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i177 == 1;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} atomic_inc($p178);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb51:
    assume $i149 == 1;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32($i151, $i153);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32(0, $i154);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p5, $mul.ref(0, 1544)), $mul.ref(912, 1));
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, 1);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(84, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} set_bit(9, $p171);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p172 := $p117;
    goto $bb61;

  $bb53:
    assume $i155 == 1;
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i156 := 0;
    goto $bb56;

  $bb56:
    call $p157, $p158, $p159, $i160, $i162, $i163, $i164, $i165, $i166, $i156, vslice_dummy_var_91 := make_discard_request_loop_$bb56($p0, $p117, $p150, $p152, $p157, $p158, $p159, $i160, $i162, $i163, $i164, $i165, $i166, $i156, vslice_dummy_var_91);
    goto $bb56_last;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.0, $p159);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} vslice_dummy_var_91 := bitmap_startwrite($p158, $i160, 8, 0);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i156, 1);
    call {:si_unique_call 2331} {:cexpr "d"} boogie_si_record_i32($i162);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p150);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p152);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i165 := $sub.i32($i163, $i164);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i162, $i165);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i166 == 1);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $i156 := $i162;
    goto $bb58_dummy;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i122 == 1;
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i123 := 0;
    goto $bb39;

  $bb39:
    call $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $p139, $i140, $i141, $i142, $i123 := make_discard_request_loop_$bb39($p1, $p117, $p120, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $p139, $i140, $i141, $i142, $i123);
    goto $bb39_last;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i125 := $load.i16($M.0, $p124);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i126 := $sext.i16.i32($i125);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i123, $i126);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i127 == 1);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i130 := $sext.i16.i32($i129);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i123, $i130);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i123);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i132, 368)), $mul.ref(336, 1));
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p1);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i123);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i136, 368)), $mul.ref(360, 1));
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} set_bit(3, $p139);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} raid5_inc_bi_active_stripes($p1);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i123, 1);
    call {:si_unique_call 2326} {:cexpr "d"} boogie_si_record_i32($i140);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p120);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i140, $i141);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i142 == 1);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb48:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i123 := $i140;
    goto $bb48_dummy;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb42;

  $bb15:
    assume $i82 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb17;

  $bb17:
    call $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i113, $i114, $i115, $i84, $p116 := make_discard_request_loop_$bb17($p60, $p80, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p96, $p97, $i98, $i99, $i101, $p104, $p105, $i106, $i107, $i100, $i113, $i114, $i115, $i84, $p116);
    goto $bb17_last;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i87 := $sext.i16.i32($i86);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i84, $i87);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i88 == 1);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i91 := $sext.i16.i32($i90);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i84, $i91);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i84);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i93, 368)), $mul.ref(336, 1));
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i100 := $i84;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i99 == 1);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i84);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i101, 368)), $mul.ref(320, 1));
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i100 := $i84;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i84, 1);
    call {:si_unique_call 2319} {:cexpr "d"} boogie_si_record_i32($i113);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p80);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i113, $i114);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $p116 := $p60;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $p117 := $p116;
    goto $bb34;

  $bb32:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i84 := $i113;
    goto $bb32_dummy;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i100);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref($i108, 368)), $mul.ref(360, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} set_bit(7, $p111);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} ldv_spin_unlock_irq_122($p112);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} release_stripe($p60);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} schedule();
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb20;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i71 == 1;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} release_stripe($p60);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} schedule();
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb58_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10797;

  $bb48_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  $bb32_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  $bb13_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} $p60 := get_active_stripe($p5, $i48, 0, 0, 0);
    goto SeqInstr_1003, SeqInstr_1004;

  $bb65_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10650;
}



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 755820);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    return;
}



const flush_signals: ref;

axiom flush_signals == $sub.ref(0, 756852);

procedure flush_signals($p0: ref);
  free requires assertsPassed;



implementation flush_signals($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    return;
}



const release_stripe_plug: ref;

axiom release_stripe_plug == $sub.ref(0, 757884);

procedure release_stripe_plug($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation release_stripe_plug($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $p3 := blk_check_plugged(raid5_unplug, $p2, 176);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $i16 := test_and_set_bit(18, $p15);
    call {:si_unique_call 2351} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} release_stripe($p1);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} list_add_tail($p18, $p19);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} INIT_LIST_HEAD($p12);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} INIT_LIST_HEAD($p14);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 16));
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} INIT_LIST_HEAD($p22);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(2, 16));
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} INIT_LIST_HEAD($p25);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(3, 16));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} INIT_LIST_HEAD($p28);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(4, 16));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} INIT_LIST_HEAD($p31);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(5, 16));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} INIT_LIST_HEAD($p34);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(6, 16));
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} INIT_LIST_HEAD($p37);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(7, 16));
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} INIT_LIST_HEAD($p40);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} release_stripe($p1);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1024:
    assume !assertsPassed;
    return;
}



const raid5_unplug: ref;

axiom raid5_unplug == $sub.ref(0, 758916);

procedure raid5_unplug($p0: ref, $i1: i1);



const blk_check_plugged: ref;

axiom blk_check_plugged == $sub.ref(0, 759948);

procedure blk_check_plugged($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_check_plugged($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} {:cexpr "blk_check_plugged:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $p3 := external_alloc();
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const trace_block_unplug: ref;

axiom trace_block_unplug == $sub.ref(0, 760980);

procedure trace_block_unplug($p0: ref, $i1: i32, $i2: i1);



const in_chunk_boundary: ref;

axiom in_chunk_boundary == $sub.ref(0, 762012);

procedure in_chunk_boundary($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation in_chunk_boundary($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} $i4 := get_start_sect($p3);
    call {:si_unique_call 2363} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i4);
    call {:si_unique_call 2364} {:cexpr "sector"} boogie_si_record_i64($i8);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 2365} {:cexpr "chunk_sectors"} boogie_si_record_i32($i10);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i13, 9);
    call {:si_unique_call 2366} {:cexpr "bio_sectors"} boogie_si_record_i32($i14);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, $i18);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i22, 1);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i8, $i25);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i14);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i26, $i27);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i29 := $uge.i64($i23, $i28);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 2367} {:cexpr "chunk_sectors"} boogie_si_record_i32($i21);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;
}



const bio_clone_mddev: ref;

axiom bio_clone_mddev == $sub.ref(0, 763044);

procedure bio_clone_mddev($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bio_clone_mddev($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} {:cexpr "bio_clone_mddev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $p3 := external_alloc();
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const raid5_align_endio: ref;

axiom raid5_align_endio == $sub.ref(0, 764076);

procedure raid5_align_endio($p0: ref, $i1: i32);



const bio_fits_rdev: ref;

axiom bio_fits_rdev == $sub.ref(0, 765108);

procedure bio_fits_rdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bio_fits_rdev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i16;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} $p3 := bdev_get_queue($p2);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $i4 := queue_max_sectors($p3);
    call {:si_unique_call 2372} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 9);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, $i4);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} blk_recount_segments($p3, $p0);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i11 := queue_max_segments($p3);
    call {:si_unique_call 2375} {:cexpr "tmp___1"} boogie_si_record_i16($i11);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i11);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i13, $i14);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(304, 1));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.50, $p16);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const bio_put: ref;

axiom bio_put == $sub.ref(0, 766140);

procedure bio_put($p0: ref);
  free requires assertsPassed;



implementation bio_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    return;
}



const queue_max_sectors: ref;

axiom queue_max_sectors == $sub.ref(0, 767172);

procedure queue_max_sectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queue_max_sectors($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(24, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.50, $p2);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const blk_recount_segments: ref;

axiom blk_recount_segments == $sub.ref(0, 768204);

procedure blk_recount_segments($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation blk_recount_segments($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    return;
}



const queue_max_segments: ref;

axiom queue_max_segments == $sub.ref(0, 769236);

procedure queue_max_segments($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_max_segments($p0: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(66, 1));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.50, $p2);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const add_bio_to_retry: ref;

axiom add_bio_to_retry == $sub.ref(0, 770268);

procedure add_bio_to_retry($p0: ref, $p1: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_140: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_140 == $sub.ref(0, 771300);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_140($p0: ref);



const raid5_check_reshape: ref;

axiom raid5_check_reshape == $sub.ref(0, 772332);

procedure raid5_check_reshape($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation raid5_check_reshape($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 2376} {:cexpr "new_chunk"} boogie_si_record_i32($i5);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i5, 0);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} $i46 := check_reshape($p0);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    call {:si_unique_call 2384} {:cexpr "tmp___2"} boogie_si_record_i32($i46);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i13 := $i46;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i33 := $sge.i32($i32, 0);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i5, 0);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(40, 1));
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} set_bit(0, $p43);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} md_wakeup_thread($p45);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(592, 1));
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i5);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i5);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i5);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} $i16 := is_power_of_2($i15);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 2380} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i5, 7);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i23, $i25);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb5;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb5;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb5;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $i11 := algorithm_valid_raid5($i10);
    call {:si_unique_call 2378} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb5;
}



const raid5_takeover: ref;

axiom raid5_takeover == $sub.ref(0, 773364);

procedure raid5_takeover($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid5_takeover($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 6);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $p21 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p5 := $p21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $p20 := raid5_takeover_raid6($p0);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p5 := $p20;
    goto $bb3;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 5);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 5);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} $p15 := setup_conf($p0);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $p5 := $p15;
    goto $bb3;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $p9 := raid5_takeover_raid1($p0);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p5 := $p9;
    goto $bb3;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p4 := raid45_takeover_raid0($p0, 5);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const raid45_takeover_raid0: ref;

axiom raid45_takeover_raid0 == $sub.ref(0, 774396);

procedure raid45_takeover_raid0($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid45_takeover_raid0($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p11: ref;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} {:cexpr "raid45_takeover_raid0:arg:level"} boogie_si_record_i32($i1);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 1);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    call {:si_unique_call 2394} {:cexpr "sectors"} boogie_si_record_i64($i15);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i64($i15, $i20);
    call {:si_unique_call 2395} {:cexpr "sectors"} boogie_si_record_i64($i21);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(472, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i1);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 5);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(420, 1));
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1120, 1));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $sub.i64(0, 1));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $p34 := setup_conf($p0);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $p11 := $p34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $p8 := mdname($p0);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} vslice_dummy_var_92 := printk.ref.ref(.str.128, $p8);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} $p10 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;
}



const raid5_takeover_raid1: ref;

axiom raid5_takeover_raid1 == $sub.ref(0, 775428);

procedure raid5_takeover_raid1($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid5_takeover_raid1($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i13: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p8: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 2);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(1020, 1));
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 1);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(480, 1));
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p9);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 127);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i13 := 128;
    assume {:branchcond $i16} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i13, 9);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 4095);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 5);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 2);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(548, 1));
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i13);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $p23 := setup_conf($p0);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $p19 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $p8 := $p19;
    goto $bb6;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 63);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i13 := 64;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p9);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 31);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i13 := 32;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p9);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 15);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i13 := 16;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p9);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 7);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i13 := 8;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb26:
    assume $i33 == 1;
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p9);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 3);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i13 := 4;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb29:
    assume $i36 == 1;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p9);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i13 := 2;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb12;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume {:branchcond 0} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb12;

  $bb35:
    assume 0 == 1;
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $p7 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const raid5_takeover_raid6: ref;

axiom raid5_takeover_raid6 == $sub.ref(0, 776460);

procedure raid5_takeover_raid6($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid5_takeover_raid6($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 16);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 17);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 18);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 19);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 20);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(444, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 5);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p20 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := 5;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 5);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i19);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(536, 1));
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 1));
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(464, 1));
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p29 := setup_conf($p0);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p21 := $p29;
    goto $bb27;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := 4;
    goto $bb26;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := 3;
    goto $bb26;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := 2;
    goto $bb26;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb26;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb26;
}



const raid4_takeover: ref;

axiom raid4_takeover == $sub.ref(0, 777492);

procedure raid4_takeover($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation raid4_takeover($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(440, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(55, 8));
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 21474836485);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $p14 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p5 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(544, 1));
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(540, 1));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 4);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $p12 := setup_conf($p0);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $p5 := $p12;
    goto $bb3;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p4 := raid45_takeover_raid0($p0, 4);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;

  SeqInstr_1054:
    assume !assertsPassed;
    return;
}



const ldv_EMGentry_exit_raid5_exit_11_2: ref;

axiom ldv_EMGentry_exit_raid5_exit_11_2 == $sub.ref(0, 778524);

procedure ldv_EMGentry_exit_raid5_exit_11_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_raid5_exit_11_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} raid5_exit();
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    return;
}



const raid5_exit: ref;

axiom raid5_exit == $sub.ref(0, 779556);

procedure raid5_exit();
  free requires assertsPassed;



implementation raid5_exit()
{
  var $p3: ref;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} vslice_dummy_var_93 := ldv_unregister_md_personality_204(raid6_personality);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} vslice_dummy_var_94 := ldv_unregister_md_personality_205(raid5_personality);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} vslice_dummy_var_95 := ldv_unregister_md_personality_206(raid4_personality);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p3 := $M.3;
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} destroy_workqueue($p3);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_md_personality_204: ref;

axiom ldv_unregister_md_personality_204 == $sub.ref(0, 780588);

procedure ldv_unregister_md_personality_204($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_md_personality_204($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $i1 := unregister_md_personality($p0);
    call {:si_unique_call 2411} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $i2 := ldv_unregister_md_personality($i1, $p0);
    call {:si_unique_call 2413} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_unregister_md_personality_205: ref;

axiom ldv_unregister_md_personality_205 == $sub.ref(0, 781620);

procedure ldv_unregister_md_personality_205($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_md_personality_205($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $i1 := unregister_md_personality($p0);
    call {:si_unique_call 2415} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $i2 := ldv_unregister_md_personality($i1, $p0);
    call {:si_unique_call 2417} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_unregister_md_personality_206: ref;

axiom ldv_unregister_md_personality_206 == $sub.ref(0, 782652);

procedure ldv_unregister_md_personality_206($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_md_personality_206($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $i1 := unregister_md_personality($p0);
    call {:si_unique_call 2419} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $i2 := ldv_unregister_md_personality($i1, $p0);
    call {:si_unique_call 2421} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 783684);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    return;
}



const unregister_md_personality: ref;

axiom unregister_md_personality == $sub.ref(0, 784716);

procedure unregister_md_personality($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_md_personality($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2422} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2423} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_md_personality: ref;

axiom ldv_unregister_md_personality == $sub.ref(0, 785748);

procedure ldv_unregister_md_personality($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_md_personality($i0: i32, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} {:cexpr "ldv_unregister_md_personality:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} ldv_dispatch_deregister_8_1($p1);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dispatch_deregister_8_1: ref;

axiom ldv_dispatch_deregister_8_1 == $sub.ref(0, 786780);

procedure ldv_dispatch_deregister_8_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_8_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $i1 := ldv_undef_int();
    call {:si_unique_call 2427} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} ldv_stop();
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const ldv_EMGentry_init_raid5_init_11_8: ref;

axiom ldv_EMGentry_init_raid5_init_11_8 == $sub.ref(0, 787812);

procedure ldv_EMGentry_init_raid5_init_11_8($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_EMGentry_init_raid5_init_11_8($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i1 := raid5_init();
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    call {:si_unique_call 2430} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const raid5_init: ref;

axiom raid5_init == $sub.ref(0, 788844);

procedure raid5_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation raid5_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $p1 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.15, 106, 0, $p0, .str.14);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $M.3 := $p1;
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $p2 := $M.3;
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} vslice_dummy_var_96 := ldv_register_md_personality_201(raid6_personality);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} vslice_dummy_var_97 := ldv_register_md_personality_202(raid5_personality);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} vslice_dummy_var_98 := ldv_register_md_personality_203(raid4_personality);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 789876);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2437} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} $p5 := external_alloc();
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_register_md_personality_201: ref;

axiom ldv_register_md_personality_201 == $sub.ref(0, 790908);

procedure ldv_register_md_personality_201($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_register_md_personality_201($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i1 := register_md_personality($p0);
    call {:si_unique_call 2440} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $i2 := ldv_register_md_personality($i1, $p0);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    call {:si_unique_call 2442} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;
}



const ldv_register_md_personality_202: ref;

axiom ldv_register_md_personality_202 == $sub.ref(0, 791940);

procedure ldv_register_md_personality_202($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_register_md_personality_202($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $i1 := register_md_personality($p0);
    call {:si_unique_call 2444} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i2 := ldv_register_md_personality($i1, $p0);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    call {:si_unique_call 2446} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;
}



const ldv_register_md_personality_203: ref;

axiom ldv_register_md_personality_203 == $sub.ref(0, 792972);

procedure ldv_register_md_personality_203($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_register_md_personality_203($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $i1 := register_md_personality($p0);
    call {:si_unique_call 2448} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $i2 := ldv_register_md_personality($i1, $p0);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    call {:si_unique_call 2450} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;
}



const register_md_personality: ref;

axiom register_md_personality == $sub.ref(0, 794004);

procedure register_md_personality($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_md_personality($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2451} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_md_personality: ref;

axiom ldv_register_md_personality == $sub.ref(0, 795036);

procedure ldv_register_md_personality($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_register_md_personality($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} {:cexpr "ldv_register_md_personality:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $i2 := ldv_undef_int();
    call {:si_unique_call 2455} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i0, 0);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} ldv_assume($i7);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} ldv_assume($i5);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} ldv_dispatch_register_9_2($p1);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1081:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_9_2: ref;

axiom ldv_dispatch_register_9_2 == $sub.ref(0, 796068);

procedure ldv_dispatch_register_9_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_dispatch_register_9_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} $i1 := ldv_undef_int();
    call {:si_unique_call 2460} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} ldv_stop();
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} $p13 := ldv_xmalloc(16);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} ldv_struct_md_personality_io_instance_2($p16);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} $p9 := ldv_xmalloc(16);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} ldv_struct_md_personality_io_instance_1($p12);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} $p5 := ldv_xmalloc(16);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p0);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} ldv_struct_md_personality_io_instance_0($p8);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1084:
    assume !assertsPassed;
    return;
}



const ldv_struct_md_personality_io_instance_0: ref;

axiom ldv_struct_md_personality_io_instance_0 == $sub.ref(0, 797100);

procedure ldv_struct_md_personality_io_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $CurrAddr, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_struct_md_personality_io_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $p8 := ldv_xmalloc(136);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $p10 := ldv_xmalloc(16);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} $p12 := ldv_xmalloc(32);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} $p14 := ldv_xmalloc(832);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $p16 := ldv_xmalloc(2024);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $p18 := ldv_xmalloc(256);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} $i20 := ldv_undef_int();
    call {:si_unique_call 2476} {:cexpr "tmp___6"} boogie_si_record_i32($i20);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p9);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} ldv_free($p34);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p11);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} ldv_free($p35);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p13);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} ldv_free($p36);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p15);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} ldv_free($p37);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p17);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} ldv_free($p38);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p19);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} ldv_free($p39);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64 := ldv_struct_md_personality_io_instance_0_loop_$bb7($p7, $p9, $p11, $p13, $p15, $p17, $p19, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64);
    goto $bb7_last;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $i24 := ldv_io_instance_probe_0_11($p23, $p17);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    call {:si_unique_call 2484} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $i25 := ldv_filter_err_code($i24);
    call {:si_unique_call 2486} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i25);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $i26 := ldv_undef_int();
    call {:si_unique_call 2488} {:cexpr "tmp___5"} boogie_si_record_i32($i26);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i25, 0);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} ldv_assume($i31);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $i32 := ldv_undef_int();
    call {:si_unique_call 2494} {:cexpr "tmp___6"} boogie_si_record_i32($i32);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, 0);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} ldv_assume($i29);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61 := ldv_struct_md_personality_io_instance_0_loop_$bb10($p9, $p11, $p13, $p15, $p17, $p19, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61);
    goto $bb10_last;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i40, 2);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i40, 3);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 4);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 5);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 6);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i40, 7);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i40, 8);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i40, 9);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i40, 10);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i40, 11);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i40, 12);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i40, 13);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i40, 14);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i40, 15);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i40, 16);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $i57 := $i40;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 17);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} ldv_stop();
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb79:
    assume $i58 == 1;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p9);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} ldv_io_instance_release_0_2($p63, $p17, $p64);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i56 == 1;
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} ldv_io_instance_callback_0_4($u13, $p17);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i55 == 1;
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} ldv_io_instance_callback_0_17($u22, $p17, $u2);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb67:
    assume $i54 == 1;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} ldv_io_instance_callback_0_20($u21, $p17, $p15);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i53 == 1;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} ldv_io_instance_callback_0_21($u20, $p17);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i52 == 1;
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ldv_io_instance_callback_0_22($u19, $p17, $p15);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i51 == 1;
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} ldv_io_instance_callback_0_23($u19, $p17, $p15);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i50 == 1;
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} ldv_io_instance_callback_0_24($u18, $p17, $p9);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i49 == 1;
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_io_instance_callback_0_25($u17, $p17, $p13, $p11);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb43:
    assume $i48 == 1;
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} ldv_io_instance_callback_0_26($u16, $p17, $u2);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_io_instance_callback_0_29($u15, $p17, $u0);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_io_instance_callback_0_32($u14, $p17, $u0, $u2);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} ldv_io_instance_callback_0_35($u13, $p17);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i44 == 1;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} ldv_io_instance_callback_0_36($u13, $p17);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} ldv_io_instance_callback_0_37($u12, $p19, $p17);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $p59 := ldv_xmalloc(4);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} ldv_io_instance_callback_0_38($u11, $p17, $u0, $p60, $u2);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} ldv_free($p61);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} ldv_io_instance_callback_0_41($u10, $p17);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} ldv_free($p6);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb84_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i40 := ldv_undef_int();
    call {:si_unique_call 2492} {:cexpr "tmp___7"} boogie_si_record_i32($i40);
    goto corral_source_split_11518;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11501;
}



const ldv_struct_md_personality_io_instance_1: ref;

axiom ldv_struct_md_personality_io_instance_1 == $sub.ref(0, 798132);

procedure ldv_struct_md_personality_io_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $CurrAddr, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_struct_md_personality_io_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $p8 := ldv_xmalloc(136);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $p10 := ldv_xmalloc(16);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $p12 := ldv_xmalloc(32);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $p14 := ldv_xmalloc(832);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $p16 := ldv_xmalloc(2024);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} $p18 := ldv_xmalloc(256);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $i20 := ldv_undef_int();
    call {:si_unique_call 2523} {:cexpr "tmp___6"} boogie_si_record_i32($i20);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p9);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} ldv_free($p34);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p11);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} ldv_free($p35);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p13);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} ldv_free($p36);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p15);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} ldv_free($p37);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p17);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} ldv_free($p38);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p19);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} ldv_free($p39);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64 := ldv_struct_md_personality_io_instance_1_loop_$bb7($p7, $p9, $p11, $p13, $p15, $p17, $p19, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64);
    goto $bb7_last;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} $i24 := ldv_io_instance_probe_1_11($p23, $p17);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    call {:si_unique_call 2531} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} $i25 := ldv_filter_err_code($i24);
    call {:si_unique_call 2533} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i25);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $i26 := ldv_undef_int();
    call {:si_unique_call 2535} {:cexpr "tmp___5"} boogie_si_record_i32($i26);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i25, 0);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} ldv_assume($i31);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} $i32 := ldv_undef_int();
    call {:si_unique_call 2541} {:cexpr "tmp___6"} boogie_si_record_i32($i32);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, 0);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} ldv_assume($i29);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61 := ldv_struct_md_personality_io_instance_1_loop_$bb10($p9, $p11, $p13, $p15, $p17, $p19, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61);
    goto $bb10_last;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i40, 2);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i40, 3);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 4);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 5);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 6);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i40, 7);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i40, 8);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i40, 9);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i40, 10);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i40, 11);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i40, 12);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i40, 13);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i40, 14);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i40, 15);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i40, 16);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i57 := $i40;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 17);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} ldv_stop();
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb79:
    assume $i58 == 1;
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p9);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} ldv_io_instance_release_1_2($p63, $p17, $p64);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i56 == 1;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ldv_io_instance_callback_1_4($u13, $p17);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i55 == 1;
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} ldv_io_instance_callback_1_17($u22, $p17, $u2);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb67:
    assume $i54 == 1;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} ldv_io_instance_callback_1_20($u21, $p17, $p15);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i53 == 1;
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} ldv_io_instance_callback_1_21($u20, $p17);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i52 == 1;
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} ldv_io_instance_callback_1_22($u19, $p17, $p15);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i51 == 1;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_io_instance_callback_1_23($u19, $p17, $p15);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i50 == 1;
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} ldv_io_instance_callback_1_24($u18, $p17, $p9);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i49 == 1;
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} ldv_io_instance_callback_1_25($u17, $p17, $p13, $p11);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb43:
    assume $i48 == 1;
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} ldv_io_instance_callback_1_26($u16, $p17, $u2);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} ldv_io_instance_callback_1_29($u15, $p17, $u0);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_io_instance_callback_1_32($u14, $p17, $u0, $u2);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} ldv_io_instance_callback_1_35($u13, $p17);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i44 == 1;
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} ldv_io_instance_callback_1_36($u13, $p17);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} ldv_io_instance_callback_1_37($u12, $p19, $p17);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} $p59 := ldv_xmalloc(4);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} ldv_io_instance_callback_1_38($u11, $p17, $u0, $p60, $u2);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_free($p61);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} ldv_io_instance_callback_1_41($u10, $p17);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} ldv_free($p6);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb84_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $i40 := ldv_undef_int();
    call {:si_unique_call 2539} {:cexpr "tmp___7"} boogie_si_record_i32($i40);
    goto corral_source_split_11694;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11677;
}



const ldv_struct_md_personality_io_instance_2: ref;

axiom ldv_struct_md_personality_io_instance_2 == $sub.ref(0, 799164);

procedure ldv_struct_md_personality_io_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.2, $M.1, $M.12, $M.27, $CurrAddr, $M.18, $M.17, $M.19, $M.29, $M.49, assertsPassed, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_struct_md_personality_io_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $p8 := ldv_xmalloc(136);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $p10 := ldv_xmalloc(16);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $p12 := ldv_xmalloc(32);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} $p14 := ldv_xmalloc(832);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $p16 := ldv_xmalloc(2024);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $p18 := ldv_xmalloc(256);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $i20 := ldv_undef_int();
    call {:si_unique_call 2570} {:cexpr "tmp___6"} boogie_si_record_i32($i20);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p9);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} ldv_free($p34);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p11);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} ldv_free($p35);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p13);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} ldv_free($p36);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p15);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} ldv_free($p37);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p17);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} ldv_free($p38);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p19);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} ldv_free($p39);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64 := ldv_struct_md_personality_io_instance_2_loop_$bb7($p7, $p9, $p11, $p13, $p15, $p17, $p19, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64);
    goto $bb7_last;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $i24 := ldv_io_instance_probe_2_11($p23, $p17);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    call {:si_unique_call 2578} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $i25 := ldv_filter_err_code($i24);
    call {:si_unique_call 2580} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i25);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $i26 := ldv_undef_int();
    call {:si_unique_call 2582} {:cexpr "tmp___5"} boogie_si_record_i32($i26);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i25, 0);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} ldv_assume($i31);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} $i32 := ldv_undef_int();
    call {:si_unique_call 2588} {:cexpr "tmp___6"} boogie_si_record_i32($i32);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, 0);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_assume($i29);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61 := ldv_struct_md_personality_io_instance_2_loop_$bb10($p9, $p11, $p13, $p15, $p17, $p19, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $p61);
    goto $bb10_last;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i40, 2);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i40, 3);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 4);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 5);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 6);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i40, 7);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i40, 8);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i40, 9);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i40, 10);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i40, 11);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i40, 12);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i40, 13);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i40, 14);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i40, 15);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i40, 16);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $i57 := $i40;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 17);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} ldv_stop();
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb79:
    assume $i58 == 1;
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p9);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} ldv_io_instance_release_2_2($p63, $p17, $p64);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i56 == 1;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} ldv_io_instance_callback_2_4($u13, $p17);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i55 == 1;
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} ldv_io_instance_callback_2_17($u22, $p17, $u2);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb67:
    assume $i54 == 1;
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} ldv_io_instance_callback_2_20($u21, $p17, $p15);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i53 == 1;
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} ldv_io_instance_callback_2_21($u20, $p17);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i52 == 1;
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} ldv_io_instance_callback_2_22($u19, $p17, $p15);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i51 == 1;
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} ldv_io_instance_callback_2_23($u19, $p17, $p15);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i50 == 1;
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} ldv_io_instance_callback_2_24($u18, $p17, $p9);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i49 == 1;
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} ldv_io_instance_callback_2_25($u17, $p17, $p13, $p11);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb43:
    assume $i48 == 1;
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_io_instance_callback_2_26($u16, $p17, $u2);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} ldv_io_instance_callback_2_29($u15, $p17, $u0);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_io_instance_callback_2_32($u14, $p17, $u0, $u2);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} ldv_io_instance_callback_2_35($u13, $p17);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i44 == 1;
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_io_instance_callback_2_36($u13, $p17);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} ldv_io_instance_callback_2_37($u12, $p19, $p17);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $p59 := ldv_xmalloc(4);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} ldv_io_instance_callback_2_38($u11, $p17, $u0, $p60, $u2);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_free($p61);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} ldv_io_instance_callback_2_41($u10, $p17);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} ldv_free($p6);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb84_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $i40 := ldv_undef_int();
    call {:si_unique_call 2586} {:cexpr "tmp___7"} boogie_si_record_i32($i40);
    goto corral_source_split_11870;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11853;
}



const ldv_io_instance_probe_2_11: ref;

axiom ldv_io_instance_probe_2_11 == $sub.ref(0, 800196);

procedure ldv_io_instance_probe_2_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $M.29, $M.49, $CurrAddr, $M.1, assertsPassed, $M.2, $M.21, $M.23, $M.22;



implementation ldv_io_instance_probe_2_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $i2 := run($p1);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    call {:si_unique_call 2610} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 801228);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2613} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_io_instance_callback_2_41: ref;

axiom ldv_io_instance_callback_2_41 == $sub.ref(0, 802260);

procedure ldv_io_instance_callback_2_41($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_2_41($p0: ref, $p1: ref)
{
  var vslice_dummy_var_99: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} vslice_dummy_var_99 := raid6_takeover($p1);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_38: ref;

axiom ldv_io_instance_callback_2_38 == $sub.ref(0, 803292);

procedure ldv_io_instance_callback_2_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.12, $CurrAddr, assertsPassed, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_2_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32)
{
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} {:cexpr "ldv_io_instance_callback_2_38:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2616} {:cexpr "ldv_io_instance_callback_2_38:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} vslice_dummy_var_100 := sync_request($p1, $i2, $p3, $i4);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_37: ref;

axiom ldv_io_instance_callback_2_37 == $sub.ref(0, 804324);

procedure ldv_io_instance_callback_2_37($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_2_37($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} status($p1, $p2);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_2_36: ref;

axiom ldv_io_instance_callback_2_36 == $sub.ref(0, 805356);

procedure ldv_io_instance_callback_2_36($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.21, $M.23, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_io_instance_callback_2_36($p0: ref, $p1: ref)
{
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} vslice_dummy_var_101 := raid5_start_reshape($p1);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_35: ref;

axiom ldv_io_instance_callback_2_35 == $sub.ref(0, 806388);

procedure ldv_io_instance_callback_2_35($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed, $M.29, $CurrAddr;



implementation ldv_io_instance_callback_2_35($p0: ref, $p1: ref)
{
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} vslice_dummy_var_102 := raid5_spare_active($p1);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_32: ref;

axiom ldv_io_instance_callback_2_32 == $sub.ref(0, 807420);

procedure ldv_io_instance_callback_2_32($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_2_32($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_103: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} {:cexpr "ldv_io_instance_callback_2_32:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2622} {:cexpr "ldv_io_instance_callback_2_32:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} vslice_dummy_var_103 := raid5_size($p1, $i2, $i3);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_2_29: ref;

axiom ldv_io_instance_callback_2_29 == $sub.ref(0, 808452);

procedure ldv_io_instance_callback_2_29($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_io_instance_callback_2_29($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} {:cexpr "ldv_io_instance_callback_2_29:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} vslice_dummy_var_104 := raid5_resize($p1, $i2);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_2_26: ref;

axiom ldv_io_instance_callback_2_26 == $sub.ref(0, 809484);

procedure ldv_io_instance_callback_2_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.1, assertsPassed, $M.45;



implementation ldv_io_instance_callback_2_26($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} {:cexpr "ldv_io_instance_callback_2_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} raid5_quiesce($p1, $i2);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_25: ref;

axiom ldv_io_instance_callback_2_25 == $sub.ref(0, 810516);

procedure ldv_io_instance_callback_2_25($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_2_25($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} vslice_dummy_var_105 := raid5_mergeable_bvec($p1, $p2, $p3);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_2_24: ref;

axiom ldv_io_instance_callback_2_24 == $sub.ref(0, 811548);

procedure ldv_io_instance_callback_2_24($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_2_24($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} make_request($p1, $p2);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_23: ref;

axiom ldv_io_instance_callback_2_23 == $sub.ref(0, 812580);

procedure ldv_io_instance_callback_2_23($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_2_23($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} vslice_dummy_var_106 := raid5_remove_disk($p1, $p2);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_22: ref;

axiom ldv_io_instance_callback_2_22 == $sub.ref(0, 813612);

procedure ldv_io_instance_callback_2_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_2_22($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} vslice_dummy_var_107 := raid5_add_disk($p1, $p2);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_21: ref;

axiom ldv_io_instance_callback_2_21 == $sub.ref(0, 814644);

procedure ldv_io_instance_callback_2_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed;



implementation ldv_io_instance_callback_2_21($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} raid5_finish_reshape($p1);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_20: ref;

axiom ldv_io_instance_callback_2_20 == $sub.ref(0, 815676);

procedure ldv_io_instance_callback_2_20($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.2, $CurrAddr, assertsPassed, $M.29;



implementation ldv_io_instance_callback_2_20($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} error($p1, $p2);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_2_17: ref;

axiom ldv_io_instance_callback_2_17 == $sub.ref(0, 816708);

procedure ldv_io_instance_callback_2_17($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_2_17($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} {:cexpr "ldv_io_instance_callback_2_17:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} vslice_dummy_var_108 := raid5_congested($p1, $i2);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_2_4: ref;

axiom ldv_io_instance_callback_2_4 == $sub.ref(0, 817740);

procedure ldv_io_instance_callback_2_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_2_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} vslice_dummy_var_109 := raid6_check_reshape($p1);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_2_2: ref;

axiom ldv_io_instance_release_2_2 == $sub.ref(0, 818772);

procedure ldv_io_instance_release_2_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_release_2_2($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} raid5_free($p1, $p2);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 819804);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} ldv_assume($i2);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_io_instance_probe_1_11: ref;

axiom ldv_io_instance_probe_1_11 == $sub.ref(0, 820836);

procedure ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $M.29, $M.49, $CurrAddr, $M.1, assertsPassed, $M.2, $M.21, $M.23, $M.22;



implementation ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $i2 := run($p1);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    call {:si_unique_call 2641} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_41: ref;

axiom ldv_io_instance_callback_1_41 == $sub.ref(0, 821868);

procedure ldv_io_instance_callback_1_41($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_1_41($p0: ref, $p1: ref)
{
  var vslice_dummy_var_110: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} vslice_dummy_var_110 := raid5_takeover($p1);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_38: ref;

axiom ldv_io_instance_callback_1_38 == $sub.ref(0, 822900);

procedure ldv_io_instance_callback_1_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.12, $CurrAddr, assertsPassed, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_1_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32)
{
  var vslice_dummy_var_111: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} {:cexpr "ldv_io_instance_callback_1_38:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2644} {:cexpr "ldv_io_instance_callback_1_38:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} vslice_dummy_var_111 := sync_request($p1, $i2, $p3, $i4);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_37: ref;

axiom ldv_io_instance_callback_1_37 == $sub.ref(0, 823932);

procedure ldv_io_instance_callback_1_37($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_37($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} status($p1, $p2);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_36: ref;

axiom ldv_io_instance_callback_1_36 == $sub.ref(0, 824964);

procedure ldv_io_instance_callback_1_36($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.21, $M.23, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_io_instance_callback_1_36($p0: ref, $p1: ref)
{
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} vslice_dummy_var_112 := raid5_start_reshape($p1);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_35: ref;

axiom ldv_io_instance_callback_1_35 == $sub.ref(0, 825996);

procedure ldv_io_instance_callback_1_35($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed, $M.29, $CurrAddr;



implementation ldv_io_instance_callback_1_35($p0: ref, $p1: ref)
{
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} vslice_dummy_var_113 := raid5_spare_active($p1);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_32: ref;

axiom ldv_io_instance_callback_1_32 == $sub.ref(0, 827028);

procedure ldv_io_instance_callback_1_32($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_32($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_114: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} {:cexpr "ldv_io_instance_callback_1_32:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2650} {:cexpr "ldv_io_instance_callback_1_32:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} vslice_dummy_var_114 := raid5_size($p1, $i2, $i3);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_29: ref;

axiom ldv_io_instance_callback_1_29 == $sub.ref(0, 828060);

procedure ldv_io_instance_callback_1_29($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_io_instance_callback_1_29($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} {:cexpr "ldv_io_instance_callback_1_29:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} vslice_dummy_var_115 := raid5_resize($p1, $i2);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_26: ref;

axiom ldv_io_instance_callback_1_26 == $sub.ref(0, 829092);

procedure ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.1, assertsPassed, $M.45;



implementation ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} {:cexpr "ldv_io_instance_callback_1_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} raid5_quiesce($p1, $i2);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_25: ref;

axiom ldv_io_instance_callback_1_25 == $sub.ref(0, 830124);

procedure ldv_io_instance_callback_1_25($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_25($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} vslice_dummy_var_116 := raid5_mergeable_bvec($p1, $p2, $p3);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_24: ref;

axiom ldv_io_instance_callback_1_24 == $sub.ref(0, 831156);

procedure ldv_io_instance_callback_1_24($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_1_24($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} make_request($p1, $p2);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_23: ref;

axiom ldv_io_instance_callback_1_23 == $sub.ref(0, 832188);

procedure ldv_io_instance_callback_1_23($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_1_23($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} vslice_dummy_var_117 := raid5_remove_disk($p1, $p2);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_22: ref;

axiom ldv_io_instance_callback_1_22 == $sub.ref(0, 833220);

procedure ldv_io_instance_callback_1_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_1_22($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} vslice_dummy_var_118 := raid5_add_disk($p1, $p2);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_21: ref;

axiom ldv_io_instance_callback_1_21 == $sub.ref(0, 834252);

procedure ldv_io_instance_callback_1_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed;



implementation ldv_io_instance_callback_1_21($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} raid5_finish_reshape($p1);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_20: ref;

axiom ldv_io_instance_callback_1_20 == $sub.ref(0, 835284);

procedure ldv_io_instance_callback_1_20($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.2, $CurrAddr, assertsPassed, $M.29;



implementation ldv_io_instance_callback_1_20($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} error($p1, $p2);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_17: ref;

axiom ldv_io_instance_callback_1_17 == $sub.ref(0, 836316);

procedure ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} {:cexpr "ldv_io_instance_callback_1_17:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} vslice_dummy_var_119 := raid5_congested($p1, $i2);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_4: ref;

axiom ldv_io_instance_callback_1_4 == $sub.ref(0, 837348);

procedure ldv_io_instance_callback_1_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_1_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} vslice_dummy_var_120 := raid5_check_reshape($p1);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_1_2: ref;

axiom ldv_io_instance_release_1_2 == $sub.ref(0, 838380);

procedure ldv_io_instance_release_1_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_release_1_2($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} raid5_free($p1, $p2);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_probe_0_11: ref;

axiom ldv_io_instance_probe_0_11 == $sub.ref(0, 839412);

procedure ldv_io_instance_probe_0_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $M.29, $M.49, $CurrAddr, $M.1, assertsPassed, $M.2, $M.21, $M.23, $M.22;



implementation ldv_io_instance_probe_0_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i2 := run($p1);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    call {:si_unique_call 2667} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_41: ref;

axiom ldv_io_instance_callback_0_41 == $sub.ref(0, 840444);

procedure ldv_io_instance_callback_0_41($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_0_41($p0: ref, $p1: ref)
{
  var vslice_dummy_var_121: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_121 := raid4_takeover($p1);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_38: ref;

axiom ldv_io_instance_callback_0_38 == $sub.ref(0, 841476);

procedure ldv_io_instance_callback_0_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.12, $CurrAddr, assertsPassed, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_0_38($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32)
{
  var vslice_dummy_var_122: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} {:cexpr "ldv_io_instance_callback_0_38:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2670} {:cexpr "ldv_io_instance_callback_0_38:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} vslice_dummy_var_122 := sync_request($p1, $i2, $p3, $i4);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_37: ref;

axiom ldv_io_instance_callback_0_37 == $sub.ref(0, 842508);

procedure ldv_io_instance_callback_0_37($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_37($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} status($p1, $p2);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_36: ref;

axiom ldv_io_instance_callback_0_36 == $sub.ref(0, 843540);

procedure ldv_io_instance_callback_0_36($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.21, $M.23, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation ldv_io_instance_callback_0_36($p0: ref, $p1: ref)
{
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} vslice_dummy_var_123 := raid5_start_reshape($p1);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_35: ref;

axiom ldv_io_instance_callback_0_35 == $sub.ref(0, 844572);

procedure ldv_io_instance_callback_0_35($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed, $M.29, $CurrAddr;



implementation ldv_io_instance_callback_0_35($p0: ref, $p1: ref)
{
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} vslice_dummy_var_124 := raid5_spare_active($p1);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_32: ref;

axiom ldv_io_instance_callback_0_32 == $sub.ref(0, 845604);

procedure ldv_io_instance_callback_0_32($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_32($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_125: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} {:cexpr "ldv_io_instance_callback_0_32:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2676} {:cexpr "ldv_io_instance_callback_0_32:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} vslice_dummy_var_125 := raid5_size($p1, $i2, $i3);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_29: ref;

axiom ldv_io_instance_callback_0_29 == $sub.ref(0, 846636);

procedure ldv_io_instance_callback_0_29($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_io_instance_callback_0_29($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} {:cexpr "ldv_io_instance_callback_0_29:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} vslice_dummy_var_126 := raid5_resize($p1, $i2);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_26: ref;

axiom ldv_io_instance_callback_0_26 == $sub.ref(0, 847668);

procedure ldv_io_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.1, assertsPassed, $M.45;



implementation ldv_io_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} {:cexpr "ldv_io_instance_callback_0_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} raid5_quiesce($p1, $i2);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_25: ref;

axiom ldv_io_instance_callback_0_25 == $sub.ref(0, 848700);

procedure ldv_io_instance_callback_0_25($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_25($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_127 := raid5_mergeable_bvec($p1, $p2, $p3);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_24: ref;

axiom ldv_io_instance_callback_0_24 == $sub.ref(0, 849732);

procedure ldv_io_instance_callback_0_24($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_io_instance_callback_0_24($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} make_request($p1, $p2);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_23: ref;

axiom ldv_io_instance_callback_0_23 == $sub.ref(0, 850764);

procedure ldv_io_instance_callback_0_23($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_0_23($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} vslice_dummy_var_128 := raid5_remove_disk($p1, $p2);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_22: ref;

axiom ldv_io_instance_callback_0_22 == $sub.ref(0, 851796);

procedure ldv_io_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} vslice_dummy_var_129 := raid5_add_disk($p1, $p2);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_21: ref;

axiom ldv_io_instance_callback_0_21 == $sub.ref(0, 852828);

procedure ldv_io_instance_callback_0_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.29, assertsPassed;



implementation ldv_io_instance_callback_0_21($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} raid5_finish_reshape($p1);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_20: ref;

axiom ldv_io_instance_callback_0_20 == $sub.ref(0, 853860);

procedure ldv_io_instance_callback_0_20($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.2, $CurrAddr, assertsPassed, $M.29;



implementation ldv_io_instance_callback_0_20($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} error($p1, $p2);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_17: ref;

axiom ldv_io_instance_callback_0_17 == $sub.ref(0, 854892);

procedure ldv_io_instance_callback_0_17($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_17($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} {:cexpr "ldv_io_instance_callback_0_17:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_130 := raid5_congested($p1, $i2);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_4: ref;

axiom ldv_io_instance_callback_0_4 == $sub.ref(0, 855924);

procedure ldv_io_instance_callback_0_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.1, $M.2, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_0_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} vslice_dummy_var_131 := raid5_check_reshape($p1);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_0_2: ref;

axiom ldv_io_instance_release_0_2 == $sub.ref(0, 856956);

procedure ldv_io_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation ldv_io_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} raid5_free($p1, $p2);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_4_11_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_4_11_4 == $sub.ref(0, 857988);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_4_11_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_4_11_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_11: ref;

axiom ldv_entry_EMGentry_11 == $sub.ref(0, 859020);

procedure ldv_entry_EMGentry_11($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr, $M.0, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.2, $M.1, $M.12, $M.27, $M.29, $M.49, $M.38, $M.45, $M.21, $M.23, $M.22;



implementation ldv_entry_EMGentry_11($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $i1 := ldv_EMGentry_init_raid5_init_11_8($u23);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    call {:si_unique_call 2693} {:cexpr "ldv_11_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} $i2 := ldv_ldv_post_init_207($i1);
    call {:si_unique_call 2695} {:cexpr "ldv_11_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $i3 := ldv_undef_int();
    call {:si_unique_call 2697} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} ldv_assume($i8);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} $i9 := ldv_undef_int();
    call {:si_unique_call 2703} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} ldv_EMGentry_exit_raid5_exit_11_2($u24);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} ldv_ldv_check_final_state_209();
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} ldv_stop();
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} ldv_dispatch_deregister_dummy_resourceless_instance_4_11_4();
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} ldv_assume($i6);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} ldv_ldv_check_final_state_208();
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} ldv_stop();
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_207: ref;

axiom ldv_ldv_post_init_207 == $sub.ref(0, 860052);

procedure ldv_ldv_post_init_207($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ldv_post_init_207($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} {:cexpr "ldv_ldv_post_init_207:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2712} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_208: ref;

axiom ldv_ldv_check_final_state_208 == $sub.ref(0, 861084);

procedure ldv_ldv_check_final_state_208();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_208()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_209: ref;

axiom ldv_ldv_check_final_state_209 == $sub.ref(0, 862116);

procedure ldv_ldv_check_final_state_209();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_209()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  SeqInstr_1396:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 863148);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 864180);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 865212);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 866244);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i0 := $M.54;
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 867276);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $i0 := $M.55;
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 868308);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $i0 := $M.56;
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 869340);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 870372);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i0 := $M.57;
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i3 := $M.58;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 871404);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i0 := $M.59;
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 872436);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 873468);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 874500);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i0 := $M.29;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 875532);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 876564);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i0 := $M.60;
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i3 := $M.60;
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 877596);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i0 := $M.61;
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 878628);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $i0 := $M.62;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1504:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 879660);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $i0 := $M.63;
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1507:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 880692);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $i0 := $M.64;
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1510:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 881724);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i0 := $M.65;
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 882756);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i0 := $M.66;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1516:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 883788);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2775} __VERIFIER_error();
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 884820);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2777} __VERIFIER_error();
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 885852);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2779} __VERIFIER_error();
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 886884);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2781} __VERIFIER_error();
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 887916);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2783} __VERIFIER_error();
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 888948);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2785} __VERIFIER_error();
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 889980);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2787} __VERIFIER_error();
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 891012);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2789} __VERIFIER_error();
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 892044);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2791} __VERIFIER_error();
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 893076);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2793} __VERIFIER_error();
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 894108);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2795} __VERIFIER_error();
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 895140);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2797} __VERIFIER_error();
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 896172);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2799} __VERIFIER_error();
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1555:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 897204);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2801} __VERIFIER_error();
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1558:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 898236);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2803} __VERIFIER_error();
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1561:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 899268);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2805} __VERIFIER_error();
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1564:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 900300);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2807} __VERIFIER_error();
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 901332);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2809} __VERIFIER_error();
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1570:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 902364);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2811} __VERIFIER_error();
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1573:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 903396);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2813} __VERIFIER_error();
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1576:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 904428);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2815} __VERIFIER_error();
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 905460);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 906492);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    return;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 907524);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2820} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 908556);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.71, $M.60, $M.38, $M.23, $M.45, $M.2, $M.1, $M.5, $M.53, $M.52, $M.13, $M.0, $M.3, $M.22, $M.66, $M.65, $M.64, $M.63, $M.62, $M.61, $M.29, $M.47, $M.46, $M.48, $M.59, $M.58, $M.57, $M.49, $M.56, $M.55, $M.54, $M.51, $M.4, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $CurrAddr, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.12, $M.27, $M.21;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 2821} $initialize();
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} ldv_ldv_initialize_210();
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} ldv_entry_EMGentry_11($0.ref);
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1582:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_210: ref;

axiom ldv_ldv_initialize_210 == $sub.ref(0, 909588);

procedure ldv_ldv_initialize_210();
  free requires assertsPassed;



implementation ldv_ldv_initialize_210()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 910620);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} ldv_assume($i2);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 911652);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2827} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 1} true;
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 912684);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 913716);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 914748);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1585:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 915780);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 916812);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 917844);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 918876);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 919908);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 920940);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 921972);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 923004);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 924036);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 925068);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2828} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2829} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2830} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2831} __VERIFIER_assume($i4);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 926100);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 927132);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 928164);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 929196);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 930228);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2832} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2833} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2834} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2835} __VERIFIER_assume($i4);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 931260);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 932292);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 933324);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 934356);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 935388);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2836} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2837} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2838} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2839} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2840} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2841} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2842} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2843} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2844} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2845} __VERIFIER_assume($i7);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2846} __VERIFIER_assume($i11);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 936420);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 937452);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 938484);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 939516);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 940548);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 941580);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 942612);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 943644);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 944676);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2847} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2848} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2849} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2850} __VERIFIER_assume($i10);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 945708);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2851} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2852} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2853} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 946740);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2854} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2855} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 947772);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 948804);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2856} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2857} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 949836);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 950868);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 951900);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2858} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2859} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2860} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} $p6 := malloc($i5);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 2863} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 952932);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 953964);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.71, $M.60, $M.38, $M.23, $M.45, $M.2, $M.1, $M.5, $M.53, $M.52, $M.13, $M.0, $M.3, $M.22, $M.66, $M.65, $M.64, $M.63, $M.62, $M.61, $M.29, $M.47, $M.46, $M.48, $M.59, $M.58, $M.57, $M.49, $M.56, $M.55, $M.54, $M.51, $M.4, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108;



implementation __SMACK_static_init()
{

  $bb0:
    $M.71 := $store.i8($M.71, __kstrtab_raid5_set_cache_size, 114);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(1, 1)), 97);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(2, 1)), 105);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(3, 1)), 100);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(10, 1)), 99);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(13, 1)), 104);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(18, 1)), 122);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_raid5_set_cache_size, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.60 := 0;
    call {:si_unique_call 2864} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 2865} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    $M.38 := 1;
    call {:si_unique_call 2866} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stripe_lock_of_stripe_head"} boogie_si_record_i32(1);
    call {:si_unique_call 2867} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2868} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 2869} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.23 := 1;
    call {:si_unique_call 2870} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_mddev"} boogie_si_record_i32(1);
    call {:si_unique_call 2871} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 2872} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2873} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.45 := 1;
    call {:si_unique_call 2874} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_hash_locks_of_r5conf"} boogie_si_record_i32(1);
    $M.2 := 1;
    call {:si_unique_call 2875} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_device_lock_of_r5conf"} boogie_si_record_i32(1);
    call {:si_unique_call 2876} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.1 := 1;
    call {:si_unique_call 2877} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 2878} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.53 := 0;
    call {:si_unique_call 2879} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2880} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 2881} {:cexpr "devices_handle_discard_safely"} boogie_si_record_i8(0);
    $M.0 := $store.ref($M.0, raid5_skip_copy, .str.176);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(32, 1)), raid5_show_skip_copy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_skip_copy, $mul.ref(0, 48)), $mul.ref(40, 1)), raid5_store_skip_copy);
    $M.0 := $store.ref($M.0, raid5_group_thread_cnt, .str.175);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(32, 1)), raid5_show_group_thread_cnt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_group_thread_cnt, $mul.ref(0, 48)), $mul.ref(40, 1)), raid5_store_group_thread_cnt);
    $M.0 := $store.ref($M.0, raid5_preread_bypass_threshold, .str.174);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(32, 1)), raid5_show_preread_threshold);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_preread_bypass_threshold, $mul.ref(0, 48)), $mul.ref(40, 1)), raid5_store_preread_threshold);
    $M.0 := $store.ref($M.0, raid5_stripecache_active, .str.173);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(32, 1)), stripe_cache_active_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_stripecache_active, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, raid5_stripecache_size, .str.172);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(32, 1)), raid5_show_stripe_cache_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_stripecache_size, $mul.ref(0, 48)), $mul.ref(40, 1)), raid5_store_stripe_cache_size);
    $M.0 := $store.ref($M.0, raid5_attrs, raid5_stripecache_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs, $mul.ref(0, 48)), $mul.ref(1, 8)), raid5_stripecache_active);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs, $mul.ref(0, 48)), $mul.ref(2, 8)), raid5_preread_bypass_threshold);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs, $mul.ref(0, 48)), $mul.ref(3, 8)), raid5_group_thread_cnt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs, $mul.ref(0, 48)), $mul.ref(4, 8)), raid5_skip_copy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs, $mul.ref(0, 48)), $mul.ref(5, 8)), $0.ref);
    $M.0 := $store.ref($M.0, raid5_attrs_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs_group, $mul.ref(0, 32)), $mul.ref(16, 1)), raid5_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_attrs_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, raid4_personality, .str.12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(8, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(32, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(40, 1)), make_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(48, 1)), run);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(56, 1)), raid5_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(64, 1)), status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(72, 1)), error);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(80, 1)), raid5_add_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(88, 1)), raid5_remove_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(96, 1)), raid5_spare_active);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(104, 1)), sync_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(112, 1)), raid5_resize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(120, 1)), raid5_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(128, 1)), raid5_check_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(136, 1)), raid5_start_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(144, 1)), raid5_finish_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(152, 1)), raid5_quiesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(160, 1)), raid4_takeover);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(168, 1)), raid5_congested);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid4_personality, $mul.ref(0, 184)), $mul.ref(176, 1)), raid5_mergeable_bvec);
    $M.0 := $store.ref($M.0, raid5_personality, .str.10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(8, 1)), 5);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(32, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(40, 1)), make_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(48, 1)), run);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(56, 1)), raid5_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(64, 1)), status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(72, 1)), error);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(80, 1)), raid5_add_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(88, 1)), raid5_remove_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(96, 1)), raid5_spare_active);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(104, 1)), sync_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(112, 1)), raid5_resize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(120, 1)), raid5_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(128, 1)), raid5_check_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(136, 1)), raid5_start_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(144, 1)), raid5_finish_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(152, 1)), raid5_quiesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(160, 1)), raid5_takeover);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(168, 1)), raid5_congested);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid5_personality, $mul.ref(0, 184)), $mul.ref(176, 1)), raid5_mergeable_bvec);
    $M.0 := $store.ref($M.0, raid6_personality, .str.8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(8, 1)), 6);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(32, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(40, 1)), make_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(48, 1)), run);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(56, 1)), raid5_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(64, 1)), status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(72, 1)), error);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(80, 1)), raid5_add_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(88, 1)), raid5_remove_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(96, 1)), raid5_spare_active);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(104, 1)), sync_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(112, 1)), raid5_resize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(120, 1)), raid5_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(128, 1)), raid6_check_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(136, 1)), raid5_start_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(144, 1)), raid5_finish_reshape);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(152, 1)), raid5_quiesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(160, 1)), raid6_takeover);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(168, 1)), raid5_congested);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(raid6_personality, $mul.ref(0, 184)), $mul.ref(176, 1)), raid5_mergeable_bvec);
    $M.3 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 2882} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_reconfig_mutex_of_mddev"} boogie_si_record_i8(0);
    call {:si_unique_call 2883} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 2884} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 2885} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 2886} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 2887} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2888} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2889} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 2890} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 2891} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 2892} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    call {:si_unique_call 2893} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2894} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.29 := 0;
    call {:si_unique_call 2895} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 2896} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2897} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2898} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.59 := 1;
    call {:si_unique_call 2899} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.58 := 1;
    call {:si_unique_call 2900} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.57 := 1;
    call {:si_unique_call 2901} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.49 := 0;
    call {:si_unique_call 2902} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2903} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2904} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2905} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 2906} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.4 := 1;
    call {:si_unique_call 2907} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.0 := $store.i8($M.0, .str.8, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.102 := $store.i8($M.102, .str.144, 114);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(1, 1)), 97);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(2, 1)), 105);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.144, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.103 := $store.i8($M.103, .str.16, 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.104 := $store.i8($M.104, .str.149, 114);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.149, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.105 := $store.i8($M.105, .str.150, 114);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(8, 1)), 112);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.150, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.106 := $store.i8($M.106, .str.151, 37);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(2, 1)), 45);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(4, 1)), 108);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.151, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.107 := $store.i8($M.107, .str.117, 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(3, 1)), 104);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(5, 1)), 112);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(6, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.108 := $store.i8($M.108, .str.119, 114);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.119, $mul.ref(0, 5)), $mul.ref(1, 1)), 100);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.119, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.119, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.119, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.172, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(15, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.173, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.174, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.175, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.176, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(1, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 2908} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 954996);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 956028);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 957060);

procedure devirtbounce.2(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 958092);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 959124);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(raid5_resize, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2909} $i2 := raid5_resize($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 960156);

procedure devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 961188);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(autoremove_wake_function, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2910} $i2 := autoremove_wake_function($p1, arg1, arg2, arg3);
    $r := $i2;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 962220);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2911} $i3 := autoremove_wake_function($p1, arg1, arg2, $p2);
    $r := $i3;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 963252);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2912} $i3 := autoremove_wake_function($p1, arg1, arg2, $p2);
    $r := $i3;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 964284);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2913} $i3 := autoremove_wake_function($p1, arg1, arg2, $p2);
    $r := $i3;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 965316);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 966348);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.2, $M.29, $M.18, $M.17, $M.19, $M.49, assertsPassed, $M.1, $CurrAddr, $M.21, $M.23, $M.22;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(raid5_check_reshape, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(raid5_start_reshape, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(raid6_check_reshape, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(raid5_spare_active, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(run, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2914} $i2 := run($p1);
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    $r := $i2;
    return;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2915} $i4 := raid5_spare_active($p3);
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    $r := $i4;
    return;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2916} $i6 := raid6_check_reshape($p5);
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    $r := $i6;
    return;

  SeqInstr_1594:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2917} $i8 := raid5_start_reshape($p7);
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    $r := $i8;
    return;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2918} $i10 := raid5_check_reshape($p9);
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    $r := $i10;
    return;

  SeqInstr_1600:
    assume !assertsPassed;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 967380);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 968412);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.27, $M.2, $M.1, $CurrAddr, $M.29, assertsPassed, $M.38, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(error, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(status, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(raid5_free, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(make_request, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2919} make_request($p1, $p2);
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    return;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2920} raid5_free($p3, $p4);
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    return;

  SeqInstr_1606:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2921} status($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2922} error($p7, $p8);
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    return;

  SeqInstr_1609:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 969444);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 970476);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 971508);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 972540);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(raid4_takeover, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(raid5_takeover, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(raid6_takeover, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2923} $p2 := raid6_takeover($p1);
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    $r := $p2;
    return;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2924} $p4 := raid5_takeover($p3);
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    $r := $p4;
    return;

  SeqInstr_1615:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2925} $p6 := raid4_takeover($p5);
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    $r := $p6;
    return;

  SeqInstr_1618:
    assume !assertsPassed;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 973572);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i1);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: i32;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.71, $M.60, $M.38, $M.23, $M.45, $M.2, $M.1, $M.5, $M.53, $M.52, $M.13, $M.0, $M.3, $M.22, $M.66, $M.65, $M.64, $M.63, $M.62, $M.61, $M.29, $M.47, $M.46, $M.48, $M.59, $M.58, $M.57, $M.49, $M.56, $M.55, $M.54, $M.51, $M.4, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2926} __SMACK_static_init();
    call {:si_unique_call 2927} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.71, $M.60, $M.38, $M.23, $M.45, $M.2, $M.1, $M.5, $M.53, $M.52, $M.13, $M.0, $M.3, $M.22, $M.66, $M.65, $M.64, $M.63, $M.62, $M.61, $M.29, $M.47, $M.46, $M.48, $M.59, $M.58, $M.57, $M.49, $M.56, $M.55, $M.54, $M.51, $M.4, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.18, $M.17, $M.19, $M.12, $M.27, $M.21;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation raid5_set_cache_size_loop_$bb26(in_$i1: i32, in_$p4: ref, in_$p32: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i35: i32) returns (out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i35: i32)
{

  entry:
    out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i35 := in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i35;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  $bb32:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i43;
    goto $bb32_dummy;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(in_$i1, out_$i44);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p32);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i43 := $srem.i32(out_$i42, 8);
    call {:si_unique_call 10} {:cexpr "hash"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_76;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i35, 1);
    goto corral_source_split_75;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_67;

  $bb28:
    assume out_$i37 == 1;
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_64;

  SeqInstr_6:
    call {:si_unique_call 9} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_63;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} out_$i36 := grow_one_stripe(in_$p4, out_$i35);
    goto SeqInstr_5;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i35 := raid5_set_cache_size_loop_$bb26(in_$i1, in_$p4, in_$p32, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i35);
    return;

  exit:
    return;
}



procedure raid5_set_cache_size_loop_$bb26(in_$i1: i32, in_$p4: ref, in_$p32: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i35: i32) returns (out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i35: i32);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation raid5_set_cache_size_loop_$bb8(in_$i1: i32, in_$p4: ref, in_$p12: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i15: i32) returns (out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i15: i32)
{

  entry:
    out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i15 := in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  $bb17:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i24;
    goto $bb17_dummy;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(in_$i1, out_$i25);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p12);
    goto corral_source_split_45;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  $bb15:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    goto $bb16;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i24 := 7;
    goto $bb16;

  $bb14:
    assume out_$i23 == 1;
    goto corral_source_split_42;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_37;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i15, 1);
    call {:si_unique_call 4} {:cexpr "hash"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_36;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, out_$i20);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i19, 1);
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_29;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_28;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_27;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_25;

  SeqInstr_3:
    call {:si_unique_call 3} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_24;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} out_$i16 := drop_one_stripe(in_$p4, out_$i15);
    goto SeqInstr_2;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i15 := raid5_set_cache_size_loop_$bb8(in_$i1, in_$p4, in_$p12, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i15);
    return;

  exit:
    return;
}



procedure raid5_set_cache_size_loop_$bb8(in_$i1: i32, in_$p4: ref, in_$p12: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i15: i32) returns (out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i15: i32);
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation grow_buffers_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$i11, out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i6 := in_$p7, in_$i8, in_$i9, in_$i11, in_$p14, in_$i15, in_$p18, in_$i19, in_$i20, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i19;
    goto $bb10_dummy;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, in_$i4);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i6, 1);
    call {:si_unique_call 43} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, out_$p7);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i15, 368)), $mul.ref(312, 1));
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i6);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, out_$p7);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i11, 368)), $mul.ref(304, 1));
    goto corral_source_split_192;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i6);
    goto corral_source_split_191;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i8, 0);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_184;

  SeqInstr_27:
    goto corral_source_split_183;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$p7 := alloc_pages(208, 0);
    goto SeqInstr_26;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$i11, out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i6 := grow_buffers_loop_$bb4(in_$p0, in_$i4, out_$p7, out_$i8, out_$i9, out_$i11, out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i6);
    return;

  exit:
    return;
}



procedure grow_buffers_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i6: i32);
  modifies $M.0, assertsPassed;



implementation shrink_buffers_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i6: i32, in_vslice_dummy_var_13: i64) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i6: i32, out_vslice_dummy_var_13: i64)
{

  entry:
    out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i6, out_vslice_dummy_var_13 := in_$i7, in_$p10, in_$p11, in_$i12, in_$i13, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i30, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p40, in_$i41, in_$i42, in_$i6, in_vslice_dummy_var_13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  $bb13:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i41;
    goto $bb13_dummy;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, in_$i4);
    goto corral_source_split_245;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i6, 1);
    call {:si_unique_call 50} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_244;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i35, 0);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i30, 368)), $mul.ref(304, 1));
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i6);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_vslice_dummy_var_13 := ldv__builtin_expect(out_$i28, 0);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i32(out_$i26);
    goto corral_source_split_233;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i20, 0);
    goto corral_source_split_232;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} warn_slowpath_null(.str.1, 490);
    goto corral_source_split_230;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    call {:si_unique_call 45} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i12, out_$i18);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i13, 368)), $mul.ref(312, 1));
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i6);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i7, 368)), $mul.ref(304, 1));
    goto corral_source_split_214;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} put_page(out_$p34);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, $0.ref);
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i37, 368)), $mul.ref(304, 1));
    goto corral_source_split_248;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i6);
    goto corral_source_split_247;

  $bb10:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i6, out_vslice_dummy_var_13 := shrink_buffers_loop_$bb4(in_$p0, in_$i4, out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i6, out_vslice_dummy_var_13);
    return;

  exit:
    return;
}



procedure shrink_buffers_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i6: i32, in_vslice_dummy_var_13: i64) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i6: i32, out_vslice_dummy_var_13: i64);
  modifies $M.0;



implementation release_inactive_stripe_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i39: i8) returns (out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i39: i8)
{

  entry:
    out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i6, out_$i7, out_$i8, out_$i39 := in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i6, in_$i7, in_$i8, in_$i39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  $bb15:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7, out_$i8 := out_$i35, out_$i36, out_$i37;
    goto $bb15_dummy;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i35;
    assume true;
    goto $bb15;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i36, 0);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 150} {:cexpr "hash"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_535;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 149} {:cexpr "size"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_534;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i6;
    goto $bb14;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$i35 := 1;
    goto $bb14;

  SeqInstr_48:
    goto corral_source_split_531;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_spin_unlock_irqrestore_110(out_$p34, $u0);
    goto SeqInstr_47;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 72));
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i8);
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_528;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} list_splice_tail_init(out_$p11, out_$p30);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p28, $mul.ref(out_$i29, 16));
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i8);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_523;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_522;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} atomic_dec(out_$p26);
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1112, 1));
    goto corral_source_split_519;

  $bb10:
    assume out_$i25 == 1;
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} out_$i24 := list_empty(out_$p11);
    call {:si_unique_call 145} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_515;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_512;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} out_$i22 := list_empty(out_$p21);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 16));
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i8);
    goto corral_source_split_509;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_507;

  SeqInstr_45:
    goto corral_source_split_506;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109(out_$p17);
    goto SeqInstr_44;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 72));
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i8);
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_502;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} out_$i12 := list_empty_careful(out_$p11);
    call {:si_unique_call 140} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p1, $mul.ref(out_$i10, 16));
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i64(out_$i9, $sub.i64(0, 1));
    goto corral_source_split_496;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i6, out_$i7, out_$i8, out_$i39 := release_inactive_stripe_list_loop_$bb4(in_$p0, in_$p1, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i6, out_$i7, out_$i8, out_$i39);
    return;

  exit:
    return;
}



procedure release_inactive_stripe_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i39: i8) returns (out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i39: i8);
  modifies $M.1, assertsPassed, $M.0;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation raid5_wakeup_stripe_thread_loop_$bb14(in_$p0: ref, in_$p42: ref, in_$i43: i64, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$i71: i8, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p85: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i64: i32, in_$i65: i32, in_vslice_dummy_var_15: i1) returns (out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$i71: i8, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p85: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i64: i32, out_$i65: i32, out_vslice_dummy_var_15: i1)
{

  entry:
    out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i65, out_vslice_dummy_var_15 := in_$p66, in_$p67, in_$i68, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p77, in_$p78, in_$i79, in_$p80, in_$p81, in_$p82, in_$i83, in_$p85, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i64, in_$i65, in_vslice_dummy_var_15;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  $bb19:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i89, out_$i88;
    goto $bb19_dummy;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i1(out_$i91, out_$i92);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i92 := $sgt.i32(out_$i88, 0);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i89, out_$i90);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, in_$p59);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i64, 1);
    call {:si_unique_call 213} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_842;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i87;
    goto $bb18;

  $bb16:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i88 := out_$i65;
    goto $bb18;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i8.i1(out_$i71);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 224)), $mul.ref(216, 1));
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i64);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_816;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p42, $mul.ref(in_$i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i32(out_$i65, 1);
    call {:si_unique_call 212} {:cexpr "thread_cnt"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out_vslice_dummy_var_15 := queue_work_on(out_$i79, out_$p80, out_$p85);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p82, $mul.ref(out_$i83, 224)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i64);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p42, $mul.ref(in_$i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$p80 := $M.3;
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(176, 1));
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, 1);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p74, $mul.ref(out_$i75, 224)), $mul.ref(216, 1));
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i64);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p42, $mul.ref(in_$i43, 40)), $mul.ref(24, 1));
    goto corral_source_split_824;

  $bb17:
    assume !(out_$i72 == 1);
    goto corral_source_split_823;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i65, out_vslice_dummy_var_15 := raid5_wakeup_stripe_thread_loop_$bb14(in_$p0, in_$p42, in_$i43, in_$p59, out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i65, out_vslice_dummy_var_15);
    return;

  exit:
    return;
}



procedure raid5_wakeup_stripe_thread_loop_$bb14(in_$p0: ref, in_$p42: ref, in_$i43: i64, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$i71: i8, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p85: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i64: i32, in_$i65: i32, in_vslice_dummy_var_15: i1) returns (out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$i71: i8, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p85: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i64: i32, out_$i65: i32, out_vslice_dummy_var_15: i1);
  modifies $M.0;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_1046;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_1045;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 292} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 290} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1036;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_1035;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);
  modifies $M.0;



implementation make_request_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i62: i64) returns (out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref)
{

  entry:
    out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145 := in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i85, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$p141, in_$p142, in_$i143, in_$i144, in_$p145;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1422;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557_dummy;

  SeqInstr_135:
    goto corral_source_split_1557;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} release_stripe(out_$p120);
    goto SeqInstr_134;

  $bb69:
    assume out_$i144 == 1;
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p145 := out_$p120;
    assume true;
    goto $bb69;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_$i143 := read_seqcount_retry(out_$p142, out_$i65);
    call {:si_unique_call 410} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1553;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1552;

  $bb55:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p141 := out_$p120;
    assume true;
    goto $bb66;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i138, 0);
    goto corral_source_split_1546;

  SeqInstr_129:
    goto corral_source_split_1545;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_spin_unlock_irq_137(out_$p139);
    goto SeqInstr_128;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1544;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i138 := 0;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i138 := 1;
    goto $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    assume out_$i137 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb59;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i134 := $uge.i64(in_$i62, out_$i133);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i64($M.0, out_$p132);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1534;

  $bb56:
    assume out_$i131 == 1;
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1529;

  SeqInstr_126:
    goto corral_source_split_1528;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_lock_irq_136(out_$p128);
    goto SeqInstr_125;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1527;

  $bb54:
    assume out_$i127 == 1;
    goto corral_source_split_1526;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$i126 := ldv__builtin_expect(out_$i125, 0);
    call {:si_unique_call 403} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i126);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i1.i32(out_$i123);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i98, 0);
    goto corral_source_split_1516;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_1512;

  SeqInstr_123:
    goto corral_source_split_1511;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$p120 := get_active_stripe(in_$p7, out_$i99, out_$i98, out_$i119, 0);
    goto SeqInstr_122;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 16384);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i64.i32(out_$i117);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i64($M.0, out_$p116);
    goto corral_source_split_1508;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1507;

  $bb50:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __dynamic_pr_debug.ref.ref.i64.i64(in_$p4, .str.108, out_$i99, in_$i62);
    goto corral_source_split_1505;

  $bb49:
    assume out_$i115 == 1;
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i114 := ldv__builtin_expect(out_$i113, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i64(out_$i112, 1);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i64(out_$i111);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.11, out_$p110);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p109, 0);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p105, out_$i108);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i108 := $or.i24(out_$i107, 4718);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i24(out_$i106, $sub.i24(0, 262144));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i24($M.10, out_$p105);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p103, .str.108);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p102, .str.1);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p101, .str.107);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p100, .str.2);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i99 := raid5_compute_sector(in_$p7, in_$i62, out_$i98, in_$p2, $0.ref);
    call {:si_unique_call 397} {:cexpr "new_sector"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1480;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  $bb28:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := 0;
    goto $bb48;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i85;
    goto $bb48;

  SeqInstr_117:
    goto corral_source_split_1461;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} ldv_spin_unlock_irq_137(out_$p97);
    goto SeqInstr_116;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1460;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i85 := 0;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i84 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i81 == 1;
    goto $bb32;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i64(in_$i62, out_$i80);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.0, out_$p79);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1446;

  $bb29:
    assume out_$i78 == 1;
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1441;

  SeqInstr_114:
    goto corral_source_split_1440;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock_irq_136(out_$p75);
    goto SeqInstr_113;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1439;

  $bb27:
    assume out_$i74 == 1;
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 391} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, $sub.i64(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_1431;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1430;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} prepare_to_wait(out_$p67, in_$p3, 2);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1427;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(in_$i63);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i65 := read_seqcount_begin(out_$p64);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1423;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i84 := $uge.i64(in_$i62, out_$i83);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, out_$p82);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1451;

  $bb30:
    assume !(out_$i78 == 1);
    goto corral_source_split_1450;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb43;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i64(in_$i62, out_$i90);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1464;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_1463;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_1456;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1455;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb34;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i94 := $uge.i64(in_$i62, out_$i93);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1469;

  $bb39:
    assume !(out_$i88 == 1);
    goto corral_source_split_1468;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i137 := $ult.i64(in_$i62, out_$i136);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i64($M.0, out_$p135);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1539;

  $bb57:
    assume !(out_$i131 == 1);
    goto corral_source_split_1538;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i134 == 1);
    goto $bb61;

  corral_source_split_1557_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145 := make_request_loop_$bb23(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, in_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145, in_$i62);
    return;

  exit:
    return;
}



procedure make_request_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i62: i64) returns (out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation make_request_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i11: i32, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$i96: i8, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$i161: i8, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$p172: ref, in_$p170: ref, in_$i62: i64) returns (out_$i63: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$i96: i8, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$i161: i8, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$p172: ref, out_$p170: ref)
{

  entry:
    out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170 := in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i85, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$p141, in_$i96, in_$p142, in_$i143, in_$i144, in_$p145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_$p171, in_$p172, in_$p170;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i96;
    goto corral_source_split_1477_dummy;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i161;
    goto $bb46;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} schedule();
    goto corral_source_split_1475;

  SeqInstr_120:
    goto corral_source_split_1474;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_spin_unlock_irq_137(out_$p95);
    goto SeqInstr_119;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1473;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i94 == 1;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i91 == 1;
    goto $bb41;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i64(in_$i62, out_$i90);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1464;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_1463;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_1456;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1455;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb34;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i64(in_$i62, out_$i80);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.0, out_$p79);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1446;

  $bb29:
    assume out_$i78 == 1;
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1441;

  SeqInstr_114:
    goto corral_source_split_1440;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock_irq_136(out_$p75);
    goto SeqInstr_113;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1439;

  $bb27:
    assume out_$i74 == 1;
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 391} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, $sub.i64(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_1431;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1430;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} prepare_to_wait(out_$p67, in_$p3, 2);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1427;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(out_$i63);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i65 := read_seqcount_begin(out_$p64);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1423;

  $bb23:
    call out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145 := make_request_loop_$bb23(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145, in_$i62);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_135:
    goto corral_source_split_1557;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} release_stripe(out_$p120);
    goto SeqInstr_134;

  $bb69:
    assume out_$i144 == 1;
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p145 := out_$p120;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_$i143 := read_seqcount_retry(out_$p142, out_$i65);
    call {:si_unique_call 410} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1553;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1552;

  $bb55:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p141 := out_$p120;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i138, 0);
    goto corral_source_split_1546;

  SeqInstr_129:
    goto corral_source_split_1545;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_spin_unlock_irq_137(out_$p139);
    goto SeqInstr_128;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1544;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i138 := 0;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i138 := 1;
    goto $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    assume out_$i137 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb59;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i134 := $uge.i64(in_$i62, out_$i133);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i64($M.0, out_$p132);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1534;

  $bb56:
    assume out_$i131 == 1;
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1529;

  SeqInstr_126:
    goto corral_source_split_1528;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_lock_irq_136(out_$p128);
    goto SeqInstr_125;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1527;

  $bb54:
    assume out_$i127 == 1;
    goto corral_source_split_1526;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$i126 := ldv__builtin_expect(out_$i125, 0);
    call {:si_unique_call 403} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i126);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i1.i32(out_$i123);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i98, 0);
    goto corral_source_split_1516;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_1512;

  SeqInstr_123:
    goto corral_source_split_1511;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$p120 := get_active_stripe(in_$p7, out_$i99, out_$i98, out_$i119, 0);
    goto SeqInstr_122;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 16384);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i64.i32(out_$i117);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i64($M.0, out_$p116);
    goto corral_source_split_1508;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1507;

  $bb50:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __dynamic_pr_debug.ref.ref.i64.i64(in_$p4, .str.108, out_$i99, in_$i62);
    goto corral_source_split_1505;

  $bb49:
    assume out_$i115 == 1;
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i114 := ldv__builtin_expect(out_$i113, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i64(out_$i112, 1);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i64(out_$i111);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.11, out_$p110);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p109, 0);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p105, out_$i108);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i108 := $or.i24(out_$i107, 4718);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i24(out_$i106, $sub.i24(0, 262144));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i24($M.10, out_$p105);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p103, .str.108);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p102, .str.1);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p101, .str.107);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p100, .str.2);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i99 := raid5_compute_sector(in_$p7, in_$i62, out_$i98, in_$p2, $0.ref);
    call {:si_unique_call 397} {:cexpr "new_sector"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1480;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  $bb28:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := 0;
    goto $bb48;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i85;
    goto $bb48;

  SeqInstr_117:
    goto corral_source_split_1461;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} ldv_spin_unlock_irq_137(out_$p97);
    goto SeqInstr_116;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1460;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i85 := 0;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i84 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i81 == 1;
    goto $bb32;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i84 := $uge.i64(in_$i62, out_$i83);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, out_$p82);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1451;

  $bb30:
    assume !(out_$i78 == 1);
    goto corral_source_split_1450;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb43;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i94 := $uge.i64(in_$i62, out_$i93);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1469;

  $bb39:
    assume !(out_$i88 == 1);
    goto corral_source_split_1468;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i137 := $ult.i64(in_$i62, out_$i136);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i64($M.0, out_$p135);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1539;

  $bb57:
    assume !(out_$i131 == 1);
    goto corral_source_split_1538;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i134 == 1);
    goto $bb61;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} schedule();
    goto corral_source_split_1550;

  SeqInstr_132:
    goto corral_source_split_1549;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} release_stripe(out_$p141);
    goto SeqInstr_131;

  $bb65:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i63;
    goto $bb84;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i161 := 1;
    goto $bb84;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} schedule();
    goto corral_source_split_1587;

  $bb82:
    assume out_$i160 == 1;
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$i160 := $ult.i64(in_$i62, out_$i159);
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i64($M.0, out_$p158);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1582;

  $bb79:
    assume out_$i157 == 1;
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i157 := $uge.i64(in_$i62, out_$i156);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} prepare_to_wait(out_$p154, in_$p3, 1);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} flush_signals(out_$p153);
    goto corral_source_split_1574;

  SeqInstr_141:
    goto corral_source_split_1573;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$p153 := get_current();
    goto SeqInstr_140;

  SeqInstr_138:
    goto corral_source_split_1572;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} release_stripe(out_$p145);
    goto SeqInstr_137;

  $bb77:
    assume out_$i152 == 1;
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i152 := $ult.i64(in_$i62, out_$i151);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i64($M.0, out_$p150);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1567;

  $bb75:
    assume out_$i149 == 1;
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i149 := $uge.i64(in_$i62, out_$i148);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i64($M.0, out_$p147);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1562;

  $bb72:
    assume out_$i146 == 1;
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(in_$i11, 1);
    goto corral_source_split_1559;

  $bb70:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i157 == 1);
    goto $bb81;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i160 == 1);
    goto $bb81;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} schedule();
    goto corral_source_split_1600;

  SeqInstr_144:
    goto corral_source_split_1599;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} release_stripe(out_$p145);
    goto SeqInstr_143;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} md_wakeup_thread(out_$p166);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.0, out_$p165);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1596;

  $bb86:
    assume out_$i164 == 1;
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 0);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$i163 := constant_test_bit(10, out_$p162);
    call {:si_unique_call 418} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_1592;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p145, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1591;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb74;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i149 == 1);
    goto $bb74;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i152 == 1);
    goto $bb74;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} schedule();
    goto corral_source_split_1612;

  SeqInstr_150:
    goto corral_source_split_1611;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} release_stripe(out_$p145);
    goto SeqInstr_149;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} md_wakeup_thread(out_$p172);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, out_$p171);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1608;

  $bb88:
    assume out_$i169 == 1;
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$p170 := out_$p145;
    assume true;
    goto $bb88;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_1605;

  SeqInstr_147:
    call {:si_unique_call 423} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_1604;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_$i168 := add_stripe_bio(out_$p145, in_$p1, out_$i167, in_$i11);
    goto SeqInstr_146;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.12, in_$p2);
    goto corral_source_split_1603;

  $bb87:
    assume !(out_$i164 == 1);
    goto corral_source_split_1602;

  corral_source_split_1477_dummy:
    call {:si_unique_call 1} out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170 := make_request_loop_$bb22(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, in_$i11, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170, in_$i62);
    return;

  exit:
    return;
}



procedure make_request_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i11: i32, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$i96: i8, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$i161: i8, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$p172: ref, in_$p170: ref, in_$i62: i64) returns (out_$i63: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$i96: i8, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$i161: i8, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$p172: ref, out_$p170: ref);
  modifies $M.2, assertsPassed, $M.0, $CurrAddr, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22, $M.38;



implementation make_request_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i11: i32, in_$i57: i64, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$i96: i8, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$i161: i8, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$p172: ref, in_$p170: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i64, in_$i185: i1, in_$i62: i64) returns (out_$i63: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$i96: i8, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$i161: i8, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$p172: ref, out_$p170: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i64, out_$i185: i1, out_$i62: i64)
{

  entry:
    out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$i62 := in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i85, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$p141, in_$i96, in_$p142, in_$i143, in_$i144, in_$p145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_$p171, in_$p172, in_$p170, in_$p173, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$p182, in_$i184, in_$i185, in_$i62;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  $bb100:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := out_$i184;
    goto $bb100_dummy;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i185 := $ult.i64(out_$i184, in_$i57);
    goto corral_source_split_1635;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i184 := $add.i64(out_$i62, 8);
    call {:si_unique_call 433} {:cexpr "logical_sector"} boogie_si_record_i64(out_$i184);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_153:
    goto corral_source_split_1632;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} release_stripe_plug(in_$p0, out_$p170);
    goto SeqInstr_152;

  $bb93:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} atomic_inc(out_$p182);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_1629;

  $bb94:
    assume out_$i181 == 1;
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 0);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i180 := test_and_set_bit(6, out_$p179);
    call {:si_unique_call 430} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1624;

  $bb92:
    assume out_$i178 == 1;
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i177, 0);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i177 := $and.i64(out_$i176, 16);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i64($M.0, out_$p175);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} clear_bit(7, out_$p174);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} set_bit(1, out_$p173);
    goto corral_source_split_1615;

  $bb91:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p170, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1614;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$p170 := out_$p145;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_1605;

  SeqInstr_147:
    call {:si_unique_call 423} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_1604;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_$i168 := add_stripe_bio(out_$p145, in_$p1, out_$i167, in_$i11);
    goto SeqInstr_146;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.12, in_$p2);
    goto corral_source_split_1603;

  $bb87:
    assume !(out_$i164 == 1);
    goto corral_source_split_1602;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 0);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$i163 := constant_test_bit(10, out_$p162);
    call {:si_unique_call 418} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_1592;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p145, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_1591;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb74;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i149 == 1);
    goto $bb74;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i152 == 1);
    goto $bb74;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i152 := $ult.i64(out_$i62, out_$i151);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i64($M.0, out_$p150);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1567;

  $bb75:
    assume out_$i149 == 1;
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i149 := $uge.i64(out_$i62, out_$i148);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i64($M.0, out_$p147);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1562;

  $bb72:
    assume out_$i146 == 1;
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(in_$i11, 1);
    goto corral_source_split_1559;

  $bb70:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p145 := out_$p120;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_$i143 := read_seqcount_retry(out_$p142, out_$i65);
    call {:si_unique_call 410} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1553;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1552;

  $bb55:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p141 := out_$p120;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i138, 0);
    goto corral_source_split_1546;

  SeqInstr_129:
    goto corral_source_split_1545;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_spin_unlock_irq_137(out_$p139);
    goto SeqInstr_128;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1544;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i138 := 0;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i138 := 1;
    goto $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    assume out_$i137 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb59;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i134 := $uge.i64(out_$i62, out_$i133);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i64($M.0, out_$p132);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1534;

  $bb56:
    assume out_$i131 == 1;
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1529;

  SeqInstr_126:
    goto corral_source_split_1528;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_lock_irq_136(out_$p128);
    goto SeqInstr_125;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1527;

  $bb54:
    assume out_$i127 == 1;
    goto corral_source_split_1526;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$i126 := ldv__builtin_expect(out_$i125, 0);
    call {:si_unique_call 403} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i126);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i1.i32(out_$i123);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i98, 0);
    goto corral_source_split_1516;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_1512;

  SeqInstr_123:
    goto corral_source_split_1511;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$p120 := get_active_stripe(in_$p7, out_$i99, out_$i98, out_$i119, 0);
    goto SeqInstr_122;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 16384);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i64.i32(out_$i117);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i64($M.0, out_$p116);
    goto corral_source_split_1508;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1507;

  $bb50:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __dynamic_pr_debug.ref.ref.i64.i64(in_$p4, .str.108, out_$i99, out_$i62);
    goto corral_source_split_1505;

  $bb49:
    assume out_$i115 == 1;
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i114 := ldv__builtin_expect(out_$i113, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i64(out_$i112, 1);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i64(out_$i111);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.11, out_$p110);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p109, 0);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p105, out_$i108);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i108 := $or.i24(out_$i107, 4718);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i24(out_$i106, $sub.i24(0, 262144));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i24($M.10, out_$p105);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p103, .str.108);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p102, .str.1);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p101, .str.107);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p100, .str.2);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i99 := raid5_compute_sector(in_$p7, out_$i62, out_$i98, in_$p2, $0.ref);
    call {:si_unique_call 397} {:cexpr "new_sector"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1480;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  $bb28:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := 0;
    goto $bb48;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i85;
    goto $bb48;

  SeqInstr_117:
    goto corral_source_split_1461;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} ldv_spin_unlock_irq_137(out_$p97);
    goto SeqInstr_116;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1460;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i85 := 0;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i84 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i81 == 1;
    goto $bb32;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i64(out_$i62, out_$i80);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.0, out_$p79);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1446;

  $bb29:
    assume out_$i78 == 1;
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1441;

  SeqInstr_114:
    goto corral_source_split_1440;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock_irq_136(out_$p75);
    goto SeqInstr_113;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1439;

  $bb27:
    assume out_$i74 == 1;
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 391} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, $sub.i64(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_1431;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1430;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} prepare_to_wait(out_$p67, in_$p3, 2);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1427;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(out_$i63);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i65 := read_seqcount_begin(out_$p64);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1423;

  $bb23:
    call out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145 := make_request_loop_$bb23(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i62);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_135:
    goto corral_source_split_1557;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} release_stripe(out_$p120);
    goto SeqInstr_134;

  $bb69:
    assume out_$i144 == 1;
    goto corral_source_split_1556;

  $bb22:
    call out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170 := make_request_loop_$bb22(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, in_$i11, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170, out_$i62);
    goto $bb22_last;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i63 := 0;
    goto $bb22;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i96;
    assume false;
    return;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i161;
    goto $bb46;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb46;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} schedule();
    goto corral_source_split_1475;

  SeqInstr_120:
    goto corral_source_split_1474;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_spin_unlock_irq_137(out_$p95);
    goto SeqInstr_119;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_1473;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i94 == 1;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i91 == 1;
    goto $bb41;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i64(out_$i62, out_$i90);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1464;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_1463;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_1456;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1455;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb34;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i84 := $uge.i64(out_$i62, out_$i83);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, out_$p82);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1451;

  $bb30:
    assume !(out_$i78 == 1);
    goto corral_source_split_1450;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i94 := $uge.i64(out_$i62, out_$i93);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(624, 1));
    goto corral_source_split_1469;

  $bb39:
    assume !(out_$i88 == 1);
    goto corral_source_split_1468;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} schedule();
    goto corral_source_split_1550;

  SeqInstr_132:
    goto corral_source_split_1549;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} release_stripe(out_$p141);
    goto SeqInstr_131;

  $bb65:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i63;
    goto $bb84;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i161 := 1;
    goto $bb84;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} schedule();
    goto corral_source_split_1587;

  $bb82:
    assume out_$i160 == 1;
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$i160 := $ult.i64(out_$i62, out_$i159);
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i64($M.0, out_$p158);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(648, 1));
    goto corral_source_split_1582;

  $bb79:
    assume out_$i157 == 1;
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i157 := $uge.i64(out_$i62, out_$i156);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(640, 1));
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} prepare_to_wait(out_$p154, in_$p3, 1);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} flush_signals(out_$p153);
    goto corral_source_split_1574;

  SeqInstr_141:
    goto corral_source_split_1573;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$p153 := get_current();
    goto SeqInstr_140;

  SeqInstr_138:
    goto corral_source_split_1572;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} release_stripe(out_$p145);
    goto SeqInstr_137;

  $bb77:
    assume out_$i152 == 1;
    goto corral_source_split_1571;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i157 == 1);
    goto $bb81;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i160 == 1);
    goto $bb81;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} schedule();
    goto corral_source_split_1600;

  SeqInstr_144:
    goto corral_source_split_1599;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} release_stripe(out_$p145);
    goto SeqInstr_143;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} md_wakeup_thread(out_$p166);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.0, out_$p165);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1596;

  $bb86:
    assume out_$i164 == 1;
    goto corral_source_split_1595;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} schedule();
    goto corral_source_split_1612;

  SeqInstr_150:
    goto corral_source_split_1611;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} release_stripe(out_$p145);
    goto SeqInstr_149;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} md_wakeup_thread(out_$p172);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, out_$p171);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(560, 1));
    goto corral_source_split_1608;

  $bb88:
    assume out_$i169 == 1;
    goto corral_source_split_1607;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb43;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i137 := $ult.i64(out_$i62, out_$i136);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i64($M.0, out_$p135);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_1539;

  $bb57:
    assume !(out_$i131 == 1);
    goto corral_source_split_1538;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i134 == 1);
    goto $bb61;

  $bb100_dummy:
    call {:si_unique_call 1} out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$i62 := make_request_loop_$bb20(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p7, in_$i11, in_$i57, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i85, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i96, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p171, out_$p172, out_$p170, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$i62);
    return;

  exit:
    return;
}



procedure make_request_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i11: i32, in_$i57: i64, in_$i63: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i85: i32, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i64, in_$i113: i64, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i64, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$i138: i32, in_$p139: ref, in_$i140: i1, in_$p141: ref, in_$i96: i8, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$i161: i8, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$p172: ref, in_$p170: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i64, in_$i185: i1, in_$i62: i64) returns (out_$i63: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i85: i32, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i64, out_$i113: i64, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i64, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$i138: i32, out_$p139: ref, out_$i140: i1, out_$p141: ref, out_$i96: i8, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$i161: i8, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$p172: ref, out_$p170: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i64, out_$i185: i1, out_$i62: i64);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.38, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation run_loop_$bb178(in_$p0: ref, in_$i497: i64, in_$p502: ref, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$i507: i64, in_$i508: i64, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$p512: ref, in_$p513: ref, in_$i514: i64, in_$i515: i64, in_$p516: ref, in_$p517: ref, in_$p518: ref, in_$p519: ref, in_$i520: i32, in_$i521: i1, in_$p523: ref, in_$p524: ref, in_$p525: ref, in_$p527: ref, in_$i528: i8, in_$i529: i32, in_$i530: i1, in_$i531: i8, in_$i522: i8, in_$i532: i8, in_$i533: i1, in_$i534: i1, in_$i537: i8, in_$p539: ref, in_$p540: ref, in_$p541: ref, in_$p542: ref, in_$i543: i64, in_$i544: i1, in_$p500: ref, in_$i501: i8, in_$i545: i8, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32) returns (out_$p502: ref, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$i507: i64, out_$i508: i64, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$p512: ref, out_$p513: ref, out_$i514: i64, out_$i515: i64, out_$p516: ref, out_$p517: ref, out_$p518: ref, out_$p519: ref, out_$i520: i32, out_$i521: i1, out_$p523: ref, out_$p524: ref, out_$p525: ref, out_$p527: ref, out_$i528: i8, out_$i529: i32, out_$i530: i1, out_$i531: i8, out_$i522: i8, out_$i532: i8, out_$i533: i1, out_$i534: i1, out_$i537: i8, out_$p539: ref, out_$p540: ref, out_$p541: ref, out_$p542: ref, out_$i543: i64, out_$i544: i1, out_$p500: ref, out_$i501: i8, out_$i545: i8, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32)
{

  entry:
    out_$p502, out_$p503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$p511, out_$p512, out_$p513, out_$i514, out_$i515, out_$p516, out_$p517, out_$p518, out_$p519, out_$i520, out_$i521, out_$p523, out_$p524, out_$p525, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i522, out_$i532, out_$i533, out_$i534, out_$i537, out_$p539, out_$p540, out_$p541, out_$p542, out_$i543, out_$i544, out_$p500, out_$i501, out_$i545, out_vslice_dummy_var_32, out_vslice_dummy_var_33 := in_$p502, in_$p503, in_$p504, in_$p505, in_$p506, in_$i507, in_$i508, in_$p509, in_$p510, in_$p511, in_$p512, in_$p513, in_$i514, in_$i515, in_$p516, in_$p517, in_$p518, in_$p519, in_$i520, in_$i521, in_$p523, in_$p524, in_$p525, in_$p527, in_$i528, in_$i529, in_$i530, in_$i531, in_$i522, in_$i532, in_$i533, in_$i534, in_$i537, in_$p539, in_$p540, in_$p541, in_$p542, in_$i543, in_$i544, in_$p500, in_$i501, in_$i545, in_vslice_dummy_var_32, in_vslice_dummy_var_33;
    goto $bb178, exit;

  $bb178:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  $bb192:
    assume out_$i544 == 1;
    assume {:verifier.code 0} true;
    out_$p500, out_$i501 := out_$p540, out_$i537;
    goto $bb192_dummy;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$i545 := out_$i537;
    assume true;
    goto $bb192;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$i544 := $ne.i64(out_$i543, in_$i497);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i543 := $p2i.ref.i64(out_$p542);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p542 := $add.ref($add.ref(out_$p541, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p541 := $bitcast.ref.ref(out_$p540);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$p540 := $load.ref($M.0, out_$p539);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p539 := $add.ref($add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  $bb190:
    assume {:verifier.code 0} true;
    out_$i537 := 0;
    goto $bb191;

  $bb186:
    assume out_$i533 == 1;
    assume {:verifier.code 0} true;
    out_$i537 := out_$i522;
    goto $bb191;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i533 := $trunc.i8.i1(out_$i532);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i532 := $M.13;
    goto corral_source_split_2380;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  $bb185:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i522 := out_$i531;
    goto $bb182;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i522 := 0;
    goto $bb182;

  $bb180:
    assume out_$i521 == 1;
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i521 := $eq.i32(out_$i520, 0);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_$i520 := constant_test_bit(14, out_$p519);
    call {:si_unique_call 536} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i520);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$p519 := $add.ref($add.ref(out_$p518, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} out_$p518 := bdev_get_queue(out_$p517);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$p517 := $load.ref($M.0, out_$p516);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p516 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} disk_stack_limits(out_$p510, out_$p512, out_$i515);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i515 := $shl.i64(out_$i514, 9);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i514 := $load.i64($M.0, out_$p513);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p513 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p512 := $load.ref($M.0, out_$p511);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p510 := $load.ref($M.0, out_$p509);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$p509 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} disk_stack_limits(out_$p503, out_$p505, out_$i508);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i508 := $shl.i64(out_$i507, 9);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i507 := $load.i64($M.0, out_$p506);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p506 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p505 := $load.ref($M.0, out_$p504);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p504 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p503 := $load.ref($M.0, out_$p502);
    goto corral_source_split_2346;

  $bb179:
    assume {:verifier.code 0} true;
    out_$p502 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(72, 1));
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb184:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    out_$i531 := out_$i501;
    goto $bb185;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i531 := 0;
    goto $bb185;

  $bb183:
    assume out_$i530 == 1;
    goto corral_source_split_2383;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i530 := $eq.i32(out_$i529, 0);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i529 := $zext.i8.i32(out_$i528);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i528 := $load.i8($M.0, out_$p527);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p527 := $add.ref($add.ref($add.ref(out_$p525, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(73, 1));
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} out_$p525 := bdev_get_queue(out_$p524);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$p524 := $load.ref($M.0, out_$p523);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$p523 := $add.ref($add.ref(out_$p500, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2371;

  $bb181:
    assume !(out_$i521 == 1);
    goto corral_source_split_2370;

  $bb189:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_vslice_dummy_var_33 := printk.ref(.str.170);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} out_vslice_dummy_var_32 := printk.ref(.str.169);
    goto corral_source_split_2389;

  $bb188:
    assume out_$i534 == 1;
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i534 := $trunc.i8.i1(out_$i522);
    goto corral_source_split_2386;

  $bb187:
    assume !(out_$i533 == 1);
    goto corral_source_split_2385;

  $bb192_dummy:
    call {:si_unique_call 1} out_$p502, out_$p503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$p511, out_$p512, out_$p513, out_$i514, out_$i515, out_$p516, out_$p517, out_$p518, out_$p519, out_$i520, out_$i521, out_$p523, out_$p524, out_$p525, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i522, out_$i532, out_$i533, out_$i534, out_$i537, out_$p539, out_$p540, out_$p541, out_$p542, out_$i543, out_$i544, out_$p500, out_$i501, out_$i545, out_vslice_dummy_var_32, out_vslice_dummy_var_33 := run_loop_$bb178(in_$p0, in_$i497, out_$p502, out_$p503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$p511, out_$p512, out_$p513, out_$i514, out_$i515, out_$p516, out_$p517, out_$p518, out_$p519, out_$i520, out_$i521, out_$p523, out_$p524, out_$p525, out_$p527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i522, out_$i532, out_$i533, out_$i534, out_$i537, out_$p539, out_$p540, out_$p541, out_$p542, out_$i543, out_$i544, out_$p500, out_$i501, out_$i545, out_vslice_dummy_var_32, out_vslice_dummy_var_33);
    return;

  exit:
    return;
}



procedure run_loop_$bb178(in_$p0: ref, in_$i497: i64, in_$p502: ref, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$i507: i64, in_$i508: i64, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$p512: ref, in_$p513: ref, in_$i514: i64, in_$i515: i64, in_$p516: ref, in_$p517: ref, in_$p518: ref, in_$p519: ref, in_$i520: i32, in_$i521: i1, in_$p523: ref, in_$p524: ref, in_$p525: ref, in_$p527: ref, in_$i528: i8, in_$i529: i32, in_$i530: i1, in_$i531: i8, in_$i522: i8, in_$i532: i8, in_$i533: i1, in_$i534: i1, in_$i537: i8, in_$p539: ref, in_$p540: ref, in_$p541: ref, in_$p542: ref, in_$i543: i64, in_$i544: i1, in_$p500: ref, in_$i501: i8, in_$i545: i8, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32) returns (out_$p502: ref, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$i507: i64, out_$i508: i64, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$p512: ref, out_$p513: ref, out_$i514: i64, out_$i515: i64, out_$p516: ref, out_$p517: ref, out_$p518: ref, out_$p519: ref, out_$i520: i32, out_$i521: i1, out_$p523: ref, out_$p524: ref, out_$p525: ref, out_$p527: ref, out_$i528: i8, out_$i529: i32, out_$i530: i1, out_$i531: i8, out_$i522: i8, out_$i532: i8, out_$i533: i1, out_$i534: i1, out_$i537: i8, out_$p539: ref, out_$p540: ref, out_$p541: ref, out_$p542: ref, out_$i543: i64, out_$i544: i1, out_$p500: ref, out_$i501: i8, out_$i545: i8, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32);



implementation run_loop_$bb170(in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i32, in_$i473: i32, in_$i474: i1, in_$i468: i32, in_$i475: i32) returns (out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i32, out_$i473: i32, out_$i474: i1, out_$i468: i32, out_$i475: i32)
{

  entry:
    out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i468, out_$i475 := in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i474, in_$i468, in_$i475;
    goto $bb170, exit;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  $bb172:
    assume out_$i474 == 1;
    assume {:verifier.code 0} true;
    out_$i468 := out_$i471;
    goto $bb172_dummy;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i475 := out_$i471;
    assume true;
    goto $bb172;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$i474 := $ne.i32(out_$i473, 0);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i473 := $and.i32(out_$i472, out_$i471);
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$i472 := $add.i32(out_$i471, $sub.i32(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i471 := $add.i32(out_$i470, 1);
    call {:si_unique_call 530} {:cexpr "stripe"} boogie_si_record_i32(out_$i471);
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i470 := $or.i32(out_$i468, out_$i469);
    goto corral_source_split_2309;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i469 := $add.i32(out_$i468, $sub.i32(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb172_dummy:
    call {:si_unique_call 1} out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i468, out_$i475 := run_loop_$bb170(out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i468, out_$i475);
    return;

  exit:
    return;
}



procedure run_loop_$bb170(in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i32, in_$i473: i32, in_$i474: i1, in_$i468: i32, in_$i475: i32) returns (out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i32, out_$i473: i32, out_$i474: i1, out_$i468: i32, out_$i475: i32);



implementation run_loop_$bb93(in_$p0: ref, in_$i164: i64, in_$p204: ref, in_$p222: ref, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p238: ref, in_$i239: i64, in_$p241: ref, in_$p242: ref, in_$i243: i64, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i64, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i64, in_$p261: ref, in_$p262: ref, in_$i263: i64, in_$i264: i1, in_$p267: ref, in_$p268: ref, in_$i269: i64, in_$p271: ref, in_$p272: ref, in_$i273: i64, in_$i274: i1, in_$p275: ref, in_$i276: i64, in_$i277: i1, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$p283: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i64, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$p295: ref, in_$i296: i32, in_$p297: ref, in_$i298: i32, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i304: i32, in_$p305: ref, in_$i306: i32, in_$p307: ref, in_$i308: i32, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i265: i32, in_$i266: i32, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i226: i32, in_$i227: i32, in_$i228: i32, in_$p318: ref, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i317: i32) returns (out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p238: ref, out_$i239: i64, out_$p241: ref, out_$p242: ref, out_$i243: i64, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i64, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i64, out_$p261: ref, out_$p262: ref, out_$i263: i64, out_$i264: i1, out_$p267: ref, out_$p268: ref, out_$i269: i64, out_$p271: ref, out_$p272: ref, out_$i273: i64, out_$i274: i1, out_$p275: ref, out_$i276: i64, out_$i277: i1, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$p283: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i64, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$p295: ref, out_$i296: i32, out_$p297: ref, out_$i298: i32, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i304: i32, out_$p305: ref, out_$i306: i32, out_$p307: ref, out_$i308: i32, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i265: i32, out_$i266: i32, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i226: i32, out_$i227: i32, out_$i228: i32, out_$p318: ref, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i317: i32)
{

  entry:
    out_$p229, out_$p230, out_$i231, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$p261, out_$p262, out_$i263, out_$i264, out_$p267, out_$p268, out_$i269, out_$p271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$i296, out_$p297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i302, out_$p303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i265, out_$i266, out_$i314, out_$i315, out_$i316, out_$i226, out_$i227, out_$i228, out_$p318, out_$i319, out_$i320, out_$i321, out_$i317 := in_$p229, in_$p230, in_$i231, in_$p233, in_$p234, in_$i235, in_$i236, in_$p237, in_$p238, in_$i239, in_$p241, in_$p242, in_$i243, in_$i244, in_$p245, in_$p246, in_$i247, in_$p249, in_$p250, in_$p251, in_$p252, in_$i253, in_$p255, in_$p256, in_$p257, in_$p258, in_$i259, in_$p261, in_$p262, in_$i263, in_$i264, in_$p267, in_$p268, in_$i269, in_$p271, in_$p272, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p279, in_$i280, in_$i281, in_$i282, in_$p283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$p289, in_$p290, in_$i291, in_$i292, in_$p293, in_$i294, in_$p295, in_$i296, in_$p297, in_$i298, in_$p299, in_$i300, in_$i301, in_$i302, in_$p303, in_$i304, in_$p305, in_$i306, in_$p307, in_$i308, in_$p309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i265, in_$i266, in_$i314, in_$i315, in_$i316, in_$i226, in_$i227, in_$i228, in_$p318, in_$i319, in_$i320, in_$i321, in_$i317;
    goto $bb93, exit;

  $bb93:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  $bb130:
    assume out_$i316 == 1;
    assume {:verifier.code 0} true;
    out_$i226, out_$i227, out_$i228 := out_$i266, out_$i265, out_$i314;
    goto $bb130_dummy;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    out_$i317 := out_$i265;
    assume true;
    goto $bb130;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$i316 := $slt.i32(out_$i314, out_$i315);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.0, in_$p222);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i314 := $add.i32(out_$i228, 1);
    call {:si_unique_call 482} {:cexpr "i"} boogie_si_record_i32(out_$i314);
    goto corral_source_split_2023;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2022;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i313, out_$i226;
    goto $bb103;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i227, out_$i226;
    goto $bb103;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i227, out_$i226;
    goto $bb103;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i227, out_$i282;
    goto $bb103;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i227, out_$i226;
    goto $bb103;

  $bb101:
    assume out_$i264 == 1;
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i64(out_$i263, 0);
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i263 := $p2i.ref.i64(out_$p262);
    goto corral_source_split_2017;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  $bb97:
    assume {:verifier.code 0} true;
    out_$p262 := out_$p234;
    goto $bb100;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$p262 := out_$p250;
    goto $bb100;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p261, out_$p250);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p258, $mul.ref(out_$i259, 16)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i259 := $sext.i32.i64(out_$i228);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} clear_bit(11, out_$p256);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(out_$p250, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p255, $0.ref);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(out_$p252, $mul.ref(out_$i253, 16)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i253 := $sext.i32.i64(out_$i228);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p252 := $load.ref($M.0, out_$p251);
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$p250 := $load.ref($M.0, out_$p249);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p246, $mul.ref(out_$i247, 16)), $mul.ref(8, 1));
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i247 := $sext.i32.i64(out_$i228);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p246 := $load.ref($M.0, out_$p245);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1995;

  $bb98:
    assume out_$i244 == 1;
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i244 := $ne.i64(out_$i243, 0);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i243 := $p2i.ref.i64(out_$p242);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$p242 := $load.ref($M.0, out_$p241);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p238, $mul.ref(out_$i239, 16)), $mul.ref(8, 1));
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i239 := $sext.i32.i64(out_$i228);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p238 := $load.ref($M.0, out_$p237);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1985;

  $bb95:
    assume out_$i236 == 1;
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i64(out_$i235, 0);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i235 := $p2i.ref.i64(out_$p234);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.0, out_$p233);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p230, $mul.ref(out_$i231, 16)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i231 := $sext.i32.i64(out_$i228);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p230 := $load.ref($M.0, out_$p229);
    goto corral_source_split_1976;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_1975;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb132:
    assume out_$i320 == 1;
    goto corral_source_split_2108;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i321 := out_$i227;
    assume true;
    goto $bb132;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i320 := $ne.i32(out_$i319, 0);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i319 := $load.i32($M.0, out_$p318);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_1971;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i236 == 1);
    goto $bb97;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i244 == 1);
    goto $bb97;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i282 := $add.i32(out_$i226, 1);
    call {:si_unique_call 491} {:cexpr "working_disks"} boogie_si_record_i32(out_$i282);
    goto corral_source_split_2058;

  $bb112:
    assume out_$i281 == 1;
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i280 := constant_test_bit(1, out_$p279);
    call {:si_unique_call 490} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i280);
    goto corral_source_split_2054;

  $bb111:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(out_$p262, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2053;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(out_$i274 == 1);
    goto $bb107;

  $bb109:
    assume {:verifier.code 0} true;
    assume !(out_$i277 == 1);
    goto $bb107;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i277 := $ne.i64(out_$i276, $sub.i64(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i276 := $load.i64($M.0, out_$p275);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$p275 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(616, 1));
    goto corral_source_split_2037;

  $bb105:
    assume out_$i274 == 1;
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i64(out_$i273, 0);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i273 := $p2i.ref.i64(out_$p272);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p272 := $load.ref($M.0, out_$p271);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p268, $mul.ref(out_$i269, 16)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i269 := $sext.i32.i64(out_$i228);
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$p268 := $load.ref($M.0, out_$p267);
    goto corral_source_split_2028;

  $bb104:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2027;

  $bb102:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb123:
    assume out_$i302 == 1;
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 0);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i301 := only_parity(out_$i294, out_$i296, out_$i298, out_$i300);
    call {:si_unique_call 493} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$i300 := $load.i32($M.0, out_$p299);
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    out_$p299 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.0, out_$p297);
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i296 := $load.i32($M.0, out_$p295);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(600, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i32($M.0, out_$p293);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref(out_$p262, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2078;

  $bb121:
    assume out_$i292 == 1;
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$i292 := $ult.i64(out_$i291, in_$i164);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i64($M.0, out_$p290);
    goto corral_source_split_2074;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(out_$p262, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2073;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p289, in_$i164);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(out_$p262, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2070;

  $bb118:
    assume out_$i288 == 1;
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i288 := $sgt.i32(out_$i287, 90);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.0, out_$p286);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(384, 1));
    goto corral_source_split_2065;

  $bb115:
    assume out_$i285 == 1;
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 0);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, out_$p283);
    goto corral_source_split_2061;

  $bb114:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(380, 1));
    goto corral_source_split_2060;

  $bb113:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb116:
    assume {:verifier.code 0} true;
    assume !(out_$i285 == 1);
    goto $bb117;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i288 == 1);
    goto $bb117;

  $bb127:
    assume out_$i312 == 1;
    goto corral_source_split_2102;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 0);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_$i311 := only_parity(out_$i304, out_$i306, out_$i308, out_$i310);
    call {:si_unique_call 495} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i311);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.0, out_$p309);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i32($M.0, out_$p307);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i306 := $load.i32($M.0, out_$p305);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p204, $mul.ref(0, 1544)), $mul.ref(640, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.0, out_$p303);
    goto corral_source_split_2092;

  $bb126:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(out_$p262, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2091;

  $bb122:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i313 := $add.i32(out_$i227, 1);
    call {:si_unique_call 496} {:cexpr "dirty_parity_disks"} boogie_si_record_i32(out_$i313);
    goto corral_source_split_2104;

  $bb128:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb130_dummy:
    call {:si_unique_call 1} out_$p229, out_$p230, out_$i231, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$p261, out_$p262, out_$i263, out_$i264, out_$p267, out_$p268, out_$i269, out_$p271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$i296, out_$p297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i302, out_$p303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i265, out_$i266, out_$i314, out_$i315, out_$i316, out_$i226, out_$i227, out_$i228, out_$p318, out_$i319, out_$i320, out_$i321, out_$i317 := run_loop_$bb93(in_$p0, in_$i164, in_$p204, in_$p222, out_$p229, out_$p230, out_$i231, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$p261, out_$p262, out_$i263, out_$i264, out_$p267, out_$p268, out_$i269, out_$p271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$i296, out_$p297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i302, out_$p303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i265, out_$i266, out_$i314, out_$i315, out_$i316, out_$i226, out_$i227, out_$i228, out_$p318, out_$i319, out_$i320, out_$i321, out_$i317);
    return;

  exit:
    return;
}



procedure run_loop_$bb93(in_$p0: ref, in_$i164: i64, in_$p204: ref, in_$p222: ref, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p238: ref, in_$i239: i64, in_$p241: ref, in_$p242: ref, in_$i243: i64, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i64, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i64, in_$p261: ref, in_$p262: ref, in_$i263: i64, in_$i264: i1, in_$p267: ref, in_$p268: ref, in_$i269: i64, in_$p271: ref, in_$p272: ref, in_$i273: i64, in_$i274: i1, in_$p275: ref, in_$i276: i64, in_$i277: i1, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$p283: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i64, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$p295: ref, in_$i296: i32, in_$p297: ref, in_$i298: i32, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i304: i32, in_$p305: ref, in_$i306: i32, in_$p307: ref, in_$i308: i32, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i265: i32, in_$i266: i32, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i226: i32, in_$i227: i32, in_$i228: i32, in_$p318: ref, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i317: i32) returns (out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p238: ref, out_$i239: i64, out_$p241: ref, out_$p242: ref, out_$i243: i64, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i64, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i64, out_$p261: ref, out_$p262: ref, out_$i263: i64, out_$i264: i1, out_$p267: ref, out_$p268: ref, out_$i269: i64, out_$p271: ref, out_$p272: ref, out_$i273: i64, out_$i274: i1, out_$p275: ref, out_$i276: i64, out_$i277: i1, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$p283: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i64, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$p295: ref, out_$i296: i32, out_$p297: ref, out_$i298: i32, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i304: i32, out_$p305: ref, out_$i306: i32, out_$p307: ref, out_$i308: i32, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i265: i32, out_$i266: i32, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i226: i32, out_$i227: i32, out_$i228: i32, out_$p318: ref, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i317: i32);
  modifies $M.0;



implementation run_loop_$bb7(in_$p0: ref, in_$i13: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i64, in_$i36: i64, in_$i30: i32, in_$i31: i64, in_$i22: i32, in_$i23: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p16: ref, in_$i17: i64, in_$i18: i32, in_$i49: i64) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i64, out_$i36: i64, out_$i30: i32, out_$i31: i64, out_$i22: i32, out_$i23: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p16: ref, out_$i17: i64, out_$i18: i32, out_$i49: i64)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i36, out_$i30, out_$i31, out_$i22, out_$i23, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p16, out_$i17, out_$i18, out_$i49 := in_$p19, in_$i20, in_$i21, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i36, in_$i30, in_$i31, in_$i22, in_$i23, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p16, in_$i17, in_$i18, in_$i49;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  $bb28:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p44, out_$i23, out_$i22;
    goto $bb28_dummy;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i23;
    assume true;
    goto $bb28;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, in_$i13);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1685;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i30, out_$i31;
    goto $bb11;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i18, out_$i17;
    goto $bb11;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_1679;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i18, out_$i36;
    goto $bb15;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := 0, out_$i28;
    goto $bb15;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i18, 0);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i64(out_$i25, out_$i27);
    call {:si_unique_call 443} {:cexpr "diff"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p16, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_1693;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_1692;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i41;
    goto $bb21;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i28;
    goto $bb21;

  $bb19:
    assume out_$i35 == 1;
    goto corral_source_split_1715;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i64(out_$i28, out_$i17);
    goto corral_source_split_1709;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_1708;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1702;

  $bb14:
    assume !(out_$i29 == 1);
    goto corral_source_split_1701;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i17;
    goto $bb27;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i28;
    goto $bb27;

  $bb25:
    assume out_$i40 == 1;
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i40 := $sgt.i64(out_$i28, out_$i17);
    goto corral_source_split_1718;

  $bb22:
    assume out_$i39 == 1;
    goto corral_source_split_1717;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_1712;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(552, 1));
    goto corral_source_split_1711;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb18;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i36, out_$i30, out_$i31, out_$i22, out_$i23, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p16, out_$i17, out_$i18, out_$i49 := run_loop_$bb7(in_$p0, in_$i13, out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i36, out_$i30, out_$i31, out_$i22, out_$i23, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p16, out_$i17, out_$i18, out_$i49);
    return;

  exit:
    return;
}



procedure run_loop_$bb7(in_$p0: ref, in_$i13: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i64, in_$i36: i64, in_$i30: i32, in_$i31: i64, in_$i22: i32, in_$i23: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p16: ref, in_$i17: i64, in_$i18: i32, in_$i49: i64) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i64, out_$i36: i64, out_$i30: i32, out_$i31: i64, out_$i22: i32, out_$i23: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p16: ref, out_$i17: i64, out_$i18: i32, out_$i49: i64);



implementation status_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i24: i32, in_vslice_dummy_var_36: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i24: i32, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i24, out_vslice_dummy_var_36 := in_$p25, in_$p26, in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i45, in_$i46, in_$i47, in_$i24, in_vslice_dummy_var_36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  $bb12:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i45;
    goto $bb12_dummy;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i45, out_$i46);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, in_$p21);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i24, 1);
    call {:si_unique_call 548} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} out_vslice_dummy_var_36 := seq_printf.ref.ref.ref(in_$p0, .str.124, out_$p43);
    goto corral_source_split_2485;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  $bb7:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$p43 := .str.123;
    goto $bb11;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p42;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  $bb9:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$p42 := .str.123;
    goto $bb10;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p42 := .str.122;
    goto $bb10;

  $bb8:
    assume out_$i41 == 1;
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} out_$i40 := constant_test_bit(1, out_$p39);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 16)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2470;

  $bb6:
    assume out_$i32 == 1;
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2461;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i24, out_vslice_dummy_var_36 := status_loop_$bb4(in_$p0, in_$p4, in_$p21, out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i24, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure status_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i24: i32, in_vslice_dummy_var_36: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i24: i32, out_vslice_dummy_var_36: i32);



implementation raid5_add_disk_loop_$bb40(in_$p4: ref, in_$i25: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$i84: i32, in_$p85: ref, in_$i94: i32, in_$i95: i1, in_$i70: i32) returns (out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$i84: i32, out_$p85: ref, out_$i94: i32, out_$i95: i1, out_$i70: i32)
{

  entry:
    out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i94, out_$i95, out_$i70 := in_$p71, in_$p72, in_$i73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i94, in_$i95, in_$i70;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  $bb49:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := out_$i94;
    goto $bb49_dummy;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$i95 := $sle.i32(out_$i94, in_$i25);
    goto corral_source_split_2698;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i70, 1);
    call {:si_unique_call 583} {:cexpr "disk"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2697;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb44;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$i84, out_$p85 := out_$i70, out_$p74;
    assume true;
    goto $bb46;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i64(out_$i82, 0);
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i82 := $p2i.ref.i64(out_$p81);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 16)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  $bb42:
    assume out_$i79 == 1;
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} out_$i78 := constant_test_bit(10, out_$p77);
    call {:si_unique_call 578} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 16)), $mul.ref(0, 1));
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p72, $mul.ref(out_$i73, 16));
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i70);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_2665;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i94, out_$i95, out_$i70 := raid5_add_disk_loop_$bb40(in_$p4, in_$i25, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i94, out_$i95, out_$i70);
    return;

  exit:
    return;
}



procedure raid5_add_disk_loop_$bb40(in_$p4: ref, in_$i25: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$i84: i32, in_$p85: ref, in_$i94: i32, in_$i95: i1, in_$i70: i32) returns (out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$i84: i32, out_$p85: ref, out_$i94: i32, out_$i95: i1, out_$i70: i32);



implementation raid5_add_disk_loop_$bb25(in_$p4: ref, in_$i25: i32, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i67: i32, in_$i68: i1, in_$i46: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i67: i32, out_$i68: i1, out_$i46: i32)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i67, out_$i68, out_$i46 := in_$p47, in_$p48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i67, in_$i68, in_$i46;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  $bb34:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i67;
    goto $bb34_dummy;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i68 := $sle.i32(out_$i67, in_$i25);
    goto corral_source_split_2654;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i46, 1);
    call {:si_unique_call 576} {:cexpr "disk"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2653;

  $bb28:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i55, out_$p56 := out_$i46, out_$p50;
    assume true;
    goto $bb28;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p48, $mul.ref(out_$i49, 16)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 16));
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i46);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_2623;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i67, out_$i68, out_$i46 := raid5_add_disk_loop_$bb25(in_$p4, in_$i25, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i67, out_$i68, out_$i46);
    return;

  exit:
    return;
}



procedure raid5_add_disk_loop_$bb25(in_$p4: ref, in_$i25: i32, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i67: i32, in_$i68: i1, in_$i46: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i67: i32, out_$i68: i1, out_$i46: i32);



implementation raid5_spare_active_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i38: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i61: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i8: i32, in_$i9: i32, in_$i92: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i38: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i61: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i8: i32, out_$i9: i32, out_$i92: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i61, out_$i89, out_$i90, out_$i91, out_$i8, out_$i9, out_$i92 := in_$p10, in_$p11, in_$i12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i38, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i61, in_$i89, in_$i90, in_$i91, in_$i8, in_$i9, in_$i92;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  $bb40:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i61, out_$i89;
    goto $bb40_dummy;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i61;
    assume true;
    goto $bb40;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i89, out_$i90);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, in_$p4);
    goto corral_source_split_2929;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i9, 1);
    call {:si_unique_call 614} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_2928;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i88;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i38;
    goto $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} sysfs_notify_dirent_safe(out_$p60);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_2917;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2916;

  $bb22:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} sysfs_notify_dirent_safe(out_$p56);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} set_bit(0, out_$p52);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2906;

  $bb21:
    assume out_$i49 == 1;
    goto corral_source_split_2905;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2897;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb17;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb17;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i8, 1);
    call {:si_unique_call 607} {:cexpr "count"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2887;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_2886;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i35, 0);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2879;

  $bb13:
    assume out_$i32 == 1;
    goto corral_source_split_2878;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} out_$i31 := test_and_set_bit(1, out_$p30);
    call {:si_unique_call 606} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2870;

  $bb11:
    assume out_$i27 == 1;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} out_$i26 := constant_test_bit(0, out_$p25);
    call {:si_unique_call 604} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2863;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, $sub.i64(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2856;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2851;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_2847;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i8;
    goto $bb20;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i44;
    goto $bb20;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i8, 1);
    call {:si_unique_call 610} {:cexpr "count"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2903;

  $bb18:
    assume out_$i43 == 1;
    goto corral_source_split_2902;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} out_$i42 := test_and_set_bit(1, out_$p41);
    call {:si_unique_call 609} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  $bb16:
    assume !(out_$i36 == 1);
    goto corral_source_split_2889;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i8;
    goto $bb39;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i87;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  $bb34:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := out_$i8;
    goto $bb38;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i86;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2961;

  $bb36:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := out_$i8;
    goto $bb37;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i81;
    goto $bb37;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} sysfs_notify_dirent_safe(out_$p85);
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_2958;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 832)), $mul.ref(648, 1));
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i8, 1);
    call {:si_unique_call 619} {:cexpr "count"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_2954;

  $bb35:
    assume out_$i80 == 1;
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 0);
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i79 := test_and_set_bit(1, out_$p78);
    call {:si_unique_call 618} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  $bb33:
    assume out_$i75 == 1;
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} out_$i74 := constant_test_bit(0, out_$p73);
    call {:si_unique_call 616} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2940;

  $bb31:
    assume out_$i70 == 1;
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, $sub.i64(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2933;

  $bb28:
    assume out_$i65 == 1;
    goto corral_source_split_2932;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_2923;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume !(out_$i32 == 1);
    goto corral_source_split_2884;

  $bb12:
    assume !(out_$i27 == 1);
    goto corral_source_split_2876;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb30;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i61, out_$i89, out_$i90, out_$i91, out_$i8, out_$i9, out_$i92 := raid5_spare_active_loop_$bb4(in_$p3, in_$p4, out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i61, out_$i89, out_$i90, out_$i91, out_$i8, out_$i9, out_$i92);
    return;

  exit:
    return;
}



procedure raid5_spare_active_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i38: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i61: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i8: i32, in_$i9: i32, in_$i92: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i38: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i61: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i8: i32, out_$i9: i32, out_$i92: i32);



implementation sync_request_loop_$bb18(in_$p5: ref, in_$p31: ref, in_$p33: ref, in_$i36: i64, in_$i37: i32, in_$i38: i1) returns (out_$i36: i64, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$i36, out_$i37, out_$i38 := in_$i36, in_$i37, in_$i38;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb22_dummy;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 2);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p33);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} out_$i36 := prepare_to_wait_event(in_$p31, in_$p5, 2);
    call {:si_unique_call 644} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_3041;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} schedule();
    goto corral_source_split_3040;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38 := sync_request_loop_$bb18(in_$p5, in_$p31, in_$p33, out_$i36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure sync_request_loop_$bb18(in_$p5: ref, in_$p31: ref, in_$p33: ref, in_$i36: i64, in_$i37: i32, in_$i38: i1) returns (out_$i36: i64, out_$i37: i32, out_$i38: i1);



implementation sync_request_loop_$bb50(in_$p8: ref, in_$p79: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i83: i32, in_$i84: i32, in_$i97: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i83: i32, out_$i84: i32, out_$i97: i32)
{

  entry:
    out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i83, out_$i84, out_$i97 := in_$p85, in_$p86, in_$i87, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i83, in_$i84, in_$i97;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3110;

  $bb55:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i94, out_$i93;
    goto $bb55_dummy;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i93;
    assume true;
    goto $bb55;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i94, out_$i95);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.0, in_$p79);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i83, 1);
    call {:si_unique_call 658} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3124;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3123;

  $bb53:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := out_$i84;
    goto $bb54;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i93 := 1;
    goto $bb54;

  $bb52:
    assume out_$i92 == 1;
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i64(out_$i91, 0);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p86, $mul.ref(out_$i87, 16)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i83);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3113;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i83, out_$i84, out_$i97 := sync_request_loop_$bb50(in_$p8, in_$p79, out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i83, out_$i84, out_$i97);
    return;

  exit:
    return;
}



procedure sync_request_loop_$bb50(in_$p8: ref, in_$p79: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i83: i32, in_$i84: i32, in_$i97: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i83: i32, out_$i84: i32, out_$i97: i32);



implementation raid5_start_reshape_loop_$bb69(in_$i191: i64, in_$p194: ref, in_$i195: i64, in_$p196: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p193: ref) returns (out_$p194: ref, out_$i195: i64, out_$p196: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p193: ref)
{

  entry:
    out_$p194, out_$i195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p193 := in_$p194, in_$i195, in_$p196, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$p193;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  $bb71:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$p193 := out_$p199;
    goto $bb71_dummy;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i203 := $ne.i64(out_$i202, in_$i191);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i202 := $p2i.ref.i64(out_$p201);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p200, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p200 := $bitcast.ref.ref(out_$p199);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.0, out_$p198);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p196, out_$i195);
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p193, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i64($M.0, out_$p194);
    goto corral_source_split_3593;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p193, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p194, out_$i195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p193 := raid5_start_reshape_loop_$bb69(in_$i191, out_$p194, out_$i195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p193);
    return;

  exit:
    return;
}



procedure raid5_start_reshape_loop_$bb69(in_$i191: i64, in_$p194: ref, in_$i195: i64, in_$p196: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p193: ref) returns (out_$p194: ref, out_$i195: i64, out_$p196: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p193: ref);
  modifies $M.0;



implementation raid5_start_reshape_loop_$bb39(in_$p0: ref, in_$p3: ref, in_$i112: i64, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p131: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p114: ref) returns (out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p131: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p114: ref)
{

  entry:
    out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p131, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p114 := in_$p115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p128, in_$p129, in_$i130, in_$p132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$p131, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p114;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  $bb60:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$p114 := out_$p143;
    goto $bb60_dummy;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i64(out_$i146, in_$i112);
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i146 := $p2i.ref.i64(out_$p145);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p144, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_3504;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref(out_$p131, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3502;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p131 := out_$p114;
    goto $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p131 := out_$p114;
    goto $bb53;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} out_$i130 := sysfs_link_rdev(in_$p0, out_$p114);
    call {:si_unique_call 717} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p129, 0);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} set_bit(1, out_$p128);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3487;

  $bb47:
    assume out_$i127 == 1;
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i127 := $sge.i32(out_$i124, out_$i126);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3480;

  $bb45:
    assume out_$i122 == 1;
    goto corral_source_split_3479;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 0);
    goto corral_source_split_3475;

  SeqInstr_237:
    call {:si_unique_call 714} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_3474;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} out_$i121 := raid5_add_disk(in_$p0, out_$p114);
    goto SeqInstr_236;

  $bb43:
    assume out_$i120 == 1;
    goto corral_source_split_3473;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} out_$i119 := constant_test_bit(0, out_$p118);
    call {:si_unique_call 712} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3467;

  $bb41:
    assume out_$i117 == 1;
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i116, 0);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_3463;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_3491;

  $bb48:
    assume !(out_$i127 == 1);
    goto corral_source_split_3490;

  $bb55:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} set_bit(1, out_$p140);
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3515;

  $bb56:
    assume out_$i139 == 1;
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 0);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_$i138 := constant_test_bit(0, out_$p137);
    call {:si_unique_call 719} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3510;

  $bb54:
    assume out_$i136 == 1;
    goto corral_source_split_3509;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i136 := $sge.i32(out_$i133, out_$i135);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_3496;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p114, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3495;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume !(out_$i120 == 1);
    goto corral_source_split_3477;

  $bb42:
    assume !(out_$i117 == 1);
    goto corral_source_split_3471;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p131, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p114 := raid5_start_reshape_loop_$bb39(in_$p0, in_$p3, in_$i112, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p131, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p114);
    return;

  exit:
    return;
}



procedure raid5_start_reshape_loop_$bb39(in_$p0: ref, in_$p3: ref, in_$i112: i64, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p131: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p114: ref) returns (out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p131: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p114: ref);
  modifies $CurrAddr, $M.0, $M.29, assertsPassed;



implementation raid5_start_reshape_loop_$bb14(in_$i19: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i22: i32, in_$p23: ref, in_$i40: i32) returns (out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i22: i32, out_$p23: ref, out_$i40: i32)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i22, out_$p23, out_$i40 := in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i22, in_$p23, in_$i40;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  $bb22:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i22, out_$p23 := out_$i32, out_$p35;
    goto $bb22_dummy;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i32;
    assume true;
    goto $bb22;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i19);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  $bb17:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i22;
    goto $bb21;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i22;
    goto $bb20;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb20;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i22, 1);
    call {:si_unique_call 697} {:cexpr "spares"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3342;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$i28 := constant_test_bit(0, out_$p27);
    call {:si_unique_call 696} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3337;

  $bb16:
    assume out_$i26 == 1;
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} out_$i25 := constant_test_bit(1, out_$p24);
    call {:si_unique_call 694} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3333;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i22, out_$p23, out_$i40 := raid5_start_reshape_loop_$bb14(in_$i19, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i22, out_$p23, out_$i40);
    return;

  exit:
    return;
}



procedure raid5_start_reshape_loop_$bb14(in_$i19: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i22: i32, in_$p23: ref, in_$i40: i32) returns (out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i22: i32, out_$p23: ref, out_$i40: i32);



implementation raid5_finish_reshape_loop_$bb9(in_$p3: ref, in_$p24: ref, in_$p26: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i30 := in_$p31, in_$p32, in_$i33, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i30;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  $bb17:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i49;
    goto $bb17_dummy;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i49, out_$i52);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i50, out_$i51);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, in_$p26);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p24);
    goto corral_source_split_3718;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i30, 1);
    call {:si_unique_call 753} {:cexpr "d"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3717;

  $bb15:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} clear_bit(1, out_$p48);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p45, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3714;

  $bb14:
    assume out_$i47 == 1;
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 16)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3705;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3704;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} clear_bit(1, out_$p39);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3701;

  $bb11:
    assume out_$i38 == 1;
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 16)), $mul.ref(0, 1));
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3693;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3692;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_3691;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i30 := raid5_finish_reshape_loop_$bb9(in_$p3, in_$p24, in_$p26, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i30);
    return;

  exit:
    return;
}



procedure raid5_finish_reshape_loop_$bb9(in_$p3: ref, in_$p24: ref, in_$p26: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i30: i32);



implementation raid5_quiesce_loop_$bb22(in_$p2: ref, in_$p5: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1) returns (out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1)
{

  entry:
    out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26 := in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_3779;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796_dummy;

  SeqInstr_282:
    goto corral_source_split_3796;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} lock_all_device_hash_locks_irq(in_$p5);
    goto SeqInstr_281;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} schedule();
    goto corral_source_split_3795;

  SeqInstr_279:
    goto corral_source_split_3794;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} unlock_all_device_hash_locks_irq(in_$p5);
    goto SeqInstr_278;

  $bb24:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i25 := atomic_read(in_$p19);
    call {:si_unique_call 774} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3786;

  $bb23:
    assume out_$i24 == 1;
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_$i23 := atomic_read(out_$p22);
    call {:si_unique_call 772} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_$i21 := prepare_to_wait_event(out_$p20, in_$p2, 2);
    call {:si_unique_call 770} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_3780;

  corral_source_split_3796_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26 := raid5_quiesce_loop_$bb22(in_$p2, in_$p5, in_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26);
    return;

  exit:
    return;
}



procedure raid5_quiesce_loop_$bb22(in_$p2: ref, in_$p5: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1) returns (out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1);
  modifies $M.2, $M.1, assertsPassed, $M.45;



implementation setup_conf_loop_$bb75(in_$p0: ref, in_$p12: ref, in_$p94: ref, in_$i146: i32, in_$i213: i64, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$i219: i1, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i64, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p220: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i1, in_$p215: ref, in_vslice_dummy_var_54: i32) returns (out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$i219: i1, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i64, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p220: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i1, out_$p215: ref, out_vslice_dummy_var_54: i32)
{

  entry:
    out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$p222, out_$i223, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$p247, out_$i248, out_$i249, out_$p250, out_$p220, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p215, out_vslice_dummy_var_54 := in_$p216, in_$i217, in_$i218, in_$i219, in_$p221, in_$p222, in_$i223, in_$p225, in_$i226, in_$i227, in_$p228, in_$p229, in_$i230, in_$i231, in_$p232, in_$p233, in_$p234, in_$i235, in_$i236, in_$p237, in_$p238, in_$i239, in_$i240, in_$p241, in_$p242, in_$p243, in_$p244, in_$p245, in_$p247, in_$i248, in_$i249, in_$p250, in_$p220, in_$p252, in_$p253, in_$p254, in_$p255, in_$i256, in_$i257, in_$p215, in_vslice_dummy_var_54;
    goto $bb75, exit;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  $bb99:
    assume out_$i257 == 1;
    assume {:verifier.code 0} true;
    out_$p215 := out_$p253;
    goto $bb99_dummy;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i64(out_$i256, in_$i213);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i256 := $p2i.ref.i64(out_$p255);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(out_$p254, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$p254 := $bitcast.ref.ref(out_$p253);
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$p253 := $load.ref($M.0, out_$p252);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref($add.ref(out_$p220, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4317;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_4316;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p220 := out_$p215;
    goto $bb82;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p220 := out_$p215;
    goto $bb82;

  $bb80:
    assume {:verifier.code 0} true;
    assume out_$i219 == 1;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    assume out_$i218 == 1;
    goto $bb78;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb79;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$i218 := $sge.i32(out_$i217, in_$i146);
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i32($M.0, out_$p216);
    call {:si_unique_call 870} {:cexpr "raid_disk"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_4310;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(out_$p215, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i219 := $slt.i32(out_$i217, 0);
    goto corral_source_split_4314;

  $bb79:
    assume !(out_$i218 == 1);
    goto corral_source_split_4313;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_vslice_dummy_var_54 := printk.ref.ref.ref.i32(.str.141, out_$p245, out_$p244, out_$i217);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} out_$p245 := mdname(in_$p0);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_$p244 := bdevname(out_$p242, out_$p243);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p243 := $bitcast.ref.ref(in_$p12);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$p242 := $load.ref($M.0, out_$p241);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p215, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_4358;

  $bb93:
    assume out_$i240 == 1;
    goto corral_source_split_4357;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i240 := $ne.i32(out_$i239, 0);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i239 := constant_test_bit(1, out_$p238);
    call {:si_unique_call 874} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i239);
    goto corral_source_split_4350;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p215, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_4349;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p237, out_$p215);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p232, out_$p215);
    goto corral_source_split_4347;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref(out_$p222, $mul.ref(out_$i223, 16)), $mul.ref(8, 1));
    goto corral_source_split_4346;

  $bb87:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i231 := $ne.i64(out_$i230, 0);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$i230 := $p2i.ref.i64(out_$p229);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$p229 := $load.ref($M.0, out_$p228);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p222, $mul.ref(out_$i223, 16)), $mul.ref(8, 1));
    goto corral_source_split_4333;

  $bb84:
    assume out_$i227 == 1;
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 0);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} out_$i226 := constant_test_bit(11, out_$p225);
    call {:si_unique_call 872} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p215, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i32.i64(out_$i217);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p222 := $load.ref($M.0, out_$p221);
    goto corral_source_split_4325;

  $bb83:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(in_$p94, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_4324;

  $bb81:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(out_$p222, $mul.ref(out_$i223, 16)), $mul.ref(0, 1));
    goto corral_source_split_4355;

  $bb91:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i236 := $ne.i64(out_$i235, 0);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i235 := $p2i.ref.i64(out_$p234);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.0, out_$p233);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p222, $mul.ref(out_$i223, 16)), $mul.ref(0, 1));
    goto corral_source_split_4339;

  $bb85:
    assume !(out_$i227 == 1);
    goto corral_source_split_4338;

  $bb97:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p250, 1);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(in_$p94, $mul.ref(0, 1544)), $mul.ref(924, 1));
    goto corral_source_split_4371;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$i249 := $ne.i32(out_$i248, out_$i217);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.0, out_$p247);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(out_$p215, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_4366;

  $bb94:
    assume !(out_$i240 == 1);
    goto corral_source_split_4365;

  $bb99_dummy:
    call {:si_unique_call 1} out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$p222, out_$i223, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$p247, out_$i248, out_$i249, out_$p250, out_$p220, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p215, out_vslice_dummy_var_54 := setup_conf_loop_$bb75(in_$p0, in_$p12, in_$p94, in_$i146, in_$i213, out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$p222, out_$i223, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$p247, out_$i248, out_$i249, out_$p250, out_$p220, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p215, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure setup_conf_loop_$bb75(in_$p0: ref, in_$p12: ref, in_$p94: ref, in_$i146: i32, in_$i213: i64, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$i219: i1, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i64, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p220: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i1, in_$p215: ref, in_vslice_dummy_var_54: i32) returns (out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$i219: i1, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i64, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p220: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i1, out_$p215: ref, out_vslice_dummy_var_54: i32);
  modifies $M.0;



implementation alloc_thread_groups_loop_$bb19(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i43: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i43: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8)
{

  entry:
    out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := in_$p44, in_$p45, in_$i46, in_$p48, in_$p49, in_$p50, in_$p52, in_$p53, in_$p54, in_$p56, in_$p58, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i43, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  $bb25:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i63;
    goto $bb25_dummy;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, in_$i1);
    goto corral_source_split_4750;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i43, 1);
    call {:si_unique_call 959} {:cexpr "j"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_4749;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD(out_$p88);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p87, $mul.ref(7, 16));
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_4786;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} INIT_LIST_HEAD(out_$p85);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p84, $mul.ref(6, 16));
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_4781;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} INIT_LIST_HEAD(out_$p82);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p81, $mul.ref(5, 16));
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4776;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} INIT_LIST_HEAD(out_$p79);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p78, $mul.ref(4, 16));
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_4771;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} INIT_LIST_HEAD(out_$p76);
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p75, $mul.ref(3, 16));
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_4766;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} INIT_LIST_HEAD(out_$p73);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(out_$p72, $mul.ref(2, 16));
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_4761;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4760;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} INIT_LIST_HEAD(out_$p70);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p69, $mul.ref(1, 16));
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4745;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD(out_$p62);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_4741;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4740;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, raid5_do_work);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} INIT_LIST_HEAD(out_$p58);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} lockdep_init_map(out_$p56, .str.17, in_$p5, 0);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_2 := $M.0;
    out_cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 954} out_cmdloc_dummy_var_4 := $memcpy.i8(out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_$p53, out_$p54, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_4;
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p50, 137438953408);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __init_work(out_$p49, 0);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1));
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, in_$p35);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(80, 1));
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i43);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4720;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p33, $mul.ref(in_$i34, 40)), $mul.ref(24, 1));
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := alloc_thread_groups_loop_$bb19(in_$i1, in_$p5, in_$p6, in_$p33, in_$i34, in_$p35, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4);
    return;

  exit:
    return;
}



procedure alloc_thread_groups_loop_$bb19(in_$i1: i32, in_$p5: ref, in_$p6: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i43: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i43: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8);
  modifies $M.0;



implementation alloc_thread_groups_loop_$bb14(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p16: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i43: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i32: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i43: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i32: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8)
{

  entry:
    out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$i65, out_$i66, out_$i67, out_$i32, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := in_$p33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$i46, in_$p48, in_$p49, in_$p50, in_$p52, in_$p53, in_$p54, in_$p56, in_$p58, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i43, in_$i65, in_$i66, in_$i67, in_$i32, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4699;

  $bb28:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i65;
    goto $bb28_dummy;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i65, out_$i66);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.17, in_$p2);
    goto corral_source_split_4755;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i32, 1);
    call {:si_unique_call 960} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4754;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb18;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume !(out_$i64 == 1);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, in_$i1);
    goto corral_source_split_4750;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i43, 1);
    call {:si_unique_call 959} {:cexpr "j"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_4749;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD(out_$p88);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p87, $mul.ref(7, 16));
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_4786;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} INIT_LIST_HEAD(out_$p85);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p84, $mul.ref(6, 16));
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_4781;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} INIT_LIST_HEAD(out_$p82);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p81, $mul.ref(5, 16));
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4776;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} INIT_LIST_HEAD(out_$p79);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p78, $mul.ref(4, 16));
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_4771;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} INIT_LIST_HEAD(out_$p76);
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p75, $mul.ref(3, 16));
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_4766;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} INIT_LIST_HEAD(out_$p73);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(out_$p72, $mul.ref(2, 16));
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_4761;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4760;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} INIT_LIST_HEAD(out_$p70);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p69, $mul.ref(1, 16));
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4745;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD(out_$p62);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_4741;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(88, 1));
    goto corral_source_split_4740;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, raid5_do_work);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} INIT_LIST_HEAD(out_$p58);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} lockdep_init_map(out_$p56, .str.17, in_$p5, 0);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_2 := $M.0;
    out_cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 954} out_cmdloc_dummy_var_4 := $memcpy.i8(out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_$p53, out_$p54, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_4;
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p50, 137438953408);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __init_work(out_$p49, 0);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(0, 1));
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, out_$p35);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 224)), $mul.ref(80, 1));
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i43);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4720;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 40)), $mul.ref(24, 1));
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    call out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := alloc_thread_groups_loop_$bb19(in_$i1, in_$p5, in_$p6, out_$p33, out_$i34, out_$p35, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i43 := 0;
    goto $bb19;

  $bb25:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i63;
    assume false;
    return;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(0, in_$i1);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, out_$p40);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 40)), $mul.ref(24, 1));
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(in_$p16, $mul.ref(out_$i39, 224));
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i32, in_$i1);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, in_$p0);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 40)), $mul.ref(16, 1));
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} INIT_LIST_HEAD(out_$p36);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p33, $mul.ref(out_$i34, 40)), $mul.ref(0, 1));
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p33, $mul.ref(out_$i34, 40));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i32);
    goto corral_source_split_4702;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.19, in_$p4);
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$i65, out_$i66, out_$i67, out_$i32, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := alloc_thread_groups_loop_$bb14(in_$p0, in_$i1, in_$p2, in_$p4, in_$p5, in_$p6, in_$p16, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i43, out_$i65, out_$i66, out_$i67, out_$i32, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4);
    return;

  exit:
    return;
}



procedure alloc_thread_groups_loop_$bb14(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p16: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i43: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i32: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i43: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i32: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8);
  modifies $M.0;



implementation raid5_alloc_percpu_loop_$bb11(in_$p0: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i64, in_$i34: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i23: i64, in_$i44: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i64, out_$i34: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i23: i64, out_$i44: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i23, out_$i44 := in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i23, in_$i44;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4840;

  $bb17:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i40;
    goto $bb17_dummy;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i31;
    assume true;
    goto $bb17;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i64(out_$i40, out_$i42);
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_4862;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    call {:si_unique_call 985} {:cexpr "cpu"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_4860;

  SeqInstr_327:
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4859;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_$i39 := cpumask_next(out_$i37, out_$p38);
    goto SeqInstr_326;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_4858;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i23);
    goto corral_source_split_4857;

  $bb14:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i23, out_$i31;
    assume true;
    goto $bb14;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_4849;

  SeqInstr_324:
    call {:si_unique_call 980} {:cexpr "err"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4848;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_$i31 := alloc_scratch_buffer(in_$p0, out_$p30);
    goto SeqInstr_323;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$p30 := $i2p.i64.ref(out_$i29);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i26, out_$i28);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i23, 8));
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    call {:si_unique_call 977} out_$i26 := devirtbounce.10(0, out_$p25);
    call {:si_unique_call 978} {:cexpr "__ptr"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_4843;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i23, out_$i44 := raid5_alloc_percpu_loop_$bb11(in_$p0, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i23, out_$i44);
    return;

  exit:
    return;
}



procedure raid5_alloc_percpu_loop_$bb11(in_$p0: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i64, in_$i34: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i23: i64, in_$i44: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i64, out_$i34: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i23: i64, out_$i44: i32);
  modifies assertsPassed, $M.0;



implementation grow_stripes_loop_$bb14(in_$p0: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i57: i32, in_$i58: i32) returns (out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i57: i32, out_$i58: i32)
{

  entry:
    out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i57, out_$i58 := in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i57, in_$i58;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  $bb19:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$i58 := out_$i67, out_$i66;
    goto $bb19_dummy;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i57, 0);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(out_$i57, 1);
    call {:si_unique_call 1001} {:cexpr "num"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$i66 := $srem.i32(out_$i65, 8);
    call {:si_unique_call 1000} {:cexpr "hash"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i58, 1);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i63);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_4953;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_4952;

  $bb17:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_4948;

  SeqInstr_330:
    call {:si_unique_call 999} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_4947;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} out_$i59 := grow_one_stripe(in_$p0, out_$i58);
    goto SeqInstr_329;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i57, out_$i58 := grow_stripes_loop_$bb14(in_$p0, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i57, out_$i58);
    return;

  exit:
    return;
}



procedure grow_stripes_loop_$bb14(in_$p0: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i57: i32, in_$i58: i32) returns (out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i57: i32, out_$i58: i32);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation shrink_stripes_loop_$bb73(in_$p0: ref, in_$i38: i32, in_$i39: i1) returns (out_$i38: i32, out_$i39: i1)
{

  entry:
    out_$i38, out_$i39 := in_$i38, in_$i39;
    goto $bb73, exit;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb75:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb75_dummy;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_5095;

  SeqInstr_387:
    goto corral_source_split_5094;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} out_$i38 := drop_one_stripe(in_$p0, 7);
    goto SeqInstr_386;

  $bb75_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39 := shrink_stripes_loop_$bb73(in_$p0, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb73(in_$p0: ref, in_$i38: i32, in_$i39: i1) returns (out_$i38: i32, out_$i39: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb64(in_$p0: ref, in_$i34: i32, in_$i35: i1) returns (out_$i34: i32, out_$i35: i1)
{

  entry:
    out_$i34, out_$i35 := in_$i34, in_$i35;
    goto $bb64, exit;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb66_dummy;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_5085;

  SeqInstr_381:
    goto corral_source_split_5084;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} out_$i34 := drop_one_stripe(in_$p0, 6);
    goto SeqInstr_380;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35 := shrink_stripes_loop_$bb64(in_$p0, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb64(in_$p0: ref, in_$i34: i32, in_$i35: i1) returns (out_$i34: i32, out_$i35: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb55(in_$p0: ref, in_$i30: i32, in_$i31: i1) returns (out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$i30, out_$i31 := in_$i30, in_$i31;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb57_dummy;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_5075;

  SeqInstr_375:
    goto corral_source_split_5074;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_$i30 := drop_one_stripe(in_$p0, 5);
    goto SeqInstr_374;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31 := shrink_stripes_loop_$bb55(in_$p0, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb55(in_$p0: ref, in_$i30: i32, in_$i31: i1) returns (out_$i30: i32, out_$i31: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb46(in_$p0: ref, in_$i26: i32, in_$i27: i1) returns (out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$i26, out_$i27 := in_$i26, in_$i27;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb48_dummy;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_5065;

  SeqInstr_369:
    goto corral_source_split_5064;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} out_$i26 := drop_one_stripe(in_$p0, 4);
    goto SeqInstr_368;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i26, out_$i27 := shrink_stripes_loop_$bb46(in_$p0, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb46(in_$p0: ref, in_$i26: i32, in_$i27: i1) returns (out_$i26: i32, out_$i27: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb37(in_$p0: ref, in_$i22: i32, in_$i23: i1) returns (out_$i22: i32, out_$i23: i1)
{

  entry:
    out_$i22, out_$i23 := in_$i22, in_$i23;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb39_dummy;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5055;

  SeqInstr_363:
    goto corral_source_split_5054;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_$i22 := drop_one_stripe(in_$p0, 3);
    goto SeqInstr_362;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23 := shrink_stripes_loop_$bb37(in_$p0, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb37(in_$p0: ref, in_$i22: i32, in_$i23: i1) returns (out_$i22: i32, out_$i23: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb28(in_$p0: ref, in_$i18: i32, in_$i19: i1) returns (out_$i18: i32, out_$i19: i1)
{

  entry:
    out_$i18, out_$i19 := in_$i18, in_$i19;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i19 == 1;
    goto $bb30_dummy;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_5045;

  SeqInstr_357:
    goto corral_source_split_5044;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} out_$i18 := drop_one_stripe(in_$p0, 2);
    goto SeqInstr_356;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19 := shrink_stripes_loop_$bb28(in_$p0, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb28(in_$p0: ref, in_$i18: i32, in_$i19: i1) returns (out_$i18: i32, out_$i19: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb19(in_$p0: ref, in_$i14: i32, in_$i15: i1) returns (out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i14, out_$i15 := in_$i14, in_$i15;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb21_dummy;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5035;

  SeqInstr_351:
    goto corral_source_split_5034;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} out_$i14 := drop_one_stripe(in_$p0, 1);
    goto SeqInstr_350;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15 := shrink_stripes_loop_$bb19(in_$p0, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb19(in_$p0: ref, in_$i14: i32, in_$i15: i1) returns (out_$i14: i32, out_$i15: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation shrink_stripes_loop_$bb6(in_$p0: ref, in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb8_dummy;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_5012;

  SeqInstr_345:
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_5011;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} out_$i3 := drop_one_stripe(in_$p0, 0);
    goto SeqInstr_344;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := shrink_stripes_loop_$bb6(in_$p0, out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure shrink_stripes_loop_$bb6(in_$p0: ref, in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);
  modifies $M.1, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation raid5_free_percpu_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$i24: i32, in_$i25: i64, in_$i26: i1, in_$i12: i64) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$i24: i32, out_$i25: i64, out_$i26: i1, out_$i12: i64)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i23;
    goto $bb10_dummy;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i64(out_$i23, out_$i25);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    call {:si_unique_call 1041} {:cexpr "cpu"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_5131;

  SeqInstr_393:
    call {:si_unique_call 1040} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5130;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_$i22 := cpumask_next(out_$i20, out_$p21);
    goto SeqInstr_392;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i64.i32(out_$i12);
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} free_scratch_buffer(in_$p0, out_$p19);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i15, out_$i17);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i12, 8));
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    call {:si_unique_call 1036} out_$i15 := devirtbounce.10(0, out_$p14);
    call {:si_unique_call 1037} {:cexpr "__ptr"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_5122;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i12 := raid5_free_percpu_loop_$bb8(in_$p0, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i12);
    return;

  exit:
    return;
}



procedure raid5_free_percpu_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$i24: i32, in_$i25: i64, in_$i26: i1, in_$i12: i64) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$i24: i32, out_$i25: i64, out_$i26: i1, out_$i12: i64);
  modifies assertsPassed, $M.0;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_$p10 := ldv_xmalloc(1);
    goto corral_source_split_5304;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb11_dummy;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$i14 := ldv_undef_int();
    call {:si_unique_call 1099} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5316;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_free(out_$p10);
    goto corral_source_split_5315;

  SeqInstr_429:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} ldv_free(out_$p13);
    goto corral_source_split_5311;

  SeqInstr_426:
    goto corral_source_split_5310;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_dummy_resourceless_instance_callback_3_9($u4, in_$p7, out_$p13, $u0);
    goto SeqInstr_425;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_5309;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1092} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5305;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_dummy_resourceless_instance_callback_3_3($u5, in_$p7, out_$p10);
    goto SeqInstr_428;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_5313;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3_loop_$bb7(in_$p7, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_3_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $CurrAddr, $M.18, $M.17, $M.19, $M.0, $M.2, $M.22, assertsPassed, $M.23;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} out_$p10 := ldv_xmalloc(1);
    goto corral_source_split_5338;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb11_dummy;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} out_$i14 := ldv_undef_int();
    call {:si_unique_call 1112} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5350;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} ldv_free(out_$p10);
    goto corral_source_split_5349;

  SeqInstr_435:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} ldv_free(out_$p13);
    goto corral_source_split_5345;

  SeqInstr_432:
    goto corral_source_split_5344;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_dummy_resourceless_instance_callback_4_9($u4, in_$p7, out_$p13, $u0);
    goto SeqInstr_431;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_5343;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1105} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5339;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_dummy_resourceless_instance_callback_4_3($u5, in_$p7, out_$p10);
    goto SeqInstr_434;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_5347;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4_loop_$bb7(in_$p7, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_4_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $CurrAddr, $M.0, $M.22, assertsPassed, $M.23;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_$p10 := ldv_xmalloc(1);
    goto corral_source_split_5372;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb11_dummy;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_$i14 := ldv_undef_int();
    call {:si_unique_call 1125} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5384;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_free(out_$p10);
    goto corral_source_split_5383;

  SeqInstr_441:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_free(out_$p13);
    goto corral_source_split_5379;

  SeqInstr_438:
    goto corral_source_split_5378;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_dummy_resourceless_instance_callback_5_9($u4, in_$p7, out_$p13, $u0);
    goto SeqInstr_437;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_5377;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1118} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5373;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_dummy_resourceless_instance_callback_5_3($u5, in_$p7, out_$p10);
    goto SeqInstr_440;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_5381;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5_loop_$bb7(in_$p7, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_5_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $CurrAddr, $M.21, $M.0, $M.22, assertsPassed, $M.23;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_$p10 := ldv_xmalloc(1);
    goto corral_source_split_5406;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb11_dummy;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_$i14 := ldv_undef_int();
    call {:si_unique_call 1138} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5418;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_free(out_$p10);
    goto corral_source_split_5417;

  SeqInstr_447:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ldv_free(out_$p13);
    goto corral_source_split_5413;

  SeqInstr_444:
    goto corral_source_split_5412;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_dummy_resourceless_instance_callback_6_9($u4, in_$p7, out_$p13, $u0);
    goto SeqInstr_443;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_5411;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1131} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5407;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_dummy_resourceless_instance_callback_6_3($u5, in_$p7, out_$p10);
    goto SeqInstr_446;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_5415;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6_loop_$bb7(in_$p7, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_6_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2, $M.23;



implementation ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} out_$p10 := ldv_xmalloc(1);
    goto corral_source_split_5440;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb11_dummy;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} out_$i14 := ldv_undef_int();
    call {:si_unique_call 1151} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5452;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} ldv_free(out_$p10);
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ldv_dummy_resourceless_instance_callback_7_3($u5, in_$p7, out_$p10);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_free(out_$p13);
    goto corral_source_split_5447;

  SeqInstr_450:
    goto corral_source_split_5446;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} ldv_dummy_resourceless_instance_callback_7_9($u4, in_$p7, out_$p13, $u0);
    goto SeqInstr_449;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_5445;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1144} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5441;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_5449;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7_loop_$bb7(in_$p7, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_md_sysfs_entry_dummy_resourceless_instance_7_loop_$bb7(in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.22, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $M.2;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation get_active_stripe_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i8: i32, in_$p35: ref, in_$p37: ref, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$i53: i1) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$i53: i1)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53 := in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb19_dummy;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i1(out_$i52, in_$i40);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, in_$p37);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} out_$i50 := prepare_to_wait_event(in_$p35, in_$p6, 2);
    call {:si_unique_call 1299} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_6065;

  SeqInstr_567:
    goto corral_source_split_6064;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} ldv_spin_lock_irq_100(out_$p49);
    goto SeqInstr_566;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 72));
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} schedule();
    goto corral_source_split_6059;

  SeqInstr_564:
    goto corral_source_split_6058;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_spin_unlock_irq_103(out_$p45);
    goto SeqInstr_563;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 72));
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_6055;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6054;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53 := get_active_stripe_loop_$bb15(in_$p0, in_$p6, in_$i8, in_$p35, in_$p37, in_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure get_active_stripe_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i8: i32, in_$p35: ref, in_$p37: ref, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$i53: i1) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$i53: i1);
  modifies $M.1, assertsPassed;



implementation get_active_stripe_loop_$bb44(in_$p0: ref, in_$p7: ref, in_$i8: i32, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref) returns (out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref)
{

  entry:
    out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123 := in_$p100, in_$i101, in_$p102, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p119, in_$p120, in_$p121, in_$i122, in_$p123;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6140;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174_dummy;

  SeqInstr_579:
    goto corral_source_split_6174;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_spin_lock_irq_100(out_$p123);
    goto SeqInstr_578;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p121, $mul.ref(out_$i122, 72));
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} schedule();
    goto corral_source_split_6169;

  SeqInstr_576:
    goto corral_source_split_6168;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_spin_unlock_irq_103(out_$p119);
    goto SeqInstr_575;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p117, $mul.ref(out_$i118, 72));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_6165;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6164;

  $bb46:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, in_$p99);
    goto corral_source_split_6158;

  $bb49:
    assume !(out_$i113 == 1);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i108, out_$i112);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i112 := $sdiv.i32(out_$i111, 4);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i111 := $mul.i32(out_$i110, 3);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_$i108 := atomic_read(in_$p98);
    call {:si_unique_call 1316} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_6150;

  $bb45:
    assume out_$i107 == 1;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 0);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_$i106 := list_empty(out_$p105);
    call {:si_unique_call 1314} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p103, $mul.ref(out_$i104, 16));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} out_$i101 := prepare_to_wait_event(out_$p100, in_$p7, 2);
    call {:si_unique_call 1312} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_6141;

  corral_source_split_6174_dummy:
    call {:si_unique_call 1} out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123 := get_active_stripe_loop_$bb44(in_$p0, in_$p7, in_$i8, in_$p98, in_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123);
    return;

  exit:
    return;
}



procedure get_active_stripe_loop_$bb44(in_$p0: ref, in_$p7: ref, in_$i8: i32, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref) returns (out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref);
  modifies $M.1, assertsPassed;



implementation get_active_stripe_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$i63: i16, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i72: i1, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i64, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p127: ref, in_$i169: i64, in_$i170: i1, in_$p171: ref) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$i63: i16, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i72: i1, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i64, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p127: ref, out_$i169: i64, out_$i170: i1, out_$p171: ref)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p127, out_$i169, out_$i170, out_$p171 := in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$p102, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p119, in_$p120, in_$p121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p128, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$p138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$p160, in_$i161, in_$i162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p127, in_$i169, in_$i170, in_$p171;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_6015;

  $bb75:
    assume {:verifier.code 0} true;
    assume out_$i170 == 1;
    goto $bb75_dummy;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$p171 := out_$p127;
    assume true;
    goto $bb75;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i64(out_$i169, 0);
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$i169 := $p2i.ref.i64(out_$p127);
    goto corral_source_split_6177;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p127 := out_$p64;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p127 := out_$p71;
    goto $bb56;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} atomic_inc(out_$p126);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p125, 0);
    goto corral_source_split_6131;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6130;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i95 == 1;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    assume out_$i92 == 1;
    goto $bb37;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i87, out_$i91);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i91 := $sdiv.i32(out_$i90, 4);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i90 := $mul.i32(out_$i89, 3);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_$i87 := atomic_read(out_$p86);
    call {:si_unique_call 1309} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6117;

  $bb34:
    assume out_$i85 == 1;
    goto corral_source_split_6116;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} out_$i84 := list_empty(out_$p83);
    call {:si_unique_call 1305} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(out_$p81, $mul.ref(out_$i82, 16));
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p79, 1);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6103;

  $bb32:
    assume out_$i78 == 1;
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i64(out_$i77, 0);
    goto corral_source_split_6100;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_6099;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb27;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p71;
    assume true;
    goto $bb29;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i64(out_$i73, 0);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_6087;

  $bb25:
    assume out_$i72 == 1;
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(in_$i3, 0);
    goto corral_source_split_6084;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  $bb23:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$p71 := out_$p64;
    goto $bb24;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p70;
    goto $bb24;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} out_$p70 := get_free_stripe(in_$p0, in_$i8);
    goto corral_source_split_6081;

  $bb22:
    assume out_$i69 == 1;
    goto corral_source_split_6080;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6071;

  $bb20:
    assume out_$i66 == 1;
    goto corral_source_split_6070;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} out_$p64 := __find_stripe(in_$p0, in_$i1, out_$i63);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i16(out_$i62);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i16.i32(out_$i61);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i32.i16(out_$i60);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i57, out_$i59);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i16(in_$i2);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(out_$i56);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.0, out_$p55);
    goto corral_source_split_6023;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_6022;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb6;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6016;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(in_$i4, 0);
    goto corral_source_split_6020;

  $bb7:
    assume !(out_$i31 == 1);
    goto corral_source_split_6019;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} finish_wait(out_$p54, in_$p6);
    goto corral_source_split_6052;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6051;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb13;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$i41 := $or.i1(out_$i39, out_$i40);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(in_$i4, 0);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(920, 1));
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_$i36 := prepare_to_wait_event(out_$p35, in_$p6, 2);
    call {:si_unique_call 1293} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, 0);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} INIT_LIST_HEAD(out_$p33);
    goto corral_source_split_6036;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6035;

  $bb9:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume out_$i53 == 1;
    goto corral_source_split_6049;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb19;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i1(out_$i52, out_$i40);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p37);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} out_$i50 := prepare_to_wait_event(out_$p35, in_$p6, 2);
    call {:si_unique_call 1299} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_6065;

  SeqInstr_567:
    goto corral_source_split_6064;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} ldv_spin_lock_irq_100(out_$p49);
    goto SeqInstr_566;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 72));
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} schedule();
    goto corral_source_split_6059;

  SeqInstr_564:
    goto corral_source_split_6058;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_spin_unlock_irq_103(out_$p45);
    goto SeqInstr_563;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 72));
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_6055;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6054;

  $bb15:
    call out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53 := get_active_stripe_loop_$bb15(in_$p0, in_$p6, in_$i8, out_$p35, out_$p37, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    assume false;
    return;

  $bb14:
    assume !(out_$i41 == 1);
    goto corral_source_split_6047;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6126;

  $bb38:
    assume !(out_$i92 == 1);
    goto corral_source_split_6125;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} finish_wait(out_$p124, in_$p7);
    goto corral_source_split_6162;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6161;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    assume out_$i115 == 1;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i113 == 1;
    goto $bb48;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i108, out_$i112);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i112 := $sdiv.i32(out_$i111, 4);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i111 := $mul.i32(out_$i110, 3);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_$i108 := atomic_read(out_$p98);
    call {:si_unique_call 1316} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_6150;

  $bb45:
    assume out_$i107 == 1;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 0);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_$i106 := list_empty(out_$p105);
    call {:si_unique_call 1314} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p103, $mul.ref(out_$i104, 16));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} out_$i101 := prepare_to_wait_event(out_$p100, in_$p7, 2);
    call {:si_unique_call 1312} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_6141;

  $bb44:
    call out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123 := get_active_stripe_loop_$bb44(in_$p0, in_$p7, in_$i8, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123);
    goto $bb44_last;

  $bb44_last:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_579:
    goto corral_source_split_6174;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_spin_lock_irq_100(out_$p123);
    goto SeqInstr_578;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p121, $mul.ref(out_$i122, 72));
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} schedule();
    goto corral_source_split_6169;

  SeqInstr_576:
    goto corral_source_split_6168;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_spin_unlock_irq_103(out_$p119);
    goto SeqInstr_575;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p117, $mul.ref(out_$i118, 72));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(in_$i8);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_6165;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_6164;

  $bb46:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p99);
    goto corral_source_split_6158;

  $bb49:
    assume !(out_$i113 == 1);
    goto corral_source_split_6157;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1304, 1));
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, 0);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} INIT_LIST_HEAD(out_$p96);
    goto corral_source_split_6134;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6133;

  $bb35:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6114;

  SeqInstr_573:
    goto corral_source_split_6113;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} init_stripe(out_$p71, in_$i1, in_$i2);
    goto SeqInstr_572;

  $bb33:
    assume !(out_$i78 == 1);
    goto corral_source_split_6112;

  $bb58:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_585:
    goto corral_source_split_6238;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_spin_unlock_102(out_$p168);
    goto SeqInstr_584;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} atomic_inc(out_$p167);
    goto corral_source_split_6236;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6235;

  $bb60:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p166, $0.ref);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p165, out_$i162);
    goto corral_source_split_6231;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p164, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6230;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_6229;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i162 := $sub.i32(out_$i161, 1);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.0, out_$p160);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p159, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6223;

  $bb70:
    assume out_$i157 == 1;
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i64(out_$i156, 0);
    goto corral_source_split_6220;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    out_$i156 := $p2i.ref.i64(out_$p155);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.0, out_$p154);
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(184, 1));
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} list_del_init(out_$p153);
    goto corral_source_split_6216;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_6215;

  $bb65:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i64(out_$i151, 0);
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} out_$i151 := ldv__builtin_expect(out_$i150, 0);
    call {:si_unique_call 1334} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i151);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i149);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i1.i32(out_$i148);
    goto corral_source_split_6208;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 0);
    goto corral_source_split_6207;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} out_$i147 := constant_test_bit(10, out_$p146);
    call {:si_unique_call 1332} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_6206;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_6205;

  $bb64:
    assume out_$i145 == 1;
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i64(out_$i144, 0);
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} out_$i144 := ldv__builtin_expect(out_$i143, 0);
    call {:si_unique_call 1330} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i144);
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i142);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i1.i32(out_$i141);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$i141 := $ne.i32(out_$i140, 0);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} out_$i140 := list_empty(out_$p139);
    call {:si_unique_call 1328} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_6197;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_6196;

  $bb62:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} atomic_inc(out_$p138);
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(976, 1));
    goto corral_source_split_6193;

  $bb61:
    assume out_$i137 == 1;
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 0);
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_$i136 := constant_test_bit(1, out_$p135);
    call {:si_unique_call 1325} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6189;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_6188;

  $bb59:
    assume out_$i134 == 1;
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i133 := atomic_read(out_$p132);
    call {:si_unique_call 1323} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6183;

  SeqInstr_582:
    goto corral_source_split_6182;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_spin_lock_101(out_$p131);
    goto SeqInstr_581;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_6181;

  $bb57:
    assume out_$i130 == 1;
    goto corral_source_split_6180;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_$i129 := atomic_add_unless(out_$p128, 1, 0);
    call {:si_unique_call 1301} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p64, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_6076;

  $bb21:
    assume !(out_$i66 == 1);
    goto corral_source_split_6075;

  $bb75_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p127, out_$i169, out_$i170, out_$p171 := get_active_stripe_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$i3, in_$i4, in_$p6, in_$p7, in_$i8, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p127, out_$i169, out_$i170, out_$p171);
    return;

  exit:
    return;
}



procedure get_active_stripe_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$i63: i16, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i72: i1, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i64, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p127: ref, in_$i169: i64, in_$i170: i1, in_$p171: ref) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$i63: i16, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i72: i1, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i64, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p127: ref, out_$i169: i64, out_$i170: i1, out_$p171: ref);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.1, assertsPassed, $M.12, $M.2, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation trace_block_bio_complete_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24 := in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;

  $bb15:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p20;
    goto $bb15_dummy;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p14, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p14, $mul.ref(1, 16));
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p16);
    call {:si_unique_call 1354} devirtbounce.12(out_$p19, out_$p18, in_$p0, in_$p1, in_$i2);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6312;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24 := trace_block_bio_complete_loop_$bb14(in_$p0, in_$p1, in_$i2, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure trace_block_bio_complete_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1);



implementation trace_block_bio_remap_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25 := in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6599;

  $bb15:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p21;
    goto $bb15_dummy;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p15, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p15, $mul.ref(1, 16));
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p17);
    call {:si_unique_call 1450} devirtbounce.15(out_$p20, out_$p19, in_$p0, in_$p1, in_$i2, in_$i3);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6602;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6600;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25 := trace_block_bio_remap_loop_$bb14(in_$p0, in_$p1, in_$i2, in_$i3, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure trace_block_bio_remap_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1);



implementation __find_stripe_loop_$bb10(in_$i1: i64, in_$i2: i16, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p30: ref) returns (out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p30: ref)
{

  entry:
    out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p30 := in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p42, in_$p43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p30;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p30 := out_$p47;
    goto $bb22_dummy;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_7529;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7528;

  $bb20:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$p47 := $0.ref;
    goto $bb21;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p43;
    goto $bb21;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  $bb19:
    assume out_$i45 == 1;
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_7522;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_7521;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7520;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb14;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p30;
    assume true;
    goto $bb16;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i36, out_$i37);
    goto corral_source_split_7514;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i16.i32(in_$i2);
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i16.i32(out_$i35);
    goto corral_source_split_7512;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p30, $mul.ref(0, 576)), $mul.ref(48, 1));
    goto corral_source_split_7510;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, in_$i1);
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_7506;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p30 := __find_stripe_loop_$bb10(in_$i1, in_$i2, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p30);
    return;

  exit:
    return;
}



procedure __find_stripe_loop_$bb10(in_$i1: i64, in_$i2: i16, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p30: ref) returns (out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p30: ref);



implementation init_stripe_loop_$bb20(in_$p0: ref, in_$i2: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i66: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i66: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64)
{

  entry:
    out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := in_$p67, in_$p68, in_$i69, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$p92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i66, in_vslice_dummy_var_81, in_vslice_dummy_var_82;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  $bb39:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i113;
    goto $bb39_dummy;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i66, 0);
    goto corral_source_split_7723;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i66, 1);
    call {:si_unique_call 1615} {:cexpr "i"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} raid5_build_block(in_$p0, out_$i66, in_$i2);
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p112, 0);
    goto corral_source_split_7720;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7719;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} out_vslice_dummy_var_82 := ldv__builtin_expect(out_$i110, 0);
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i32(out_$i108);
    goto corral_source_split_7715;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(1, 0);
    goto corral_source_split_7714;

  $bb35:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} warn_slowpath_null(.str.1, 548);
    goto corral_source_split_7712;

  $bb34:
    assume out_$i107 == 1;
    goto corral_source_split_7711;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_$i106 := ldv__builtin_expect(out_$i105, 0);
    call {:si_unique_call 1611} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i106);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i104);
    goto corral_source_split_7705;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i1.i32(out_$i103);
    goto corral_source_split_7704;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(1, 0);
    goto corral_source_split_7703;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_vslice_dummy_var_81 := printk.ref.i64.i32.ref.ref.ref.ref.i32(.str.56, out_$i93, out_$i66, out_$p95, out_$p97, out_$p99, out_$p101, out_$i91);
    goto corral_source_split_7702;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_7701;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7700;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_7699;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7698;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_7697;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7696;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_7695;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_7693;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_$i91 := constant_test_bit(1, out_$p90);
    call {:si_unique_call 1608} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_7691;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7690;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i78 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i74 == 1;
    goto $bb23;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_7664;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i66);
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_7659;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1));
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_7671;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7668;

  $bb24:
    assume !(out_$i74 == 1);
    goto corral_source_split_7667;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_7677;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_7676;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_7675;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7674;

  $bb26:
    assume !(out_$i78 == 1);
    goto corral_source_split_7673;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_7681;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7680;

  $bb28:
    assume !(out_$i82 == 1);
    goto corral_source_split_7679;

  $bb32:
    assume out_$i89 == 1;
    goto corral_source_split_7709;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_7688;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_$i88 := constant_test_bit(1, out_$p87);
    call {:si_unique_call 1606} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7686;

  $bb30:
    assume !(out_$i86 == 1);
    goto corral_source_split_7685;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := init_stripe_loop_$bb20(in_$p0, in_$i2, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure init_stripe_loop_$bb20(in_$p0: ref, in_$i2: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i66: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i66: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64);
  modifies $M.0, $M.12, $CurrAddr;



implementation init_stripe_loop_$bb13(in_$p0: ref, in_$i1: i64, in_$i2: i32, in_$p5: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$p52: ref, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$p57: ref, in_$i58: i32, in_$i56: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i66: i32, in_$i115: i32, in_$i116: i1, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64) returns (out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$p52: ref, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$p57: ref, out_$i58: i32, out_$i56: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i66: i32, out_$i115: i32, out_$i116: i1, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64)
{

  entry:
    out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p57, out_$i58, out_$i56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_$i115, out_$i116, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$p54, in_$i55, in_$p57, in_$i58, in_$i56, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p67, in_$p68, in_$i69, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$p92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i66, in_$i115, in_$i116, in_vslice_dummy_var_81, in_vslice_dummy_var_82;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(648, 1));
    goto corral_source_split_7620;

  $bb42:
    assume {:verifier.code 0} true;
    assume out_$i116 == 1;
    goto $bb42_dummy;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_7728;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_$i115 := read_seqcount_retry(in_$p42, out_$i44);
    call {:si_unique_call 1617} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_7727;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb19;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb40:
    assume !(out_$i114 == 1);
    goto corral_source_split_7725;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i66, 0);
    goto corral_source_split_7723;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i66, 1);
    call {:si_unique_call 1615} {:cexpr "i"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} raid5_build_block(in_$p0, out_$i66, in_$i2);
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p112, 0);
    goto corral_source_split_7720;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7719;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} out_vslice_dummy_var_82 := ldv__builtin_expect(out_$i110, 0);
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i109);
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i32(out_$i108);
    goto corral_source_split_7715;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(1, 0);
    goto corral_source_split_7714;

  $bb35:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} warn_slowpath_null(.str.1, 548);
    goto corral_source_split_7712;

  $bb34:
    assume out_$i107 == 1;
    goto corral_source_split_7711;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_$i106 := ldv__builtin_expect(out_$i105, 0);
    call {:si_unique_call 1611} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i106);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i104);
    goto corral_source_split_7705;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i1.i32(out_$i103);
    goto corral_source_split_7704;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(1, 0);
    goto corral_source_split_7703;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_vslice_dummy_var_81 := printk.ref.i64.i32.ref.ref.ref.ref.i32(.str.56, out_$i93, out_$i66, out_$p95, out_$p97, out_$p99, out_$p101, out_$i91);
    goto corral_source_split_7702;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_7701;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7700;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_7699;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7698;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_7697;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7696;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_7695;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_7693;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_$i91 := constant_test_bit(1, out_$p90);
    call {:si_unique_call 1608} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_7691;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7690;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i78 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i74 == 1;
    goto $bb23;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_7664;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(320, 1));
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i66);
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_7659;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1));
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    call out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := init_stripe_loop_$bb20(in_$p0, in_$i2, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    goto $bb20_last;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i64;
    goto $bb20;

  $bb39:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i113;
    assume false;
    return;

  $bb17:
    assume out_$i65 == 1;
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i63, 0);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i63, 1);
    call {:si_unique_call 1604} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_7651;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    call {:si_unique_call 1603} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, 0);
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_7647;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} stripe_set_idx(in_$i1, in_$p5, in_$i2, in_$p0);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p60, in_$i1);
    goto corral_source_split_7645;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_7644;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, out_$i56);
    goto corral_source_split_7643;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_7642;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i58;
    goto $bb16;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i55;
    goto $bb16;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_7635;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_7634;

  $bb14:
    assume out_$i53 == 1;
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(in_$i2, 0);
    goto corral_source_split_7631;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p52, out_$i51);
    goto corral_source_split_7630;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(48, 1));
    goto corral_source_split_7629;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_7628;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(out_$i47, out_$i49);
    goto corral_source_split_7627;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(in_$i2);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_7624;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.0, out_$p45);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(644, 1));
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_$i44 := read_seqcount_begin(out_$p43);
    call {:si_unique_call 1601} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_7621;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_7638;

  $bb15:
    assume !(out_$i53 == 1);
    goto corral_source_split_7637;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_7671;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(328, 1));
    goto corral_source_split_7668;

  $bb24:
    assume !(out_$i74 == 1);
    goto corral_source_split_7667;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_7677;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_7676;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_7675;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(336, 1));
    goto corral_source_split_7674;

  $bb26:
    assume !(out_$i78 == 1);
    goto corral_source_split_7673;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_7681;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(344, 1));
    goto corral_source_split_7680;

  $bb28:
    assume !(out_$i82 == 1);
    goto corral_source_split_7679;

  $bb32:
    assume out_$i89 == 1;
    goto corral_source_split_7709;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_7688;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_$i88 := constant_test_bit(1, out_$p87);
    call {:si_unique_call 1606} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 368)), $mul.ref(360, 1));
    goto corral_source_split_7686;

  $bb30:
    assume !(out_$i86 == 1);
    goto corral_source_split_7685;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p57, out_$i58, out_$i56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_$i115, out_$i116, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := init_stripe_loop_$bb13(in_$p0, in_$i1, in_$i2, in_$p5, in_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p57, out_$i58, out_$i56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i66, out_$i115, out_$i116, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure init_stripe_loop_$bb13(in_$p0: ref, in_$i1: i64, in_$i2: i32, in_$p5: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$p52: ref, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$p57: ref, in_$i58: i32, in_$i56: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i66: i32, in_$i115: i32, in_$i116: i1, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64) returns (out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$p52: ref, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$p57: ref, out_$i58: i32, out_$i56: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i66: i32, out_$i115: i32, out_$i116: i1, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64);
  modifies $M.0, $M.12, $CurrAddr;



implementation __read_seqcount_begin_loop_$bb4(in_$p1: ref, in_$i8: i32, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$i13: i32) returns (out_$i8: i32, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$i13: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} cpu_relax();
    goto corral_source_split_7951;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb5_dummy;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i8;
    assume true;
    goto $bb5;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_7956;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} out_$i11 := ldv__builtin_expect(out_$i10, 0);
    call {:si_unique_call 1688} {:cexpr "tmp"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_7955;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i64(out_$i9, 1);
    goto corral_source_split_7954;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_7953;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, in_$p1);
    call {:si_unique_call 1686} {:cexpr "ret"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_7952;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := __read_seqcount_begin_loop_$bb4(in_$p1, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure __read_seqcount_begin_loop_$bb4(in_$p1: ref, in_$i8: i32, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$i13: i32) returns (out_$i8: i32, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$i13: i32);



implementation add_stripe_bio_loop_$bb50(in_$p0: ref, in_$i2: i32, in_$p144: ref, in_$p152: ref, in_$i153: i64, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$i160: i1, in_$p162: ref, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i64, in_$i179: i1, in_$i149: i64, in_$p150: ref, in_$i181: i64, in_$i182: i1, in_$p185: ref, in_$i186: i64, in_$i187: i1, in_$i188: i64, in_$i183: i64, in_$i180: i64) returns (out_$p152: ref, out_$i153: i64, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$i160: i1, out_$p162: ref, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i64, out_$i179: i1, out_$i149: i64, out_$p150: ref, out_$i181: i64, out_$i182: i1, out_$p185: ref, out_$i186: i64, out_$i187: i1, out_$i188: i64, out_$i183: i64, out_$i180: i64)
{

  entry:
    out_$p152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i149, out_$p150, out_$i181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i183, out_$i180 := in_$p152, in_$i153, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p162, in_$i163, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$p174, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i149, in_$p150, in_$i181, in_$i182, in_$p185, in_$i186, in_$i187, in_$i188, in_$i183, in_$i180;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8156;

  $bb55:
    assume out_$i179 == 1;
    assume {:verifier.code 0} true;
    out_$i149, out_$p150 := out_$i170, out_$p176;
    goto $bb55_dummy;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    out_$i180 := out_$i170;
    assume true;
    goto $bb55;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    out_$i179 := $ult.i64(out_$i170, out_$i178);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i178 := $add.i64(out_$i177, 8);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.0, in_$p144);
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} out_$p176 := r5_next_bio(out_$p150, out_$i175);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.0, out_$p174);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i171, 368)), $mul.ref(352, 1));
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$i171 := $sext.i32.i64(in_$i2);
    goto corral_source_split_8179;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_8178;

  $bb53:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := out_$i149;
    goto $bb54;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i169;
    goto $bb54;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i64(out_$i163, out_$i168);
    call {:si_unique_call 1717} {:cexpr "sector"} boogie_si_record_i64(out_$i169);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i32.i64(out_$i167);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i167 := $lshr.i32(out_$i166, 9);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i64($M.0, out_$p162);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8170;

  $bb52:
    assume out_$i160 == 1;
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    out_$i160 := $uge.i64(out_$i159, out_$i149);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i64(out_$i153, out_$i158);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i32.i64(out_$i157);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i157 := $lshr.i32(out_$i156, 9);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i32($M.0, out_$p155);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.0, out_$p152);
    goto corral_source_split_8161;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8160;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb59:
    assume out_$i187 == 1;
    goto corral_source_split_8196;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i188 := out_$i149;
    assume true;
    goto $bb59;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$i187 := $ule.i64(out_$i186, out_$i149);
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i64($M.0, out_$p185);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8190;

  $bb57:
    assume out_$i182 == 1;
    goto corral_source_split_8189;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$i183 := out_$i149;
    assume true;
    goto $bb57;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$i182 := $ne.i64(out_$i181, 0);
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    out_$i181 := $p2i.ref.i64(out_$p150);
    goto corral_source_split_8157;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i149, out_$p150, out_$i181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i183, out_$i180 := add_stripe_bio_loop_$bb50(in_$p0, in_$i2, in_$p144, out_$p152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i149, out_$p150, out_$i181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i183, out_$i180);
    return;

  exit:
    return;
}



procedure add_stripe_bio_loop_$bb50(in_$p0: ref, in_$i2: i32, in_$p144: ref, in_$p152: ref, in_$i153: i64, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$i160: i1, in_$p162: ref, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i64, in_$i179: i1, in_$i149: i64, in_$p150: ref, in_$i181: i64, in_$i182: i1, in_$p185: ref, in_$i186: i64, in_$i187: i1, in_$i188: i64, in_$i183: i64, in_$i180: i64) returns (out_$p152: ref, out_$i153: i64, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$i160: i1, out_$p162: ref, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i64, out_$i179: i1, out_$i149: i64, out_$p150: ref, out_$i181: i64, out_$i182: i1, out_$p185: ref, out_$i186: i64, out_$i187: i1, out_$i188: i64, out_$i183: i64, out_$i180: i64);



implementation add_stripe_bio_loop_$bb13(in_$p1: ref, in_$p50: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p49: ref, in_$p71: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p70: ref) returns (out_$p50: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p49: ref, out_$p71: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p70: ref)
{

  entry:
    out_$p50, out_$p52, out_$i53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p49, out_$p71, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p70 := in_$p50, in_$p52, in_$i53, in_$p54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p49, in_$p71, in_$p73, in_$i74, in_$p76, in_$i77, in_$i78, in_$p79, in_$p70;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  $bb19:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$p49 := out_$p65;
    goto $bb19_dummy;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$p70 := out_$p65;
    assume true;
    goto $bb19;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, 0);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8059;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p49);
    goto corral_source_split_8058;

  $bb16:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i64 := $ugt.i64(out_$i60, out_$i63);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.0, out_$p62);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i53, out_$i59);
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i58);
    goto corral_source_split_8044;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    out_$i58 := $lshr.i32(out_$i57, 9);
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_8042;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p49);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8038;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_8037;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume out_$i78 == 1;
    goto corral_source_split_8066;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$p79 := out_$p49;
    assume true;
    goto $bb21;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$i78 := $ult.i64(out_$i74, out_$i77);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.0, out_$p73);
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p49);
    goto corral_source_split_8030;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p50, out_$p52, out_$i53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p49, out_$p71, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p70 := add_stripe_bio_loop_$bb13(in_$p1, out_$p50, out_$p52, out_$i53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p49, out_$p71, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p70);
    return;

  exit:
    return;
}



procedure add_stripe_bio_loop_$bb13(in_$p1: ref, in_$p50: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p49: ref, in_$p71: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p70: ref) returns (out_$p50: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p49: ref, out_$p71: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p70: ref);



implementation {:SIextraRecBound 7} lock_all_device_hash_locks_irq_loop_$bb1(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i3: i32) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i3: i32)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i3 := in_$p4, in_$p5, in_$i6, in_$p7, in_$i8, in_$i9, in_$i3;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_8407;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i8;
    goto $bb3_dummy;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    out_$i9 := $sle.i32(out_$i8, 7);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1785} {:cexpr "i"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_8414;

  SeqInstr_789:
    goto corral_source_split_8413;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105(out_$p7);
    goto SeqInstr_788;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p5, $mul.ref(out_$i6, 72));
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i3);
    goto corral_source_split_8411;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_8410;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_8409;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i3 := lock_all_device_hash_locks_irq_loop_$bb1(in_$p0, out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i3);
    return;

  exit:
    return;
}



procedure lock_all_device_hash_locks_irq_loop_$bb1(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i3: i32) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i3: i32);
  modifies $M.1, assertsPassed;



implementation {:SIextraRecBound 8} unlock_all_device_hash_locks_irq_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i2: i32)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i2 := in_$p3, in_$p4, in_$i5, in_$i6, in_$p7, in_$i8, in_$i9, in_$i2;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_8424;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i8;
    goto $bb3_dummy;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    out_$i8 := $sub.i32(out_$i2, 1);
    call {:si_unique_call 1789} {:cexpr "i"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_8432;

  SeqInstr_798:
    goto corral_source_split_8431;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} ldv_spin_unlock_108(out_$p7);
    goto SeqInstr_797;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p4, $mul.ref(out_$i6, 72));
    goto corral_source_split_8430;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i64(out_$i5, $sub.i64(0, 1));
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i2);
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_8427;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(8, 1));
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i2 := unlock_all_device_hash_locks_irq_loop_$bb1(in_$p0, out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i2);
    return;

  exit:
    return;
}



procedure unlock_all_device_hash_locks_irq_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i2: i32);
  modifies $M.1, assertsPassed;



implementation calc_degraded_loop_$bb52(in_$p0: ref, in_$p66: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i113: i32, in_$i109: i32, in_$i104: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i70: i32, in_$i71: i32, in_$i124: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i113: i32, out_$i109: i32, out_$i104: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i70: i32, out_$i71: i32, out_$i124: i32)
{

  entry:
    out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i113, out_$i109, out_$i104, out_$i121, out_$i122, out_$i123, out_$i70, out_$i71, out_$i124 := in_$p72, in_$p73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$i111, in_$i112, in_$p114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i113, in_$i109, in_$i104, in_$i121, in_$i122, in_$i123, in_$i70, in_$i71, in_$i124;
    goto $bb52, exit;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8599;

  $bb90:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i70, out_$i71 := out_$i104, out_$i121;
    goto $bb90_dummy;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i104;
    assume true;
    goto $bb90;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i121, out_$i122);
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, in_$p66);
    goto corral_source_split_8664;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i71, 1);
    call {:si_unique_call 1848} {:cexpr "i"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_8663;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_8662;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i104 := out_$i109;
    goto $bb80;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i103;
    goto $bb80;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(out_$i70, 1);
    call {:si_unique_call 1845} {:cexpr "degraded2"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_8655;

  $bb78:
    assume out_$i102 == 1;
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i64(out_$i101, 0);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_8651;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_8650;

  $bb64:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$p100 := out_$p77;
    goto $bb77;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$p100 := out_$p99;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_8648;

  $bb66:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$p99 := out_$p77;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p99 := out_$p93;
    goto $bb76;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} lockdep_rcu_suspicious(.str.1, 621, .str.32);
    goto corral_source_split_8646;

  $bb72:
    assume out_$i98 == 1;
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} out_$i97 := rcu_read_lock_held();
    call {:si_unique_call 1843} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_8642;

  $bb71:
    assume !(out_$i96 == 1);
    goto corral_source_split_8641;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i8.i1(1);
    goto corral_source_split_8639;

  $bb67:
    assume out_$i95 == 1;
    goto corral_source_split_8638;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} out_$i94 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1841} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_8634;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p89, $mul.ref(out_$i90, 16)), $mul.ref(8, 1));
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto corral_source_split_8632;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i71);
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_8630;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8629;

  $bb65:
    assume out_$i87 == 1;
    goto corral_source_split_8628;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_8626;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} out_$i86 := constant_test_bit(0, out_$p85);
    call {:si_unique_call 1839} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_8625;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p77, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8624;

  $bb63:
    assume out_$i84 == 1;
    goto corral_source_split_8623;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_8621;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_8620;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} lockdep_rcu_suspicious(.str.1, 619, .str.32);
    goto corral_source_split_8618;

  $bb59:
    assume out_$i82 == 1;
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_$i81 := rcu_read_lock_held();
    call {:si_unique_call 1836} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_8614;

  $bb58:
    assume !(out_$i80 == 1);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i8.i1(1);
    goto corral_source_split_8611;

  $bb54:
    assume out_$i79 == 1;
    goto corral_source_split_8610;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_8608;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_$i78 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1834} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 16)), $mul.ref(0, 1));
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto corral_source_split_8604;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i71);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_8602;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    assume out_$i80 == 1;
    goto $bb56;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb69;

  $bb70:
    assume {:verifier.code 0} true;
    assume out_$i96 == 1;
    goto $bb69;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i109 := out_$i113;
    goto $bb83;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i108;
    goto $bb83;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i70, 1);
    call {:si_unique_call 1849} {:cexpr "degraded2"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_8668;

  $bb81:
    assume out_$i107 == 1;
    goto corral_source_split_8667;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_$i106 := constant_test_bit(0, out_$p105);
    call {:si_unique_call 1847} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p100, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8658;

  $bb79:
    assume !(out_$i102 == 1);
    goto corral_source_split_8657;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i113 := out_$i120;
    goto $bb86;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    out_$i113 := out_$i70;
    goto $bb86;

  $bb84:
    assume out_$i112 == 1;
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_$i111 := constant_test_bit(1, out_$p110);
    call {:si_unique_call 1851} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p100, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8671;

  $bb82:
    assume !(out_$i107 == 1);
    goto corral_source_split_8670;

  $bb88:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := out_$i70;
    goto $bb89;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i119;
    goto $bb89;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i70, 1);
    call {:si_unique_call 1852} {:cexpr "degraded2"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_8685;

  $bb87:
    assume out_$i118 == 1;
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$i118 := $sle.i32(out_$i115, out_$i117);
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, out_$p114);
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8678;

  $bb85:
    assume !(out_$i112 == 1);
    goto corral_source_split_8677;

  $bb90_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i113, out_$i109, out_$i104, out_$i121, out_$i122, out_$i123, out_$i70, out_$i71, out_$i124 := calc_degraded_loop_$bb52(in_$p0, in_$p66, out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i113, out_$i109, out_$i104, out_$i121, out_$i122, out_$i123, out_$i70, out_$i71, out_$i124);
    return;

  exit:
    return;
}



procedure calc_degraded_loop_$bb52(in_$p0: ref, in_$p66: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i113: i32, in_$i109: i32, in_$i104: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i70: i32, in_$i71: i32, in_$i124: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i113: i32, out_$i109: i32, out_$i104: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i70: i32, out_$i71: i32, out_$i124: i32);



implementation calc_degraded_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i48: i32, in_$i44: i32, in_$i39: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i5: i32, in_$i6: i32, in_$i59: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i48: i32, out_$i44: i32, out_$i39: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i5: i32, out_$i6: i32, out_$i59: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i48, out_$i44, out_$i39, out_$i56, out_$i57, out_$i58, out_$i5, out_$i6, out_$i59 := in_$p7, in_$p8, in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i48, in_$i44, in_$i39, in_$i56, in_$i57, in_$i58, in_$i5, in_$i6, in_$i59;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8491;

  $bb42:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$i6 := out_$i39, out_$i56;
    goto $bb42_dummy;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i39;
    assume true;
    goto $bb42;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i56, out_$i57);
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, in_$p1);
    goto corral_source_split_8556;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1826} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_8555;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_8554;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i44;
    goto $bb32;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb32;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1823} {:cexpr "degraded"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8547;

  $bb30:
    assume out_$i37 == 1;
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_8543;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8542;

  $bb16:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$p35 := out_$p12;
    goto $bb29;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p34;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_8540;

  $bb18:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p34 := out_$p12;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p28;
    goto $bb28;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} lockdep_rcu_suspicious(.str.1, 595, .str.32);
    goto corral_source_split_8538;

  $bb24:
    assume out_$i33 == 1;
    goto corral_source_split_8537;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} out_$i32 := rcu_read_lock_held();
    call {:si_unique_call 1821} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_8534;

  $bb23:
    assume !(out_$i31 == 1);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(1);
    goto corral_source_split_8531;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_8528;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} out_$i29 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1819} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_8527;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8521;

  $bb17:
    assume out_$i22 == 1;
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} out_$i21 := constant_test_bit(0, out_$p20);
    call {:si_unique_call 1817} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_8517;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p12, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8516;

  $bb15:
    assume out_$i19 == 1;
    goto corral_source_split_8515;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_8513;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_8512;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} lockdep_rcu_suspicious(.str.1, 593, .str.32);
    goto corral_source_split_8510;

  $bb11:
    assume out_$i17 == 1;
    goto corral_source_split_8509;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_8507;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_$i16 := rcu_read_lock_held();
    call {:si_unique_call 1814} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_8506;

  $bb10:
    assume !(out_$i15 == 1);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(1);
    goto corral_source_split_8503;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_8502;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_8500;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_$i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1812} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_8499;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_8498;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_8494;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb8;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb21;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i48;
    goto $bb35;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb35;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1827} {:cexpr "degraded"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8560;

  $bb33:
    assume out_$i42 == 1;
    goto corral_source_split_8559;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} out_$i41 := constant_test_bit(0, out_$p40);
    call {:si_unique_call 1825} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p35, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8550;

  $bb31:
    assume !(out_$i37 == 1);
    goto corral_source_split_8549;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i55;
    goto $bb38;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i5;
    goto $bb38;

  $bb36:
    assume out_$i47 == 1;
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} out_$i46 := constant_test_bit(1, out_$p45);
    call {:si_unique_call 1829} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p35, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_8563;

  $bb34:
    assume !(out_$i42 == 1);
    goto corral_source_split_8562;

  $bb40:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i5;
    goto $bb41;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb41;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1830} {:cexpr "degraded"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_8577;

  $bb39:
    assume out_$i53 == 1;
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i32(out_$i50, out_$i52);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(632, 1));
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_8570;

  $bb37:
    assume !(out_$i47 == 1);
    goto corral_source_split_8569;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i48, out_$i44, out_$i39, out_$i56, out_$i57, out_$i58, out_$i5, out_$i6, out_$i59 := calc_degraded_loop_$bb4(in_$p0, in_$p1, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i48, out_$i44, out_$i39, out_$i56, out_$i57, out_$i58, out_$i5, out_$i6, out_$i59);
    return;

  exit:
    return;
}



procedure calc_degraded_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i48: i32, in_$i44: i32, in_$i39: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i5: i32, in_$i6: i32, in_$i59: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i48: i32, out_$i44: i32, out_$i39: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i5: i32, out_$i6: i32, out_$i59: i32);



implementation resize_stripes_loop_$bb104(in_$i1: i32, in_$p224: ref, in_$i233: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$i241: i64, in_$p244: ref, in_$i245: i64, in_$p248: ref, in_$i249: i64, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i231: i32, in_$i232: i32, in_$i255: i32) returns (out_$i233: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$i241: i64, out_$p244: ref, out_$i245: i64, out_$p248: ref, out_$i249: i64, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i231: i32, out_$i232: i32, out_$i255: i32)
{

  entry:
    out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255 := in_$i233, in_$p236, in_$p237, in_$i238, in_$i239, in_$p240, in_$i241, in_$p244, in_$i245, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i231, in_$i232, in_$i255;
    goto $bb104, exit;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  $bb112:
    assume out_$i254 == 1;
    assume {:verifier.code 0} true;
    out_$i231, out_$i232 := out_$i253, out_$i252;
    goto $bb112_dummy;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$i255 := out_$i252;
    assume true;
    goto $bb112;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    out_$i254 := $slt.i32(out_$i253, in_$i1);
    goto corral_source_split_9261;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    out_$i253 := $add.i32(out_$i231, 1);
    call {:si_unique_call 1958} {:cexpr "i"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_9260;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_9259;

  $bb107:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := out_$i232;
    goto $bb111;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i251;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_9257;

  $bb109:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$i251 := out_$i232;
    goto $bb110;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    out_$i251 := $sub.i32(0, 12);
    goto $bb110;

  $bb108:
    assume out_$i250 == 1;
    goto corral_source_split_9255;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i64(out_$i249, 0);
    goto corral_source_split_9253;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$i249 := $p2i.ref.i64(out_$p240);
    goto corral_source_split_9252;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p248, out_$p240);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref($add.ref($add.ref(in_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i245, 368)), $mul.ref(312, 1));
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p244, out_$p240);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(in_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i241, 368)), $mul.ref(304, 1));
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9246;

  SeqInstr_864:
    goto corral_source_split_9245;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} out_$p240 := alloc_pages(16, 0);
    goto SeqInstr_863;

  $bb106:
    assume out_$i239 == 1;
    goto corral_source_split_9244;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i64(out_$i238, 0);
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i238 := $p2i.ref.i64(out_$p237);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$p237 := $load.ref($M.0, out_$p236);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref($add.ref($add.ref(in_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i233, 368)), $mul.ref(304, 1));
    goto corral_source_split_9239;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i233 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb112_dummy:
    call {:si_unique_call 1} out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255 := resize_stripes_loop_$bb104(in_$i1, in_$p224, out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb104(in_$i1: i32, in_$p224: ref, in_$i233: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$i241: i64, in_$p244: ref, in_$i245: i64, in_$p248: ref, in_$i249: i64, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i231: i32, in_$i232: i32, in_$i255: i32) returns (out_$i233: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$i241: i64, out_$p244: ref, out_$i245: i64, out_$p248: ref, out_$i249: i64, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i231: i32, out_$i232: i32, out_$i255: i32);
  modifies $M.0, assertsPassed;



implementation resize_stripes_loop_$bb99(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i233: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$i241: i64, in_$p244: ref, in_$i245: i64, in_$p248: ref, in_$i249: i64, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i231: i32, in_$i232: i32, in_$i255: i32, in_$i230: i32, in_$i256: i32, in_$i257: i1, in_$i221: i32, in_$i258: i32) returns (out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i233: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$i241: i64, out_$p244: ref, out_$i245: i64, out_$p248: ref, out_$i249: i64, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i231: i32, out_$i232: i32, out_$i255: i32, out_$i230: i32, out_$i256: i32, out_$i257: i1, out_$i221: i32, out_$i258: i32)
{

  entry:
    out_$p222, out_$p223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255, out_$i230, out_$i256, out_$i257, out_$i221, out_$i258 := in_$p222, in_$p223, in_$p224, in_$p225, in_$p226, in_$p227, in_$i228, in_$i229, in_$i233, in_$p236, in_$p237, in_$i238, in_$i239, in_$p240, in_$i241, in_$p244, in_$i245, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i231, in_$i232, in_$i255, in_$i230, in_$i256, in_$i257, in_$i221, in_$i258;
    goto $bb99, exit;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_9222;

  $bb115:
    assume out_$i257 == 1;
    assume {:verifier.code 0} true;
    out_$i221 := out_$i230;
    goto $bb115_dummy;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    out_$i258 := out_$i230;
    assume true;
    goto $bb115;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 0);
    goto corral_source_split_9267;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} out_$i256 := list_empty(in_$p2);
    call {:si_unique_call 1961} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_9266;

  SeqInstr_867:
    goto corral_source_split_9265;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} release_stripe(out_$p225);
    goto SeqInstr_866;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i229 == 1);
    goto $bb103;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    out_$i230 := out_$i255;
    goto $bb103;

  $bb113:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9263;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$i255 := out_$i252;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    out_$i254 := $slt.i32(out_$i253, in_$i1);
    goto corral_source_split_9261;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    out_$i253 := $add.i32(out_$i231, 1);
    call {:si_unique_call 1958} {:cexpr "i"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_9260;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_9259;

  $bb107:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := out_$i232;
    goto $bb111;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i251;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_9257;

  $bb109:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$i251 := out_$i232;
    goto $bb110;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    out_$i251 := $sub.i32(0, 12);
    goto $bb110;

  $bb108:
    assume out_$i250 == 1;
    goto corral_source_split_9255;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i64(out_$i249, 0);
    goto corral_source_split_9253;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$i249 := $p2i.ref.i64(out_$p240);
    goto corral_source_split_9252;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p248, out_$p240);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref($add.ref($add.ref(out_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i245, 368)), $mul.ref(312, 1));
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p244, out_$p240);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(out_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i241, 368)), $mul.ref(304, 1));
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9246;

  SeqInstr_864:
    goto corral_source_split_9245;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} out_$p240 := alloc_pages(16, 0);
    goto SeqInstr_863;

  $bb106:
    assume out_$i239 == 1;
    goto corral_source_split_9244;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i64(out_$i238, 0);
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i238 := $p2i.ref.i64(out_$p237);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$p237 := $load.ref($M.0, out_$p236);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref($add.ref($add.ref(out_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(208, 1)), $mul.ref(out_$i233, 368)), $mul.ref(304, 1));
    goto corral_source_split_9239;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i233 := $sext.i32.i64(out_$i231);
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    call out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255 := resize_stripes_loop_$bb104(in_$i1, out_$p224, out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255);
    goto $bb104_last;

  $bb104_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    out_$i231, out_$i232 := out_$i228, out_$i221;
    goto $bb104;

  $bb112:
    assume out_$i254 == 1;
    assume {:verifier.code 0} true;
    out_$i231, out_$i232 := out_$i253, out_$i252;
    assume false;
    return;

  $bb101:
    assume out_$i229 == 1;
    goto corral_source_split_9234;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    out_$i230 := out_$i221;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i229 := $slt.i32(out_$i228, in_$i1);
    goto corral_source_split_9232;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.0, out_$p227);
    call {:si_unique_call 1956} {:cexpr "i"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_9231;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_9230;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} list_del_init(out_$p226);
    goto corral_source_split_9229;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(out_$p224, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref(out_$p224, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9227;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    out_$p224 := $bitcast.ref.ref(out_$p223);
    goto corral_source_split_9226;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    out_$p223 := $load.ref($M.0, out_$p222);
    goto corral_source_split_9225;

  $bb100:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9224;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb115_dummy:
    call {:si_unique_call 1} out_$p222, out_$p223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255, out_$i230, out_$i256, out_$i257, out_$i221, out_$i258 := resize_stripes_loop_$bb99(in_$p0, in_$i1, in_$p2, out_$p222, out_$p223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i233, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$p244, out_$i245, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i231, out_$i232, out_$i255, out_$i230, out_$i256, out_$i257, out_$i221, out_$i258);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb99(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i233: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$i241: i64, in_$p244: ref, in_$i245: i64, in_$p248: ref, in_$i249: i64, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i231: i32, in_$i232: i32, in_$i255: i32, in_$i230: i32, in_$i256: i32, in_$i257: i1, in_$i221: i32, in_$i258: i32) returns (out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i233: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$i241: i64, out_$p244: ref, out_$i245: i64, out_$p248: ref, out_$i249: i64, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i231: i32, out_$i232: i32, out_$i255: i32, out_$i230: i32, out_$i256: i32, out_$i257: i1, out_$i221: i32, out_$i258: i32);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation resize_stripes_loop_$bb87(in_$p0: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p198: ref, in_$i199: i64, in_$i200: i64, in_$p201: ref, in_$p202: ref, in_$i203: i64, in_$p204: ref, in_$i205: i64, in_$i206: i1, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$i211: i32, in_$p212: ref, in_$i213: i32, in_$i214: i64, in_$i215: i32, in_$i216: i64, in_$i217: i1, in_$i194: i64) returns (out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p198: ref, out_$i199: i64, out_$i200: i64, out_$p201: ref, out_$p202: ref, out_$i203: i64, out_$p204: ref, out_$i205: i64, out_$i206: i1, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$i211: i32, out_$p212: ref, out_$i213: i32, out_$i214: i64, out_$i215: i32, out_$i216: i64, out_$i217: i1, out_$i194: i64)
{

  entry:
    out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$p209, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i194 := in_$p195, in_$p196, in_$i197, in_$p198, in_$i199, in_$i200, in_$p201, in_$p202, in_$i203, in_$p204, in_$i205, in_$i206, in_$p207, in_$p208, in_$p209, in_$i211, in_$p212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i194;
    goto $bb87, exit;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_9182;

  $bb93:
    assume out_$i217 == 1;
    assume {:verifier.code 0} true;
    out_$i194 := out_$i214;
    goto $bb93_dummy;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$i217 := $ult.i64(out_$i214, out_$i216);
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    out_$i216 := $sext.i32.i64(out_$i215);
    goto corral_source_split_9210;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_9209;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$i214 := $zext.i32.i64(out_$i213);
    call {:si_unique_call 1951} {:cexpr "cpu"} boogie_si_record_i64(out_$i214);
    goto corral_source_split_9208;

  SeqInstr_861:
    call {:si_unique_call 1950} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_9207;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} out_$i213 := cpumask_next(out_$i211, out_$p212);
    goto SeqInstr_860;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$p212 := $load.ref($M.0, cpu_present_mask);
    goto corral_source_split_9206;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i211 := $trunc.i64.i32(out_$i194);
    goto corral_source_split_9205;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p209, out_$p204);
    goto corral_source_split_9201;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(out_$p201, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9200;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} kfree(out_$p208);
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    out_$p208 := $load.ref($M.0, out_$p207);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(out_$p201, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9197;

  $bb89:
    assume out_$i206 == 1;
    goto corral_source_split_9196;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i64(out_$i205, 0);
    goto corral_source_split_9194;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    out_$i205 := $p2i.ref.i64(out_$p204);
    goto corral_source_split_9193;

  SeqInstr_858:
    goto corral_source_split_9192;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} out_$p204 := kmalloc(out_$i203, 16);
    goto SeqInstr_857;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i64($M.0, out_$p202);
    goto corral_source_split_9191;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(944, 1));
    goto corral_source_split_9190;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    out_$p201 := $i2p.i64.ref(out_$i200);
    goto corral_source_split_9189;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    out_$i200 := $add.i64(out_$i197, out_$i199);
    goto corral_source_split_9188;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i64($M.0, out_$p198);
    goto corral_source_split_9187;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i194, 8));
    goto corral_source_split_9186;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$p196 := $load.ref($M.0, out_$p195);
    call {:si_unique_call 1945} out_$i197 := devirtbounce.10(0, out_$p196);
    call {:si_unique_call 1946} {:cexpr "__ptr"} boogie_si_record_i64(out_$i197);
    goto corral_source_split_9185;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(936, 1));
    goto corral_source_split_9184;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb93_dummy:
    call {:si_unique_call 1} out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$p209, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i194 := resize_stripes_loop_$bb87(in_$p0, out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$p209, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i194);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb87(in_$p0: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p198: ref, in_$i199: i64, in_$i200: i64, in_$p201: ref, in_$p202: ref, in_$i203: i64, in_$p204: ref, in_$i205: i64, in_$i206: i1, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$i211: i32, in_$p212: ref, in_$i213: i32, in_$i214: i64, in_$i215: i32, in_$i216: i64, in_$i217: i1, in_$i194: i64) returns (out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p198: ref, out_$i199: i64, out_$i200: i64, out_$p201: ref, out_$p202: ref, out_$i203: i64, out_$p204: ref, out_$i205: i64, out_$i206: i1, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$i211: i32, out_$p212: ref, out_$i213: i32, out_$i214: i64, out_$i215: i32, out_$i216: i64, out_$i217: i1, out_$i194: i64);
  modifies assertsPassed, $M.0;



implementation resize_stripes_loop_$bb78(in_$p0: ref, in_$p163: ref, in_$p166: ref, in_$i170: i64, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i169: i32, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8) returns (out_$i170: i64, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i169: i32, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8)
{

  entry:
    out_$i170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i169, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7 := in_$i170, in_$p171, in_$p172, in_$p173, in_$i174, in_$p175, in_$p176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i169, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7;
    goto $bb78, exit;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_9144;

  $bb80:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i169 := out_$i178;
    goto $bb80_dummy;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i178, out_$i179);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i32($M.0, in_$p166);
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$i178 := $add.i32(out_$i169, 1);
    call {:si_unique_call 1938} {:cexpr "i"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_9155;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_5 := $M.0;
    out_cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 1937} out_cmdloc_dummy_var_7 := $memcpy.i8(out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_$p176, out_$p177, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_7;
    goto corral_source_split_9154;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    out_$p177 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_9153;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p171);
    goto corral_source_split_9152;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref(out_$p173, $mul.ref(out_$i174, 16));
    goto corral_source_split_9151;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    out_$i174 := $sext.i32.i64(out_$i169);
    goto corral_source_split_9150;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    out_$p173 := $load.ref($M.0, out_$p172);
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_9148;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(in_$p163, $mul.ref(out_$i170, 16));
    goto corral_source_split_9147;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i170 := $sext.i32.i64(out_$i169);
    goto corral_source_split_9146;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb80_dummy:
    call {:si_unique_call 1} out_$i170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i169, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7 := resize_stripes_loop_$bb78(in_$p0, in_$p163, in_$p166, out_$i170, out_$p171, out_$p172, out_$p173, out_$i174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i169, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb78(in_$p0: ref, in_$p163: ref, in_$p166: ref, in_$i170: i64, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$i174: i64, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i169: i32, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8) returns (out_$i170: i64, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$i174: i64, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i169: i32, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8);
  modifies $M.0;



implementation resize_stripes_loop_$bb46(in_$p0: ref, in_$p4: ref, in_$p81: ref, in_$p86: ref, in_$i90: i64, in_$i91: i32, in_$i92: i1, in_$i70: i32) returns (out_$i90: i64, out_$i91: i32, out_$i92: i1)
{

  entry:
    out_$i90, out_$i91, out_$i92 := in_$i90, in_$i91, in_$i92;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb50_dummy;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_9056;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_$i91 := list_empty(in_$p86);
    call {:si_unique_call 1929} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9055;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} out_$i90 := prepare_to_wait_event(in_$p81, in_$p4, 2);
    call {:si_unique_call 1927} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_9054;

  SeqInstr_849:
    goto corral_source_split_9053;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} lock_device_hash_lock(in_$p0, in_$i70);
    goto SeqInstr_848;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} schedule();
    goto corral_source_split_9052;

  SeqInstr_846:
    goto corral_source_split_9051;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} unlock_device_hash_lock(in_$p0, in_$i70);
    goto SeqInstr_845;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i90, out_$i91, out_$i92 := resize_stripes_loop_$bb46(in_$p0, in_$p4, in_$p81, in_$p86, out_$i90, out_$i91, out_$i92, in_$i70);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb46(in_$p0: ref, in_$p4: ref, in_$p81: ref, in_$p86: ref, in_$i90: i64, in_$i91: i32, in_$i92: i1, in_$i70: i32) returns (out_$i90: i64, out_$i91: i32, out_$i92: i1);
  modifies $M.1, $M.2, assertsPassed;



implementation resize_stripes_loop_$bb62(in_$i1: i32, in_$i125: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i124: i32, in_$p71: ref) returns (out_$i125: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i124: i32)
{

  entry:
    out_$i125, out_$p128, out_$i129, out_$i130, out_$i124 := in_$i125, in_$p128, in_$i129, in_$i130, in_$i124;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  $bb64:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := out_$i129;
    goto $bb64_dummy;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i129, in_$i1);
    goto corral_source_split_9090;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i124, 1);
    call {:si_unique_call 1931} {:cexpr "i"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_9089;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p128, $0.ref);
    goto corral_source_split_9088;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref(in_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i125, 368)), $mul.ref(304, 1));
    goto corral_source_split_9087;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_9086;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i125, out_$p128, out_$i129, out_$i130, out_$i124 := resize_stripes_loop_$bb62(in_$i1, out_$i125, out_$p128, out_$i129, out_$i130, out_$i124, in_$p71);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb62(in_$i1: i32, in_$i125: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i124: i32, in_$p71: ref) returns (out_$i125: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i124: i32);
  modifies $M.0;



implementation resize_stripes_loop_$bb54(in_$p94: ref, in_$p96: ref, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i100: i32, in_$i122: i32, in_$p71: ref) returns (out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i100: i32, out_$i122: i32)
{

  entry:
    out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122 := in_$i101, in_$p104, in_$p105, in_$i106, in_$p109, in_$i110, in_$p113, in_$p114, in_$i115, in_$p118, in_$i119, in_$i120, in_$i121, in_$i100, in_$i122;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_9060;

  $bb56:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := out_$i119;
    goto $bb56_dummy;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i119;
    assume true;
    goto $bb56;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i119, out_$i120);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, in_$p96);
    goto corral_source_split_9075;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i100, 1);
    call {:si_unique_call 1930} {:cexpr "i"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_9074;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p118, out_$p114);
    goto corral_source_split_9073;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref($add.ref(in_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i115, 368)), $mul.ref(312, 1));
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_9070;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref($add.ref(in_$p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i110, 368)), $mul.ref(304, 1));
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p109, out_$p105);
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(in_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i106, 368)), $mul.ref(304, 1));
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(in_$p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i101, 368)), $mul.ref(304, 1));
    goto corral_source_split_9063;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122 := resize_stripes_loop_$bb54(in_$p94, in_$p96, out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122, in_$p71);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb54(in_$p94: ref, in_$p96: ref, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i100: i32, in_$i122: i32, in_$p71: ref) returns (out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i100: i32, out_$i122: i32);
  modifies $M.0;



implementation resize_stripes_loop_$bb37(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i67: i64, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i64, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i78: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i100: i32, in_$i122: i32, in_$i99: i32, in_$i123: i1, in_$i125: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i124: i32, in_$i131: i16, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i32, in_$i149: i32, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i64, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i78: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i100: i32, out_$i122: i32, out_$i99: i32, out_$i123: i1, out_$i125: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i124: i32, out_$i131: i16, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i32, out_$i149: i32, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref)
{

  entry:
    out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i78, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122, out_$i99, out_$i123, out_$i125, out_$p128, out_$i129, out_$i130, out_$i124, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$i69, out_$i70, out_$p71 := in_$p72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p79, in_$p80, in_$p81, in_$i82, in_$p83, in_$p84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i78, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i101, in_$p104, in_$p105, in_$i106, in_$p109, in_$i110, in_$p113, in_$p114, in_$i115, in_$p118, in_$i119, in_$i120, in_$i121, in_$i100, in_$i122, in_$i99, in_$i123, in_$i125, in_$p128, in_$i129, in_$i130, in_$i124, in_$i131, in_$p132, in_$p133, in_$p134, in_$p135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$i69, in_$i70, in_$p71;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9008;

  $bb70:
    assume out_$i157 == 1;
    assume {:verifier.code 0} true;
    out_$i69, out_$i70, out_$p71 := out_$i149, out_$i148, out_$p154;
    goto $bb70_dummy;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i64(out_$i156, in_$i67);
    goto corral_source_split_9123;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    out_$i156 := $p2i.ref.i64(out_$p155);
    goto corral_source_split_9122;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p153, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9121;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref(out_$p153, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9120;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    out_$p153 := $bitcast.ref.ref(out_$p152);
    goto corral_source_split_9119;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    out_$p152 := $load.ref($M.0, out_$p151);
    goto corral_source_split_9118;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9117;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;

  $bb68:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i148, out_$i149 := out_$i78, out_$i136;
    goto $bb69;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    out_$i148, out_$i149 := out_$i147, 0;
    goto $bb69;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i78, 1);
    call {:si_unique_call 1934} {:cexpr "hash"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_9114;

  $bb67:
    assume out_$i146 == 1;
    goto corral_source_split_9113;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    out_$i146 := $sge.i32(out_$i136, out_$i145);
    goto corral_source_split_9111;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i139, out_$i144);
    goto corral_source_split_9110;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i1.i32(out_$i143);
    goto corral_source_split_9109;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    out_$i143 := $sgt.i32(out_$i142, out_$i78);
    goto corral_source_split_9108;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    out_$i142 := $srem.i32(out_$i141, 8);
    goto corral_source_split_9107;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p140);
    goto corral_source_split_9106;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_9105;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    out_$i139 := $sdiv.i32(out_$i138, 8);
    goto corral_source_split_9104;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_9103;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(612, 1));
    goto corral_source_split_9102;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i69, 1);
    call {:si_unique_call 1933} {:cexpr "cnt"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_9101;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} kmem_cache_free(out_$p134, out_$p135);
    goto corral_source_split_9100;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_9098;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(904, 1));
    goto corral_source_split_9097;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p132, out_$i131);
    goto corral_source_split_9096;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(70, 1));
    goto corral_source_split_9095;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i16(out_$i78);
    goto corral_source_split_9094;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb61;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb65:
    assume !(out_$i130 == 1);
    goto corral_source_split_9092;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i129, in_$i1);
    goto corral_source_split_9090;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i124, 1);
    call {:si_unique_call 1931} {:cexpr "i"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_9089;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p128, $0.ref);
    goto corral_source_split_9088;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i125, 368)), $mul.ref(304, 1));
    goto corral_source_split_9087;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_9086;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    call out_$i125, out_$p128, out_$i129, out_$i130, out_$i124 := resize_stripes_loop_$bb62(in_$i1, out_$i125, out_$p128, out_$i129, out_$i130, out_$i124, out_$p71);
    goto $bb62_last;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i99;
    goto $bb62;

  $bb64:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := out_$i129;
    assume false;
    return;

  $bb59:
    assume out_$i123 == 1;
    goto corral_source_split_9082;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i99, in_$i1);
    goto corral_source_split_9080;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb53;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i122;
    goto $bb53;

  $bb57:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i119;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i119, out_$i120);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p96);
    goto corral_source_split_9075;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i100, 1);
    call {:si_unique_call 1930} {:cexpr "i"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_9074;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p118, out_$p114);
    goto corral_source_split_9073;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i115, 368)), $mul.ref(312, 1));
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_9070;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i110, 368)), $mul.ref(304, 1));
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p109, out_$p105);
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i106, 368)), $mul.ref(304, 1));
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i101, 368)), $mul.ref(304, 1));
    goto corral_source_split_9063;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    call out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122 := resize_stripes_loop_$bb54(out_$p94, out_$p96, out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122, out_$p71);
    goto $bb54_last;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    out_$i100 := 0;
    goto $bb54;

  $bb56:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := out_$i119;
    assume false;
    return;

  $bb51:
    assume out_$i98 == 1;
    goto corral_source_split_9058;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    out_$i99 := 0;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(0, out_$i97);
    goto corral_source_split_9027;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1308, 1));
    goto corral_source_split_9025;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} atomic_set(out_$p95, 1);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p71, $mul.ref(0, 576)), $mul.ref(80, 1));
    goto corral_source_split_9023;

  SeqInstr_843:
    goto corral_source_split_9022;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} unlock_device_hash_lock(in_$p0, out_$i78);
    goto SeqInstr_842;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} out_$p94 := get_free_stripe(in_$p0, out_$i78);
    goto corral_source_split_9021;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_9020;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i89;
    goto $bb41;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i70;
    goto $bb41;

  $bb39:
    assume out_$i77 == 1;
    goto corral_source_split_9018;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 0);
    goto corral_source_split_9016;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} out_$i76 := list_empty(out_$p75);
    call {:si_unique_call 1913} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p73, $mul.ref(out_$i74, 16));
    goto corral_source_split_9014;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i70);
    goto corral_source_split_9013;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_9012;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_9011;

  SeqInstr_840:
    goto corral_source_split_9010;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} lock_device_hash_lock(in_$p0, out_$i70);
    goto SeqInstr_839;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} finish_wait(out_$p93, in_$p4);
    goto corral_source_split_9049;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_9048;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9042;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i70;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb44;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i70;
    assume true;
    goto $bb43, $bb45;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    goto corral_source_split_9040;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} out_$i87 := list_empty(out_$p86);
    call {:si_unique_call 1921} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(out_$p84, $mul.ref(out_$i85, 16));
    goto corral_source_split_9038;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i70);
    goto corral_source_split_9037;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_9036;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(984, 1));
    goto corral_source_split_9035;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} out_$i82 := prepare_to_wait_event(out_$p81, in_$p4, 2);
    call {:si_unique_call 1919} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1128, 1));
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, 0);
    goto corral_source_split_9032;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} INIT_LIST_HEAD(out_$p79);
    goto corral_source_split_9030;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9029;

  $bb40:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb47:
    assume out_$i92 == 1;
    goto corral_source_split_9046;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb50;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_9056;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_$i91 := list_empty(out_$p86);
    call {:si_unique_call 1929} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9055;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} out_$i90 := prepare_to_wait_event(out_$p81, in_$p4, 2);
    call {:si_unique_call 1927} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_9054;

  SeqInstr_849:
    goto corral_source_split_9053;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} lock_device_hash_lock(in_$p0, out_$i70);
    goto SeqInstr_848;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} schedule();
    goto corral_source_split_9052;

  SeqInstr_846:
    goto corral_source_split_9051;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} unlock_device_hash_lock(in_$p0, out_$i70);
    goto SeqInstr_845;

  $bb46:
    call out_$i90, out_$i91, out_$i92 := resize_stripes_loop_$bb46(in_$p0, in_$p4, out_$p81, out_$p86, out_$i90, out_$i91, out_$i92, out_$i70);
    goto $bb46_last;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    assume false;
    return;

  $bb45:
    assume !(out_$i88 == 1);
    goto corral_source_split_9044;

  $bb70_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i78, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122, out_$i99, out_$i123, out_$i125, out_$p128, out_$i129, out_$i130, out_$i124, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$i69, out_$i70, out_$p71 := resize_stripes_loop_$bb37(in_$p0, in_$i1, in_$p4, in_$i67, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i78, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i101, out_$p104, out_$p105, out_$i106, out_$p109, out_$i110, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i100, out_$i122, out_$i99, out_$i123, out_$i125, out_$p128, out_$i129, out_$i130, out_$i124, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$i69, out_$i70, out_$p71);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb37(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i67: i64, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i64, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i78: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p109: ref, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i100: i32, in_$i122: i32, in_$i99: i32, in_$i123: i1, in_$i125: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i124: i32, in_$i131: i16, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i32, in_$i149: i32, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i64, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i78: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p109: ref, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i100: i32, out_$i122: i32, out_$i99: i32, out_$i123: i1, out_$i125: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i124: i32, out_$i131: i16, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i32, out_$i149: i32, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref);
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation resize_stripes_loop_$bb28(in_$p2: ref, in_$p26: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1)
{

  entry:
    out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60 := in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb30_dummy;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} out_$i59 := list_empty(in_$p2);
    call {:si_unique_call 1909} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_8990;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} kmem_cache_free(in_$p26, out_$p58);
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_8988;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} list_del(out_$p57);
    goto corral_source_split_8987;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p55, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_8985;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_8983;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8982;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60 := resize_stripes_loop_$bb28(in_$p2, in_$p26, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb28(in_$p2: ref, in_$p26: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1);



implementation resize_stripes_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p26: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i33: i32, in_$i49: i32, in_vslice_dummy_var_86: ref) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i33: i32, out_$i49: i32, out_vslice_dummy_var_86: ref)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i33, out_$i49, out_vslice_dummy_var_86 := in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i33, in_$i49, in_vslice_dummy_var_86;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8950;

  $bb20:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i47;
    goto $bb20_dummy;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb20;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_8972;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 1903} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_8971;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} list_add(out_$p46, in_$p2);
    goto corral_source_split_8970;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p35, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_8969;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} __raw_spin_lock_init(out_$p45, .str.127, in_$p3);
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_8967;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 576)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_8966;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} out_vslice_dummy_var_86 := spinlock_check(out_$p41);
    goto corral_source_split_8965;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p35, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, in_$p0);
    goto corral_source_split_8963;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p35, $mul.ref(0, 576)), $mul.ref(40, 1));
    goto corral_source_split_8962;

  $bb17:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i33;
    assume true;
    goto $bb17;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_8953;

  SeqInstr_837:
    goto corral_source_split_8952;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} out_$p34 := kmem_cache_zalloc(in_$p26, 208);
    goto SeqInstr_836;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i33, out_$i49, out_vslice_dummy_var_86 := resize_stripes_loop_$bb14(in_$p0, in_$p2, in_$p3, in_$p26, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i33, out_$i49, out_vslice_dummy_var_86);
    return;

  exit:
    return;
}



procedure resize_stripes_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p26: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i33: i32, in_$i49: i32, in_vslice_dummy_var_86: ref) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i33: i32, out_$i49: i32, out_vslice_dummy_var_86: ref);
  modifies $M.0, assertsPassed;



implementation end_reshape_loop_$bb6(in_$p18: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p23: ref)
{

  entry:
    out_$p24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p23 := in_$p24, in_$i25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p23;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9333;

  $bb8:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p29;
    goto $bb8_dummy;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i32, out_$i35);
    goto corral_source_split_9347;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_9346;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 2024)), $mul.ref(24, 1));
    goto corral_source_split_9345;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, in_$p18);
    goto corral_source_split_9344;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_9343;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_9342;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_9341;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_9340;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9339;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p26, out_$i25);
    goto corral_source_split_9338;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(88, 1));
    goto corral_source_split_9337;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_9336;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 832)), $mul.ref(96, 1));
    goto corral_source_split_9335;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p23 := end_reshape_loop_$bb6(in_$p18, out_$p24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p23);
    return;

  exit:
    return;
}



procedure end_reshape_loop_$bb6(in_$p18: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p23: ref);
  modifies $M.0;



implementation reshape_request_loop_$bb178(in_$p0: ref, in_$p7: ref, in_$p344: ref, in_$p346: ref, in_$p349: ref, in_$i350: i32, in_$i351: i1, in_$i352: i64, in_$i353: i32, in_$i354: i1) returns (out_$p349: ref, out_$i350: i32, out_$i351: i1, out_$i352: i64, out_$i353: i32, out_$i354: i1)
{

  entry:
    out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354 := in_$p349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354;
    goto $bb178, exit;

  $bb178:
    assume {:verifier.code 0} true;
    out_$p349 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9952;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(out_$i354 == 1);
    goto $bb185_dummy;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 0);
    goto corral_source_split_9966;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} out_$i353 := atomic_read(in_$p346);
    call {:si_unique_call 2128} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i353);
    goto corral_source_split_9965;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} out_$i352 := prepare_to_wait_event(in_$p344, in_$p7, 2);
    call {:si_unique_call 2126} {:cexpr "tmp___20"} boogie_si_record_i64(out_$i352);
    goto corral_source_split_9964;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} schedule();
    goto corral_source_split_9963;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$i351 := $ne.i32(out_$i350, 0);
    goto corral_source_split_9954;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} out_$i350 := constant_test_bit(3, out_$p349);
    call {:si_unique_call 2122} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_9953;

  $bb185_dummy:
    call {:si_unique_call 1} out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354 := reshape_request_loop_$bb178(in_$p0, in_$p7, in_$p344, in_$p346, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb178(in_$p0: ref, in_$p7: ref, in_$p344: ref, in_$p346: ref, in_$p349: ref, in_$i350: i32, in_$i351: i1, in_$i352: i64, in_$i353: i32, in_$i354: i1) returns (out_$p349: ref, out_$i350: i32, out_$i351: i1, out_$i352: i64, out_$i353: i32, out_$i354: i1);



implementation reshape_request_loop_$bb200(in_$p0: ref, in_$p8: ref, in_$p376: ref, in_$p378: ref, in_$p381: ref, in_$i382: i32, in_$i383: i1, in_$i384: i64, in_$i385: i32, in_$i386: i1) returns (out_$p381: ref, out_$i382: i32, out_$i383: i1, out_$i384: i64, out_$i385: i32, out_$i386: i1)
{

  entry:
    out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386 := in_$p381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386;
    goto $bb200, exit;

  $bb200:
    assume {:verifier.code 0} true;
    out_$p381 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_10016;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i386 == 1);
    goto $bb207_dummy;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 0);
    goto corral_source_split_10030;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} out_$i385 := constant_test_bit(0, in_$p378);
    call {:si_unique_call 2150} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i385);
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} out_$i384 := prepare_to_wait_event(in_$p376, in_$p8, 2);
    call {:si_unique_call 2148} {:cexpr "tmp___26"} boogie_si_record_i64(out_$i384);
    goto corral_source_split_10028;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} schedule();
    goto corral_source_split_10027;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    out_$i383 := $ne.i32(out_$i382, 0);
    goto corral_source_split_10018;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} out_$i382 := constant_test_bit(3, out_$p381);
    call {:si_unique_call 2144} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i382);
    goto corral_source_split_10017;

  $bb207_dummy:
    call {:si_unique_call 1} out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386 := reshape_request_loop_$bb200(in_$p0, in_$p8, in_$p376, in_$p378, out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb200(in_$p0: ref, in_$p8: ref, in_$p376: ref, in_$p378: ref, in_$p381: ref, in_$i382: i32, in_$i383: i1, in_$i384: i64, in_$i385: i32, in_$i386: i1) returns (out_$p381: ref, out_$i382: i32, out_$i383: i1, out_$i384: i64, out_$i385: i32, out_$i386: i1);



implementation reshape_request_loop_$bb161(in_$p4: ref, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$p320: ref, in_$p321: ref, in_$i322: i32, in_$i323: i1) returns (out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$p320: ref, out_$p321: ref, out_$i322: i32, out_$i323: i1)
{

  entry:
    out_$p317, out_$p318, out_$p319, out_$p320, out_$p321, out_$i322, out_$i323 := in_$p317, in_$p318, in_$p319, in_$p320, in_$p321, in_$i322, in_$i323;
    goto $bb161, exit;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb163:
    assume {:verifier.code 0} true;
    assume out_$i323 == 1;
    goto $bb163_dummy;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 0);
    goto corral_source_split_9904;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} out_$i322 := list_empty(in_$p4);
    call {:si_unique_call 2107} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i322);
    goto corral_source_split_9903;

  SeqInstr_909:
    goto corral_source_split_9902;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} release_stripe(out_$p320);
    goto SeqInstr_908;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} list_del_init(out_$p321);
    goto corral_source_split_9901;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(out_$p319, $mul.ref($sub.ref(0, 16), 576)), $mul.ref(16, 1));
    goto corral_source_split_9900;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref(out_$p319, $mul.ref($sub.ref(0, 16), 576));
    goto corral_source_split_9899;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    out_$p319 := $bitcast.ref.ref(out_$p318);
    goto corral_source_split_9898;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    out_$p318 := $load.ref($M.0, out_$p317);
    goto corral_source_split_9897;

  $bb162:
    assume {:verifier.code 0} true;
    out_$p317 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9896;

  $bb163_dummy:
    call {:si_unique_call 1} out_$p317, out_$p318, out_$p319, out_$p320, out_$p321, out_$i322, out_$i323 := reshape_request_loop_$bb161(in_$p4, out_$p317, out_$p318, out_$p319, out_$p320, out_$p321, out_$i322, out_$i323);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb161(in_$p4: ref, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$p320: ref, in_$p321: ref, in_$i322: i32, in_$i323: i1) returns (out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$p320: ref, out_$p321: ref, out_$i322: i32, out_$i323: i1);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1;



implementation reshape_request_loop_$bb153(in_$p11: ref, in_$i307: i64, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$i313: i64, in_$i314: i1, in_$i309: i64) returns (out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$i313: i64, out_$i314: i1, out_$i309: i64)
{

  entry:
    out_$p310, out_$p311, out_$p312, out_$i313, out_$i314, out_$i309 := in_$p310, in_$p311, in_$p312, in_$i313, in_$i314, in_$i309;
    goto $bb153, exit;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_9878;

  $bb155:
    assume out_$i314 == 1;
    assume {:verifier.code 0} true;
    out_$i309 := out_$i313;
    goto $bb155_dummy;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    out_$i314 := $ule.i64(out_$i313, in_$i307);
    goto corral_source_split_9887;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    out_$i313 := $add.i64(out_$i309, 8);
    call {:si_unique_call 2101} {:cexpr "first_sector"} boogie_si_record_i64(out_$i313);
    goto corral_source_split_9886;

  SeqInstr_906:
    goto corral_source_split_9885;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} release_stripe(out_$p310);
    goto SeqInstr_905;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} set_bit(1, out_$p312);
    goto corral_source_split_9884;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$p312 := $add.ref($add.ref(out_$p310, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9883;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} set_bit(11, out_$p311);
    goto corral_source_split_9882;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(out_$p310, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9881;

  SeqInstr_903:
    goto corral_source_split_9880;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} out_$p310 := get_active_stripe(in_$p11, out_$i309, 1, 0, 1);
    goto SeqInstr_902;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb155_dummy:
    call {:si_unique_call 1} out_$p310, out_$p311, out_$p312, out_$i313, out_$i314, out_$i309 := reshape_request_loop_$bb153(in_$p11, in_$i307, out_$p310, out_$p311, out_$p312, out_$i313, out_$i314, out_$i309);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb153(in_$p11: ref, in_$i307: i64, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$i313: i64, in_$i314: i1, in_$i309: i64) returns (out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$i313: i64, out_$i314: i1, out_$i309: i64);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation reshape_request_loop_$bb117(in_$p0: ref, in_$p11: ref, in_$p222: ref, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i239: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i239: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i254, in_$p257, in_$p258, in_$p259, in_$i260, in_$p263, in_$i264, in_$p267, in_$i232, in_$i239, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb117, exit;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  $bb122:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i237;
    goto $bb122_dummy;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i239 := in_$i231;
    assume true;
    goto $bb122;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i238 := $ne.i32(out_$i232, 0);
    goto corral_source_split_9777;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i237 := $sub.i32(out_$i232, 1);
    call {:si_unique_call 2076} {:cexpr "j"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_9776;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume out_$i236 == 1;
    goto corral_source_split_9774;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i232, out_$i235);
    goto corral_source_split_9772;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    out_$i235 := $sext.i16.i32(out_$i234);
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i16($M.0, out_$p233);
    goto corral_source_split_9770;

  $bb118:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb128:
    assume out_$i246 == 1;
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i232, out_$i245);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i16.i32(out_$i244);
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i16($M.0, out_$p243);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_9786;

  $bb125:
    assume out_$i242 == 1;
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 6);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i241 := $load.i32($M.0, out_$p240);
    goto corral_source_split_9782;

  $bb124:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(in_$p11, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_9781;

  $bb120:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} set_bit(0, out_$p267);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i264, 368)), $mul.ref(360, 1));
    goto corral_source_split_9812;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} set_bit(11, out_$p263);
    goto corral_source_split_9810;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i260, 368)), $mul.ref(360, 1));
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 2083} out_cmdloc_dummy_var_9 := $memset.i8(out_cmdloc_dummy_var_8, out_$p259, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_9;
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} out_$p259 := lowmem_page_address(out_$p258);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i254, 368)), $mul.ref(304, 1));
    goto corral_source_split_9804;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i254 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9803;

  $bb132:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i232;
    assume true;
    goto $bb132;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$i249 := $ult.i64(out_$i247, out_$i248);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_$i248 := raid5_size(in_$p0, 0, 0);
    call {:si_unique_call 2080} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i248);
    goto corral_source_split_9794;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} out_$i247 := compute_blocknr(in_$p222, out_$i232, 0);
    call {:si_unique_call 2078} {:cexpr "s"} boogie_si_record_i64(out_$i247);
    goto corral_source_split_9793;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb127;

  $bb129:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb127;

  $bb122_dummy:
    call {:si_unique_call 1} out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb117(in_$p0, in_$p11, in_$p222, in_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb117(in_$p0: ref, in_$p11: ref, in_$p222: ref, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i239: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i239: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.0, $M.12, $CurrAddr;



implementation reshape_request_loop_$bb116(in_$p0: ref, in_$p11: ref, in_$p222: ref, in_$i230: i32, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i253: i32, in_$i239: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i230: i32, out_$i231: i32, out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i253: i32, out_$i239: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$i230, in_$i231, in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$p257, in_$p258, in_$p259, in_$i260, in_$p263, in_$i264, in_$p267, in_$i232, in_$i253, in_$i239, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb116, exit;

  $bb116:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9765;

  $bb133:
    assume out_$i252 == 1;
    assume {:verifier.code 0} true;
    out_$i230, out_$i231 := out_$i251, 1;
    goto $bb133_dummy;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i253 := 1;
    assume true;
    goto $bb133;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i250, 0);
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i251 := $sub.i32(out_$i250, 1);
    call {:si_unique_call 2081} {:cexpr "j"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_9798;

  $bb131:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9797;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i232;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$i249 := $ult.i64(out_$i247, out_$i248);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_$i248 := raid5_size(in_$p0, 0, 0);
    call {:si_unique_call 2080} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i248);
    goto corral_source_split_9794;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} out_$i247 := compute_blocknr(in_$p222, out_$i232, 0);
    call {:si_unique_call 2078} {:cexpr "s"} boogie_si_record_i64(out_$i247);
    goto corral_source_split_9793;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb127;

  $bb129:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb127;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i232, out_$i245);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i16.i32(out_$i244);
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i16($M.0, out_$p243);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_9786;

  $bb125:
    assume out_$i242 == 1;
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 6);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i241 := $load.i32($M.0, out_$p240);
    goto corral_source_split_9782;

  $bb124:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(in_$p11, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_9781;

  $bb120:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i232, out_$i235);
    goto corral_source_split_9772;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    out_$i235 := $sext.i16.i32(out_$i234);
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i16($M.0, out_$p233);
    goto corral_source_split_9770;

  $bb118:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    call out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb117(in_$p0, in_$p11, in_$p222, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    goto $bb117_last;

  $bb117_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    out_$i232 := out_$i230;
    goto $bb117;

  $bb122:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i237;
    assume false;
    return;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i231;
    assume true;
    goto $bb122;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i238 := $ne.i32(out_$i232, 0);
    goto corral_source_split_9777;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i237 := $sub.i32(out_$i232, 1);
    call {:si_unique_call 2076} {:cexpr "j"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_9776;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume out_$i236 == 1;
    goto corral_source_split_9774;

  $bb128:
    assume out_$i246 == 1;
    goto corral_source_split_9791;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} set_bit(0, out_$p267);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i264, 368)), $mul.ref(360, 1));
    goto corral_source_split_9812;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} set_bit(11, out_$p263);
    goto corral_source_split_9810;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i260, 368)), $mul.ref(360, 1));
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 2083} out_cmdloc_dummy_var_9 := $memset.i8(out_cmdloc_dummy_var_8, out_$p259, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_9;
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} out_$p259 := lowmem_page_address(out_$p258);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref($add.ref($add.ref(in_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i254, 368)), $mul.ref(304, 1));
    goto corral_source_split_9804;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i254 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9803;

  $bb132:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133_dummy:
    call {:si_unique_call 1} out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb116(in_$p0, in_$p11, in_$p222, out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb116(in_$p0: ref, in_$p11: ref, in_$p222: ref, in_$i230: i32, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i253: i32, in_$i239: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i230: i32, out_$i231: i32, out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i253: i32, out_$i239: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.12, $M.0, $CurrAddr;



implementation reshape_request_loop_$bb111(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i58: i32, in_$i120: i64, in_$i220: i64, in_$i221: i64, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i230: i32, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i253: i32, in_$i229: i32, in_$i239: i32, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$i219: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i220: i64, out_$i221: i64, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i230: i32, out_$i231: i32, out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i253: i32, out_$i229: i32, out_$i239: i32, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$i219: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$i220, out_$i221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i229, out_$i239, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i219, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$i220, in_$i221, in_$p222, in_$p223, in_$p224, in_$p225, in_$i226, in_$i227, in_$i228, in_$i230, in_$i231, in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$p257, in_$p258, in_$p259, in_$i260, in_$p263, in_$i264, in_$p267, in_$i232, in_$i253, in_$i229, in_$i239, in_$i268, in_$i269, in_$p270, in_$p271, in_$p272, in_$i273, in_$i274, in_$i219, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb111, exit;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;

  $bb141:
    assume out_$i274 == 1;
    assume {:verifier.code 0} true;
    out_$i219 := out_$i273;
    goto $bb141_dummy;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i273, in_$i58);
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i273 := $add.i32(out_$i219, 8);
    call {:si_unique_call 2089} {:cexpr "i"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_9825;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} list_add(out_$p272, in_$p4);
    goto corral_source_split_9824;

  $bb140:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(16, 1));
    goto corral_source_split_9823;

  $bb139:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} set_bit(1, out_$p271);
    goto corral_source_split_9821;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} set_bit(12, out_$p270);
    goto corral_source_split_9819;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9818;

  $bb138:
    assume out_$i269 == 1;
    goto corral_source_split_9817;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 0);
    goto corral_source_split_9815;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    out_$i268 := out_$i229;
    goto $bb136;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    out_$i268 := out_$i239;
    goto $bb136;

  $bb123:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i231;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i238 := $ne.i32(out_$i232, 0);
    goto corral_source_split_9777;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i237 := $sub.i32(out_$i232, 1);
    call {:si_unique_call 2076} {:cexpr "j"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_9776;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume out_$i236 == 1;
    goto corral_source_split_9774;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i232, out_$i235);
    goto corral_source_split_9772;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    out_$i235 := $sext.i16.i32(out_$i234);
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i16($M.0, out_$p233);
    goto corral_source_split_9770;

  $bb118:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    call out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb117(in_$p0, in_$p11, out_$p222, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    goto $bb117_last;

  $bb117_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    out_$i232 := out_$i230;
    goto $bb117;

  $bb122:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i237;
    assume false;
    return;

  $bb116:
    call out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb116(in_$p0, in_$p11, out_$p222, out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i239, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    goto $bb116_last;

  $bb116_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9765;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    out_$i230, out_$i231 := out_$i227, 0;
    goto $bb116;

  $bb133:
    assume out_$i252 == 1;
    assume {:verifier.code 0} true;
    out_$i230, out_$i231 := out_$i251, 1;
    assume false;
    return;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i253 := 1;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i250, 0);
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i251 := $sub.i32(out_$i250, 1);
    call {:si_unique_call 2081} {:cexpr "j"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_9798;

  $bb131:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9797;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i232;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$i249 := $ult.i64(out_$i247, out_$i248);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_$i248 := raid5_size(in_$p0, 0, 0);
    call {:si_unique_call 2080} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i248);
    goto corral_source_split_9794;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} out_$i247 := compute_blocknr(out_$p222, out_$i232, 0);
    call {:si_unique_call 2078} {:cexpr "s"} boogie_si_record_i64(out_$i247);
    goto corral_source_split_9793;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb127;

  $bb129:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb127;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i232, out_$i245);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i16.i32(out_$i244);
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i16($M.0, out_$p243);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_9786;

  $bb125:
    assume out_$i242 == 1;
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 6);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i241 := $load.i32($M.0, out_$p240);
    goto corral_source_split_9782;

  $bb124:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(in_$p11, $mul.ref(0, 1544)), $mul.ref(596, 1));
    goto corral_source_split_9781;

  $bb120:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb113:
    assume out_$i228 == 1;
    goto corral_source_split_9761;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    out_$i229 := 0;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i228 := $ne.i32(out_$i226, 0);
    goto corral_source_split_9759;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$i227 := $sub.i32(out_$i226, 1);
    call {:si_unique_call 2075} {:cexpr "j"} boogie_si_record_i32(out_$i227);
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.0, out_$p225);
    call {:si_unique_call 2074} {:cexpr "j"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_9757;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(88, 1));
    goto corral_source_split_9756;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} atomic_inc(out_$p224);
    goto corral_source_split_9755;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(in_$p11, $mul.ref(0, 1544)), $mul.ref(832, 1));
    goto corral_source_split_9754;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} set_bit(10, out_$p223);
    goto corral_source_split_9753;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_9752;

  SeqInstr_894:
    goto corral_source_split_9751;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} out_$p222 := get_active_stripe(in_$p11, out_$i221, 0, 0, 1);
    goto SeqInstr_893;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i64(in_$i120, out_$i220);
    goto corral_source_split_9750;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i220 := $sext.i32.i64(out_$i219);
    goto corral_source_split_9749;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb128:
    assume out_$i246 == 1;
    goto corral_source_split_9791;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} set_bit(0, out_$p267);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref($add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i264, 368)), $mul.ref(360, 1));
    goto corral_source_split_9812;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} set_bit(11, out_$p263);
    goto corral_source_split_9810;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i260, 368)), $mul.ref(360, 1));
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 2083} out_cmdloc_dummy_var_9 := $memset.i8(out_cmdloc_dummy_var_8, out_$p259, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_9;
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} out_$p259 := lowmem_page_address(out_$p258);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref($add.ref($add.ref(out_$p222, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i254, 368)), $mul.ref(304, 1));
    goto corral_source_split_9804;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i254 := $sext.i32.i64(out_$i232);
    goto corral_source_split_9803;

  $bb132:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_9763;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb115;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$i229 := out_$i253;
    goto $bb115;

  $bb134:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9801;

  $bb141_dummy:
    call {:si_unique_call 1} out_$i220, out_$i221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i229, out_$i239, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i219, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := reshape_request_loop_$bb111(in_$p0, in_$p4, in_$p11, in_$i58, in_$i120, out_$i220, out_$i221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$p257, out_$p258, out_$p259, out_$i260, out_$p263, out_$i264, out_$p267, out_$i232, out_$i253, out_$i229, out_$i239, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i219, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb111(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i58: i32, in_$i120: i64, in_$i220: i64, in_$i221: i64, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i230: i32, in_$i231: i32, in_$p233: ref, in_$i234: i16, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$i247: i64, in_$i248: i64, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i64, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$p267: ref, in_$i232: i32, in_$i253: i32, in_$i229: i32, in_$i239: i32, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$i219: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i220: i64, out_$i221: i64, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i230: i32, out_$i231: i32, out_$p233: ref, out_$i234: i16, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$i247: i64, out_$i248: i64, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i64, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$p267: ref, out_$i232: i32, out_$i253: i32, out_$i229: i32, out_$i239: i32, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$i219: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.12, $M.0, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.2, assertsPassed, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation reshape_request_loop_$bb75(in_$p0: ref, in_$p5: ref, in_$p164: ref, in_$p166: ref, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$i172: i64, in_$i173: i32, in_$i174: i1) returns (out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$i172: i64, out_$i173: i32, out_$i174: i1)
{

  entry:
    out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174 := in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174;
    goto $bb75, exit;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9649;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i174 == 1);
    goto $bb82_dummy;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$i173 := atomic_read(in_$p166);
    call {:si_unique_call 2049} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_9662;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} out_$i172 := prepare_to_wait_event(in_$p164, in_$p5, 2);
    call {:si_unique_call 2047} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i172);
    goto corral_source_split_9661;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} schedule();
    goto corral_source_split_9660;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i32(out_$i170, 0);
    goto corral_source_split_9651;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} out_$i170 := constant_test_bit(3, out_$p169);
    call {:si_unique_call 2043} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_9650;

  $bb82_dummy:
    call {:si_unique_call 1} out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174 := reshape_request_loop_$bb75(in_$p0, in_$p5, in_$p164, in_$p166, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb75(in_$p0: ref, in_$p5: ref, in_$p164: ref, in_$p166: ref, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$i172: i64, in_$i173: i32, in_$i174: i1) returns (out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$i172: i64, out_$i173: i32, out_$i174: i1);



implementation reshape_request_loop_$bb96(in_$p0: ref, in_$p6: ref, in_$p196: ref, in_$p198: ref, in_$p201: ref, in_$i202: i32, in_$i203: i1, in_$i204: i64, in_$i205: i64, in_$i206: i1) returns (out_$p201: ref, out_$i202: i32, out_$i203: i1, out_$i204: i64, out_$i205: i64, out_$i206: i1)
{

  entry:
    out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206 := in_$p201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206;
    goto $bb96, exit;

  $bb96:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(672, 1));
    goto corral_source_split_9711;

  $bb103:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb103_dummy;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i64(out_$i205, 0);
    goto corral_source_split_9725;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i64($M.0, in_$p198);
    goto corral_source_split_9724;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} out_$i204 := prepare_to_wait_event(in_$p196, in_$p6, 2);
    call {:si_unique_call 2065} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i204);
    goto corral_source_split_9723;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} schedule();
    goto corral_source_split_9722;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    out_$i203 := $ne.i32(out_$i202, 0);
    goto corral_source_split_9713;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} out_$i202 := constant_test_bit(3, out_$p201);
    call {:si_unique_call 2061} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_9712;

  $bb103_dummy:
    call {:si_unique_call 1} out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206 := reshape_request_loop_$bb96(in_$p0, in_$p6, in_$p196, in_$p198, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206);
    return;

  exit:
    return;
}



procedure reshape_request_loop_$bb96(in_$p0: ref, in_$p6: ref, in_$p196: ref, in_$p198: ref, in_$p201: ref, in_$i202: i32, in_$i203: i1, in_$i204: i64, in_$i205: i64, in_$i206: i1) returns (out_$p201: ref, out_$i202: i32, out_$i203: i1, out_$i204: i64, out_$i205: i64, out_$i206: i1);



implementation print_raid5_conf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i21: i32, in_vslice_dummy_var_90: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i21: i32, out_vslice_dummy_var_90: i32)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i21, out_vslice_dummy_var_90 := in_$p22, in_$p23, in_$i24, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i44, in_$i45, in_$i21, in_vslice_dummy_var_90;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10102;

  $bb13:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i43;
    goto $bb13_dummy;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i43, out_$i44);
    goto corral_source_split_10130;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p18);
    goto corral_source_split_10129;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i21, 1);
    call {:si_unique_call 2174} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_10128;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} out_vslice_dummy_var_90 := printk.ref.i32.i32.ref(.str.106, out_$i21, out_$i41, out_$p35);
    goto corral_source_split_10126;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i32(out_$i40);
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_10124;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} out_$i39 := constant_test_bit(0, out_$p38);
    call {:si_unique_call 2172} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_10123;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_10122;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_10121;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10120;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} out_$p35 := bdevname(out_$p33, out_$p34);
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10114;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_10113;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i21);
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_10105;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1544)), $mul.ref(1384, 1));
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i21, out_vslice_dummy_var_90 := print_raid5_conf_loop_$bb8(in_$p0, in_$p1, in_$p18, out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i21, out_vslice_dummy_var_90);
    return;

  exit:
    return;
}



procedure print_raid5_conf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i21: i32, in_vslice_dummy_var_90: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i21: i32, out_vslice_dummy_var_90: i32);



implementation chunk_aligned_read_loop_$bb66(in_$p6: ref, in_$p9: ref, in_$p131: ref, in_$p133: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i32, in_$i140: i1) returns (out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i32, out_$i140: i1)
{

  entry:
    out_$p136, out_$p137, out_$i138, out_$i139, out_$i140 := in_$p136, in_$p137, in_$i138, in_$i139, in_$i140;
    goto $bb66, exit;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb70:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb70_dummy;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 0);
    goto corral_source_split_10584;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.0, in_$p133);
    goto corral_source_split_10583;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} out_$i138 := prepare_to_wait_event(in_$p131, in_$p6, 2);
    call {:si_unique_call 2295} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i138);
    goto corral_source_split_10582;

  SeqInstr_996:
    goto corral_source_split_10581;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_spin_lock_irq_136(out_$p137);
    goto SeqInstr_995;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10580;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} schedule();
    goto corral_source_split_10579;

  SeqInstr_993:
    goto corral_source_split_10578;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_spin_unlock_irq_137(out_$p136);
    goto SeqInstr_992;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1544)), $mul.ref(1312, 1));
    goto corral_source_split_10577;

  $bb70_dummy:
    call {:si_unique_call 1} out_$p136, out_$p137, out_$i138, out_$i139, out_$i140 := chunk_aligned_read_loop_$bb66(in_$p6, in_$p9, in_$p131, in_$p133, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140);
    return;

  exit:
    return;
}



procedure chunk_aligned_read_loop_$bb66(in_$p6: ref, in_$p9: ref, in_$p131: ref, in_$p133: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i32, in_$i140: i1) returns (out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i32, out_$i140: i1);
  modifies $M.2, assertsPassed;



implementation make_discard_request_loop_$bb56(in_$p0: ref, in_$p117: ref, in_$p150: ref, in_$p152: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i156: i32, in_vslice_dummy_var_91: i32) returns (out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i156: i32, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_vslice_dummy_var_91 := in_$p157, in_$p158, in_$p159, in_$i160, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i156, in_vslice_dummy_var_91;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_10797;

  $bb58:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$i156 := out_$i162;
    goto $bb58_dummy;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    out_$i166 := $slt.i32(out_$i162, out_$i165);
    goto corral_source_split_10808;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$i165 := $sub.i32(out_$i163, out_$i164);
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, in_$p152);
    goto corral_source_split_10806;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, in_$p150);
    goto corral_source_split_10805;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i156, 1);
    call {:si_unique_call 2331} {:cexpr "d"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} out_vslice_dummy_var_91 := bitmap_startwrite(out_$p158, out_$i160, 8, 0);
    goto corral_source_split_10803;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i64($M.0, out_$p159);
    goto corral_source_split_10802;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p117, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.0, out_$p157);
    goto corral_source_split_10800;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_vslice_dummy_var_91 := make_discard_request_loop_$bb56(in_$p0, in_$p117, in_$p150, in_$p152, out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure make_discard_request_loop_$bb56(in_$p0: ref, in_$p117: ref, in_$p150: ref, in_$p152: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i156: i32, in_vslice_dummy_var_91: i32) returns (out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i156: i32, out_vslice_dummy_var_91: i32);



implementation make_discard_request_loop_$bb39(in_$p1: ref, in_$p117: ref, in_$p120: ref, in_$p124: ref, in_$i125: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$i136: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i123: i32) returns (out_$p124: ref, out_$i125: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$i136: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i123: i32)
{

  entry:
    out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123 := in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p135, in_$i136, in_$p139, in_$i140, in_$i141, in_$i142, in_$i123;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  $bb48:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := out_$i140;
    goto $bb48_dummy;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i140, out_$i141);
    goto corral_source_split_10766;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, in_$p120);
    goto corral_source_split_10765;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i123, 1);
    call {:si_unique_call 2326} {:cexpr "d"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_10764;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb42;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i123, out_$i126);
    goto corral_source_split_10756;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i16.i32(out_$i125);
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i16($M.0, out_$p124);
    goto corral_source_split_10754;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p117, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i123, out_$i130);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i16.i32(out_$i129);
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i16($M.0, out_$p128);
    goto corral_source_split_10760;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p117, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10759;

  $bb43:
    assume !(out_$i127 == 1);
    goto corral_source_split_10758;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} raid5_inc_bi_active_stripes(in_$p1);
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} set_bit(3, out_$p139);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref($add.ref(in_$p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i136, 368)), $mul.ref(360, 1));
    goto corral_source_split_10772;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i123);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, in_$p1);
    goto corral_source_split_10770;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref($add.ref(in_$p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i132, 368)), $mul.ref(336, 1));
    goto corral_source_split_10769;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i123);
    goto corral_source_split_10768;

  $bb45:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123 := make_discard_request_loop_$bb39(in_$p1, in_$p117, in_$p120, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123);
    return;

  exit:
    return;
}



procedure make_discard_request_loop_$bb39(in_$p1: ref, in_$p117: ref, in_$p120: ref, in_$p124: ref, in_$i125: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$i136: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i123: i32) returns (out_$p124: ref, out_$i125: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$i136: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i123: i32);
  modifies $M.0;



implementation make_discard_request_loop_$bb17(in_$p60: ref, in_$p80: ref, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p116: ref) returns (out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p116: ref)
{

  entry:
    out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116 := in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p96, in_$p97, in_$i98, in_$i99, in_$i101, in_$p104, in_$p105, in_$i106, in_$i107, in_$i100, in_$i113, in_$i114, in_$i115, in_$i84, in_$p116;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  $bb32:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i113;
    goto $bb32_dummy;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p116 := in_$p60;
    assume true;
    goto $bb32;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i113, out_$i114);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, in_$p80);
    goto corral_source_split_10714;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i84, 1);
    call {:si_unique_call 2319} {:cexpr "d"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_10713;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i92 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb20;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i84, out_$i87);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i16.i32(out_$i86);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, out_$p85);
    goto corral_source_split_10703;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i84, out_$i91);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i16.i32(out_$i90);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i16($M.0, out_$p89);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p60, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10708;

  $bb21:
    assume !(out_$i88 == 1);
    goto corral_source_split_10707;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb30;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(in_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i101, 368)), $mul.ref(320, 1));
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10733;

  $bb28:
    assume !(out_$i99 == 1);
    goto corral_source_split_10732;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb28;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref($add.ref(in_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i93, 368)), $mul.ref(336, 1));
    goto corral_source_split_10718;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10717;

  $bb23:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116 := make_discard_request_loop_$bb17(in_$p60, in_$p80, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116);
    return;

  exit:
    return;
}



procedure make_discard_request_loop_$bb17(in_$p60: ref, in_$p80: ref, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p116: ref) returns (out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p116: ref);



implementation make_discard_request_loop_$bb10(in_$p2: ref, in_$p5: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i108: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p83: ref, in_$p116: ref, in_$i48: i64) returns (out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i108: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p83: ref, out_$p116: ref)
{

  entry:
    out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116 := in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p96, in_$p97, in_$i98, in_$i99, in_$i101, in_$p104, in_$p105, in_$i106, in_$i107, in_$i100, in_$i108, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i84, in_$p83, in_$p116;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} out_$p60 := get_active_stripe(in_$p5, in_$i48, 0, 0, 0);
    goto SeqInstr_1004;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} schedule();
    goto corral_source_split_10682;

  SeqInstr_1008:
    goto corral_source_split_10681;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} release_stripe(out_$p60);
    goto SeqInstr_1007;

  $bb11:
    assume out_$i71 == 1;
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} out_$i70 := constant_test_bit(3, out_$p69);
    call {:si_unique_call 2314} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} set_bit(7, out_$p68);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i65, 368)), $mul.ref(360, 1));
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i16.i32(out_$i63);
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} prepare_to_wait(out_$p61, in_$p2, 2);
    goto corral_source_split_10669;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10668;

  SeqInstr_1005:
    goto corral_source_split_10667;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} schedule();
    goto corral_source_split_10730;

  SeqInstr_1017:
    goto corral_source_split_10729;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} release_stripe(out_$p60);
    goto SeqInstr_1016;

  SeqInstr_1014:
    goto corral_source_split_10728;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} ldv_spin_unlock_irq_122(out_$p112);
    goto SeqInstr_1013;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10727;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} set_bit(7, out_$p111);
    goto corral_source_split_10726;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i108, 368)), $mul.ref(360, 1));
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i100);
    goto corral_source_split_10724;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10723;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i99 == 1;
    goto $bb27;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i93, 368)), $mul.ref(336, 1));
    goto corral_source_split_10718;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10717;

  $bb23:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i84, out_$i91);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i16.i32(out_$i90);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i16($M.0, out_$p89);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10708;

  $bb21:
    assume !(out_$i88 == 1);
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i84, out_$i87);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i16.i32(out_$i86);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, out_$p85);
    goto corral_source_split_10703;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116 := make_discard_request_loop_$bb17(out_$p60, out_$p80, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$i84 := 0;
    goto $bb17;

  $bb32:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i113;
    assume false;
    return;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p116 := out_$p60;
    assume true;
    goto $bb32;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i113, out_$i114);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p80);
    goto corral_source_split_10714;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i84, 1);
    call {:si_unique_call 2319} {:cexpr "d"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_10713;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i92 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb20;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i101, 368)), $mul.ref(320, 1));
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10733;

  $bb28:
    assume !(out_$i99 == 1);
    goto corral_source_split_10732;

  $bb15:
    assume out_$i82 == 1;
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p60;
    assume true;
    goto $bb15;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(0, out_$i81);
    goto corral_source_split_10694;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10692;

  SeqInstr_1011:
    goto corral_source_split_10691;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} ldv_spin_lock_irq_121(out_$p79);
    goto SeqInstr_1010;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} clear_bit(7, out_$p78);
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i75, 368)), $mul.ref(360, 1));
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i16.i32(out_$i73);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i16($M.0, out_$p72);
    goto corral_source_split_10685;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10684;

  $bb12:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116 := make_discard_request_loop_$bb10(in_$p2, in_$p5, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116, in_$i48);
    return;

  exit:
    return;
}



procedure make_discard_request_loop_$bb10(in_$p2: ref, in_$p5: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i108: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p83: ref, in_$p116: ref, in_$i48: i64) returns (out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i108: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p83: ref, out_$p116: ref);
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.1, $M.0, $M.2, $CurrAddr, assertsPassed, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22, $M.38;



implementation make_discard_request_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i46: i64, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i108: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p83: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$i125: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$i136: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i123: i32, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i156: i32, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i64, in_$i180: i1, in_$i48: i64, in_vslice_dummy_var_91: i32) returns (out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i108: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p83: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$i125: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$i136: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i123: i32, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i156: i32, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i64, out_$i180: i1, out_$i48: i64, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i48, out_vslice_dummy_var_91 := in_$p49, in_$p50, in_$p52, in_$p53, in_$p54, in_$p56, in_$p57, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p96, in_$p97, in_$i98, in_$i99, in_$i101, in_$p104, in_$p105, in_$i106, in_$i107, in_$i100, in_$i108, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i84, in_$p83, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p135, in_$i136, in_$p139, in_$i140, in_$i141, in_$i142, in_$i123, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$i148, in_$i149, in_$p150, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$p157, in_$p158, in_$p159, in_$i160, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i156, in_$p167, in_$i168, in_$i169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i48, in_vslice_dummy_var_91;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10650;

  $bb65:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i179;
    goto $bb65_dummy;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    out_$i180 := $ult.i64(out_$i179, in_$i46);
    goto corral_source_split_10835;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i64(out_$i48, 8);
    call {:si_unique_call 2339} {:cexpr "logical_sector"} boogie_si_record_i64(out_$i179);
    goto corral_source_split_10834;

  SeqInstr_1023:
    goto corral_source_split_10833;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} release_stripe_plug(in_$p0, out_$p172);
    goto SeqInstr_1022;

  $bb63:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} atomic_inc(out_$p178);
    goto corral_source_split_10831;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(800, 1));
    goto corral_source_split_10830;

  $bb62:
    assume out_$i177 == 1;
    goto corral_source_split_10829;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} out_$i176 := test_and_set_bit(6, out_$p175);
    call {:si_unique_call 2336} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_10826;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10825;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} clear_bit(7, out_$p174);
    goto corral_source_split_10824;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} set_bit(1, out_$p173);
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p172, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10821;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_10820;

  $bb52:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$p172 := out_$p117;
    goto $bb61;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    out_$p172 := out_$p117;
    goto $bb61;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} set_bit(9, out_$p171);
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10817;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p170, out_$i169);
    goto corral_source_split_10816;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(84, 1));
    goto corral_source_split_10815;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i168, 1);
    goto corral_source_split_10814;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.0, out_$p167);
    goto corral_source_split_10813;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(912, 1));
    goto corral_source_split_10812;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i155 == 1);
    goto $bb55;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb59:
    assume !(out_$i166 == 1);
    goto corral_source_split_10810;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    out_$i166 := $slt.i32(out_$i162, out_$i165);
    goto corral_source_split_10808;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$i165 := $sub.i32(out_$i163, out_$i164);
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, out_$p152);
    goto corral_source_split_10806;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, out_$p150);
    goto corral_source_split_10805;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i156, 1);
    call {:si_unique_call 2331} {:cexpr "d"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} out_vslice_dummy_var_91 := bitmap_startwrite(out_$p158, out_$i160, 8, 0);
    goto corral_source_split_10803;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i64($M.0, out_$p159);
    goto corral_source_split_10802;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(56, 1));
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.0, out_$p157);
    goto corral_source_split_10800;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    call out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_vslice_dummy_var_91 := make_discard_request_loop_$bb56(in_$p0, out_$p117, out_$p150, out_$p152, out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_vslice_dummy_var_91);
    goto $bb56_last;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$i156 := 0;
    goto $bb56;

  $bb58:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$i156 := out_$i162;
    assume false;
    return;

  $bb53:
    assume out_$i155 == 1;
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(0, out_$i154);
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    out_$i154 := $sub.i32(out_$i151, out_$i153);
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.0, out_$p152);
    goto corral_source_split_10791;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(604, 1));
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, out_$p150);
    goto corral_source_split_10789;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10788;

  $bb51:
    assume out_$i149 == 1;
    goto corral_source_split_10787;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i64(out_$i148, 0);
    goto corral_source_split_10785;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    out_$i148 := $p2i.ref.i64(out_$p147);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p145, $mul.ref(0, 2024)), $mul.ref(1560, 1));
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    goto corral_source_split_10781;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(584, 1));
    goto corral_source_split_10780;

  SeqInstr_1020:
    goto corral_source_split_10779;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} ldv_spin_unlock_irq_122(out_$p143);
    goto SeqInstr_1019;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10778;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb38;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb49:
    assume !(out_$i142 == 1);
    goto corral_source_split_10776;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i140, out_$i141);
    goto corral_source_split_10766;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p120);
    goto corral_source_split_10765;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i123, 1);
    call {:si_unique_call 2326} {:cexpr "d"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_10764;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb42;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i123, out_$i126);
    goto corral_source_split_10756;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i16.i32(out_$i125);
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i16($M.0, out_$p124);
    goto corral_source_split_10754;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123 := make_discard_request_loop_$bb39(in_$p1, out_$p117, out_$p120, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$i123 := 0;
    goto $bb39;

  $bb48:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := out_$i140;
    assume false;
    return;

  $bb36:
    assume out_$i122 == 1;
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(0, out_$i121);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10745;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} finish_wait(out_$p119, in_$p2);
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10743;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} set_bit(19, out_$p118);
    goto corral_source_split_10742;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10741;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$p117 := out_$p83;
    goto $bb34;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$p117 := out_$p116;
    goto $bb34;

  $bb33:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10739;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p116 := out_$p60;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i113, out_$i114);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p80);
    goto corral_source_split_10714;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i84, 1);
    call {:si_unique_call 2319} {:cexpr "d"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_10713;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i92 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb20;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i84, out_$i87);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i16.i32(out_$i86);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.0, out_$p85);
    goto corral_source_split_10703;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116 := make_discard_request_loop_$bb17(out_$p60, out_$p80, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i113, out_$i114, out_$i115, out_$i84, out_$p116);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$i84 := 0;
    goto $bb17;

  $bb32:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i113;
    assume false;
    return;

  $bb15:
    assume out_$i82 == 1;
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p60;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(0, out_$i81);
    goto corral_source_split_10694;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(608, 1));
    goto corral_source_split_10692;

  SeqInstr_1011:
    goto corral_source_split_10691;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} ldv_spin_lock_irq_121(out_$p79);
    goto SeqInstr_1010;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} clear_bit(7, out_$p78);
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i75, 368)), $mul.ref(360, 1));
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i16.i32(out_$i73);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i16($M.0, out_$p72);
    goto corral_source_split_10685;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10684;

  $bb12:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} out_$i70 := constant_test_bit(3, out_$p69);
    call {:si_unique_call 2314} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(72, 1));
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} set_bit(7, out_$p68);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i65, 368)), $mul.ref(360, 1));
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i16.i32(out_$i63);
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(64, 1));
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} prepare_to_wait(out_$p61, in_$p2, 2);
    goto corral_source_split_10669;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1544)), $mul.ref(1216, 1));
    goto corral_source_split_10668;

  SeqInstr_1005:
    goto corral_source_split_10667;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  $bb10:
    call out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116 := make_discard_request_loop_$bb10(in_$p2, in_$p5, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116, out_$i48);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} out_$p60 := get_active_stripe(in_$p5, out_$i48, 0, 0, 0);
    goto SeqInstr_1004;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} schedule();
    goto corral_source_split_10682;

  SeqInstr_1008:
    goto corral_source_split_10681;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} release_stripe(out_$p60);
    goto SeqInstr_1007;

  $bb11:
    assume out_$i71 == 1;
    goto corral_source_split_10680;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} schedule();
    goto corral_source_split_10730;

  SeqInstr_1017:
    goto corral_source_split_10729;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} release_stripe(out_$p60);
    goto SeqInstr_1016;

  SeqInstr_1014:
    goto corral_source_split_10728;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} ldv_spin_unlock_irq_122(out_$p112);
    goto SeqInstr_1013;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(104, 1));
    goto corral_source_split_10727;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} set_bit(7, out_$p111);
    goto corral_source_split_10726;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i108, 368)), $mul.ref(360, 1));
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i100);
    goto corral_source_split_10724;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10723;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i99 == 1;
    goto $bb27;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i93, 368)), $mul.ref(336, 1));
    goto corral_source_split_10718;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10717;

  $bb23:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i84, out_$i91);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i16.i32(out_$i90);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i16($M.0, out_$p89);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10708;

  $bb21:
    assume !(out_$i88 == 1);
    goto corral_source_split_10707;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i84;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i101, 368)), $mul.ref(320, 1));
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i84);
    goto corral_source_split_10733;

  $bb28:
    assume !(out_$i99 == 1);
    goto corral_source_split_10732;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p59, out_$p57);
    goto corral_source_split_10665;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10663;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p56, out_$p54);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p53, autoremove_wake_function);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10658;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p52, out_$p49);
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10656;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p50, 0);
    goto corral_source_split_10654;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10653;

  SeqInstr_1002:
    goto corral_source_split_10652;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} out_$p49 := get_current();
    goto SeqInstr_1001;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb16:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10698;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i123, out_$i130);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i16.i32(out_$i129);
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i16($M.0, out_$p128);
    goto corral_source_split_10760;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(66, 1));
    goto corral_source_split_10759;

  $bb43:
    assume !(out_$i127 == 1);
    goto corral_source_split_10758;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} raid5_inc_bi_active_stripes(in_$p1);
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} set_bit(3, out_$p139);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i136, 368)), $mul.ref(360, 1));
    goto corral_source_split_10772;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i123);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, in_$p1);
    goto corral_source_split_10770;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref($add.ref(out_$p117, $mul.ref(0, 576)), $mul.ref(208, 1)), $mul.ref(out_$i132, 368)), $mul.ref(336, 1));
    goto corral_source_split_10769;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i123);
    goto corral_source_split_10768;

  $bb45:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i48, out_vslice_dummy_var_91 := make_discard_request_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p5, in_$i46, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p56, out_$p57, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p96, out_$p97, out_$i98, out_$i99, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$i100, out_$i108, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i84, out_$p83, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$p139, out_$i140, out_$i141, out_$i142, out_$i123, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i156, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i48, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure make_discard_request_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i46: i64, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i100: i32, in_$i108: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i84: i32, in_$p83: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$i125: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$i136: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i123: i32, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i156: i32, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i64, in_$i180: i1, in_$i48: i64, in_vslice_dummy_var_91: i32) returns (out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i100: i32, out_$i108: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i84: i32, out_$p83: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$i125: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$i136: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i123: i32, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i156: i32, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i64, out_$i180: i1, out_$i48: i64, out_vslice_dummy_var_91: i32);
  modifies $M.0, $CurrAddr, $M.2, assertsPassed, $M.1, $M.38, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.29, $M.18, $M.17, $M.19, $M.49, $M.21, $M.23, $M.22;



implementation ldv_struct_md_personality_io_instance_0_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2492} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11518;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1098:
    goto corral_source_split_11528;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} ldv_io_instance_callback_0_41($u10, in_$p17);
    goto SeqInstr_1097;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11526;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11519;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} ldv_free(out_$p61);
    goto corral_source_split_11538;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11537;

  SeqInstr_1101:
    goto corral_source_split_11536;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} ldv_io_instance_callback_0_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1100;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11535;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11534;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11532;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11530;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} ldv_io_instance_callback_0_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11544;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11542;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11540;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1104:
    goto corral_source_split_11550;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} ldv_io_instance_callback_0_36($u13, in_$p17);
    goto SeqInstr_1103;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11548;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11546;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_1107:
    goto corral_source_split_11556;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} ldv_io_instance_callback_0_35($u13, in_$p17);
    goto SeqInstr_1106;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11554;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11552;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_io_instance_callback_0_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11562;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11560;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11558;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_io_instance_callback_0_29($u15, in_$p17, $u0);
    goto corral_source_split_11568;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11566;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11564;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1110:
    goto corral_source_split_11574;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} ldv_io_instance_callback_0_26($u16, in_$p17, $u2);
    goto SeqInstr_1109;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11572;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11570;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_io_instance_callback_0_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11580;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11578;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11576;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1113:
    goto corral_source_split_11586;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} ldv_io_instance_callback_0_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1112;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11584;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11582;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_1116:
    goto corral_source_split_11592;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} ldv_io_instance_callback_0_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1115;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11590;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11588;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1119:
    goto corral_source_split_11598;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ldv_io_instance_callback_0_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1118;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11596;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11594;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_1122:
    goto corral_source_split_11604;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} ldv_io_instance_callback_0_21($u20, in_$p17);
    goto SeqInstr_1121;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11602;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11600;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_1125:
    goto corral_source_split_11610;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} ldv_io_instance_callback_0_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1124;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11608;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11606;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} ldv_io_instance_callback_0_17($u22, in_$p17, $u2);
    goto corral_source_split_11616;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11614;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11612;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_1128:
    goto corral_source_split_11622;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} ldv_io_instance_callback_0_4($u13, in_$p17);
    goto SeqInstr_1127;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11620;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11618;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb84_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_0_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_0_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;



implementation ldv_struct_md_personality_io_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11501;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb12_dummy;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_11522;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} out_$i32 := ldv_undef_int();
    call {:si_unique_call 2494} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_11521;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1131:
    goto corral_source_split_11631;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} ldv_io_instance_release_0_2(out_$p63, in_$p17, out_$p64);
    goto SeqInstr_1130;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_11630;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_11629;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11628;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i58 == 1;
    goto corral_source_split_11626;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 17);
    goto corral_source_split_11624;

  $bb76:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75, $bb76;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11618;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11612;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11606;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11600;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11594;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11588;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11582;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11576;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11570;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11564;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11558;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11552;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11546;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11540;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11530;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11519;

  $bb10:
    call out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_0_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2492} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11518;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb84:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1098:
    goto corral_source_split_11528;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} ldv_io_instance_callback_0_41($u10, in_$p17);
    goto SeqInstr_1097;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11526;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} ldv_free(out_$p61);
    goto corral_source_split_11538;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11537;

  SeqInstr_1101:
    goto corral_source_split_11536;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} ldv_io_instance_callback_0_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1100;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11535;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11534;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11532;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} ldv_io_instance_callback_0_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11544;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11542;

  SeqInstr_1104:
    goto corral_source_split_11550;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} ldv_io_instance_callback_0_36($u13, in_$p17);
    goto SeqInstr_1103;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11548;

  SeqInstr_1107:
    goto corral_source_split_11556;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} ldv_io_instance_callback_0_35($u13, in_$p17);
    goto SeqInstr_1106;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11554;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_io_instance_callback_0_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11562;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11560;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_io_instance_callback_0_29($u15, in_$p17, $u0);
    goto corral_source_split_11568;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11566;

  SeqInstr_1110:
    goto corral_source_split_11574;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} ldv_io_instance_callback_0_26($u16, in_$p17, $u2);
    goto SeqInstr_1109;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11572;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_io_instance_callback_0_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11580;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11578;

  SeqInstr_1113:
    goto corral_source_split_11586;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} ldv_io_instance_callback_0_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1112;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11584;

  SeqInstr_1116:
    goto corral_source_split_11592;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} ldv_io_instance_callback_0_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1115;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11590;

  SeqInstr_1119:
    goto corral_source_split_11598;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ldv_io_instance_callback_0_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1118;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11596;

  SeqInstr_1122:
    goto corral_source_split_11604;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} ldv_io_instance_callback_0_21($u20, in_$p17);
    goto SeqInstr_1121;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11602;

  SeqInstr_1125:
    goto corral_source_split_11610;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} ldv_io_instance_callback_0_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1124;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11608;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} ldv_io_instance_callback_0_17($u22, in_$p17, $u2);
    goto corral_source_split_11616;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11614;

  SeqInstr_1128:
    goto corral_source_split_11622;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} ldv_io_instance_callback_0_4($u13, in_$p17);
    goto SeqInstr_1127;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11620;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} ldv_assume(out_$i29);
    goto corral_source_split_11511;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    goto corral_source_split_11510;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i25, 0);
    goto corral_source_split_11509;

  $bb8:
    assume out_$i27 == 1;
    goto corral_source_split_11508;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_11506;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2488} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_11505;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} out_$i25 := ldv_filter_err_code(out_$i24);
    call {:si_unique_call 2486} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_11504;

  SeqInstr_1095:
    call {:si_unique_call 2484} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11503;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} out_$i24 := ldv_io_instance_probe_0_11(out_$p23, in_$p17);
    goto SeqInstr_1094;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_11502;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} ldv_assume(out_$i31);
    goto corral_source_split_11516;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_11515;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i25, 0);
    goto corral_source_split_11514;

  $bb9:
    assume !(out_$i27 == 1);
    goto corral_source_split_11513;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := ldv_struct_md_personality_io_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref);
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;



implementation ldv_struct_md_personality_io_instance_1_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2539} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11694;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1137:
    goto corral_source_split_11704;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} ldv_io_instance_callback_1_41($u10, in_$p17);
    goto SeqInstr_1136;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11702;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11695;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_free(out_$p61);
    goto corral_source_split_11714;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11713;

  SeqInstr_1140:
    goto corral_source_split_11712;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} ldv_io_instance_callback_1_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1139;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11711;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11710;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11708;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11706;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} ldv_io_instance_callback_1_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11720;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11718;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11716;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1143:
    goto corral_source_split_11726;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} ldv_io_instance_callback_1_36($u13, in_$p17);
    goto SeqInstr_1142;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11724;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11722;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_1146:
    goto corral_source_split_11732;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} ldv_io_instance_callback_1_35($u13, in_$p17);
    goto SeqInstr_1145;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11730;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11728;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_io_instance_callback_1_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11738;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11736;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11734;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} ldv_io_instance_callback_1_29($u15, in_$p17, $u0);
    goto corral_source_split_11744;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11742;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11740;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1149:
    goto corral_source_split_11750;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} ldv_io_instance_callback_1_26($u16, in_$p17, $u2);
    goto SeqInstr_1148;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11748;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11746;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} ldv_io_instance_callback_1_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11756;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11754;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11752;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1152:
    goto corral_source_split_11762;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} ldv_io_instance_callback_1_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1151;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11760;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11758;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_1155:
    goto corral_source_split_11768;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_io_instance_callback_1_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1154;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11766;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11764;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1158:
    goto corral_source_split_11774;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} ldv_io_instance_callback_1_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1157;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11772;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11770;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_1161:
    goto corral_source_split_11780;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} ldv_io_instance_callback_1_21($u20, in_$p17);
    goto SeqInstr_1160;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11778;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11776;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_1164:
    goto corral_source_split_11786;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} ldv_io_instance_callback_1_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1163;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11784;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11782;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} ldv_io_instance_callback_1_17($u22, in_$p17, $u2);
    goto corral_source_split_11792;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11790;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11788;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_1167:
    goto corral_source_split_11798;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ldv_io_instance_callback_1_4($u13, in_$p17);
    goto SeqInstr_1166;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11796;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11794;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb84_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_1_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_1_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;



implementation ldv_struct_md_personality_io_instance_1_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11677;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb12_dummy;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_11698;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} out_$i32 := ldv_undef_int();
    call {:si_unique_call 2541} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_11697;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1170:
    goto corral_source_split_11807;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} ldv_io_instance_release_1_2(out_$p63, in_$p17, out_$p64);
    goto SeqInstr_1169;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_11806;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_11805;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11804;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i58 == 1;
    goto corral_source_split_11802;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 17);
    goto corral_source_split_11800;

  $bb76:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75, $bb76;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11794;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11788;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11782;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11776;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11770;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11764;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11758;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11752;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11746;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11740;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11734;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11728;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11722;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11716;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11706;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11695;

  $bb10:
    call out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_1_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2539} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11694;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb84:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1137:
    goto corral_source_split_11704;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} ldv_io_instance_callback_1_41($u10, in_$p17);
    goto SeqInstr_1136;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11702;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_free(out_$p61);
    goto corral_source_split_11714;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11713;

  SeqInstr_1140:
    goto corral_source_split_11712;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} ldv_io_instance_callback_1_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1139;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11711;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11710;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11708;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} ldv_io_instance_callback_1_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11720;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11718;

  SeqInstr_1143:
    goto corral_source_split_11726;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} ldv_io_instance_callback_1_36($u13, in_$p17);
    goto SeqInstr_1142;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11724;

  SeqInstr_1146:
    goto corral_source_split_11732;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} ldv_io_instance_callback_1_35($u13, in_$p17);
    goto SeqInstr_1145;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11730;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_io_instance_callback_1_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11738;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11736;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} ldv_io_instance_callback_1_29($u15, in_$p17, $u0);
    goto corral_source_split_11744;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11742;

  SeqInstr_1149:
    goto corral_source_split_11750;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} ldv_io_instance_callback_1_26($u16, in_$p17, $u2);
    goto SeqInstr_1148;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11748;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} ldv_io_instance_callback_1_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11756;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11754;

  SeqInstr_1152:
    goto corral_source_split_11762;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} ldv_io_instance_callback_1_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1151;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11760;

  SeqInstr_1155:
    goto corral_source_split_11768;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_io_instance_callback_1_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1154;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11766;

  SeqInstr_1158:
    goto corral_source_split_11774;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} ldv_io_instance_callback_1_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1157;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11772;

  SeqInstr_1161:
    goto corral_source_split_11780;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} ldv_io_instance_callback_1_21($u20, in_$p17);
    goto SeqInstr_1160;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11778;

  SeqInstr_1164:
    goto corral_source_split_11786;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} ldv_io_instance_callback_1_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1163;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11784;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} ldv_io_instance_callback_1_17($u22, in_$p17, $u2);
    goto corral_source_split_11792;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11790;

  SeqInstr_1167:
    goto corral_source_split_11798;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ldv_io_instance_callback_1_4($u13, in_$p17);
    goto SeqInstr_1166;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11796;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} ldv_assume(out_$i29);
    goto corral_source_split_11687;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    goto corral_source_split_11686;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i25, 0);
    goto corral_source_split_11685;

  $bb8:
    assume out_$i27 == 1;
    goto corral_source_split_11684;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_11682;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2535} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_11681;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} out_$i25 := ldv_filter_err_code(out_$i24);
    call {:si_unique_call 2533} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_11680;

  SeqInstr_1134:
    call {:si_unique_call 2531} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11679;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} out_$i24 := ldv_io_instance_probe_1_11(out_$p23, in_$p17);
    goto SeqInstr_1133;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_11678;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} ldv_assume(out_$i31);
    goto corral_source_split_11692;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_11691;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i25, 0);
    goto corral_source_split_11690;

  $bb9:
    assume !(out_$i27 == 1);
    goto corral_source_split_11689;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := ldv_struct_md_personality_io_instance_1_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_1_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref);
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;



implementation ldv_struct_md_personality_io_instance_2_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2586} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11870;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb84_dummy;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1176:
    goto corral_source_split_11880;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} ldv_io_instance_callback_2_41($u10, in_$p17);
    goto SeqInstr_1175;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11878;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11871;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_free(out_$p61);
    goto corral_source_split_11890;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11889;

  SeqInstr_1179:
    goto corral_source_split_11888;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} ldv_io_instance_callback_2_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1178;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11887;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11884;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11882;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} ldv_io_instance_callback_2_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11896;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11894;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11892;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1182:
    goto corral_source_split_11902;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_io_instance_callback_2_36($u13, in_$p17);
    goto SeqInstr_1181;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11900;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11898;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_1185:
    goto corral_source_split_11908;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} ldv_io_instance_callback_2_35($u13, in_$p17);
    goto SeqInstr_1184;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11906;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11904;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_io_instance_callback_2_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11914;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11912;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11910;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} ldv_io_instance_callback_2_29($u15, in_$p17, $u0);
    goto corral_source_split_11920;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11918;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11916;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1188:
    goto corral_source_split_11926;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_io_instance_callback_2_26($u16, in_$p17, $u2);
    goto SeqInstr_1187;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11924;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11922;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} ldv_io_instance_callback_2_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11932;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11930;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11928;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1191:
    goto corral_source_split_11938;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} ldv_io_instance_callback_2_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1190;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11936;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11934;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_1194:
    goto corral_source_split_11944;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} ldv_io_instance_callback_2_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1193;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11942;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11940;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1197:
    goto corral_source_split_11950;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} ldv_io_instance_callback_2_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1196;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11948;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11946;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_1200:
    goto corral_source_split_11956;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} ldv_io_instance_callback_2_21($u20, in_$p17);
    goto SeqInstr_1199;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11954;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11952;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_1203:
    goto corral_source_split_11962;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} ldv_io_instance_callback_2_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1202;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11960;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11958;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} ldv_io_instance_callback_2_17($u22, in_$p17, $u2);
    goto corral_source_split_11968;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11966;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11964;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_1206:
    goto corral_source_split_11974;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} ldv_io_instance_callback_2_4($u13, in_$p17);
    goto SeqInstr_1205;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11972;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11970;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb84_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_2_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_2_loop_$bb10(in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.18, $M.17, $M.19, $CurrAddr, $M.1, $M.2, assertsPassed, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;



implementation ldv_struct_md_personality_io_instance_2_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11853;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb12_dummy;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_11874;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} out_$i32 := ldv_undef_int();
    call {:si_unique_call 2588} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_11873;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1209:
    goto corral_source_split_11983;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} ldv_io_instance_release_2_2(out_$p63, in_$p17, out_$p64);
    goto SeqInstr_1208;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_11982;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_11981;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p7, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11980;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i58 == 1;
    goto corral_source_split_11978;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 17);
    goto corral_source_split_11976;

  $bb76:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i40;
    assume true;
    goto $bb75, $bb76;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i40, 16);
    goto corral_source_split_11970;

  $bb72:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i40, 15);
    goto corral_source_split_11964;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i40, 14);
    goto corral_source_split_11958;

  $bb64:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i40, 13);
    goto corral_source_split_11952;

  $bb60:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i40, 12);
    goto corral_source_split_11946;

  $bb56:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i40, 11);
    goto corral_source_split_11940;

  $bb52:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i40, 10);
    goto corral_source_split_11934;

  $bb48:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 9);
    goto corral_source_split_11928;

  $bb44:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i40, 8);
    goto corral_source_split_11922;

  $bb40:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 7);
    goto corral_source_split_11916;

  $bb36:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 6);
    goto corral_source_split_11910;

  $bb32:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 5);
    goto corral_source_split_11904;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 4);
    goto corral_source_split_11898;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 3);
    goto corral_source_split_11892;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i40, 2);
    goto corral_source_split_11882;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_11871;

  $bb10:
    call out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61 := ldv_struct_md_personality_io_instance_2_loop_$bb10(in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} out_$i40 := ldv_undef_int();
    call {:si_unique_call 2586} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_11870;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb84:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1176:
    goto corral_source_split_11880;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} ldv_io_instance_callback_2_41($u10, in_$p17);
    goto SeqInstr_1175;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_11878;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_free(out_$p61);
    goto corral_source_split_11890;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_11889;

  SeqInstr_1179:
    goto corral_source_split_11888;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} ldv_io_instance_callback_2_38($u11, in_$p17, $u0, out_$p60, $u2);
    goto SeqInstr_1178;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_11887;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} out_$p59 := ldv_xmalloc(4);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_11884;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} ldv_io_instance_callback_2_37($u12, in_$p19, in_$p17);
    goto corral_source_split_11896;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_11894;

  SeqInstr_1182:
    goto corral_source_split_11902;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_io_instance_callback_2_36($u13, in_$p17);
    goto SeqInstr_1181;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_11900;

  SeqInstr_1185:
    goto corral_source_split_11908;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} ldv_io_instance_callback_2_35($u13, in_$p17);
    goto SeqInstr_1184;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_11906;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_io_instance_callback_2_32($u14, in_$p17, $u0, $u2);
    goto corral_source_split_11914;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i46 == 1;
    goto corral_source_split_11912;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} ldv_io_instance_callback_2_29($u15, in_$p17, $u0);
    goto corral_source_split_11920;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i47 == 1;
    goto corral_source_split_11918;

  SeqInstr_1188:
    goto corral_source_split_11926;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_io_instance_callback_2_26($u16, in_$p17, $u2);
    goto SeqInstr_1187;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i48 == 1;
    goto corral_source_split_11924;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} ldv_io_instance_callback_2_25($u17, in_$p17, in_$p13, in_$p11);
    goto corral_source_split_11932;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i49 == 1;
    goto corral_source_split_11930;

  SeqInstr_1191:
    goto corral_source_split_11938;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} ldv_io_instance_callback_2_24($u18, in_$p17, in_$p9);
    goto SeqInstr_1190;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i50 == 1;
    goto corral_source_split_11936;

  SeqInstr_1194:
    goto corral_source_split_11944;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} ldv_io_instance_callback_2_23($u19, in_$p17, in_$p15);
    goto SeqInstr_1193;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i51 == 1;
    goto corral_source_split_11942;

  SeqInstr_1197:
    goto corral_source_split_11950;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} ldv_io_instance_callback_2_22($u19, in_$p17, in_$p15);
    goto SeqInstr_1196;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i52 == 1;
    goto corral_source_split_11948;

  SeqInstr_1200:
    goto corral_source_split_11956;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} ldv_io_instance_callback_2_21($u20, in_$p17);
    goto SeqInstr_1199;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i53 == 1;
    goto corral_source_split_11954;

  SeqInstr_1203:
    goto corral_source_split_11962;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} ldv_io_instance_callback_2_20($u21, in_$p17, in_$p15);
    goto SeqInstr_1202;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_11960;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} ldv_io_instance_callback_2_17($u22, in_$p17, $u2);
    goto corral_source_split_11968;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i55 == 1;
    goto corral_source_split_11966;

  SeqInstr_1206:
    goto corral_source_split_11974;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} ldv_io_instance_callback_2_4($u13, in_$p17);
    goto SeqInstr_1205;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i56 == 1;
    goto corral_source_split_11972;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_assume(out_$i29);
    goto corral_source_split_11863;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    goto corral_source_split_11862;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i25, 0);
    goto corral_source_split_11861;

  $bb8:
    assume out_$i27 == 1;
    goto corral_source_split_11860;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_11858;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2582} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_11857;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} out_$i25 := ldv_filter_err_code(out_$i24);
    call {:si_unique_call 2580} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_11856;

  SeqInstr_1173:
    call {:si_unique_call 2578} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11855;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} out_$i24 := ldv_io_instance_probe_2_11(out_$p23, in_$p17);
    goto SeqInstr_1172;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_11854;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} ldv_assume(out_$i31);
    goto corral_source_split_11868;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_11867;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i25, 0);
    goto corral_source_split_11866;

  $bb9:
    assume !(out_$i27 == 1);
    goto corral_source_split_11865;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64 := ldv_struct_md_personality_io_instance_2_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure ldv_struct_md_personality_io_instance_2_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref);
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr, $M.18, $M.17, $M.19, $M.2, $M.21, $M.23, $M.22, $M.14, $M.12, $M.29, $M.49, $M.45, $M.27, $M.38;


