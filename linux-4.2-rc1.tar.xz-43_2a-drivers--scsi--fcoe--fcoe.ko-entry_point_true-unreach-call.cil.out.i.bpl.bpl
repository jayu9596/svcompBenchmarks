var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.5: [ref]i16;

var $M.7: [ref]i16;

var $M.9: [ref]i16;

var $M.11: [ref]i16;

var $M.13: [ref]i8;

var $M.14: ref;

var $M.15: i32;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: [ref]i64;

var $M.26: [ref]i32;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i32;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i16;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i64;

var $M.42: ref;

var $M.43: ref;

var $M.50: i32;

var $M.51: ref;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: ref;

var $M.57: i32;

var $M.58: ref;

var $M.59: i32;

var $M.60: ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.91: [ref]i8;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]i32;

var $M.119: [ref]i32;

var $M.120: [ref]i32;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $M.123: [ref]i8;

var $M.124: [ref]i8;

var $M.125: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 586877);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const fcoe_sw_transport_group0: ref;

axiom fcoe_sw_transport_group0 == $sub.ref(0, 2060);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 3088);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 4120);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 5148);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 6180);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 7208);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 8240);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 9268);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 10300);

const fcoe_shost_template_group0: ref;

axiom fcoe_shost_template_group0 == $sub.ref(0, 11332);

const fcoe_shost_template_group1: ref;

axiom fcoe_shost_template_group1 == $sub.ref(0, 12364);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 13392);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 14424);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 15452);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 16484);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 17512);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 18544);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 19572);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 20604);

const fcoe_nport_fc_functions_group0: ref;

axiom fcoe_nport_fc_functions_group0 == $sub.ref(0, 21636);

const fcoe_nport_fc_functions_group1: ref;

axiom fcoe_nport_fc_functions_group1 == $sub.ref(0, 22668);

const fcoe_nport_fc_functions_group2: ref;

axiom fcoe_nport_fc_functions_group2 == $sub.ref(0, 23700);

const fcoe_sysfs_templ_group0: ref;

axiom fcoe_sysfs_templ_group0 == $sub.ref(0, 24732);

const fcoe_sysfs_templ_group1: ref;

axiom fcoe_sysfs_templ_group1 == $sub.ref(0, 25764);

const fcoe_libfc_fcn_templ_group0: ref;

axiom fcoe_libfc_fcn_templ_group0 == $sub.ref(0, 26796);

const fcoe_libfc_fcn_templ_group1: ref;

axiom fcoe_libfc_fcn_templ_group1 == $sub.ref(0, 27828);

const fcoe_libfc_fcn_templ_group2: ref;

axiom fcoe_libfc_fcn_templ_group2 == $sub.ref(0, 28860);

const fcoe_vport_fc_functions_group0: ref;

axiom fcoe_vport_fc_functions_group0 == $sub.ref(0, 29892);

const fcoe_vport_fc_functions_group1: ref;

axiom fcoe_vport_fc_functions_group1 == $sub.ref(0, 30924);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 31952);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 32980);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 34008);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 35036);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 36064);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 37092);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 38120);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 39148);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 40176);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 41204);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 42232);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 43260);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 44288);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 45316);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 46344);

const fcoe_debug_logging: ref;

axiom fcoe_debug_logging == $sub.ref(0, 47372);

const __pcpu_unique_fcoe_percpu: ref;

axiom __pcpu_unique_fcoe_percpu == $sub.ref(0, 48397);

const fcoe_percpu: ref;

axiom fcoe_percpu == $sub.ref(0, 49541);

const fcoe_vport_fc_functions: ref;

axiom fcoe_vport_fc_functions == $sub.ref(0, 50789);

const fcoe_nport_fc_functions: ref;

axiom fcoe_nport_fc_functions == $sub.ref(0, 52037);

const fcoe_sw_transport: ref;

axiom fcoe_sw_transport == $sub.ref(0, 53149);

const fcoe_cpu_notifier: ref;

axiom fcoe_cpu_notifier == $sub.ref(0, 54197);

const fcoe_notifier: ref;

axiom fcoe_notifier == $sub.ref(0, 55245);

const dcb_notifier: ref;

axiom dcb_notifier == $sub.ref(0, 56293);

const fcoe_sysfs_templ: ref;

axiom fcoe_sysfs_templ == $sub.ref(0, 57397);

const fcoe_wq: ref;

axiom fcoe_wq == $sub.ref(0, 58429);

const fcoe_ddp_min: ref;

axiom fcoe_ddp_min == $sub.ref(0, 59457);

const fcoe_libfc_fcn_templ: ref;

axiom fcoe_libfc_fcn_templ == $sub.ref(0, 60753);

const fcoe_nport_scsi_transport: ref;

axiom fcoe_nport_scsi_transport == $sub.ref(0, 61785);

const fcoe_vport_scsi_transport: ref;

axiom fcoe_vport_scsi_transport == $sub.ref(0, 62817);

const fcoe_hostlist: ref;

axiom fcoe_hostlist == $sub.ref(0, 63857);

const fcoe_shost_template: ref;

axiom fcoe_shost_template == $sub.ref(0, 65217);

const fcoe_flush_completion: ref;

axiom fcoe_flush_completion == $sub.ref(0, 66337);

const fcoe_config_mutex: ref;

axiom fcoe_config_mutex == $sub.ref(0, 67521);

const .str: ref;

axiom .str == $sub.ref(0, 68573);

const {:count 18} .str.1: ref;

axiom .str.1 == $sub.ref(0, 69615);

const {:count 34} .str.5: ref;

axiom .str.5 == $sub.ref(0, 70673);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 12} .str.17: ref;

axiom .str.17 == $sub.ref(0, 71709);

const {:count 5} .str.18: ref;

axiom .str.18 == $sub.ref(0, 72738);

const {:count 24} .str.34: ref;

axiom .str.34 == $sub.ref(0, 73786);

const {:count 203} .str.53: ref;

axiom .str.53 == $sub.ref(0, 75013);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 24} .str.54: ref;

axiom .str.54 == $sub.ref(0, 76061);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const init_net: ref;

axiom init_net == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 50} .str.36: ref;

axiom .str.36 == $sub.ref(0, 77135);

const {:count 39} .str.37: ref;

axiom .str.37 == $sub.ref(0, 78198);

const {:count 41} .str.38: ref;

axiom .str.38 == $sub.ref(0, 79263);

const {:count 35} .str.21: ref;

axiom .str.21 == $sub.ref(0, 80322);

const {:count 42} .str.22: ref;

axiom .str.22 == $sub.ref(0, 81388);

const {:count 42} .str.23: ref;

axiom .str.23 == $sub.ref(0, 82454);

const {:count 40} .str.68: ref;

axiom .str.68 == $sub.ref(0, 83518);

const {:count 41} .str.69: ref;

axiom .str.69 == $sub.ref(0, 84583);

const {:count 45} .str.55: ref;

axiom .str.55 == $sub.ref(0, 85652);

const {:count 44} .str.56: ref;

axiom .str.56 == $sub.ref(0, 86720);

const {:count 14} .str.59: ref;

axiom .str.59 == $sub.ref(0, 87758);

const {:count 30} .str.60: ref;

axiom .str.60 == $sub.ref(0, 88812);

const {:count 7} .str.49: ref;

axiom .str.49 == $sub.ref(0, 89843);

const {:count 86} .str.48: ref;

axiom .str.48 == $sub.ref(0, 90953);

const {:count 95} .str.61: ref;

axiom .str.61 == $sub.ref(0, 92072);

const {:count 51} .str.63: ref;

axiom .str.63 == $sub.ref(0, 93147);

const {:count 38} .str.64: ref;

axiom .str.64 == $sub.ref(0, 94209);

const {:count 23} .str.62: ref;

axiom .str.62 == $sub.ref(0, 95256);

const {:count 22} .str.24: ref;

axiom .str.24 == $sub.ref(0, 96302);

const {:count 40} .str.39: ref;

axiom .str.39 == $sub.ref(0, 97366);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 61} .str.3: ref;

axiom .str.3 == $sub.ref(0, 98451);

const {:count 29} .str.8: ref;

axiom .str.8 == $sub.ref(0, 99504);

const {:count 46} .str.9: ref;

axiom .str.9 == $sub.ref(0, 100574);

const {:count 22} .str.10: ref;

axiom .str.10 == $sub.ref(0, 101620);

const {:count 56} .str.11: ref;

axiom .str.11 == $sub.ref(0, 102700);

const {:count 53} .str.12: ref;

axiom .str.12 == $sub.ref(0, 103777);

const {:count 57} .str.13: ref;

axiom .str.13 == $sub.ref(0, 104858);

const {:count 56} .str.14: ref;

axiom .str.14 == $sub.ref(0, 105938);

const {:count 56} .str.15: ref;

axiom .str.15 == $sub.ref(0, 107018);

const {:count 39} .str.16: ref;

axiom .str.16 == $sub.ref(0, 108081);

const {:count 62} .str.31: ref;

axiom .str.31 == $sub.ref(0, 109167);

const {:count 75} .str.32: ref;

axiom .str.32 == $sub.ref(0, 110266);

const {:count 56} .str.33: ref;

axiom .str.33 == $sub.ref(0, 111346);

const {:count 57} .str.28: ref;

axiom .str.28 == $sub.ref(0, 112427);

const {:count 3} .str.29: ref;

axiom .str.29 == $sub.ref(0, 113454);

const {:count 25} .str.30: ref;

axiom .str.30 == $sub.ref(0, 114503);

const {:count 54} .str.25: ref;

axiom .str.25 == $sub.ref(0, 115581);

const {:count 15} .str.26: ref;

axiom .str.26 == $sub.ref(0, 116620);

const {:count 4} .str.27: ref;

axiom .str.27 == $sub.ref(0, 117648);

const {:count 42} .str.20: ref;

axiom .str.20 == $sub.ref(0, 118714);

const {:count 33} .str.2: ref;

axiom .str.2 == $sub.ref(0, 119771);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 24} .str.4: ref;

axiom .str.4 == $sub.ref(0, 120819);

const {:count 52} .str.40: ref;

axiom .str.40 == $sub.ref(0, 121895);

const {:count 39} .str.41: ref;

axiom .str.41 == $sub.ref(0, 122958);

const {:count 60} .str.42: ref;

axiom .str.42 == $sub.ref(0, 124042);

const {:count 44} .str.43: ref;

axiom .str.43 == $sub.ref(0, 125110);

const {:count 38} .str.47: ref;

axiom .str.47 == $sub.ref(0, 126172);

const {:count 41} .str.50: ref;

axiom .str.50 == $sub.ref(0, 127237);

const {:count 48} .str.51: ref;

axiom .str.51 == $sub.ref(0, 128309);

const fc_cpu_mask: ref;

axiom fc_cpu_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 97} .str.52: ref;

axiom .str.52 == $sub.ref(0, 129430);

const {:count 25} .str.44: ref;

axiom .str.44 == $sub.ref(0, 130479);

const {:count 44} .str.46: ref;

axiom .str.46 == $sub.ref(0, 131547);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 42} .str.45: ref;

axiom .str.45 == $sub.ref(0, 132613);

const {:count 59} .str.6: ref;

axiom .str.6 == $sub.ref(0, 133696);

const {:count 37} .str.7: ref;

axiom .str.7 == $sub.ref(0, 134757);

const {:count 20} .str.35: ref;

axiom .str.35 == $sub.ref(0, 135801);

const {:count 7} .str.57: ref;

axiom .str.57 == $sub.ref(0, 136832);

const {:count 67} .str.58: ref;

axiom .str.58 == $sub.ref(0, 137923);

const {:count 45} .str.65: ref;

axiom .str.65 == $sub.ref(0, 138992);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 140024);

const {:count 3} .str.1.102: ref;

axiom .str.1.102 == $sub.ref(0, 141051);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 142089);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 143117);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 144149);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 145181);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const fc_queuecommand: ref;

axiom fc_queuecommand == $sub.ref(0, 146213);

procedure fc_queuecommand($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_queuecommand($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fc_eh_abort: ref;

axiom fc_eh_abort == $sub.ref(0, 147245);

procedure fc_eh_abort($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_eh_abort($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_eh_device_reset: ref;

axiom fc_eh_device_reset == $sub.ref(0, 148277);

procedure fc_eh_device_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_eh_device_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 6} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_eh_host_reset: ref;

axiom fc_eh_host_reset == $sub.ref(0, 149309);

procedure fc_eh_host_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_eh_host_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    call {:si_unique_call 7} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 8} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_slave_alloc: ref;

axiom fc_slave_alloc == $sub.ref(0, 150341);

procedure fc_slave_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_slave_alloc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    call {:si_unique_call 9} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 10} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_change_queue_depth: ref;

axiom scsi_change_queue_depth == $sub.ref(0, 151373);

procedure scsi_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 11} {:cexpr "scsi_change_queue_depth:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 1} true;
    call {:si_unique_call 12} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 13} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fcoe_xmit: ref;

axiom fcoe_xmit == $sub.ref(0, 152405);

procedure fcoe_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $M.5, $M.7, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i82: i32;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $p109: ref;
  var $p111: ref;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i1;
  var $i118: i8;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i123: i16;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i149: i16;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i16;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i16;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i16;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $i221: i1;
  var $i222: i1;
  var $i223: i1;
  var $i224: i1;
  var $i225: i1;
  var $i226: i1;
  var $i227: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i228: i32;
  var $i232: i64;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i64;
  var $i244: i64;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i30: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_41: i64;
  var vslice_dummy_var_42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p2 := lport_priv($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 3);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 15} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_41 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p24 := fc_frame_header_get($p1);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(800, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 23} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    call {:si_unique_call 26} {:cexpr "sof"} boogie_si_record_i8($i45);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    call {:si_unique_call 27} {:cexpr "eof"} boogie_si_record_i8($i50);
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, 8);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 4);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i56 := $udiv.i64($i55, 4);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    call {:si_unique_call 28} {:cexpr "wlen"} boogie_si_record_i32($i57);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(1144, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i65 := ldv__builtin_expect($i64, 1);
    call {:si_unique_call 30} {:cexpr "tmp___4"} boogie_si_record_i64($i65);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, $sub.i32(0, 1537));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i85);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i86 := fcoe_fc_crc($p1);
    call {:si_unique_call 34} {:cexpr "crc"} boogie_si_record_i32($i86);
    assume {:verifier.code 0} true;
    $i82 := $i86;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i87 := skb_is_nonlinear($p25);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    call {:si_unique_call 36} {:cexpr "tmp___11"} boogie_si_record_i8($i88);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i89 == 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p111 := skb_put($p25, 8);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p110 := $p111;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p110);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 45} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p113, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p110, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, $i50);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i115 := $xor.i32($i82, $sub.i32(0, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p110, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i117 := skb_is_nonlinear($p25);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i8($i117);
    call {:si_unique_call 47} {:cexpr "tmp___12"} boogie_si_record_i8($i118);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i121 := $add.i32(14, 14);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_42 := skb_push($p25, $i121);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} skb_reset_mac_header($p25);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} skb_reset_network_header($p25);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16(14);
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p124, $i123);
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, 1673);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(153, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(156, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i128);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $p151);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p153 := eth_hdr($p25);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, 1673);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p153, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(510, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 56} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p156, $p158, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(506, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(502, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i169 := $load.i16($M.0, $p168);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i170 := $zext.i16.i32($i169);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 65535);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i32($i171);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i172);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i174 := ldv__builtin_expect($i173, 0);
    call {:si_unique_call 59} {:cexpr "tmp___14"} boogie_si_record_i64($i174);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i175 == 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p153, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 61} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p181, $p183, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p153);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p184, $mul.ref(1, 14));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 62} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p186, 0, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p184, $mul.ref(1, 14)), $mul.ref(13, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p187, $i45);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(1144, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p211 := skb_end_pointer($p25);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p213, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p214 := skb_end_pointer($p25);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p216, 0);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    call {:si_unique_call 67} $i219 := devirtbounce(0, $p218);
    call {:si_unique_call 68} {:cexpr "__ptr"} boogie_si_record_i64($i219);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} __preempt_count_add(1);
    call {:si_unique_call 70} devirtbounce.1(0);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i220 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    $i221 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    $i222 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} __bad_size_call_parameter();
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i228 := $u0;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i228);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i232, 8));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i234 := $load.i64($M.0, $p233);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i235 := $add.i64($i234, $i219);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p236 := $i2p.i64.ref($i235);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.0, $p237);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i239 := $add.i64($i238, 1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p236, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p240, $i239);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p236, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i242 := $load.i64($M.0, $p241);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i57);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i244 := $add.i64($i242, $i243);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p236, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p245, $i244);
    call {:si_unique_call 79} devirtbounce.1(0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} __preempt_count_sub(1);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, $p0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} fcoe_port_send($p3, $p25);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb49:
    assume $i222 == 1;
    call {:si_unique_call 71} $i231 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 72} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i231);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i228 := $i231;
    goto $bb61;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i221 == 1;
    assume {:verifier.code 0} true;
    $i223 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb51;

  $bb52:
    assume $i223 == 1;
    call {:si_unique_call 73} $i230 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 74} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i230);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i228 := $i230;
    goto $bb61;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $i224 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i225 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb51;

  $bb56:
    assume $i225 == 1;
    call {:si_unique_call 75} $i229 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 76} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i229);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i228 := $i229;
    goto $bb61;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    $i226 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i226 == 1);
    goto $bb51;

  $bb58:
    assume $i226 == 1;
    call {:si_unique_call 77} $i227 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 78} {:cexpr "pfo_ret__"} boogie_si_record_i32($i227);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i228 := $i227;
    goto $bb61;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i192 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i197 := $load.i16($M.0, $p196);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb40;

  $bb41:
    assume $i199 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p200 := skb_end_pointer($p25);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p202, 32);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p203 := skb_end_pointer($p25);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i208 := $load.i16($M.0, $p207);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p203);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p210, $i208);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i175 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p153, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 60} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p177, $p179, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i162 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p153, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p164, $mul.ref(3, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 57} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p165, $p167, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i135 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i140 := $and.i64($i139, 128);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb28;

  $bb29:
    assume $i141 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p144, $p143);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i147 := vlan_dev_vlan_id($p146);
    call {:si_unique_call 53} {:cexpr "tmp___13"} boogie_si_record_i16($i147);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} __vlan_hwaccel_put_tag($p25, 129, $i149);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i119 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p110);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __kunmap_atomic($p120);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i89 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i90 := fcoe_alloc_paged_crc_eof($p25, 8);
    call {:si_unique_call 38} {:cexpr "tmp___5"} boogie_si_record_i32($i90);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p92 := skb_end_pointer($p25);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p93 := skb_end_pointer($p25);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p92);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p93);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.2, $p98);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, $sub.i64(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p96, $mul.ref($i101, 16));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p103 := skb_frag_page($p102);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p104 := kmap_atomic($p103);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p96, $mul.ref($i101, 16)), $mul.ref(8, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p105, $mul.ref($i108, 8));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p110 := $p109;
    goto $bb22;

  $bb19:
    assume $i91 == 1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} kfree_skb($p25);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb6;

  $bb14:
    assume $i66 == 1;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, $sub.i32(0, 1537));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 512);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i70);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i71 := skb_headroom($p25);
    call {:si_unique_call 32} {:cexpr "tmp___3"} boogie_si_record_i32($i71);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $i72);
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i78);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb16;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i39 := fcoe_ctlr_els_send($p8, $p0, $p25);
    call {:si_unique_call 25} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} kfree_skb($p25);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} warn_slowpath_null(.str.53, 1604);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_elsct_send: ref;

axiom fcoe_elsct_send == $sub.ref(0, 153437);

procedure fcoe_elsct_send($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_elsct_send($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "fcoe_elsct_send:arg:did"} boogie_si_record_i32($i1);
    call {:si_unique_call 84} {:cexpr "fcoe_elsct_send:arg:op"} boogie_si_record_i32($i3);
    call {:si_unique_call 85} {:cexpr "fcoe_elsct_send:arg:timeout"} boogie_si_record_i32($i6);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p7 := lport_priv($p0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p14 := fc_frame_header_get($p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i3, 81);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i3, 81);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p34 := fc_elsct_send($p0, $i1, $p2, $i3, $p4, $p5, $i6);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p27 := $p34;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(1144, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p13);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p26 := fc_elsct_send($p0, $i1, $p2, $i3, fcoe_flogi_resp, $p25, $i6);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb18;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i30 := ntoh24($p29);
    call {:si_unique_call 89} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 16777214);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p33 := fc_elsct_send($p0, $i1, $p2, $i3, fcoe_logo_resp, $p32, $i6);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p27 := $p33;
    goto $bb18;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fcoe_ddp_setup: ref;

axiom fcoe_ddp_setup == $sub.ref(0, 154469);

procedure fcoe_ddp_setup($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ddp_setup($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "fcoe_ddp_setup:arg:xid"} boogie_si_record_i16($i1);
    call {:si_unique_call 94} {:cexpr "fcoe_ddp_setup:arg:sgc"} boogie_si_record_i32($i3);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p4 := fcoe_netdev($p0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 528)), $mul.ref(288, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 528)), $mul.ref(288, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 96} $i17 := devirtbounce.3($p14, $p4, $i16, $p2, $i3);
    call {:si_unique_call 97} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const fcoe_ddp_done: ref;

axiom fcoe_ddp_done == $sub.ref(0, 155501);

procedure fcoe_ddp_done($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.39, $M.40, $M.25, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.24, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation fcoe_ddp_done($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "fcoe_ddp_done:arg:xid"} boogie_si_record_i16($i1);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p2 := fcoe_netdev($p0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(296, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 528)), $mul.ref(296, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 100} $i15 := devirtbounce.4($p12, $p2, $i14);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 101} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const fcoe_ddp_target: ref;

axiom fcoe_ddp_target == $sub.ref(0, 156533);

procedure fcoe_ddp_target($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ddp_target($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "fcoe_ddp_target:arg:xid"} boogie_si_record_i16($i1);
    call {:si_unique_call 103} {:cexpr "fcoe_ddp_target:arg:sgc"} boogie_si_record_i32($i3);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p4 := fcoe_netdev($p0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 528)), $mul.ref(304, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 528)), $mul.ref(304, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 105} $i17 := devirtbounce.3($p14, $p4, $i16, $p2, $i3);
    call {:si_unique_call 106} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const fcoe_get_lesb: ref;

axiom fcoe_get_lesb == $sub.ref(0, 157565);

procedure fcoe_get_lesb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fcoe_get_lesb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_set_port_id: ref;

axiom fcoe_set_port_id == $sub.ref(0, 158597);

procedure fcoe_set_port_id($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation fcoe_set_port_id($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "fcoe_set_port_id:arg:port_id"} boogie_si_record_i32($i1);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p3 := lport_priv($p0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i12 := fc_frame_payload_op($p2);
    call {:si_unique_call 110} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 4);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_43 := fcoe_ctlr_recv_flogi($p9, $p0, $p2);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const lport_priv: ref;

axiom lport_priv == $sub.ref(0, 159629);

procedure lport_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lport_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fc_frame_payload_op: ref;

axiom fc_frame_payload_op == $sub.ref(0, 160661);

procedure fc_frame_payload_op($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation fc_frame_payload_op($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i8;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p1 := fc_frame_payload_get($p0, 1);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const fcoe_ctlr_recv_flogi: ref;

axiom fcoe_ctlr_recv_flogi == $sub.ref(0, 161693);

procedure fcoe_ctlr_recv_flogi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ctlr_recv_flogi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fc_frame_payload_get: ref;

axiom fc_frame_payload_get == $sub.ref(0, 162725);

procedure fc_frame_payload_get($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation fc_frame_payload_get($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "fc_frame_payload_get:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i1, 24);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i7 := $uge.i64($i5, $i6);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p8 := fc_frame_header_get($p0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;
}



const fc_frame_header_get: ref;

axiom fc_frame_header_get == $sub.ref(0, 163757);

procedure fc_frame_header_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_frame_header_get($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var vslice_dummy_var_44: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i3, 23);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 117} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 119} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_44 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p15 := __fc_frame_header_get($p0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} warn_slowpath_null(.str.34, 173);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 164789);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 124} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 165821);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    return;
}



const __fc_frame_header_get: ref;

axiom __fc_frame_header_get == $sub.ref(0, 166853);

procedure __fc_frame_header_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __fc_frame_header_get($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(216, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fcoe_netdev: ref;

axiom fcoe_netdev == $sub.ref(0, 167885);

procedure fcoe_netdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_netdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p1 := lport_priv($p0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const fcoe_flogi_resp: ref;

axiom fcoe_flogi_resp == $sub.ref(0, 168917);

procedure fcoe_flogi_resp($p0: ref, $p1: ref, $p2: ref);



const fc_elsct_send: ref;

axiom fc_elsct_send == $sub.ref(0, 169949);

procedure fc_elsct_send($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fc_elsct_send($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} {:cexpr "fc_elsct_send:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 128} {:cexpr "fc_elsct_send:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 129} {:cexpr "fc_elsct_send:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p7 := external_alloc();
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const ntoh24: ref;

axiom ntoh24 == $sub.ref(0, 170981);

procedure ntoh24($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ntoh24($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 16);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 8);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i3, $i7);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i8, $i11);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const fcoe_logo_resp: ref;

axiom fcoe_logo_resp == $sub.ref(0, 172013);

procedure fcoe_logo_resp($p0: ref, $p1: ref, $p2: ref);



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 173045);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i1 := ldv_is_err($p0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fcoe_update_src_mac: ref;

axiom fcoe_update_src_mac == $sub.ref(0, 174077);

procedure fcoe_update_src_mac($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_update_src_mac($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p2 := lport_priv($p0);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i9 := is_zero_ether_addr($p8);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 135} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i19 := is_zero_ether_addr($p1);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 138} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 140} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p28, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_46 := dev_uc_add($p25, $p1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} vslice_dummy_var_45 := dev_uc_del($p15, $p17);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const fc_lport_logo_resp: ref;

axiom fc_lport_logo_resp == $sub.ref(0, 175109);

procedure fc_lport_logo_resp($p0: ref, $p1: ref, $p2: ref);



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 176141);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const dev_uc_del: ref;

axiom dev_uc_del == $sub.ref(0, 177173);

procedure dev_uc_del($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_uc_del($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_uc_add: ref;

axiom dev_uc_add == $sub.ref(0, 178205);

procedure dev_uc_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_uc_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 179237);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 180269);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 181301);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fc_lport_flogi_resp: ref;

axiom fc_lport_flogi_resp == $sub.ref(0, 182333);

procedure fc_lport_flogi_resp($p0: ref, $p1: ref, $p2: ref);



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 183365);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_ctlr_els_send: ref;

axiom fcoe_ctlr_els_send == $sub.ref(0, 184397);

procedure fcoe_ctlr_els_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ctlr_els_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 185429);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const fcoe_fc_crc: ref;

axiom fcoe_fc_crc == $sub.ref(0, 186461);

procedure fcoe_fc_crc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_fc_crc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 187493);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fcoe_alloc_paged_crc_eof: ref;

axiom fcoe_alloc_paged_crc_eof == $sub.ref(0, 188525);

procedure fcoe_alloc_paged_crc_eof($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_alloc_paged_crc_eof($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "fcoe_alloc_paged_crc_eof:arg:tlen"} boogie_si_record_i32($i1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __preempt_count_add(1);
    call {:si_unique_call 153} devirtbounce.1(0);
    call {:si_unique_call 154} $i2 := devirtbounce.5(0, this_cpu_off, fcoe_percpu);
    call {:si_unique_call 155} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i2);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i4 := fcoe_get_paged_crc_eof($p0, $i1, $p3);
    call {:si_unique_call 157} {:cexpr "rc"} boogie_si_record_i32($i4);
    call {:si_unique_call 158} devirtbounce.1(0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} __preempt_count_sub(1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 189557);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 190589);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 191621);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} __preempt_count_add(1);
    call {:si_unique_call 161} devirtbounce.1(0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} pagefault_disable();
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p1 := lowmem_page_address($p0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 192653);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p2 := external_alloc();
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 193685);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 194717);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} pagefault_enable();
    call {:si_unique_call 167} devirtbounce.1(0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} __preempt_count_sub(1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 195749);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p2 := external_alloc();
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_reset_mac_header: ref;

axiom skb_reset_mac_header == $sub.ref(0, 196781);

procedure skb_reset_mac_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_mac_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    return;
}



const skb_reset_network_header: ref;

axiom skb_reset_network_header == $sub.ref(0, 197813);

procedure skb_reset_network_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_network_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(196, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    return;
}



const vlan_dev_vlan_id: ref;

axiom vlan_dev_vlan_id == $sub.ref(0, 198845);

procedure vlan_dev_vlan_id($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation vlan_dev_vlan_id($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i1 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 199877);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} {:cexpr "__vlan_hwaccel_put_tag:arg:vlan_proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 174} {:cexpr "__vlan_hwaccel_put_tag:arg:vlan_tci"} boogie_si_record_i16($i2);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i2);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4096);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(170, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    return;
}



const eth_hdr: ref;

axiom eth_hdr == $sub.ref(0, 200909);

procedure eth_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation eth_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p1 := skb_mac_header($p0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 201941);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 179} devirtbounce.7(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 178} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 177} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 202973);

procedure __bad_size_call_parameter();



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 204005);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 183} devirtbounce.7(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 182} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 181} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_port_send: ref;

axiom fcoe_port_send == $sub.ref(0, 205037);

procedure fcoe_port_send($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fcoe_port_send($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i8 := fcoe_start_io($p1);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} fcoe_check_wait_queue($p11, $p1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} fcoe_check_wait_queue($p7, $p1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_check_wait_queue: ref;

axiom fcoe_check_wait_queue == $sub.ref(0, 206069);

procedure fcoe_check_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fcoe_check_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_start_io: ref;

axiom fcoe_start_io == $sub.ref(0, 207101);

procedure fcoe_start_io($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_start_io($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 188} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 189} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_mac_header: ref;

axiom skb_mac_header == $sub.ref(0, 208133);

procedure skb_mac_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_mac_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 209165);

procedure pagefault_enable();
  free requires assertsPassed;
  modifies $M.0;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} devirtbounce.1(0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} pagefault_disabled_dec();
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_disabled_dec: ref;

axiom pagefault_disabled_dec == $sub.ref(0, 210197);

procedure pagefault_disabled_dec();
  free requires assertsPassed;
  modifies $M.0;



implementation pagefault_disabled_dec()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var vslice_dummy_var_47: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p0 := get_current();
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p5 := get_current();
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 194} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 196} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_47 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} warn_slowpath_null(.str.54, 15);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 211229);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p0 := devirtbounce.8(0, current_task);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 212261);

procedure pagefault_disable();
  free requires assertsPassed;
  modifies $M.0;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} pagefault_disabled_inc();
    call {:si_unique_call 201} devirtbounce.1(0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 213293);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pagefault_disabled_inc: ref;

axiom pagefault_disabled_inc == $sub.ref(0, 214325);

procedure pagefault_disabled_inc();
  free requires assertsPassed;
  modifies $M.0;



implementation pagefault_disabled_inc()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p0 := get_current();
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_get_paged_crc_eof: ref;

axiom fcoe_get_paged_crc_eof == $sub.ref(0, 215357);

procedure fcoe_get_paged_crc_eof($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_get_paged_crc_eof($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 203} {:cexpr "fcoe_get_paged_crc_eof:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fcoe_ctlr_get_lesb: ref;

axiom fcoe_ctlr_get_lesb == $sub.ref(0, 216389);

procedure fcoe_ctlr_get_lesb($p0: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_get_lesb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_ctlr_set_fip_mode: ref;

axiom fcoe_ctlr_set_fip_mode == $sub.ref(0, 217421);

procedure fcoe_ctlr_set_fip_mode($p0: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_set_fip_mode($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_ctlr_enabled: ref;

axiom fcoe_ctlr_enabled == $sub.ref(0, 218453);

procedure fcoe_ctlr_enabled($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ctlr_enabled($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p1 := fcoe_ctlr_device_priv($p0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 784)), $mul.ref(8, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p5 := fcoe_netdev($p4);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 524);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i14 := fcoe_disable($p5);
    call {:si_unique_call 209} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb11;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i12 := fcoe_enable($p5);
    call {:si_unique_call 211} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb11;
}



const fcoe_fcf_get_selected: ref;

axiom fcoe_fcf_get_selected == $sub.ref(0, 219485);

procedure fcoe_fcf_get_selected($p0: ref);
  free requires assertsPassed;



implementation fcoe_fcf_get_selected($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_fcf_get_vlan_id: ref;

axiom fcoe_fcf_get_vlan_id == $sub.ref(0, 220517);

procedure fcoe_fcf_get_vlan_id($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_fcf_get_vlan_id($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 8), 1720));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p6 := fcoe_ctlr_device_priv($p5);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p8 := fcoe_ctlr_priv($p7);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i12 := vlan_dev_vlan_id($p11);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1814, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_ctlr_device_priv: ref;

axiom fcoe_ctlr_device_priv == $sub.ref(0, 221549);

procedure fcoe_ctlr_device_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_device_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_ctlr_priv: ref;

axiom fcoe_ctlr_priv == $sub.ref(0, 222581);

procedure fcoe_ctlr_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_enable: ref;

axiom fcoe_enable == $sub.ref(0, 223613);

procedure fcoe_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} rtnl_lock();
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p1 := fcoe_hostlist_lookup_port($p0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} rtnl_unlock();
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i9 := fcoe_link_ok($p8);
    call {:si_unique_call 221} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} fcoe_ctlr_link_up($p6);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const fcoe_disable: ref;

axiom fcoe_disable == $sub.ref(0, 224645);

procedure fcoe_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} rtnl_lock();
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p1 := fcoe_hostlist_lookup_port($p0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} rtnl_unlock();
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_48 := fcoe_ctlr_link_down($p5);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} fcoe_clean_pending_queue($p8);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 225677);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 226709);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_hostlist_lookup_port: ref;

axiom fcoe_hostlist_lookup_port == $sub.ref(0, 227741);

procedure fcoe_hostlist_lookup_port($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_hostlist_lookup_port($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p6: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, fcoe_hostlist);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6 := fcoe_hostlist_lookup_port_loop_$bb4($p0, $p7, $p8, $i9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6);
    goto $bb4_last;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p16;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 228773);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_ctlr_link_down: ref;

axiom fcoe_ctlr_link_down == $sub.ref(0, 229805);

procedure fcoe_ctlr_link_down($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_ctlr_link_down($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_clean_pending_queue: ref;

axiom fcoe_clean_pending_queue == $sub.ref(0, 230837);

procedure fcoe_clean_pending_queue($p0: ref);
  free requires assertsPassed;



implementation fcoe_clean_pending_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 231869);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_link_ok: ref;

axiom fcoe_link_ok == $sub.ref(0, 232901);

procedure fcoe_link_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_link_ok($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p1 := fcoe_netdev($p0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i2 := netif_oper_up($p1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 235} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const fcoe_ctlr_link_up: ref;

axiom fcoe_ctlr_link_up == $sub.ref(0, 233933);

procedure fcoe_ctlr_link_up($p0: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_link_up($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    return;
}



const netif_oper_up: ref;

axiom netif_oper_up == $sub.ref(0, 234965);

procedure netif_oper_up($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_oper_up($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(556, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 6);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(556, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const fcoe_dcb_app_notification: ref;

axiom fcoe_dcb_app_notification == $sub.ref(0, 235997);

procedure fcoe_dcb_app_notification($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_dcb_app_notification($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i30: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $i46: i8;
  var $p47: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $i53: i8;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "fcoe_dcb_app_notification:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p11 := dev_get_by_index(init_net, $i10);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p14 := fcoe_hostlist_lookup_realdev_port($p11);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} dev_put($p11);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    call {:si_unique_call 243} {:cexpr "prio"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    $i30 := $i34;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i30, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 35092);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 35078);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 35078);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i30);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(153, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i53);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i30);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p17, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(509, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb18;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i28 := ffs($i27);
    call {:si_unique_call 241} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, $sub.i32(0, 1));
    call {:si_unique_call 242} {:cexpr "prio"} boogie_si_record_i32($i29);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_by_index: ref;

axiom dev_get_by_index == $sub.ref(0, 237029);

procedure dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "dev_get_by_index:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p2 := external_alloc();
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fcoe_hostlist_lookup_realdev_port: ref;

axiom fcoe_hostlist_lookup_realdev_port == $sub.ref(0, 238061);

procedure fcoe_hostlist_lookup_realdev_port($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_hostlist_lookup_realdev_port($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p16: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p6: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, fcoe_hostlist);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $i11, $i12, $p13, $p14, $p15, $p17, $p18, $p16, $i19, $i20, $i21, $p22, $p25, $p26, $p27, $p28, $i29, $i30, $p6 := fcoe_hostlist_lookup_realdev_port_loop_$bb4($p0, $p7, $p8, $p9, $i10, $i11, $i12, $p13, $p14, $p15, $p17, $p18, $p16, $i19, $i20, $i21, $p22, $p25, $p26, $p27, $p28, $i29, $i30, $p6);
    goto $bb4_last;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    assume {:verifier.code 0} true;
    $p16 := $p18;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p16);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p22 := $p6;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p26;
    goto $bb13_dummy;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p15 := vlan_dev_real_dev($p14);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 239093);

procedure dev_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_put($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} __bad_size_call_parameter();
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 258} devirtbounce.7(0, $p39, $sub.i32(0, 1), $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 257} devirtbounce.6(0, $p37, $p37);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 256} devirtbounce.6(0, $p34, $p34);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 255} devirtbounce.7(0, $p31, $sub.i32(0, 1), $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 254} devirtbounce.6(0, $p29, $p29);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 253} devirtbounce.6(0, $p26, $p26);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 252} devirtbounce.7(0, $p23, $sub.i32(0, 1), $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 251} devirtbounce.6(0, $p21, $p21);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 250} devirtbounce.6(0, $p18, $p18);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 249} devirtbounce.7(0, $p15, $sub.i32(0, 1), $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 248} devirtbounce.6(0, $p13, $p13);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 247} devirtbounce.6(0, $p10, $p10);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 240125);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 261} $i1 := devirtbounce.9(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 262} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vlan_dev_real_dev: ref;

axiom vlan_dev_real_dev == $sub.ref(0, 241157);

procedure vlan_dev_real_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vlan_dev_real_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p1 := external_alloc();
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_device_notification: ref;

axiom fcoe_device_notification == $sub.ref(0, 242189);

procedure fcoe_device_notification($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, $M.34, $M.35, $M.36, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_device_notification($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p11: ref;
  var $p32: ref;
  var $p10: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i33: i64;
  var $i34: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i48: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i109: i32;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $i35: i32;
  var vslice_dummy_var_49: i1;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "fcoe_device_notification:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p4 := netdev_notifier_info_to_dev($p3);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, fcoe_hostlist);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22, $p23, $p24 := $p10, $u1, $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p24);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $slt.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i64($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i66 := $M.15;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 2);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 274} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_50 := fcoe_link_speed_update($p24);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(40, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i48, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i79 == 1);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i89 := fcoe_ctlr_link_down($p23);
    call {:si_unique_call 281} {:cexpr "tmp___2"} boogie_si_record_i32($i89);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb77:
    assume $i90 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p78, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i92, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i92, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p24, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    call {:si_unique_call 283} $i100 := devirtbounce(0, $p99);
    call {:si_unique_call 284} {:cexpr "__ptr"} boogie_si_record_i64($i100);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __preempt_count_add(1);
    call {:si_unique_call 286} devirtbounce.1(0);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i101 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __bad_size_call_parameter();
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i109 := $u0;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i109);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i113, 8));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, $i100);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p117, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p121, $i120);
    call {:si_unique_call 295} devirtbounce.1(0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __preempt_count_sub(1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} fcoe_clean_pending_queue($p24);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb96:
    assume $i103 == 1;
    call {:si_unique_call 287} $i112 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 288} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i112);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i109 := $i112;
    goto $bb108;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i104 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb98;

  $bb99:
    assume $i104 == 1;
    call {:si_unique_call 289} $i111 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 290} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i111);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i109 := $i111;
    goto $bb108;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i105 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb98;

  $bb103:
    assume $i106 == 1;
    call {:si_unique_call 291} $i110 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 292} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i110);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i109 := $i110;
    goto $bb108;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb98;

  $bb105:
    assume $i107 == 1;
    call {:si_unique_call 293} $i108 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 294} {:cexpr "pfo_ret__"} boogie_si_record_i32($i108);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb108;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i94 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_54 := printk.ref(.str.38);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb80:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb87;

  $bb88:
    assume $i96 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb57:
    assume $i79 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i80 := fcoe_link_ok($p24);
    call {:si_unique_call 277} {:cexpr "tmp___3"} boogie_si_record_i32($i80);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i81 == 1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb59:
    assume $i81 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p78, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i83, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i83, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} fcoe_ctlr_link_up($p23);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb64:
    assume $i85 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_53 := printk.ref(.str.37);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i83, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb69;

  $bb70:
    assume $i87 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb53:
    assume $i72 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_52 := printk.ref.ref.i64(.str.36, $p74, $i1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} fcoe_netdev_features_change($p24, $p4);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb22:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb45;

  $bb20:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i64($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb26;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.13, $p49);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 2147483648);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.13, $p53);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 22);
    call {:si_unique_call 271} {:cexpr "mfs"} boogie_si_record_i32($i55);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, 279);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb49:
    assume $i56 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_51 := fc_set_mfs($p24, $i55);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i52 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} list_del($p58);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p61 := lport_priv($p60);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p63 := $M.14;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p62, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_49 := queue_work($p63, $p64);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb15;

  $bb18:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i64($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i64($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i44 == 1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb45;

  $bb34:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb26;

  $bb41:
    assume $i46 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb39:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb26;

  $bb43:
    assume $i47 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb15;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $i16, $p17, $p26, $p27, $p28, $p29, $i30, $i31, $p11, $p32 := fcoe_device_notification_loop_$bb4($p4, $p12, $p13, $i14, $i15, $i16, $p17, $p26, $p27, $p28, $p29, $i30, $i31, $p11, $p32);
    goto $bb4_last;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p32 := $p27;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p10 := $p32;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p27;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p22, $p23, $p24 := $p17, $p19, $p21;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;
}



const netdev_notifier_info_to_dev: ref;

axiom netdev_notifier_info_to_dev == $sub.ref(0, 243221);

procedure netdev_notifier_info_to_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_notifier_info_to_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fc_set_mfs: ref;

axiom fc_set_mfs == $sub.ref(0, 244253);

procedure fc_set_mfs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fc_set_mfs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} {:cexpr "fc_set_mfs:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 300} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 301} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 245285);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 246317);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fcoe_netdev_features_change: ref;

axiom fcoe_netdev_features_change == $sub.ref(0, 247349);

procedure fcoe_netdev_features_change($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_netdev_features_change($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i8;
  var $i43: i8;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $p70: ref;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1200, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} mutex_lock_nested($p2, 0);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 2));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 536870912);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, $sub.i8(0, 5));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i35);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 2097152);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i60, $sub.i8(0, 3));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i61);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1164, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(2940, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 9));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i89);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 0);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1200, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} mutex_unlock($p91);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, $sub.i8(0, 9));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i69 := $or.i8($i68, 8);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i69);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(2940, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i72);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i74 := $M.15;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 2);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 312} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i80 == 1;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_57 := printk.ref.ref.i32(.str.23, $p82, $i85);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i42 := $and.i8($i41, $sub.i8(0, 3));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i43 := $or.i8($i42, 2);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i43);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(2840, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1164, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i47 := $M.15;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 309} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1164, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_56 := printk.ref.ref.i32(.str.22, $p55, $i57);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, $sub.i8(0, 5));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i22 := $or.i8($i21, 4);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i22);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i23 := $M.15;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_55 := printk.ref.ref(.str.21, $p31);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, $sub.i8(0, 2));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i11 := $or.i8($i10, 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i11);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 248381);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.ref.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: i32, p.9: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: i32, p.9: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 1} true;
    call {:si_unique_call 325} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 326} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 1} true;
    call {:si_unique_call 327} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_link_speed_update: ref;

axiom fcoe_link_speed_update == $sub.ref(0, 249413);

procedure fcoe_link_speed_update($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_link_speed_update($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 250445);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 337} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 338} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} activate_work_1($p2, 2);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 251477);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 252509);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.20;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.22;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $M.22 := $i1;
    call {:si_unique_call 347} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.20 := $i1;
    call {:si_unique_call 346} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 345} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 344} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_cpu_callback: ref;

axiom fcoe_cpu_callback == $sub.ref(0, 253541);

procedure fcoe_cpu_callback($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_cpu_callback($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "fcoe_cpu_callback:arg:action"} boogie_si_record_i64($i1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 349} {:cexpr "cpu"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i1, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $M.15;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 351} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} fcoe_percpu_thread_destroy($i4);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_59 := printk.ref.i32(.str.69, $i4);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i1, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $M.15;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 353} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} fcoe_percpu_thread_create($i4);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i16 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_58 := printk.ref.i32(.str.68, $i4);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i64($i1, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const fcoe_percpu_thread_create: ref;

axiom fcoe_percpu_thread_create == $sub.ref(0, 254573);

procedure fcoe_percpu_thread_create($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24;



implementation fcoe_percpu_thread_create($i0: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "fcoe_percpu_thread_create:arg:cpu"} boogie_si_record_i32($i0);
    call {:si_unique_call 359} $i1 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 360} {:cexpr "__ptr"} boogie_si_record_i64($i1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i2, 8));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i7 := __cpu_to_node($i0);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p9 := kthread_create_on_node.ref.ref.i32.ref.i32(fcoe_percpu_receive_thread, $p8, $i7, .str.59, $i0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i11 := IS_ERR($p10);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 365} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 367} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} kthread_bind($p9, $i0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_60 := wake_up_process($p9);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} spin_lock_bh($p20);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p9);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} spin_unlock_bh($p23);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const fcoe_percpu_thread_destroy: ref;

axiom fcoe_percpu_thread_destroy == $sub.ref(0, 255605);

procedure fcoe_percpu_thread_destroy($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_percpu_thread_destroy($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i9: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p59: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p70: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p82: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i91: i64;
  var $i92: i1;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "fcoe_percpu_thread_destroy:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __preempt_count_add(1);
    call {:si_unique_call 374} devirtbounce.1(0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __bad_size_call_parameter();
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i9 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i13 := $M.15;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call {:si_unique_call 387} $i19 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 388} {:cexpr "__ptr"} boogie_si_record_i64($i19);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i20, 8));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i19);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} spin_lock_bh($p26);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} spin_unlock_bh($p35);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i0, $i9);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} spin_lock_bh($p77);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p79 := __skb_dequeue($p78);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} spin_unlock_bh($p87);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    call {:si_unique_call 407} devirtbounce.1(0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __preempt_count_sub(1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p28);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p31);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    return;

  $bb62:
    assume $i92 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} put_page($p31);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i89 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_63 := kthread_stop($p28);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb51:
    assume $i81 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p82 := $p79;
    goto $bb54;

  $bb54:
    call $p83, $i84, $i85, $p82 := fcoe_percpu_thread_destroy_loop_$bb54($p78, $p83, $i84, $i85, $p82);
    goto $bb54_last;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} kfree_skb($p82);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p83 := __skb_dequeue($p78);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i85 == 1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb56:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p82 := $p83;
    goto $bb56_dummy;

  $bb26:
    assume $i36 == 1;
    call {:si_unique_call 391} $i37 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 392} {:cexpr "__ptr___0"} boogie_si_record_i64($i37);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i9);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i38, 8));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, $i37);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} spin_lock_bh($p44);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p67 := __skb_dequeue($p66);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} spin_unlock_bh($p75);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i69 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p70 := $p67;
    goto $bb45;

  $bb45:
    call $p71, $i72, $i73, $p70 := fcoe_percpu_thread_destroy_loop_$bb45($p66, $p71, $i72, $i73, $p70);
    goto $bb45_last;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} kfree_skb($p70);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p71 := __skb_dequeue($p66);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i73 == 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p70 := $p71;
    goto $bb47_dummy;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i49 := $M.15;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 397} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p56 := __skb_dequeue($p55);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} spin_unlock_bh($p65);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p59 := $p56;
    goto $bb36;

  $bb36:
    call $p60, $p61, $i62, $i63, $p59 := fcoe_percpu_thread_destroy_loop_$bb36($p42, $p55, $p60, $p61, $i62, $i63, $p59);
    goto $bb36_last;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p42, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} __skb_queue_tail($p60, $p59);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p61 := __skb_dequeue($p55);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i63 == 1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p59 := $p61;
    goto $bb38_dummy;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_62 := printk.ref.i32.i32(.str.56, $i0, $i9);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_61 := printk.ref.i32(.str.55, $i0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb6:
    assume $i3 == 1;
    call {:si_unique_call 375} $i12 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 376} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i12);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb18;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    call {:si_unique_call 377} $i11 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 378} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i11);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb18;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    call {:si_unique_call 379} $i10 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 380} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i10);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb18;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    call {:si_unique_call 381} $i8 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 382} {:cexpr "pfo_ret__"} boogie_si_record_i32($i8);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb18;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb56_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1716;

  $bb47_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1683;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 256637);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} ldv_spin_lock();
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} ldv_spin_lock_bh_6($p0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 257669);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_spin_unlock();
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_spin_unlock_bh_10($p0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_tail: ref;

axiom __skb_queue_tail == $sub.ref(0, 258701);

procedure __skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_tail($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __skb_queue_before($p0, $p2, $p1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    return;
}



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 259733);

procedure __skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p1 := skb_peek($p0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __skb_unlink($p1, $p0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kthread_stop: ref;

axiom kthread_stop == $sub.ref(0, 260765);

procedure kthread_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kthread_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 421} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 261797);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 262829);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 263861);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p13);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p9);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_before: ref;

axiom __skb_queue_before == $sub.ref(0, 264893);

procedure __skb_queue_before($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_before($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __skb_insert($p2, $p6, $p1, $p0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    return;
}



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 265925);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p2);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 266957);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 424} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_10: ref;

axiom ldv_spin_unlock_bh_10 == $sub.ref(0, 267989);

procedure ldv_spin_unlock_bh_10($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_10($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} _raw_spin_unlock_bh($p2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 269021);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 270053);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 426} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_6: ref;

axiom ldv_spin_lock_bh_6 == $sub.ref(0, 271085);

procedure ldv_spin_lock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} _raw_spin_lock_bh($p2);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 272117);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    return;
}



const __cpu_to_node: ref;

axiom __cpu_to_node == $sub.ref(0, 273149);

procedure __cpu_to_node($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __cpu_to_node($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 428} {:cexpr "__cpu_to_node:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 429} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_percpu_receive_thread: ref;

axiom fcoe_percpu_receive_thread == $sub.ref(0, 274181);

procedure fcoe_percpu_receive_thread($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24, $CurrAddr, $M.39, $M.40, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_percpu_receive_thread($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p23: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p1 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} skb_queue_head_init($p1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p4 := get_current();
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} set_user_nice($p4, $sub.i64(0, 20));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $i15, $p17, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $p23, $i27, $i28, $i29, $i30, $i31 := fcoe_percpu_receive_thread_loop_$bb1($p1, $p2, $p3, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $i15, $p17, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $p23, $i27, $i28, $i29, $i30, $i31);
    goto $bb1_last;

  $bb2:
    call $p6, $p7, $i8, $i9, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $p23, $i27, $i28, $i29, $i30, $i31 := fcoe_percpu_receive_thread_loop_$bb2($p1, $p3, $p6, $p7, $i8, $i9, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $p23, $i27, $i28, $i29, $i30, $i31);
    goto $bb2_last;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 437} {:cexpr "tmp___7"} boogie_si_record_i8($i28);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} spin_lock_bh($p6);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} skb_queue_splice_init($p7, $p1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i8 := skb_queue_len($p1);
    call {:si_unique_call 441} {:cexpr "tmp___6"} boogie_si_record_i32($i8);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock_bh($p19);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p20 := __skb_dequeue($p1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p23 := $p20;
    goto $bb11;

  $bb11:
    call $p24, $i25, $i26, $p23 := fcoe_percpu_receive_thread_loop_$bb11($p1, $p24, $i25, $i26, $p23);
    goto $bb11_last;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} fcoe_recv_frame($p23);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p24 := __skb_dequeue($p1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p24;
    goto $bb13_dummy;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p10 := get_current();
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p12 := get_current();
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.25, $p2);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 444} $i15 := devirtbounce.11(0, $p14, $i13, $p14);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, $i15);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_bh($p17);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} schedule();
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886_dummy;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  $bb15_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i27 := kthread_should_stop();
    goto corral_source_split_1863;

  corral_source_split_1886_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 275213);

procedure kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p4 := external_alloc();
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const kthread_bind: ref;

axiom kthread_bind == $sub.ref(0, 276245);

procedure kthread_bind($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kthread_bind($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "kthread_bind:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 277277);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 454} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 278309);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_64 := spinlock_check($p2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __raw_spin_lock_init($p6, .str.24, $p1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} __skb_queue_head_init($p0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    return;
}



const set_user_nice: ref;

axiom set_user_nice == $sub.ref(0, 279341);

procedure set_user_nice($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation set_user_nice($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "set_user_nice:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_splice_init: ref;

axiom skb_queue_splice_init == $sub.ref(0, 280373);

procedure skb_queue_splice_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_queue_splice_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i2 := skb_queue_empty($p0);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __skb_queue_splice($p0, $p4, $p6);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __skb_queue_head_init($p0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 281405);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.26, $p1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 282437);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_recv_frame: ref;

axiom fcoe_recv_frame == $sub.ref(0, 283469);

procedure fcoe_recv_frame($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_recv_frame($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i76: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i8;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p2 := fcoe_dev_from_skb($p0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.27, $p3);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 468} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $M.15;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 474} {:cexpr "tmp___3"} boogie_si_record_i64($i32);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_67 := lport_priv($p4);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_68 := skb_linearize($p0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p63 := skb_network_header($p0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    call {:si_unique_call 481} $i67 := devirtbounce(0, $p66);
    call {:si_unique_call 482} {:cexpr "__ptr"} boogie_si_record_i64($i67);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __preempt_count_add(1);
    call {:si_unique_call 484} devirtbounce.1(0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i68 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __bad_size_call_parameter();
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i76 := $u0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i76);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i80, 8));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, $i67);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p64, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.28, $p85);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i88 := $ashr.i32($i87, 4);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 494} {:cexpr "tmp___6"} boogie_si_record_i64($i92);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_70 := skb_pull($p0, 14);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, 8);
    call {:si_unique_call 501} {:cexpr "fr_len"} boogie_si_record_i32($i105);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p109, $i108);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i112 := $udiv.i32($i105, 4);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i113 := $zext.i32.i64($i112);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i111, $i113);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p115, $i114);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} fc_frame_init($p116);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p4);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p64, $mul.ref(0, 14)), $mul.ref(13, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.29, $p121);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i122);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p1);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i128 := skb_copy_bits($p0, $i105, $p127, 8);
    call {:si_unique_call 504} {:cexpr "tmp___7"} boogie_si_record_i32($i128);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.30, $p130);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, $i131);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.31, $p136);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i137);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i142 := pskb_trim($p0, $i105);
    call {:si_unique_call 506} {:cexpr "tmp___8"} boogie_si_record_i32($i142);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i144 := fcoe_filter_frames($p4, $p116);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 508} {:cexpr "tmp___9"} boogie_si_record_i32($i144);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p149, $i148);
    call {:si_unique_call 497} devirtbounce.1(0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __preempt_count_sub(1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} kfree_skb($p0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb52:
    assume $i145 == 1;
    call {:si_unique_call 509} devirtbounce.1(0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __preempt_count_sub(1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} fc_exch_recv($p4, $p116);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i143 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb46:
    assume $i129 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i93 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p84, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i96 := $ule.i64($i95, 4);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i96 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p64, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.28, $p97);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i99, 4);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_69 := printk.ref.i32.i32(.str.61, $i100, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22:
    assume $i70 == 1;
    call {:si_unique_call 485} $i79 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 486} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i79);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i76 := $i79;
    goto $bb34;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb24;

  $bb25:
    assume $i71 == 1;
    call {:si_unique_call 487} $i78 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 488} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i78);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i76 := $i78;
    goto $bb34;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb24;

  $bb29:
    assume $i73 == 1;
    call {:si_unique_call 489} $i77 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 490} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i77);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i76 := $i77;
    goto $bb34;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb24;

  $bb31:
    assume $i74 == 1;
    call {:si_unique_call 491} $i75 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 492} {:cexpr "pfo_ret__"} boogie_si_record_i32($i75);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb34;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p34 := skb_end_pointer($p0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p35 := skb_tail_pointer($p0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(152, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p59 := .str.49;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_66 := printk.ref.ref.i32.i32.ref.ref.ref.ref.i32.ref(.str.48, $p39, $i41, $i43, $p45, $p47, $p35, $p34, $i50, $p59);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p59 := $p56;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(96, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $p2i.ref.i64(fcoe_percpu_flush_done));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} kfree_skb($p0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i15 := $M.15;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_65 := printk.ref.ref(.str.60, $p25);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const kthread_should_stop: ref;

axiom kthread_should_stop == $sub.ref(0, 284501);

procedure kthread_should_stop() returns ($r: i1);
  free requires assertsPassed;



implementation kthread_should_stop() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 512} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 513} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const fcoe_dev_from_skb: ref;

axiom fcoe_dev_from_skb == $sub.ref(0, 285533);

procedure fcoe_dev_from_skb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_dev_from_skb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_percpu_flush_done: ref;

axiom fcoe_percpu_flush_done == $sub.ref(0, 286565);

procedure fcoe_percpu_flush_done($p0: ref);



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 287597);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_linearize: ref;

axiom skb_linearize == $sub.ref(0, 288629);

procedure skb_linearize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_linearize($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 515} {:cexpr "tmp___2"} boogie_si_record_i8($i2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i4 := __skb_linearize($p0);
    call {:si_unique_call 517} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 289661);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(196, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 290693);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p2 := external_alloc();
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fc_frame_init: ref;

axiom fc_frame_init == $sub.ref(0, 291725);

procedure fc_frame_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fc_frame_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    return;
}



const skb_copy_bits: ref;

axiom skb_copy_bits == $sub.ref(0, 292757);

procedure skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 520} {:cexpr "skb_copy_bits:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 521} {:cexpr "skb_copy_bits:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 522} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 523} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pskb_trim: ref;

axiom pskb_trim == $sub.ref(0, 293789);

procedure pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "pskb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i5 := __pskb_trim($p0, $i1);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const fcoe_filter_frames: ref;

axiom fcoe_filter_frames == $sub.ref(0, 294821);

procedure fcoe_filter_frames($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_filter_frames($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $i96: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i8;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i127: i32;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i47: i32;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1144, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i32);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_71 := skb_transport_header($p2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p38 := fc_frame_header_get($p1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p48 := lport_priv($p0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i55 := is_fip_mode($p54);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    call {:si_unique_call 531} {:cexpr "tmp___2"} boogie_si_record_i8($i56);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i96 := crc32_le($sub.i32(0, 1), $p92, $i95);
    call {:si_unique_call 540} {:cexpr "tmp___5"} boogie_si_record_i32($i96);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i102 := $xor.i32($i96, $sub.i32(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i101, $i102);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    call {:si_unique_call 541} $i118 := devirtbounce(0, $p117);
    call {:si_unique_call 542} {:cexpr "__ptr"} boogie_si_record_i64($i118);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __preempt_count_add(1);
    call {:si_unique_call 544} devirtbounce.1(0);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i119 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __bad_size_call_parameter();
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i127 := $u0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i127);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i131, 8));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.0, $p132);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, $i118);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i134);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i138 := $add.i64($i137, 1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p135, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, $i138);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p135, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i142 := $ule.i64($i141, 4);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    call {:si_unique_call 555} devirtbounce.1(0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __preempt_count_sub(1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb54:
    assume $i142 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_73 := printk.ref(.str.64);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb37:
    assume $i121 == 1;
    call {:si_unique_call 545} $i130 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 546} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i130);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i127 := $i130;
    goto $bb49;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i122 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb39;

  $bb40:
    assume $i122 == 1;
    call {:si_unique_call 547} $i129 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 548} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i129);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i127 := $i129;
    goto $bb49;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i123 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb39;

  $bb44:
    assume $i124 == 1;
    call {:si_unique_call 549} $i128 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 550} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i128);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i127 := $i128;
    goto $bb49;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i125 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb39;

  $bb46:
    assume $i125 == 1;
    call {:si_unique_call 551} $i126 := devirtbounce.2(0, cpu_number);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 552} {:cexpr "pfo_ret__"} boogie_si_record_i32($i126);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb49;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i103 == 1;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 254);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i111);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb12;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 254);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i86);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb12;

  $bb14:
    assume $i57 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i58 := fc_frame_payload_op($p1);
    call {:si_unique_call 533} {:cexpr "tmp___3"} boogie_si_record_i8($i58);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 5);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(5, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i63 := ntoh24($p62);
    call {:si_unique_call 535} {:cexpr "tmp___4"} boogie_si_record_i32($i63);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 16777214);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i65 := $M.15;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 537} {:cexpr "tmp___1"} boogie_si_record_i64($i68);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb12;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_72 := printk.ref(.str.63);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 8);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb9;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(145, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 254);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i20);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const fc_exch_recv: ref;

axiom fc_exch_recv == $sub.ref(0, 295853);

procedure fc_exch_recv($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fc_exch_recv($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    return;
}



const skb_transport_header: ref;

axiom skb_transport_header == $sub.ref(0, 296885);

procedure skb_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(194, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const is_fip_mode: ref;

axiom is_fip_mode == $sub.ref(0, 297917);

procedure is_fip_mode($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_fip_mode($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 784)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 4);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 298949);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 558} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 560} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pskb_trim: ref;

axiom __pskb_trim == $sub.ref(0, 299981);

procedure __pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "__pskb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __skb_trim($p0, $i1);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i5 := ___pskb_trim($p0, $i1);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ___pskb_trim: ref;

axiom ___pskb_trim == $sub.ref(0, 301013);

procedure ___pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ___pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 565} {:cexpr "___pskb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __skb_trim: ref;

axiom __skb_trim == $sub.ref(0, 302045);

procedure __skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_trim($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var vslice_dummy_var_74: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "__skb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i2 := skb_is_nonlinear($p0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 570} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i64($i4);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 572} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} skb_set_tail_pointer($p0, $i1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32(1, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32(1, 0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_74 := ldv__builtin_expect($i15, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} warn_slowpath_null(.str.62, 2054);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skb_set_tail_pointer: ref;

axiom skb_set_tail_pointer == $sub.ref(0, 303077);

procedure skb_set_tail_pointer($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_tail_pointer($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "skb_set_tail_pointer:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} skb_reset_tail_pointer($p0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i1);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    return;
}



const skb_reset_tail_pointer: ref;

axiom skb_reset_tail_pointer == $sub.ref(0, 304109);

procedure skb_reset_tail_pointer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_tail_pointer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    return;
}



const __skb_linearize: ref;

axiom __skb_linearize == $sub.ref(0, 305141);

procedure __skb_linearize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __skb_linearize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p3 := __pskb_pull_tail($p0, $i2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __pskb_pull_tail: ref;

axiom __pskb_pull_tail == $sub.ref(0, 306173);

procedure __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "__pskb_pull_tail:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p2 := external_alloc();
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 307205);

procedure complete_($p0: ref);



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 308237);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __skb_queue_splice: ref;

axiom __skb_queue_splice == $sub.ref(0, 309269);

procedure __skb_queue_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p4);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p6);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 310301);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 311333);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 312365);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_match: ref;

axiom fcoe_match == $sub.ref(0, 313397);

procedure fcoe_match($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fcoe_match($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const fcoe_ctlr_alloc: ref;

axiom fcoe_ctlr_alloc == $sub.ref(0, 314429);

procedure fcoe_ctlr_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.39, $M.40, $M.25, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.24, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation fcoe_ctlr_alloc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i1 := _fcoe_create($p0, 4, 0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const fcoe_create: ref;

axiom fcoe_create == $sub.ref(0, 315461);

procedure fcoe_create($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.39, $M.40, $M.25, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.24, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation fcoe_create($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} {:cexpr "fcoe_create:arg:fip_mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i2 := _fcoe_create($p0, $i1, 1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 587} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const fcoe_destroy: ref;

axiom fcoe_destroy == $sub.ref(0, 316493);

procedure fcoe_destroy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation fcoe_destroy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i4: i32;
  var vslice_dummy_var_75: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} rtnl_lock();
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p1 := fcoe_hostlist_lookup_port($p0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p9 := lport_priv($p8);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} list_del($p11);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p12 := $M.14;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_75 := queue_work($p12, $p13);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} rtnl_unlock();
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const _fcoe_create: ref;

axiom _fcoe_create == $sub.ref(0, 317525);

procedure _fcoe_create($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.39, $M.40, $M.25, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.24, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation _fcoe_create($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i6: i32;
  var $i28: i32;
  var $i39: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "_fcoe_create:arg:fip_mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 597} {:cexpr "_fcoe_create:arg:link_state"} boogie_si_record_i32($i2);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} rtnl_lock();
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p3 := fcoe_hostlist_lookup($p0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p7 := fcoe_interface_create($p0, $i1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i9 := IS_ERR($p8);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 605} {:cexpr "tmp___1"} boogie_si_record_i8($i10);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p7);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(40, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1720)), $mul.ref(8, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p20 := fcoe_if_create($p7, $p19, 0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i22 := IS_ERR($p21);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 611} {:cexpr "tmp___2"} boogie_si_record_i8($i23);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p20);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} fcoe_dcb_create($p7);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, jiffies);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 1688)), $mul.ref(808, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_77 := fc_fabric_login($p20);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i2, 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i2, 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} rtnl_unlock();
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i28 := $i6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i39 := $i28;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i37 := fcoe_link_ok($p20);
    call {:si_unique_call 620} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} rtnl_unlock();
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} fcoe_ctlr_link_up($p16);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb19;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_76 := printk.ref.ref(.str.39, $p26);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} rtnl_unlock();
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} fcoe_interface_cleanup($p7);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} fcoe_ctlr_device_delete($p18);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 5);
    goto $bb10;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i13 := PTR_ERR($p12);
    call {:si_unique_call 607} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 608} {:cexpr "rc"} boogie_si_record_i32($i14);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 17);
    goto $bb3;
}



const fcoe_hostlist_lookup: ref;

axiom fcoe_hostlist_lookup == $sub.ref(0, 318557);

procedure fcoe_hostlist_lookup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_hostlist_lookup($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p1 := fcoe_hostlist_lookup_port($p0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const fcoe_interface_create: ref;

axiom fcoe_interface_create == $sub.ref(0, 319589);

procedure fcoe_interface_create($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.63, $M.64, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_interface_create($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p32: ref;
  var $p19: ref;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} {:cexpr "fcoe_interface_create:arg:fip_mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i2 := try_module_get(__this_module);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 627} {:cexpr "tmp___1"} boogie_si_record_i8($i3);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p21 := fcoe_ctlr_device_add($p20, fcoe_sysfs_templ, 944);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p33 := fcoe_ctlr_device_priv($p21);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(40, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p21);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p36 := fcoe_ctlr_priv($p34);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} dev_hold($p0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} fcoe_ctlr_init($p34, $i1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(528, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, fcoe_fip_send);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(536, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, fcoe_update_src_mac);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(544, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, fcoe_get_src_mac);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i41 := fcoe_interface_setup($p37, $p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 643} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p19 := $p36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} fcoe_ctlr_destroy($p34);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} fcoe_ctlr_device_delete($p21);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} dev_put($p0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i41);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p44 := ERR_PTR($i43);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p32 := $p44;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} module_put(__this_module);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p19 := $p32;
    goto $bb9;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i24 := $M.15;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 634} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p30 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p32 := $p30;
    goto $bb16;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_79 := printk.ref(.str.41);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i7 := $M.15;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 629} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p17 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb9;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_78 := printk.ref.ref(.str.40, $p15);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 320621);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_if_create: ref;

axiom fcoe_if_create == $sub.ref(0, 321653);

procedure fcoe_if_create($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.25, $M.39, $M.40, $M.24, assertsPassed, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.63, $M.64;



implementation fcoe_if_create($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p23: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i128: i1;
  var $i129: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i130: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i103: i32;
  var $i71: i32;
  var $p148: ref;
  var $p149: ref;
  var $i37: i32;
  var $i150: i64;
  var $p151: ref;
  var $p147: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 652} {:cexpr "fcoe_if_create:arg:npiv"} boogie_si_record_i32($i2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 152), 1656));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i11 := $M.15;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 654} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i2, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p24 := libfc_vport_create($p10, 352);
    assume {:verifier.code 0} true;
    $p23 := $p24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p23);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p38 := lport_priv($p23);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p23);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, fcoe_netdev);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(116, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 256);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(120, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 32);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} __init_work($p46, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, 137438953408);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 664} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p50, $p51, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} lockdep_init_map($p53, .str.10, $p3, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(256, 1)), $mul.ref(8, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} INIT_LIST_HEAD($p55);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 352)), $mul.ref(256, 1)), $mul.ref(24, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, fcoe_destroy_work);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_82 := fcoe_hostlist_add($p23);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i59 := fcoe_lport_config($p23);
    call {:si_unique_call 669} {:cexpr "rc"} boogie_si_record_i32($i59);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i2, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i91 := fcoe_netdev_config($p23, $p8);
    call {:si_unique_call 681} {:cexpr "rc"} boogie_si_record_i32($i91);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i104 := fcoe_shost_config($p23, $p1);
    call {:si_unique_call 687} {:cexpr "rc"} boogie_si_record_i32($i104);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i116 := fcoe_libfc_config($p23, $p6, fcoe_libfc_fcn_templ, 1);
    call {:si_unique_call 692} {:cexpr "rc"} boogie_si_record_i32($i116);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} fcoe_fdmi_info($p23, $p8);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i2, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i128 == 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 152), 1656)), $mul.ref(112, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p133 := shost_priv($p132);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i135 := fc_exch_mgr_list_clone($p134, $p23);
    call {:si_unique_call 701} {:cexpr "rc"} boogie_si_record_i32($i135);
    assume {:verifier.code 0} true;
    $i130 := $i135;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i130, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p147 := $p23;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $r := $p147;
    return;

  $bb49:
    assume $i136 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i137 := $M.15;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i142 := ldv__builtin_expect($i141, 0);
    call {:si_unique_call 703} {:cexpr "tmp___8"} boogie_si_record_i64($i142);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i103 := $i130;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} fc_exch_mgr_free($p23);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i71 := $i103;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} fcoe_hostlist_del($p23);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p23, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} scsi_host_put($p149);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i37 := $i71;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i37);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p151 := ERR_PTR($i150);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p147 := $p151;
    goto $bb55;

  $bb51:
    assume $i143 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_88 := printk.ref.ref(.str.16, $p145);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb46:
    assume $i128 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i129 := fcoe_em_config($p23);
    call {:si_unique_call 698} {:cexpr "rc"} boogie_si_record_i32($i129);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb48;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i117 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i118 := $M.15;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 2);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i32($i120);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i121);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 694} {:cexpr "tmp___6"} boogie_si_record_i64($i123);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i103 := $i116;
    goto $bb32;

  $bb42:
    assume $i124 == 1;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_87 := printk.ref.ref(.str.15, $p126);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb34:
    assume $i105 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i106 := $M.15;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 2);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 689} {:cexpr "tmp___5"} boogie_si_record_i64($i111);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i103 := $i104;
    goto $bb32;

  $bb36:
    assume $i112 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_86 := printk.ref.ref(.str.14, $p114);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume $i92 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i93 := $M.15;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 2);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 683} {:cexpr "tmp___4"} boogie_si_record_i64($i98);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i103 := $i91;
    goto $bb32;

  $bb29:
    assume $i99 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_85 := printk.ref.ref(.str.13, $p101);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i73 := $M.15;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 2);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 676} {:cexpr "tmp___3"} boogie_si_record_i64($i78);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 152), 1656)), $mul.ref(8, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} fc_set_wwnn($p23, $i88);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 152), 1656)), $mul.ref(16, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} fc_set_wwpn($p23, $i90);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 152), 1656)), $mul.ref(8, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 152), 1656)), $mul.ref(16, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_84 := printk.ref.ref.i64.i64(.str.12, $p81, $i83, $i85);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i61 := $M.15;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 2);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 671} {:cexpr "tmp___2"} boogie_si_record_i64($i66);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i71 := $i59;
    goto $bb19;

  $bb16:
    assume $i67 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_83 := printk.ref.ref(.str.11, $p69);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i27 := $M.15;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 659} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 12);
    goto $bb12;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_81 := printk.ref.ref(.str.9, $p35);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p22 := libfc_host_alloc(fcoe_shost_template, 352);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_80 := printk.ref.ref(.str.8, $p19);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_interface_cleanup: ref;

axiom fcoe_interface_cleanup == $sub.ref(0, 322685);

procedure fcoe_interface_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $M.25, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_interface_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} rtnl_lock();
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} rtnl_unlock();
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} fcoe_ctlr_destroy($p4);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} scsi_host_put($p12);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} dev_put($p2);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} module_put(__this_module);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} fcoe_interface_remove($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const fcoe_ctlr_device_delete: ref;

axiom fcoe_ctlr_device_delete == $sub.ref(0, 323717);

procedure fcoe_ctlr_device_delete($p0: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_device_delete($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_dcb_create: ref;

axiom fcoe_dcb_create == $sub.ref(0, 324749);

procedure fcoe_dcb_create($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.0, $CurrAddr;



implementation fcoe_dcb_create($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $i38: i8;
  var $i33: i8;
  var $i34: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p6, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p7, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.36 := $store.i16($M.36, $p8, $sub.i16(0, 30458));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(2848, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.37, $p11);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(2848, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.37, $p15);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 376)), $mul.ref(328, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.38, $p17);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(2848, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.37, $p21);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 376)), $mul.ref(328, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.38, $p23);
    call {:si_unique_call 713} $i25 := devirtbounce.12($p24, $p3);
    call {:si_unique_call 714} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    call {:si_unique_call 715} {:cexpr "dcbx"} boogie_si_record_i32($i26);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 8);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p35, 0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i36 := dcb_getapp($p3, $p1);
    call {:si_unique_call 721} {:cexpr "up___0"} boogie_si_record_i8($i36);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.36 := $store.i16($M.36, $p37, $sub.i16(0, 30444));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i38 := dcb_getapp($p3, $p1);
    call {:si_unique_call 723} {:cexpr "fup"} boogie_si_record_i8($i38);
    assume {:verifier.code 0} true;
    $i33, $i34 := $i38, $i36;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i34);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i40 := ffs($i39);
    call {:si_unique_call 725} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(153, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i33);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i51 := ffs($i50);
    call {:si_unique_call 729} {:cexpr "tmp___5"} boogie_si_record_i32($i51);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(153, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(509, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i61);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i33);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i54 := ffs($i53);
    call {:si_unique_call 731} {:cexpr "tmp___4"} boogie_si_record_i32($i54);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 255);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(509, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i34);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i43 := ffs($i42);
    call {:si_unique_call 727} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 255);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(153, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i47);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p29, 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i30 := dcb_ieee_getapp_mask($p3, $p1);
    call {:si_unique_call 717} {:cexpr "up___0"} boogie_si_record_i8($i30);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.36 := $store.i16($M.36, $p31, $sub.i16(0, 30444));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i32 := dcb_ieee_getapp_mask($p3, $p1);
    call {:si_unique_call 719} {:cexpr "fup"} boogie_si_record_i8($i32);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, $i30;
    goto $bb10;
}



const fc_fabric_login: ref;

axiom fc_fabric_login == $sub.ref(0, 325781);

procedure fc_fabric_login($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_fabric_login($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 732} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 733} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dcb_ieee_getapp_mask: ref;

axiom dcb_ieee_getapp_mask == $sub.ref(0, 326813);

procedure dcb_ieee_getapp_mask($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation dcb_ieee_getapp_mask($p0: ref, $p1: ref) returns ($r: i8)
{
  var $i2: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $i2 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 735} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i2);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dcb_getapp: ref;

axiom dcb_getapp == $sub.ref(0, 327845);

procedure dcb_getapp($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation dcb_getapp($p0: ref, $p1: ref) returns ($r: i8)
{
  var $i2: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 736} $i2 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 737} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i2);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fcoe_interface_remove: ref;

axiom fcoe_interface_remove == $sub.ref(0, 328877);

procedure fcoe_interface_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $M.25, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_interface_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p4 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p5 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __dev_remove_pack($p10);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} __dev_remove_pack($p11);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} synchronize_net();
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p12, 14);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p13, $sub.i8(0, 4));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p14, 0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p15, $sub.i8(0, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p16, $sub.i8(0, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p17, $sub.i8(0, 2));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.39;
    cmdloc_dummy_var_23 := $M.39;
    call {:si_unique_call 746} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p18, $p19, 6, $zext.i32.i64(1), 0 == 1);
    $M.39 := cmdloc_dummy_var_24;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_89 := dev_uc_del($p7, $p20);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(507, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(4, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 5);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p48, 1);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p49, 16);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p50, 24);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p51, 1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p52, 0);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p53, 1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p5);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_93 := dev_mc_del($p7, $p54);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 528)), $mul.ref(280, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i61 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref(0, 528)), $mul.ref(280, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    call {:si_unique_call 752} $i64 := devirtbounce.13($p63, $p7);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 753} {:cexpr "tmp___0"} boogie_si_record_i32($i64);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i65 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i66 := $M.15;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 2);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 755} {:cexpr "tmp"} boogie_si_record_i64($i71);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i72 == 1;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_94 := printk.ref.ref(.str.3, $p74);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p32, 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p33, 16);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p34, 24);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p35, 1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p36, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p37, 4);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_91 := dev_mc_del($p7, $p38);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p40, 1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p41, 16);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p42, 24);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p43, 1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p44, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p45, 5);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_92 := dev_mc_del($p7, $p46);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_90 := dev_uc_del($p7, $p27);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_ctlr_destroy: ref;

axiom fcoe_ctlr_destroy == $sub.ref(0, 329909);

procedure fcoe_ctlr_destroy($p0: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    return;
}



const scsi_host_put: ref;

axiom scsi_host_put == $sub.ref(0, 330941);

procedure scsi_host_put($p0: ref);
  free requires assertsPassed;



implementation scsi_host_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 331973);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    return;
}



const __dev_remove_pack: ref;

axiom __dev_remove_pack == $sub.ref(0, 333005);

procedure __dev_remove_pack($p0: ref);
  free requires assertsPassed;



implementation __dev_remove_pack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_net: ref;

axiom synchronize_net == $sub.ref(0, 334037);

procedure synchronize_net();
  free requires assertsPassed;



implementation synchronize_net()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    return;
}



const dev_mc_del: ref;

axiom dev_mc_del == $sub.ref(0, 335069);

procedure dev_mc_del($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_mc_del($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 757} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 758} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const libfc_host_alloc: ref;

axiom libfc_host_alloc == $sub.ref(0, 336101);

procedure libfc_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.50, $M.51, $M.52;



implementation libfc_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} {:cexpr "libfc_host_alloc:arg:priv_size"} boogie_si_record_i32($i1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1688);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p3 := ldv_scsi_host_alloc_43($p0, $i2);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p7 := shost_priv($p3);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 1688)), $mul.ref(8, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} INIT_LIST_HEAD($p10);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 1688)), $mul.ref(504, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} INIT_LIST_HEAD($p11);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const libfc_vport_create: ref;

axiom libfc_vport_create == $sub.ref(0, 337133);

procedure libfc_vport_create($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation libfc_vport_create($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} {:cexpr "libfc_vport_create:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p2 := external_alloc();
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 338165);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 339197);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 340229);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_destroy_work: ref;

axiom fcoe_destroy_work == $sub.ref(0, 341261);

procedure fcoe_destroy_work($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.39, $M.40, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_destroy_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p25: ref;
  var $p26: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var vslice_dummy_var_95: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 256), 352)), $mul.ref(8, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ldv_spin_lock();
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1712)), $mul.ref(1608, 1)), $mul.ref(0, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 136), 1656));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p13, $mul.ref($sub.ref(0, 136), 1656)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 136), 1656));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 136), 1656)), $mul.ref(136, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 1712)), $mul.ref(1608, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(216, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} spin_unlock_irqrestore($p54, $u2);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1712)), $mul.ref(1664, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_flush_workqueue_46($p59);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 256), 352)), $mul.ref(0, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p63, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(40, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 256), 352)), $mul.ref(8, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} fcoe_if_destroy($p68);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} fcoe_interface_cleanup($p62);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} fcoe_ctlr_device_delete($p66);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p19, $p14;
    goto $bb4;

  $bb4:
    call $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p25, $p26, vslice_dummy_var_95 := fcoe_destroy_work_loop_$bb4($p6, $i23, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p25, $p26, vslice_dummy_var_95);
    goto $bb4_last;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 7);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 2);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1712)), $mul.ref(1664, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p26, $mul.ref(0, 1656)), $mul.ref(1576, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_95 := queue_work($p42, $p43);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 1656)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($sub.ref(0, 136), 1656));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p25, $mul.ref(0, 1656)), $mul.ref(136, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i23);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p25, $p26 := $p49, $p25;
    goto $bb9_dummy;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;
}



const fcoe_hostlist_add: ref;

axiom fcoe_hostlist_add == $sub.ref(0, 342293);

procedure fcoe_hostlist_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_hostlist_add($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p1 := fcoe_netdev($p0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p2 := fcoe_hostlist_lookup_port($p1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p5 := lport_priv($p0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} list_add_tail($p10, fcoe_hostlist);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_lport_config: ref;

axiom fcoe_lport_config == $sub.ref(0, 343325);

procedure fcoe_lport_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_lport_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(800, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(801, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1152, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 3);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1153, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 3);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1084, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 2000);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1088, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 4000);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1080, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 418);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, $sub.i8(0, 17));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i11 := $or.i8($i10, 16);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i11);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_96 := fc_lport_init_stats($p0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_97 := fc_lport_config($p0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 5));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i16);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 3));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i19);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, $sub.i8(0, 9));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i22);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1164, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fc_set_wwnn: ref;

axiom fc_set_wwnn == $sub.ref(0, 344357);

procedure fc_set_wwnn($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation fc_set_wwnn($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} {:cexpr "fc_set_wwnn:arg:wwnn"} boogie_si_record_i64($i1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1072, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    return;
}



const fc_set_wwpn: ref;

axiom fc_set_wwpn == $sub.ref(0, 345389);

procedure fc_set_wwpn($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation fc_set_wwpn($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "fc_set_wwpn:arg:wwnn"} boogie_si_record_i64($i1);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1064, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_netdev_config: ref;

axiom fcoe_netdev_config == $sub.ref(0, 346421);

procedure fcoe_netdev_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $CurrAddr, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59;



implementation fcoe_netdev_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i31: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p4 := lport_priv($p0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 788} {:cexpr "mfs"} boogie_si_record_i32($i12);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 2147483648);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 22);
    call {:si_unique_call 792} {:cexpr "mfs"} boogie_si_record_i32($i28);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i29 := fc_set_mfs($p0, $i28);
    call {:si_unique_call 794} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} fcoe_netdev_features_change($p0, $p1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 352)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} skb_queue_head_init($p32);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 352)), $mul.ref(112, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_99 := reg_timer_2($p34, fcoe_queue_timer, $i35);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_100 := fcoe_link_speed_update($p0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i42 := fcoe_get_wwn($p1, $p2, 0);
    call {:si_unique_call 800} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.41, $p2);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} fc_set_wwnn($p0, $i47);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i48 := fcoe_get_wwn($p1, $p3, 1);
    call {:si_unique_call 804} {:cexpr "tmp___3"} boogie_si_record_i32($i48);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.41, $p3);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} fc_set_wwpn($p0, $i53);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i52 := fcoe_wwn_from_mac($p51, 2, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p3, $i52);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i46 := fcoe_wwn_from_mac($p45, 1, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p2, $i46);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i17 := $M.15;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 2);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 790} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i27 := 2158;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_98 := printk.ref.ref.i32(.str.20, $p25, 2158);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fcoe_shost_config: ref;

axiom fcoe_shost_config == $sub.ref(0, 347453);

procedure fcoe_shost_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $M.51, $M.52;



implementation fcoe_shost_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i41: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3832)), $mul.ref(792, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 65535);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(788, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 256);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3832)), $mul.ref(784, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3832)), $mul.ref(804, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 16);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p22 := $M.43;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3832)), $mul.ref(512, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p22);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i28 := scsi_add_host($p27, $p1);
    call {:si_unique_call 808} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p52 := fcoe_netdev($p0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1712)), $mul.ref(1056, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p52, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_102 := snprintf.ref.i64.ref.ref.ref.ref($p59, 256, .str.26, .str.18, .str.27, $p61);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1712)), $mul.ref(68, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $sub.i16(0, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i30 := $M.15;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 2);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 810} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i41 := $i28;
    goto $bb9;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p37 := fcoe_netdev($p0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_101 := printk.ref.ref(.str.25, $p39);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p18 := $M.42;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3832)), $mul.ref(512, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p18);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_libfc_config: ref;

axiom fcoe_libfc_config == $sub.ref(0, 348485);

procedure fcoe_libfc_config($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_libfc_config($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} {:cexpr "fcoe_libfc_config:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 816} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fcoe_fdmi_info: ref;

axiom fcoe_fdmi_info == $sub.ref(0, 349517);

procedure fcoe_fdmi_info($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $M.5, $M.7, $M.25, $M.39, $M.40, $M.24, $M.50, assertsPassed, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.54, $M.56, $M.58, $M.60;



implementation fcoe_fdmi_info($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i8;
  var $i115: i8;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i8;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p2 := lport_priv($p0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 528)), $mul.ref(312, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i119 := $and.i8($i118, 127);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, $i119);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_103 := printk.ref(.str.30);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p21 := kzalloc(896, 208);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 528)), $mul.ref(312, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 821} $i29 := devirtbounce.14($p28, $p8, $p22);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 822} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1712)), $mul.ref(70, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(64, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_105 := snprintf.ref.i64.ref.ref($p38, 80, .str.29, $p40);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1712)), $mul.ref(150, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_106 := snprintf.ref.i64.ref.ref($p48, 80, .str.29, $p50);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 1712)), $mul.ref(230, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(384, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_107 := snprintf.ref.i64.ref.ref($p58, 256, .str.29, $p60);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 1712)), $mul.ref(486, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(640, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_108 := snprintf.ref.i64.ref.ref($p68, 256, .str.29, $p70);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 1712)), $mul.ref(742, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(128, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_109 := snprintf.ref.i64.ref.ref($p78, 64, .str.29, $p80);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 1712)), $mul.ref(806, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(192, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_110 := snprintf.ref.i64.ref.ref($p88, 64, .str.29, $p90);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 1712)), $mul.ref(934, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(256, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_111 := snprintf.ref.i64.ref.ref($p98, 64, .str.29, $p100);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 1712)), $mul.ref(870, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p22, $mul.ref(0, 896)), $mul.ref(320, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_112 := snprintf.ref.i64.ref.ref($p108, 64, .str.29, $p110);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1144, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i114 := $and.i8($i113, 127);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i115 := $or.i8($i114, $sub.i8(0, 128));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $i115);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p22);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} kfree($p116);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_104 := printk.ref(.str.28);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_em_config: ref;

axiom fcoe_em_config == $sub.ref(0, 350549);

procedure fcoe_em_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_em_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p49: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p39: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i16;
  var $i21: i16;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i16;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i82: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p1 := lport_priv($p0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(1144, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32(4095);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i17, $i18);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    assume {:verifier.code 0} true;
    $p31 := $p33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, fcoe_hostlist);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p87 := fc_exch_mgr_alloc($p0, 46, 0, $i86, fcoe_oem_match);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p87);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32(0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i100, $i101);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, 1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    call {:si_unique_call 840} {:cexpr "min_xid"} boogie_si_record_i16($i104);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i21 := $i104;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i21);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32(4095);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p109 := fc_exch_mgr_alloc($p0, 46, $i106, $i108, $0.ref);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb38:
    assume $i111 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_115 := printk.ref.ref(.str.33, $p115);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 12);
    goto $bb32;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_114 := printk.ref.ref(.str.32, $p96);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 12);
    goto $bb32;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p72 := fc_exch_mgr_add($p0, $p71, fcoe_oem_match);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_113 := printk.ref.ref.ref(.str.31, $p76, $p80);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 12);
    goto $bb32;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p39 := $p34;
    goto $bb16;

  $bb16:
    call $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $p48, $p50, $p51, $p49, $i52, $i53, $i54, $p55, $p60, $p61, $p62, $p63, $i64, $i65, $p39 := fcoe_em_config_loop_$bb16($p31, $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $p48, $p50, $p51, $p49, $i52, $i53, $i54, $p55, $p60, $p61, $p62, $p63, $i64, $i65, $p39);
    goto $bb16_last;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 1);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    assume {:verifier.code 0} true;
    $p49 := $p51;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p31);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p49);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i52, $i53);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p55 := $p39;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p61;
    goto $bb25_dummy;

  $bb21:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p57);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p48 := vlan_dev_real_dev($p47);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p49 := $p48;
    goto $bb20;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p30 := vlan_dev_real_dev($p29);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1160, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;
}



const shost_priv: ref;

axiom shost_priv == $sub.ref(0, 351581);

procedure shost_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation shost_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fc_exch_mgr_list_clone: ref;

axiom fc_exch_mgr_list_clone == $sub.ref(0, 352613);

procedure fc_exch_mgr_list_clone($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_exch_mgr_list_clone($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fc_exch_mgr_free: ref;

axiom fc_exch_mgr_free == $sub.ref(0, 353645);

procedure fc_exch_mgr_free($p0: ref);
  free requires assertsPassed;



implementation fc_exch_mgr_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_hostlist_del: ref;

axiom fcoe_hostlist_del == $sub.ref(0, 354677);

procedure fcoe_hostlist_del($p0: ref);
  free requires assertsPassed;



implementation fcoe_hostlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p1 := lport_priv($p0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} list_del($p6);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 355709);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 356741);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_oem_match: ref;

axiom fcoe_oem_match == $sub.ref(0, 357773);

procedure fcoe_oem_match($p0: ref) returns ($r: i1);



const fc_exch_mgr_add: ref;

axiom fc_exch_mgr_add == $sub.ref(0, 358805);

procedure fc_exch_mgr_add($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_exch_mgr_add($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p3 := external_alloc();
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fc_exch_mgr_alloc: ref;

axiom fc_exch_mgr_alloc == $sub.ref(0, 359837);

procedure fc_exch_mgr_alloc($p0: ref, $i1: i32, $i2: i16, $i3: i16, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_exch_mgr_alloc($p0: ref, $i1: i32, $i2: i16, $i3: i16, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "fc_exch_mgr_alloc:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 852} {:cexpr "fc_exch_mgr_alloc:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 853} {:cexpr "fc_exch_mgr_alloc:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p5 := external_alloc();
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const fc_fcp_is_read: ref;

axiom fc_fcp_is_read == $sub.ref(0, 360869);

procedure fc_fcp_is_read($p0: ref) returns ($r: i1);



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 361901);

procedure __fswab16($i0: i16) returns ($r: i16);



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 362933);

procedure __fswab32($i0: i32) returns ($r: i32);



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 363965);

procedure __arch_swab32($i0: i32) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 364997);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 856} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_check_alloc_flags($i1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p2 := ldv_undef_ptr();
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 366029);

procedure snprintf.ref.i64.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const kfree: ref;

axiom kfree == $sub.ref(0, 367061);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} free_($p0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 368093);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 860} $free($p0);
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 369125);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 370157);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 371189);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} __VERIFIER_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const scsi_add_host: ref;

axiom scsi_add_host == $sub.ref(0, 372221);

procedure scsi_add_host($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52;



implementation scsi_add_host($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i2 := ldv_scsi_add_host_with_dma_42($p0, $p1, $p1);
    call {:si_unique_call 867} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_scsi_add_host_with_dma_42: ref;

axiom ldv_scsi_add_host_with_dma_42 == $sub.ref(0, 373253);

procedure ldv_scsi_add_host_with_dma_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52;



implementation ldv_scsi_add_host_with_dma_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i3 := scsi_add_host_with_dma($p0, $p1, $p2);
    call {:si_unique_call 869} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_initialize_scsi_host_template_4();
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_add_host_with_dma: ref;

axiom scsi_add_host_with_dma == $sub.ref(0, 374285);

procedure scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_initialize_scsi_host_template_4: ref;

axiom ldv_initialize_scsi_host_template_4 == $sub.ref(0, 375317);

procedure ldv_initialize_scsi_host_template_4();
  free requires assertsPassed;
  modifies $M.51, $M.52;



implementation ldv_initialize_scsi_host_template_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 875} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 876} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 877} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.52 := $p2;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_queue_timer: ref;

axiom fcoe_queue_timer == $sub.ref(0, 376349);

procedure fcoe_queue_timer($i0: i64);
  free requires assertsPassed;



implementation fcoe_queue_timer($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} {:cexpr "fcoe_queue_timer:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    return;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 377381);

procedure reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $M.0, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59;



implementation reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} {:cexpr "reg_timer_2:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(fcoe_queue_timer));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} activate_suitable_timer_2($p0, $i2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_get_wwn: ref;

axiom fcoe_get_wwn == $sub.ref(0, 378413);

procedure fcoe_get_wwn($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_get_wwn($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} {:cexpr "fcoe_get_wwn:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 882} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 883} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fcoe_wwn_from_mac: ref;

axiom fcoe_wwn_from_mac == $sub.ref(0, 379445);

procedure fcoe_wwn_from_mac($p0: ref, $i1: i32, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation fcoe_wwn_from_mac($p0: ref, $i1: i32, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 884} {:cexpr "fcoe_wwn_from_mac:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 885} {:cexpr "fcoe_wwn_from_mac:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_suitable_timer_2: ref;

axiom activate_suitable_timer_2 == $sub.ref(0, 380477);

procedure activate_suitable_timer_2($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.54, $M.0, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59;



implementation activate_suitable_timer_2($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} {:cexpr "activate_suitable_timer_2:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i2 := $M.53;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i4 := $M.53;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.55;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i10 := $M.55;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.57;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i16 := $M.57;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.59;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i22 := $M.59;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.60 := $p0;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p24 := $M.60;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.58 := $p0;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p18 := $M.58;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p12 := $M.56;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p6 := $M.54;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const fc_lport_init_stats: ref;

axiom fc_lport_init_stats == $sub.ref(0, 381509);

procedure fc_lport_init_stats($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fc_lport_init_stats($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p1 := __alloc_percpu(168, 8);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const fc_lport_config: ref;

axiom fc_lport_config == $sub.ref(0, 382541);

procedure fc_lport_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_lport_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 383573);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 897} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p2 := external_alloc();
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 384605);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __list_add($p0, $p3, $p1);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 385637);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 386669);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_spin_unlock();
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_46: ref;

axiom ldv_flush_workqueue_46 == $sub.ref(0, 387701);

procedure ldv_flush_workqueue_46($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.16, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation ldv_flush_workqueue_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} flush_workqueue($p0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} call_and_disable_all_1(2);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const fcoe_if_destroy: ref;

axiom fcoe_if_destroy == $sub.ref(0, 388733);

procedure fcoe_if_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.24, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_if_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p1 := lport_priv($p0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i8 := $M.15;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 907} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_117 := fc_fabric_logoff($p0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_118 := fc_lport_destroy($p0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_119 := ldv_del_timer_sync_44($p20);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} fcoe_clean_pending_queue($p0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} rtnl_lock();
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i24 := is_zero_ether_addr($p23);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 915} {:cexpr "tmp___1"} boogie_si_record_i8($i25);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} fcoe_interface_remove($p5);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} rtnl_unlock();
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} fcoe_percpu_clean($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} fc_remove_host($p37);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_scsi_remove_host_45($p39);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} fc_fcp_destroy($p0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} fc_exch_mgr_free($p0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} fc_lport_free_stats($p0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(520, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} scsi_host_put($p45);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} synchronize_net();
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_120 := dev_uc_del($p7, $p30);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_116 := printk.ref.ref(.str.2, $p16);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fc_fabric_logoff: ref;

axiom fc_fabric_logoff == $sub.ref(0, 389765);

procedure fc_fabric_logoff($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_fabric_logoff($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_lport_destroy: ref;

axiom fc_lport_destroy == $sub.ref(0, 390797);

procedure fc_lport_destroy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_lport_destroy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_44: ref;

axiom ldv_del_timer_sync_44 == $sub.ref(0, 391829);

procedure ldv_del_timer_sync_44($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.55, $M.57, $M.59;



implementation ldv_del_timer_sync_44($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i1 := del_timer_sync($p0);
    call {:si_unique_call 932} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} disable_suitable_timer_2($p0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_percpu_clean: ref;

axiom fcoe_percpu_clean == $sub.ref(0, 392861);

procedure fcoe_percpu_clean($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, assertsPassed;



implementation fcoe_percpu_clean($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $i5: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i2 := cpumask_next($sub.i32(0, 1), $p1);
    call {:si_unique_call 935} {:cexpr "cpu"} boogie_si_record_i32($i2);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i2);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb4;

  $bb4:
    call $i6, $i7, $p8, $i9, $i10, $p11, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p28, $p29, $p31, $i32, $i33, $p34, $p35, $p38, $i5, vslice_dummy_var_121 := fcoe_percpu_clean_loop_$bb4($i6, $i7, $p8, $i9, $i10, $p11, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p28, $p29, $p31, $i32, $i33, $p34, $p35, $p38, $i5, vslice_dummy_var_121);
    goto $bb4_last;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call {:si_unique_call 936} $i6 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 937} {:cexpr "__ptr"} boogie_si_record_i64($i6);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i7, 8));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i6);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i21 := cpumask_test_cpu($i5, $p20);
    call {:si_unique_call 939} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p23 := dev_alloc_skb(0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 232)), $mul.ref(96, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, fcoe_percpu_flush_done);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} spin_lock_bh($p28);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __skb_queue_tail($p29, $p23);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} spin_unlock_bh($p38);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} wait_for_completion(fcoe_flush_completion);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i17 := cpumask_next($i5, $p16);
    call {:si_unique_call 941} {:cexpr "cpu"} boogie_si_record_i32($i17);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, $i17);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb9_dummy;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_121 := wake_up_process($p35);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;
}



const fc_remove_host: ref;

axiom fc_remove_host == $sub.ref(0, 393893);

procedure fc_remove_host($p0: ref);
  free requires assertsPassed;



implementation fc_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_remove_host_45: ref;

axiom ldv_scsi_remove_host_45 == $sub.ref(0, 394925);

procedure ldv_scsi_remove_host_45($p0: ref);
  free requires assertsPassed;
  modifies $M.50;



implementation ldv_scsi_remove_host_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} scsi_remove_host($p0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    return;
}



const fc_fcp_destroy: ref;

axiom fc_fcp_destroy == $sub.ref(0, 395957);

procedure fc_fcp_destroy($p0: ref);
  free requires assertsPassed;



implementation fc_fcp_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    return;
}



const fc_lport_free_stats: ref;

axiom fc_lport_free_stats == $sub.ref(0, 396989);

procedure fc_lport_free_stats($p0: ref);
  free requires assertsPassed;



implementation fc_lport_free_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1688)), $mul.ref(1048, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} free_percpu($p3);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 398021);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    return;
}



const scsi_remove_host: ref;

axiom scsi_remove_host == $sub.ref(0, 399053);

procedure scsi_remove_host($p0: ref);
  free requires assertsPassed;



implementation scsi_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    return;
}



const cpumask_test_cpu: ref;

axiom cpumask_test_cpu == $sub.ref(0, 400085);

procedure cpumask_test_cpu($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_test_cpu($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} {:cexpr "cpumask_test_cpu:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i2 := cpumask_check($i0);
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i6 := variable_test_bit($i3, $p5);
    call {:si_unique_call 955} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 401117);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 402149);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 403181);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 961} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_122 := cpumask_check($i0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 404213);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_123: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 963} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 965} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_123 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 966} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 968} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 971} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} warn_slowpath_null(.str.4, 117);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 405245);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 973} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 974} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 406277);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p2 := ldv___netdev_alloc_skb_36($p0, $i1, 32);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_36: ref;

axiom ldv___netdev_alloc_skb_36 == $sub.ref(0, 407309);

procedure ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} {:cexpr "ldv___netdev_alloc_skb_36:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 980} {:cexpr "ldv___netdev_alloc_skb_36:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_check_alloc_flags($i2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p3 := ldv_undef_ptr();
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 408341);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 984} $i2 := devirtbounce.16(0, $p1, $i0);
    call {:si_unique_call 985} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 409373);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_2: ref;

axiom disable_suitable_timer_2 == $sub.ref(0, 410405);

procedure disable_suitable_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.53, $M.55, $M.57, $M.59;



implementation disable_suitable_timer_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i1 := $M.53;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.55;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.57;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.59;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p22 := $M.60;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 991} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p16 := $M.58;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 990} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p10 := $M.56;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 989} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p4 := $M.54;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 988} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 411437);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 412469);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.16, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.20;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.22;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p12 := $M.23;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} call_and_disable_work_1($p12);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p9 := $M.21;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} call_and_disable_work_1($p9);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p6 := $M.19;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} call_and_disable_work_1($p6);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p3 := $M.17;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} call_and_disable_work_1($p3);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 413501);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.16, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.18;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.20;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i19 := $M.20;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.22;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i27 := $M.22;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p30 := $M.23;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} fcoe_destroy_work($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p22 := $M.21;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} fcoe_destroy_work($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1002} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p14 := $M.19;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} fcoe_destroy_work($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p6 := $M.17;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} fcoe_destroy_work($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 998} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 414533);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 415565);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_alloc_43: ref;

axiom ldv_scsi_host_alloc_43 == $sub.ref(0, 416597);

procedure ldv_scsi_host_alloc_43($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52;



implementation ldv_scsi_host_alloc_43($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "ldv_scsi_host_alloc_43:arg:privsize"} boogie_si_record_i32($i1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p2 := scsi_host_alloc($p0, $i1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_initialize_scsi_host_template_4();
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_host_alloc: ref;

axiom scsi_host_alloc == $sub.ref(0, 417629);

procedure scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "scsi_host_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p2 := external_alloc();
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 418661);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 419693);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1015} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_ctlr_device_add: ref;

axiom fcoe_ctlr_device_add == $sub.ref(0, 420725);

procedure fcoe_ctlr_device_add($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_ctlr_device_add($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} {:cexpr "fcoe_ctlr_device_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p3 := external_alloc();
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dev_hold: ref;

axiom dev_hold == $sub.ref(0, 421757);

procedure dev_hold($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_hold($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __bad_size_call_parameter();
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32(1, 1);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1029} devirtbounce.7(0, $p39, 1, $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1028} devirtbounce.6(0, $p37, $p37);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 1027} devirtbounce.6(0, $p34, $p34);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(1, 1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1026} devirtbounce.7(0, $p31, 1, $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1025} devirtbounce.6(0, $p29, $p29);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 1024} devirtbounce.6(0, $p26, $p26);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(1, 1);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1023} devirtbounce.7(0, $p23, 1, $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1022} devirtbounce.6(0, $p21, $p21);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1021} devirtbounce.6(0, $p18, $p18);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(1, 1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1020} devirtbounce.7(0, $p15, 1, $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1019} devirtbounce.6(0, $p13, $p13);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1018} devirtbounce.6(0, $p10, $p10);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const fcoe_ctlr_init: ref;

axiom fcoe_ctlr_init == $sub.ref(0, 422789);

procedure fcoe_ctlr_init($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fcoe_ctlr_init($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} {:cexpr "fcoe_ctlr_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_fip_send: ref;

axiom fcoe_fip_send == $sub.ref(0, 423821);

procedure fcoe_fip_send($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_fip_send($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(1, 160)), $mul.ref(16, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 784)), $mul.ref(8, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p9 := lport_priv($p8);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} fcoe_port_send($p10, $p1);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_get_src_mac: ref;

axiom fcoe_get_src_mac == $sub.ref(0, 424853);

procedure fcoe_get_src_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fcoe_get_src_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p1 := lport_priv($p0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fcoe_interface_setup: ref;

axiom fcoe_interface_setup == $sub.ref(0, 425885);

procedure fcoe_interface_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.63, $M.64, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_interface_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p77: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $i52: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p7 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p8 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p9 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p10 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 528)), $mul.ref(272, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 32);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p58 := $p1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p58);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} rcu_read_lock();
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p58, $mul.ref(0, 2968)), $mul.ref(744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p63);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __read_once_size($p64, $p66, 8);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.61, $p67);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i69 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1056} {:cexpr "tmp___3"} boogie_si_record_i32($i69);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p68);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 2968)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i72, $i75);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} rcu_read_unlock();
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(507, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p117, 14);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p118, $sub.i8(0, 4));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p119, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p120, $sub.i8(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p121, $sub.i8(0, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p122, $sub.i8(0, 2));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p2);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p7);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.63;
    cmdloc_dummy_var_32 := $M.63;
    call {:si_unique_call 1065} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p123, $p124, 6, $zext.i32.i64(1), 0 == 1);
    $M.63 := cmdloc_dummy_var_33;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p2);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_126 := dev_uc_add($p1, $p125);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(507, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(4, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 5);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i136 == 1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p153, 1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p154, 16);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p155, 24);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p156, 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p157, 0);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p10, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p158, 1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p10);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vslice_dummy_var_130 := dev_mc_add($p1, $p159);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, fcoe_rcv);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, 1673);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, $p1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} dev_add_pack($p168);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p171, fcoe_fip_recv);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, 5257);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p175, $p1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} dev_add_pack($p176);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb44:
    assume $i136 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p137, 1);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p138, 16);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p139, 24);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p140, 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p141, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p142, 4);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p8);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_128 := dev_mc_add($p1, $p143);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p145, 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p146, 16);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p147, 24);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p148, 1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p149, 0);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $M.64 := $store.i8($M.64, $p150, 5);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p9);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_129 := dev_mc_add($p1, $p151);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i130 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_127 := dev_uc_add($p1, $p132);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i109 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 1064} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p111, $p113, $i116, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p77 := $p68;
    goto $bb26;

  $bb26:
    call $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $p87, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $p102, $p103, $i104, $i105, $p77 := fcoe_interface_setup_loop_$bb26($p5, $p6, $i75, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $p87, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $p102, $p103, $i104, $i105, $p77);
    goto $bb26_last;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p95);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p5);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p6);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __read_once_size($p96, $p98, 8);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p6);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.62, $p99);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i101 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1063} {:cexpr "tmp___5"} boogie_si_record_i32($i101);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p100);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, $i75);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i105 == 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $p77 := $p100;
    goto $bb35_dummy;

  $bb28:
    assume $i81 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p77, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i84 := is_valid_ether_addr($p83);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    call {:si_unique_call 1058} {:cexpr "tmp___4"} boogie_si_record_i8($i85);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p87 := $p77;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(516, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p87, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1059} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p89, $p91, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(507, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb20:
    assume $i56 == 1;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p57 := vlan_dev_real_dev($p1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p58 := $p57;
    goto $bb22;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1024);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i42 := $M.15;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 2);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 1050} {:cexpr "tmp___1"} boogie_si_record_i64($i47);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 95);
    goto $bb18;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} vslice_dummy_var_125 := printk.ref.ref(.str.43, $p50);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 528)), $mul.ref(272, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1044} $i22 := devirtbounce.13($p21, $p1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 1045} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i24 := $M.15;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1047} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_124 := printk.ref.ref(.str.42, $p32);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb35_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4603;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 426917);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __rcu_read_lock();
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i3 := rcu_is_watching();
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1078} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} lockdep_rcu_suspicious(.str.44, 849, .str.45);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 427949);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    call {:si_unique_call 1080} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 1081} devirtbounce.1(0);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 1082} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    call {:si_unique_call 1083} devirtbounce.1(0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 428981);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 430013);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1087} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1089} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 431045);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1091} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __rcu_read_unlock();
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i3 := rcu_is_watching();
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1093} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} lockdep_rcu_suspicious(.str.44, 900, .str.46);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const dev_mc_add: ref;

axiom dev_mc_add == $sub.ref(0, 432077);

procedure dev_mc_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_mc_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1097} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1098} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fcoe_rcv: ref;

axiom fcoe_rcv == $sub.ref(0, 433109);

procedure fcoe_rcv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const dev_add_pack: ref;

axiom dev_add_pack == $sub.ref(0, 434141);

procedure dev_add_pack($p0: ref);
  free requires assertsPassed;



implementation dev_add_pack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_fip_recv: ref;

axiom fcoe_fip_recv == $sub.ref(0, 435173);

procedure fcoe_fip_recv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const fcoe_ctlr_recv: ref;

axiom fcoe_ctlr_recv == $sub.ref(0, 436205);

procedure fcoe_ctlr_recv($p0: ref, $p1: ref);



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 437237);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 438269);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);



const pskb_may_pull: ref;

axiom pskb_may_pull == $sub.ref(0, 439301);

procedure pskb_may_pull($p0: ref, $i1: i32) returns ($r: i32);



const skb_set_transport_header: ref;

axiom skb_set_transport_header == $sub.ref(0, 440333);

procedure skb_set_transport_header($p0: ref, $i1: i32);



const fcoe_select_cpu: ref;

axiom fcoe_select_cpu == $sub.ref(0, 441365);

procedure fcoe_select_cpu() returns ($r: i32);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 442397);

procedure spin_lock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 443429);

procedure spin_unlock($p0: ref);



const cpumask_first: ref;

axiom cpumask_first == $sub.ref(0, 444461);

procedure cpumask_first($p0: ref) returns ($r: i32);



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 445493);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 446525);

procedure ldv_spin_unlock_9($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 447557);

procedure _raw_spin_unlock($p0: ref);



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 448589);

procedure ldv_spin_lock_5($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 449621);

procedure _raw_spin_lock($p0: ref);



const skb_reset_transport_header: ref;

axiom skb_reset_transport_header == $sub.ref(0, 450653);

procedure skb_reset_transport_header($p0: ref);



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 451685);

procedure skb_headlen($p0: ref) returns ($r: i32);



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 452717);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 453749);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 454781);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} devirtbounce.1(0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __preempt_count_sub(1);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 455813);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} lock_release($p0, 1, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 456845);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1106} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 457877);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1107} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 458909);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __preempt_count_add(1);
    call {:si_unique_call 1109} devirtbounce.1(0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 459941);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 460973);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1112} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1113} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1114} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1115} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    return;
}



const fc_set_rport_loss_tmo: ref;

axiom fc_set_rport_loss_tmo == $sub.ref(0, 462005);

procedure fc_set_rport_loss_tmo($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fc_set_rport_loss_tmo($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} {:cexpr "fc_set_rport_loss_tmo:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    return;
}



const fc_get_host_port_state: ref;

axiom fc_get_host_port_state == $sub.ref(0, 463037);

procedure fc_get_host_port_state($p0: ref);
  free requires assertsPassed;



implementation fc_get_host_port_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    return;
}



const fc_get_host_speed: ref;

axiom fc_get_host_speed == $sub.ref(0, 464069);

procedure fc_get_host_speed($p0: ref);
  free requires assertsPassed;



implementation fc_get_host_speed($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    return;
}



const fc_get_host_stats: ref;

axiom fc_get_host_stats == $sub.ref(0, 465101);

procedure fc_get_host_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_get_host_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p1 := external_alloc();
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fcoe_reset: ref;

axiom fcoe_reset == $sub.ref(0, 466133);

procedure fcoe_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $p1 := shost_priv($p0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p3 := lport_priv($p2);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 1), 784));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(40, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_131 := fcoe_ctlr_link_down($p9);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} fcoe_clean_pending_queue($p14);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 1720)), $mul.ref(1688, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 1);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i20 := fcoe_link_ok($p19);
    call {:si_unique_call 1123} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} fcoe_ctlr_link_up($p9);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fc_rport_terminate_io: ref;

axiom fc_rport_terminate_io == $sub.ref(0, 467165);

procedure fc_rport_terminate_io($p0: ref);
  free requires assertsPassed;



implementation fc_rport_terminate_io($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_set_vport_symbolic_name: ref;

axiom fcoe_set_vport_symbolic_name == $sub.ref(0, 468197);

procedure fcoe_set_vport_symbolic_name($p0: ref);
  free requires assertsPassed;



implementation fcoe_set_vport_symbolic_name($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(104, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p4 := fcoe_netdev($p3);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1712)), $mul.ref(1056, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(36, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_132 := snprintf.ref.i64.ref.ref.ref.ref.ref($p11, 256, .str.35, .str.18, .str.27, $p13, $p15);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1688)), $mul.ref(804, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 14);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1688)), $mul.ref(0, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1712)), $mul.ref(1056, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i27 := strnlen($p26, 255);
    call {:si_unique_call 1128} {:cexpr "len"} boogie_si_record_i64($i27);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 21);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p29 := fc_frame_alloc($p3, $i28);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1688)), $mul.ref(528, 1)), $mul.ref(8, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 1688)), $mul.ref(1088, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, 3);
    call {:si_unique_call 1130} vslice_dummy_var_133 := devirtbounce.17($p34, $p3, 16777212, $p29, 536, $0.ref, $0.ref, $i37);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_vport_create: ref;

axiom fcoe_vport_create == $sub.ref(0, 469229);

procedure fcoe_vport_create($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.25, $M.39, $M.40, $M.24, assertsPassed, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.63, $M.64;



implementation fcoe_vport_create($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $i22: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 1132} {:cexpr "fcoe_vport_create:arg:disabled"} boogie_si_record_i1($i1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(112, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p6 := shost_priv($p5);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p8 := lport_priv($p7);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i15 := fcoe_validate_vport_create($p0);
    call {:si_unique_call 1136} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} rtnl_lock();
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(152, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p24 := fcoe_if_create($p12, $p23, 1);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} rtnl_unlock();
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i26 := IS_ERR($p25);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1145} {:cexpr "tmp___1"} boogie_si_record_i8($i27);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i3);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, jiffies);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref(0, 1688)), $mul.ref(808, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i33);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_136 := fc_fabric_login($p24);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} fc_vport_setlink($p24);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} fc_vport_set_state($p0, 2);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} vslice_dummy_var_135 := printk.ref.ref(.str.7, $p30);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(16, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} fcoe_wwn_to_str($i18, $p19, 32);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_134 := printk.ref.ref(.str.6, $p20);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i22 := $i15;
    goto $bb3;
}



const fcoe_vport_disable: ref;

axiom fcoe_vport_disable == $sub.ref(0, 470261);

procedure fcoe_vport_disable($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fcoe_vport_disable($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i64;
  var $p9: ref;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1150} {:cexpr "fcoe_vport_disable:arg:disable"} boogie_si_record_i1($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(104, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, jiffies);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1688)), $mul.ref(808, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_138 := fc_fabric_login($p5);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} fc_vport_setlink($p5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} fc_vport_set_state($p0, 2);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vslice_dummy_var_137 := fc_fabric_logoff($p5);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fcoe_vport_destroy: ref;

axiom fcoe_vport_destroy == $sub.ref(0, 471293);

procedure fcoe_vport_destroy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.24, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_vport_destroy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(112, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p3 := shost_priv($p2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(104, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1688)), $mul.ref(1200, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} mutex_lock_nested($p8, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 1688)), $mul.ref(1360, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} list_del($p9);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1688)), $mul.ref(1200, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} mutex_unlock($p10);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} fcoe_if_destroy($p7);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const fc_lport_bsg_request: ref;

axiom fc_lport_bsg_request == $sub.ref(0, 472325);

procedure fc_lport_bsg_request($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_lport_bsg_request($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_vport_set_state: ref;

axiom fc_vport_set_state == $sub.ref(0, 473357);

procedure fc_vport_set_state($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fc_vport_set_state($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} {:cexpr "fc_vport_set_state:arg:new_state"} boogie_si_record_i32($i1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(0, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i1);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 4);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(0, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(4, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const fc_vport_setlink: ref;

axiom fc_vport_setlink == $sub.ref(0, 474389);

procedure fc_vport_setlink($p0: ref);
  free requires assertsPassed;



implementation fc_vport_setlink($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_validate_vport_create: ref;

axiom fcoe_validate_vport_create == $sub.ref(0, 475421);

procedure fcoe_validate_vport_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_validate_vport_create($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_wwn_to_str: ref;

axiom fcoe_wwn_to_str == $sub.ref(0, 476453);

procedure fcoe_wwn_to_str($i0: i64, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation fcoe_wwn_to_str($i0: i64, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} {:cexpr "fcoe_wwn_to_str:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1168} {:cexpr "fcoe_wwn_to_str:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    return;
}



const strnlen: ref;

axiom strnlen == $sub.ref(0, 477485);

procedure strnlen($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strnlen($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1169} {:cexpr "strnlen:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fc_frame_alloc: ref;

axiom fc_frame_alloc == $sub.ref(0, 478517);

procedure fc_frame_alloc($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation fc_frame_alloc($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i1;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} {:cexpr "fc_frame_alloc:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p7 := _fc_frame_alloc($i1);
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i1, 3);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p5 := fc_frame_alloc_fill($p0, $i1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb6;
}



const fc_frame_alloc_fill: ref;

axiom fc_frame_alloc_fill == $sub.ref(0, 479549);

procedure fc_frame_alloc_fill($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation fc_frame_alloc_fill($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} {:cexpr "fc_frame_alloc_fill:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p2 := external_alloc();
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const _fc_frame_alloc: ref;

axiom _fc_frame_alloc == $sub.ref(0, 480581);

procedure _fc_frame_alloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation _fc_frame_alloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "_fc_frame_alloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p1 := external_alloc();
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 481613);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p1 := calloc(1, $i0);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} __VERIFIER_assume($i4);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 482645);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1183} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 1184} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_fcoe_transport_3: ref;

axiom ldv_initialize_fcoe_transport_3 == $sub.ref(0, 483677);

procedure ldv_initialize_fcoe_transport_3();
  free requires assertsPassed;
  modifies $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_fcoe_transport_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.65 := $p0;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 484709);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.53, $M.55, $M.57, $M.59;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_stop();
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i18 := $M.59;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1195} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i20 := $M.59;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p21 := $M.60;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} ldv_timer_2($i20, $p21);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i14 := $M.57;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1193} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i16 := $M.57;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p17 := $M.58;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_timer_2($i16, $p17);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i10 := $M.55;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1191} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i12 := $M.55;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p13 := $M.56;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_timer_2($i12, $p13);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i6 := $M.53;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1189} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i8 := $M.53;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p9 := $M.54;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_timer_2($i8, $p9);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 485741);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} fcoe_queue_timer($i3);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 486773);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 487805);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1202} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1203} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 1204} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 1205} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_fc_function_template_6: ref;

axiom ldv_initialize_fc_function_template_6 == $sub.ref(0, 488837);

procedure ldv_initialize_fc_function_template_6();
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_fc_function_template_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p0 := ldv_init_zalloc(3816);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p2 := ldv_init_zalloc(1648);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.68 := $p2;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $p4 := ldv_init_zalloc(2208);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $M.69 := $p4;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 489869);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.16, $M.24, $M.0, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1211} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} ldv_stop();
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i21 := $M.22;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i23 := $M.22;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 1221} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p25 := $M.17;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} fcoe_destroy_work($p25);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i18 := $M.20;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.20 := 4;
    call {:si_unique_call 1218} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p20 := $M.17;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} fcoe_destroy_work($p20);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1220} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i13 := $M.18;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 1215} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p15 := $M.17;
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} fcoe_destroy_work($p15);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1217} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 1212} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} fcoe_destroy_work($p10);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1214} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_initialize_fcoe_sysfs_function_template_8: ref;

axiom ldv_initialize_fcoe_sysfs_function_template_8 == $sub.ref(0, 490901);

procedure ldv_initialize_fcoe_sysfs_function_template_8();
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_fcoe_sysfs_function_template_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p0 := ldv_init_zalloc(1712);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p2 := ldv_init_zalloc(1808);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.71 := $p2;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_libfc_function_template_7: ref;

axiom ldv_initialize_libfc_function_template_7 == $sub.ref(0, 491933);

procedure ldv_initialize_libfc_function_template_7();
  free requires assertsPassed;
  modifies $M.72, $M.73, $M.74, $M.0, $CurrAddr;



implementation ldv_initialize_libfc_function_template_7()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p0 := ldv_init_zalloc(232);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $p2 := ldv_init_zalloc(1688);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $M.73 := $p2;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p4 := ldv_init_zalloc(40);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $M.74 := $p4;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_fc_function_template_5: ref;

axiom ldv_initialize_fc_function_template_5 == $sub.ref(0, 492965);

procedure ldv_initialize_fc_function_template_5();
  free requires assertsPassed;
  modifies $M.75, $M.76, $M.0, $CurrAddr;



implementation ldv_initialize_fc_function_template_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p0 := ldv_init_zalloc(3816);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.75 := $p0;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p2 := ldv_init_zalloc(2208);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $M.76 := $p2;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 493997);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.53, $M.55, $M.57, $M.59;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1232} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1233} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1234} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 1235} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 495029);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.77, $M.78, $M.79, $M.80, $M.81, $M.53, $M.55, $M.57, $M.59, $M.82, $M.83, $M.16, $M.18, $M.20, $M.22, $M.84, $M.50, $M.85, $M.86, $M.87, $M.88, $M.39, $M.40, $M.9, $M.11, $M.5, $M.7, $M.24, $M.89, $M.75, $M.76, $M.70, $M.71, $M.72, $M.73, $M.74, $M.65, $M.67, $M.68, $M.69, $M.17, $M.19, $M.21, $M.23, $M.51, $M.52, $M.54, $M.56, $M.58, $M.60, $M.15, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.14, $M.43, $M.42, $M.135, $M.136, $M.137, $CurrAddr, $M.25, $M.41, $M.34, $M.35, $M.36, $M.63, $M.64, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i1;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i1;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i64;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i16;
  var $i203: i32;
  var $i204: i16;
  var $p205: ref;
  var $i206: i32;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i32;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i16;
  var $i226: i32;
  var $i227: i16;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $i244: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i64;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $i307: i1;
  var $i308: i1;
  var $i309: i1;
  var $i310: i1;
  var $i311: i1;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i316: i32;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i338: i32;
  var $i339: i1;
  var $i340: i32;
  var $i341: i1;
  var $i342: i1;
  var $i343: i1;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i64;
  var $i363: i32;
  var $i364: i1;
  var $i365: i32;
  var $i366: i1;
  var $i367: i1;
  var $i368: i1;
  var $i369: i1;
  var $i370: i1;
  var $i371: i1;
  var $i372: i1;
  var $i373: i1;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i32;
  var $i386: i1;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var vslice_dummy_var_139: ref;
  var vslice_dummy_var_140: ref;
  var vslice_dummy_var_141: ref;
  var vslice_dummy_var_142: ref;
  var vslice_dummy_var_143: ref;
  var vslice_dummy_var_144: ref;
  var vslice_dummy_var_145: ref;
  var vslice_dummy_var_146: ref;
  var vslice_dummy_var_147: ref;
  var vslice_dummy_var_148: ref;
  var vslice_dummy_var_149: ref;
  var vslice_dummy_var_150: ref;
  var vslice_dummy_var_151: ref;
  var vslice_dummy_var_152: ref;
  var vslice_dummy_var_153: ref;
  var vslice_dummy_var_154: ref;
  var vslice_dummy_var_155: ref;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: ref;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: ref;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i1;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: ref;

  $bb0:
    call {:si_unique_call 1236} $initialize();
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p13 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p14 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p19 := ldv_init_zalloc(184);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p21 := ldv_init_zalloc(24);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $p25 := ldv_init_zalloc(24);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p28 := ldv_init_zalloc(24);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p30 := ldv_init_zalloc(3816);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p33 := ldv_init_zalloc(24);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p35 := ldv_init_zalloc(184);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} ldv_initialize();
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_139 := ldv_memset($p0, 0, 1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_140 := ldv_memset($p38, 0, 4);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_141 := ldv_memset($p2, 0, 1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} vslice_dummy_var_142 := ldv_memset($p41, 0, 8);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_143 := ldv_memset($p43, 0, 4);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p5);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_144 := ldv_memset($p45, 0, 4);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p6);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_145 := ldv_memset($p47, 0, 2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p7);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_146 := ldv_memset($p49, 0, 4);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p8);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_147 := ldv_memset($p51, 0, 4);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p9);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_148 := ldv_memset($p53, 0, 4);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p10);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vslice_dummy_var_149 := ldv_memset($p55, 0, 4);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p11);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} vslice_dummy_var_150 := ldv_memset($p57, 0, 8);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p12);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_151 := ldv_memset($p59, 0, 4);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p13);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_152 := ldv_memset($p61, 0, 2);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p14);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_153 := ldv_memset($p63, 0, 2);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p15);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_154 := ldv_memset($p65, 0, 8);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p16);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_155 := ldv_memset($p67, 0, 4);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p17);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_156 := ldv_memset($p69, 0, 8);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p18);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_157 := ldv_memset($p71, 0, 4);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 1289} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} timer_init_2();
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} work_init_1();
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1299} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1302} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i109, $i110, $p111, $i112, $i113, $i114, $p115, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i126, $i127, $p128, $i129, $i130, $p131, $i133, $i134, $p135, $i136, $i137, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $p165, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $i179, $i180, $p181, $i183, $i184, $p185, $i186, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $p205, $i206, $i208, $i209, $p210, $i211, $p212, $i213, $p214, $i215, $i217, $i218, $p219, $i220, $p221, $i222, $i223, $p224, $i225, $i226, $i227, $i229, $i230, $p231, $i232, $i233, $p234, $p235, $i237, $i238, $p239, $i240, $i241, $i242, $p243, $i244, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $p275, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $p285, $i286, $i287, $p288, $i289, $i290, $p291, $i292, $i293, $p294, $i295, $i296, $p297, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $p315, $i316, $i318, $i319, $p320, $i322, $i323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $p376, $i377, $i378, $p379, $i381, $i382, $p383, $i384, $i385, $i386, $i388, $i389, $p390, $i392, $i393, $p394, $i395, $i396, $p397, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p22, $p23, $p24, $p26, $p27, $p29, $p31, $p32, $p34, $p36, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i109, $i110, $p111, $i112, $i113, $i114, $p115, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i126, $i127, $p128, $i129, $i130, $p131, $i133, $i134, $p135, $i136, $i137, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $p165, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $i179, $i180, $p181, $i183, $i184, $p185, $i186, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $p205, $i206, $i208, $i209, $p210, $i211, $p212, $i213, $p214, $i215, $i217, $i218, $p219, $i220, $p221, $i222, $i223, $p224, $i225, $i226, $i227, $i229, $i230, $p231, $i232, $i233, $p234, $p235, $i237, $i238, $p239, $i240, $i241, $i242, $p243, $i244, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $p275, $i276, $i277, $p278, $i280, $i281, $p282, $i283, $i284, $p285, $i286, $i287, $p288, $i289, $i290, $p291, $i292, $i293, $p294, $i295, $i296, $p297, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $p315, $i316, $i318, $i319, $p320, $i322, $i323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $p376, $i377, $i378, $p379, $i381, $i382, $p383, $i384, $i385, $i386, $i388, $i389, $p390, $i392, $i393, $p394, $i395, $i396, $p397, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_stop();
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb95_dummy;

  $bb11:
    assume $i78 == 1;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i363 := $M.88;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i364 := $ne.i32($i363, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb353:
    assume $i364 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} $i365 := __VERIFIER_nondet_int();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i365);
    call {:si_unique_call 1452} {:cexpr "tmp___20"} boogie_si_record_i32($i365);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i366 := $slt.i32($i365, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    $i367 := $slt.i32($i365, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    $i368 := $slt.i32($i365, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i365, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume !($i369 == 1);
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_stop();
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb362:
    assume $i369 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i395 := $M.88;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 1);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb392:
    assume $i396 == 1;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p397 := $M.75;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} fc_get_host_port_state($p397);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb360:
    assume $i368 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i392 := $M.88;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 1);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb389:
    assume $i393 == 1;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p394 := $M.76;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} fc_rport_terminate_io($p394);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb358:
    assume $i367 == 1;
    assume {:verifier.code 0} true;
    $i370 := $slt.i32($i365, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i370 == 1);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i388 := $M.88;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb386:
    assume $i389 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p390 := $M.75;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_187 := fc_get_host_stats($p390);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb365:
    assume $i370 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i385 := $M.88;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb383:
    assume $i386 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_186 := fc_lport_bsg_request($p36);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb356:
    assume $i366 == 1;
    assume {:verifier.code 0} true;
    $i371 := $slt.i32($i365, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    $i372 := $slt.i32($i365, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i372 == 1);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i381 := $M.88;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 1);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb380:
    assume $i382 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p383 := $M.76;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p18);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} fc_set_rport_loss_tmo($p383, $i384);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb369:
    assume $i372 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i377 := $M.88;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb377:
    assume $i378 == 1;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p379 := $M.75;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_185 := fcoe_reset($p379);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb367:
    assume $i371 == 1;
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i365, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    assume !($i373 == 1);
    goto $bb364;

  $bb371:
    assume $i373 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i374 := $M.88;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb373:
    assume $i375 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p376 := $M.75;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} fc_get_host_speed($p376);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb9:
    assume $i77 == 1;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i355 := $M.87;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i356 := $ne.i32($i355, 0);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb341:
    assume $i356 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} $i357 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i357);
    call {:si_unique_call 1446} {:cexpr "tmp___19"} boogie_si_record_i32($i357);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_stop();
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb344:
    assume $i358 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i359 := $M.87;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb346:
    assume $i360 == 1;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i361 := $load.i64($M.0, $p17);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_184 := fcoe_cpu_callback($p34, $i361, $p32);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    goto $bb348;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i76 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i338 := $M.86;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb311:
    assume $i339 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1420} $i340 := __VERIFIER_nondet_int();
    call {:si_unique_call 1421} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i340);
    call {:si_unique_call 1422} {:cexpr "tmp___18"} boogie_si_record_i32($i340);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i340, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i340, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_stop();
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb316:
    assume $i342 == 1;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i348 := $M.86;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 1);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb329:
    assume $i349 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i350 := fcoe_init();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $M.89 := $i350;
    call {:si_unique_call 1427} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i350);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i351 := $M.89;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $i353 := $M.89;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb334:
    assume $i354 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} ldv_check_final_state();
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb331:
    assume $i352 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_initialize_fc_function_template_5();
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} ldv_initialize_fcoe_sysfs_function_template_8();
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_initialize_libfc_function_template_7();
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_initialize_fcoe_transport_3();
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_initialize_fc_function_template_6();
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb333;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb314:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i340, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i343 == 1);
    goto $bb318;

  $bb319:
    assume $i343 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i344 := $M.86;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 3);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb321:
    assume $i345 == 1;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i346 := $M.85;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 0);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb323;

  $bb324:
    assume $i347 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} fcoe_exit();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1424} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    goto $bb326;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i303 := $M.50;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb271:
    assume $i304 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1404} $i305 := __VERIFIER_nondet_int();
    call {:si_unique_call 1405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i305);
    call {:si_unique_call 1406} {:cexpr "tmp___17"} boogie_si_record_i32($i305);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i306 := $slt.i32($i305, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    $i307 := $slt.i32($i305, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i305, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i305, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} ldv_stop();
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb280:
    assume $i309 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i334 := $M.50;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 1);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb305:
    assume $i335 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p336 := $M.51;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_183 := fc_eh_host_reset($p336);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb278:
    assume $i308 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i330 := $M.50;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb302:
    assume $i331 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p332 := $M.52;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} vslice_dummy_var_182 := fc_slave_alloc($p332);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1416} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb276:
    assume $i307 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i326 := $M.50;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb299:
    assume $i327 == 1;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p328 := $M.51;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} vslice_dummy_var_181 := fc_eh_abort($p328);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb274:
    assume $i306 == 1;
    assume {:verifier.code 0} true;
    $i310 := $slt.i32($i305, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    $i311 := $slt.i32($i305, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i311 == 1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i322 := $M.50;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 1);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb296:
    assume $i323 == 1;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p324 := $M.51;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_180 := fc_eh_device_reset($p324);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1412} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb285:
    assume $i311 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i318 := $M.50;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb293:
    assume $i319 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p320 := $M.51;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_179 := fc_queuecommand($p31, $p320);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb283:
    assume $i310 == 1;
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i305, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i312 == 1);
    goto $bb282;

  $bb287:
    assume $i312 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i313 := $M.50;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb289:
    assume $i314 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p315 := $M.52;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p16);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_178 := scsi_change_queue_depth($p315, $i316);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1408} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i301 := $M.84;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb268:
    assume $i302 == 1;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} invoke_work_1();
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb270;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i79 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i256 := $M.83;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb208:
    assume $i257 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1379} $i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i258);
    call {:si_unique_call 1381} {:cexpr "tmp___16"} boogie_si_record_i32($i258);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i258, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i258, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i258, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $slt.i32($i258, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i258, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_stop();
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb219:
    assume $i263 == 1;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i298 := $M.83;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 1);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb262:
    assume $i299 == 1;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p300 := $M.70;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} fcoe_ctlr_get_lesb($p300);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb217:
    assume $i262 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i295 := $M.83;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb259:
    assume $i296 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p297 := $M.71;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} fcoe_fcf_get_vlan_id($p297);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb215:
    assume $i261 == 1;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i292 := $M.83;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 1);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb256:
    assume $i293 == 1;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p294 := $M.70;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} fcoe_ctlr_get_lesb($p294);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb213:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i264 := $slt.i32($i258, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i264 == 1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i289 := $M.83;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 1);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb253:
    assume $i290 == 1;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p291 := $M.71;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} fcoe_fcf_get_selected($p291);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb222:
    assume $i264 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i286 := $M.83;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb250:
    assume $i287 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p288 := $M.70;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} fcoe_ctlr_get_lesb($p288);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb211:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i258, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i258, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i267 == 1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i283 := $M.83;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb247:
    assume $i284 == 1;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p285 := $M.70;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} fcoe_ctlr_get_lesb($p285);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb228:
    assume $i267 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i280 := $M.83;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb244:
    assume $i281 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p282 := $M.70;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} fcoe_ctlr_set_fip_mode($p282);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb226:
    assume $i266 == 1;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i276 := $M.83;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb241:
    assume $i277 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p278 := $M.70;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_177 := fcoe_ctlr_enabled($p278);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb224:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i268 == 1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i273 := $M.83;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 1);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb238:
    assume $i274 == 1;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p275 := $M.70;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} fcoe_ctlr_get_lesb($p275);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb230:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb221;

  $bb232:
    assume $i269 == 1;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i270 := $M.83;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb234:
    assume $i271 == 1;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p272 := $M.70;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} fcoe_ctlr_get_lesb($p272);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb3:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i254 := $M.82;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb205:
    assume $i255 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} choose_timer_2();
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i246 := $M.81;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb193:
    assume $i247 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1372} $i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 1373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i248);
    call {:si_unique_call 1374} {:cexpr "tmp___15"} boogie_si_record_i32($i248);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_stop();
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb196:
    assume $i249 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i250 := $M.81;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb198:
    assume $i251 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.0, $p15);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_176 := fcoe_dcb_app_notification($p29, $i252, $p27);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb20:
    assume $i82 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i188 := $M.80;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb148:
    assume $i189 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1354} $i190 := __VERIFIER_nondet_int();
    call {:si_unique_call 1355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i190);
    call {:si_unique_call 1356} {:cexpr "tmp___14"} boogie_si_record_i32($i190);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i190, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i190, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i190, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i190, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_stop();
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb157:
    assume $i194 == 1;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i237 := $M.80;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb187:
    assume $i238 == 1;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p239 := $M.73;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.0, $p14);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p243 := $M.74;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p10);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_175 := fcoe_ddp_target($p239, $i242, $p243, $i244);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb155:
    assume $i193 == 1;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i232 := $M.80;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 1);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb184:
    assume $i233 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p234 := $M.73;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p235 := $M.72;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_174 := fcoe_xmit($p234, $p235);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb186;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb153:
    assume $i192 == 1;
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i195 == 1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i229 := $M.80;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb181:
    assume $i230 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p231 := $M.73;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} fcoe_get_lesb($p231, $p26);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb160:
    assume $i195 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i222 := $M.80;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb178:
    assume $i223 == 1;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p224 := $M.73;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i225 := $load.i16($M.0, $p6);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i226 := $zext.i16.i32($i225);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i32.i16($i226);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_173 := fcoe_ddp_done($p224, $i227);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb180;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb151:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i190, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i190, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i197 == 1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i217 := $M.80;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb175:
    assume $i218 == 1;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p219 := $M.73;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p7);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p221 := $M.72;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} fcoe_set_port_id($p219, $i220, $p221);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb164:
    assume $i197 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i208 := $M.80;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb172:
    assume $i209 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p210 := $M.73;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p8);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p212 := $M.72;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p12);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p11);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p9);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_172 := fcoe_elsct_send($p210, $i211, $p212, $i213, $p214, $p24, $i215);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb162:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i190, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb159;

  $bb166:
    assume $i198 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i199 := $M.80;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb168:
    assume $i200 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p201 := $M.73;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i202 := $load.i16($M.0, $p13);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i203 := $zext.i16.i32($i202);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i16($i203);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p205 := $M.74;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p5);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_171 := fcoe_ddp_setup($p201, $i204, $p205, $i206);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb18:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i153 := $M.79;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb108:
    assume $i154 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1338} $i155 := __VERIFIER_nondet_int();
    call {:si_unique_call 1339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i155);
    call {:si_unique_call 1340} {:cexpr "tmp___13"} boogie_si_record_i32($i155);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i155, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i155, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i155, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i155, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} ldv_stop();
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb117:
    assume $i159 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i183 := $M.79;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 1);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb142:
    assume $i184 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p185 := $M.65;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p4);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_170 := fcoe_create($p185, $i186);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb115:
    assume $i158 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i179 := $M.79;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb139:
    assume $i180 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p181 := $M.65;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_169 := fcoe_enable($p181);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb113:
    assume $i157 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i175 := $M.79;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb136:
    assume $i176 == 1;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p177 := $M.65;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_168 := fcoe_ctlr_alloc($p177);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i155, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i155, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i161 == 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i171 := $M.79;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb133:
    assume $i172 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p173 := $M.65;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_167 := fcoe_match($p173);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb122:
    assume $i161 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i167 := $M.79;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb130:
    assume $i168 == 1;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p169 := $M.65;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_166 := fcoe_destroy($p169);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb120:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i155, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb119;

  $bb124:
    assume $i162 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i163 := $M.79;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i164 == 1;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p165 := $M.65;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_165 := fcoe_disable($p165);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb26:
    assume $i85 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i145 := $M.78;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb96:
    assume $i146 == 1;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i147 := __VERIFIER_nondet_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i147);
    call {:si_unique_call 1334} {:cexpr "tmp___12"} boogie_si_record_i32($i147);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_stop();
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i148 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i149 := $M.78;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i150 == 1;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p3);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_164 := fcoe_device_notification($p22, $i151, $p23);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb13;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i87 := $M.77;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1306} $i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1307} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i89);
    call {:si_unique_call 1308} {:cexpr "tmp___11"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i89, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i89, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_stop();
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb41:
    assume $i94 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i142 := $M.77;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb89:
    assume $i143 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p144 := $M.67;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} fc_get_host_port_state($p144);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb39:
    assume $i93 == 1;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i139 := $M.77;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb86:
    assume $i140 == 1;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p141 := $M.69;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} fc_rport_terminate_io($p141);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1328} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i133 := $M.77;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb83:
    assume $i134 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p135 := $M.68;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i136);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_163 := fcoe_vport_disable($p135, $i137);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb35:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i89, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i89, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i96 == 1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i129 := $M.77;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb80:
    assume $i130 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p131 := $M.67;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_162 := fc_get_host_stats($p131);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb46:
    assume $i96 == 1;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i126 := $M.77;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb77:
    assume $i127 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p128 := $M.68;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} fcoe_set_vport_symbolic_name($p128);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i120 := $M.77;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb74:
    assume $i121 == 1;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p122 := $M.68;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i8.i1($i123);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_161 := fcoe_vport_create($p122, $i124);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i89, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i89, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i89, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i99 == 1);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i117 := $M.77;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb71:
    assume $i118 == 1;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_160 := fc_lport_bsg_request($p20);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1318} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb52:
    assume $i99 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i113 := $M.77;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb68:
    assume $i114 == 1;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p115 := $M.68;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_159 := fcoe_vport_destroy($p115);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i98 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i109 := $M.77;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb65:
    assume $i110 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p111 := $M.69;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p1);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} fc_set_rport_loss_tmo($p111, $i112);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb48:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i100 == 1);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i105 := $M.77;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62:
    assume $i106 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p107 := $M.67;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_158 := fcoe_reset($p107);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb54:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb43;

  $bb56:
    assume $i101 == 1;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i102 := $M.77;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i103 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p104 := $M.67;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} fc_get_host_speed($p104);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb95_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1303} $i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 1304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i73);
    call {:si_unique_call 1305} {:cexpr "tmp___10"} boogie_si_record_i32($i73);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 496061);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_exit: ref;

axiom fcoe_exit == $sub.ref(0, 497093);

procedure fcoe_exit();
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.43, $M.42, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p9: ref;
  var $p10: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i33: i32;
  var $p38: ref;
  var vslice_dummy_var_188: i1;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} fcoe_dev_cleanup();
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} rtnl_lock();
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, fcoe_hostlist);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} rtnl_unlock();
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} cpu_maps_update_begin();
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i30 := cpumask_next($sub.i32(0, 1), $p29);
    call {:si_unique_call 1478} {:cexpr "cpu"} boogie_si_record_i32($i30);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, $i30);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} __unregister_cpu_notifier(fcoe_cpu_notifier);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} cpu_maps_update_done();
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p38 := $M.14;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} ldv_destroy_workqueue_48($p38);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_189 := fcoe_if_exit();
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_190 := fcoe_transport_detach(fcoe_sw_transport);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    goto $bb12;

  $bb12:
    call $p34, $i35, $i36, $i37, $i33 := fcoe_exit_loop_$bb12($p34, $i35, $i36, $i37, $i33);
    goto $bb12_last;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} fcoe_percpu_thread_destroy($i33);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i35 := cpumask_next($i33, $p34);
    call {:si_unique_call 1481} {:cexpr "cpu"} boogie_si_record_i32($i35);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, $i35);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb14_dummy;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p0, $p4;
    goto $bb4;

  $bb4:
    call $p11, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p23, $p24, $p26, $i27, $i28, $p9, $p10, vslice_dummy_var_188 := fcoe_exit_loop_$bb4($p11, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p23, $p24, $p26, $i27, $i28, $p9, $p10, vslice_dummy_var_188);
    goto $bb4_last;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $p15 := lport_priv($p14);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} fcoe_hostlist_del($p18);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p19 := $M.14;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_188 := queue_work($p19, $p20);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p9, $p10 := $p10, $p24;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5990;
}



const fcoe_init: ref;

axiom fcoe_init == $sub.ref(0, 498125);

procedure fcoe_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.43, $M.42, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.16, $M.18, $M.20, $M.22, $M.34, $M.35, $M.36, $M.17, $M.19, $M.21, $M.23, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i13: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i29: i32;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i36: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i43: i32;
  var $p48: ref;
  var $i5: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p1 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.18, 0, 0, $p0, .str.57);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $M.14 := $p1;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p2 := $M.14;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i6 := fcoe_transport_attach(fcoe_sw_transport);
    call {:si_unique_call 1491} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} mutex_lock_nested(fcoe_config_mutex, 0);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i10 := cpumask_next($sub.i32(0, 1), $p9);
    call {:si_unique_call 1495} {:cexpr "cpu"} boogie_si_record_i32($i10);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, $i10);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} cpu_maps_update_begin();
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i26 := cpumask_next($sub.i32(0, 1), $p25);
    call {:si_unique_call 1503} {:cexpr "cpu"} boogie_si_record_i32($i26);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, $i26);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i34 := __register_cpu_notifier(fcoe_cpu_notifier);
    call {:si_unique_call 1508} {:cexpr "rc"} boogie_si_record_i32($i34);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} cpu_maps_update_done();
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} fcoe_dev_setup();
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i37 := fcoe_if_init();
    call {:si_unique_call 1514} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i40 := cpumask_next($sub.i32(0, 1), $p39);
    call {:si_unique_call 1510} {:cexpr "cpu"} boogie_si_record_i32($i40);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, $i40);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} cpu_maps_update_done();
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} mutex_unlock(fcoe_config_mutex);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p48 := $M.14;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} ldv_destroy_workqueue_47($p48);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i5 := $i36;
    goto $bb3;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i42 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb34;

  $bb34:
    call $p44, $i45, $i46, $i47, $i43 := fcoe_init_loop_$bb34($p44, $i45, $i46, $i47, $i43);
    goto $bb34_last;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} fcoe_percpu_thread_destroy($i43);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $i45 := cpumask_next($i43, $p44);
    call {:si_unique_call 1518} {:cexpr "cpu"} boogie_si_record_i32($i45);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, $i45);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i47 == 1);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i45;
    goto $bb36_dummy;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb26;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb19;

  $bb19:
    call $p30, $i31, $i32, $i33, $i29 := fcoe_init_loop_$bb19($p30, $i31, $i32, $i33, $i29);
    goto $bb19_last;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} fcoe_percpu_thread_create($i29);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i31 := cpumask_next($i29, $p30);
    call {:si_unique_call 1506} {:cexpr "cpu"} boogie_si_record_i32($i31);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i32($i32, $i31);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb21_dummy;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb11;

  $bb11:
    call $i14, $i15, $p16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $i13 := fcoe_init_loop_$bb11($i14, $i15, $p16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $i13);
    goto $bb11_last;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 1496} $i14 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 1497} {:cexpr "__ptr"} boogie_si_record_i64($i14);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i13);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i15, 8));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i14);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} skb_queue_head_init($p20);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i22 := cpumask_next($i13, $p21);
    call {:si_unique_call 1500} {:cexpr "cpu"} boogie_si_record_i32($i22);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, $i22);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb13_dummy;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vslice_dummy_var_191 := printk.ref(.str.58);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6090;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 499157);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 500189);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1523} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p5 := external_alloc();
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const fcoe_transport_attach: ref;

axiom fcoe_transport_attach == $sub.ref(0, 501221);

procedure fcoe_transport_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_transport_attach($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1525} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpu_maps_update_begin: ref;

axiom cpu_maps_update_begin == $sub.ref(0, 502253);

procedure cpu_maps_update_begin();
  free requires assertsPassed;



implementation cpu_maps_update_begin()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    return;
}



const __register_cpu_notifier: ref;

axiom __register_cpu_notifier == $sub.ref(0, 503285);

procedure __register_cpu_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_cpu_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1527} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1528} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpu_maps_update_done: ref;

axiom cpu_maps_update_done == $sub.ref(0, 504317);

procedure cpu_maps_update_done();
  free requires assertsPassed;



implementation cpu_maps_update_done()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_dev_setup: ref;

axiom fcoe_dev_setup == $sub.ref(0, 505349);

procedure fcoe_dev_setup();
  free requires assertsPassed;



implementation fcoe_dev_setup()
{
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_192 := register_dcbevent_notifier(dcb_notifier);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_193 := register_netdevice_notifier(fcoe_notifier);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    return;
}



const fcoe_if_init: ref;

axiom fcoe_if_init == $sub.ref(0, 506381);

procedure fcoe_if_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $M.42;



implementation fcoe_if_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p0 := fc_attach_transport(fcoe_nport_fc_functions);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p1 := fc_attach_transport(fcoe_vport_fc_functions);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.42 := $p1;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p2 := $M.43;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_194 := printk.ref(.str.65);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_destroy_workqueue_47: ref;

axiom ldv_destroy_workqueue_47 == $sub.ref(0, 507413);

procedure ldv_destroy_workqueue_47($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.16, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation ldv_destroy_workqueue_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} destroy_workqueue($p0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} call_and_disable_all_1(2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 508445);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    return;
}



const fc_attach_transport: ref;

axiom fc_attach_transport == $sub.ref(0, 509477);

procedure fc_attach_transport($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_attach_transport($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p1 := external_alloc();
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const register_dcbevent_notifier: ref;

axiom register_dcbevent_notifier == $sub.ref(0, 510509);

procedure register_dcbevent_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_dcbevent_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1537} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const register_netdevice_notifier: ref;

axiom register_netdevice_notifier == $sub.ref(0, 511541);

procedure register_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1539} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1540} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fcoe_dev_cleanup: ref;

axiom fcoe_dev_cleanup == $sub.ref(0, 512573);

procedure fcoe_dev_cleanup();
  free requires assertsPassed;



implementation fcoe_dev_cleanup()
{
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_195 := unregister_dcbevent_notifier(dcb_notifier);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_196 := unregister_netdevice_notifier(fcoe_notifier);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    return;
}



const __unregister_cpu_notifier: ref;

axiom __unregister_cpu_notifier == $sub.ref(0, 513605);

procedure __unregister_cpu_notifier($p0: ref);
  free requires assertsPassed;



implementation __unregister_cpu_notifier($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_48: ref;

axiom ldv_destroy_workqueue_48 == $sub.ref(0, 514637);

procedure ldv_destroy_workqueue_48($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.16, $M.18, $M.20, $M.22, $M.39, $M.40, $M.17, $M.19, $M.21, $M.23, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation ldv_destroy_workqueue_48($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} destroy_workqueue($p0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} call_and_disable_all_1(2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const fcoe_if_exit: ref;

axiom fcoe_if_exit == $sub.ref(0, 515669);

procedure fcoe_if_exit() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $M.42;



implementation fcoe_if_exit() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p0 := $M.43;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} fc_release_transport($p0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p1 := $M.42;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} fc_release_transport($p1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.43 := $0.ref;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $M.42 := $0.ref;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fcoe_transport_detach: ref;

axiom fcoe_transport_detach == $sub.ref(0, 516701);

procedure fcoe_transport_detach($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fcoe_transport_detach($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_release_transport: ref;

axiom fc_release_transport == $sub.ref(0, 517733);

procedure fc_release_transport($p0: ref);
  free requires assertsPassed;



implementation fc_release_transport($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    return;
}



const unregister_dcbevent_notifier: ref;

axiom unregister_dcbevent_notifier == $sub.ref(0, 518765);

procedure unregister_dcbevent_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_dcbevent_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unregister_netdevice_notifier: ref;

axiom unregister_netdevice_notifier == $sub.ref(0, 519797);

procedure unregister_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 520829);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 1} true;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 521861);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 522893);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 523925);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 524957);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 525989);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 527021);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 528053);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1554} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1555} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1556} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} __VERIFIER_assume($i6);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 529085);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 530117);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 531149);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 532181);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 533213);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1558} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1559} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1560} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} __VERIFIER_assume($i6);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 534245);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 535277);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 536309);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1563} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1564} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} __VERIFIER_assume($i4);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 537341);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 538373);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 539405);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 540437);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1568} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1569} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1570} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1571} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1574} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} __VERIFIER_assume($i7);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} __VERIFIER_assume($i11);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 541469);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 542501);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 543533);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 544565);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 545597);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 546629);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1579} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1580} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1581} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1582} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1585} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1586} __VERIFIER_assume($i7);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1587} __VERIFIER_assume($i11);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 547661);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 548693);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 549725);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 550757);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 551789);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 552821);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 553853);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 554885);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 555917);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1590} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} __VERIFIER_assume($i10);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 556949);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1594} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 557981);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1595} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1596} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1597} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 559013);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1598} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1599} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1600} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 560045);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1601} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1602} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1603} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 561077);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1605} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 562109);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 563141);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1606} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1607} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 564173);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 565205);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 566237);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1608} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1609} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p6 := malloc($i5);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 1613} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 567269);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 568301);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.65, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.50, $M.85, $M.86, $M.87, $M.88, $M.89, $M.24, $M.15, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.14, $M.43, $M.42, $M.135, $M.136, $M.137;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1614} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.65 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 1617} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 1618} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.56 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 1621} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.60 := $0.ref;
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := $0.ref;
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1632} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1636} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1637} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1638} {:cexpr "fcoe_debug_logging"} boogie_si_record_i32(0);
    call {:si_unique_call 1639} {:cexpr "__pcpu_unique_fcoe_percpu"} boogie_si_record_i8(0);
    $M.91 := $store.ref($M.91, fcoe_percpu, $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.91 := $store.i32($M.91, $add.ref($add.ref(fcoe_percpu, $mul.ref(0, 120)), $mul.ref(112, 1)), 0);
    $M.92 := $store.ref($M.92, fcoe_vport_fc_functions, $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(8, 1)), fc_set_rport_loss_tmo);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(16, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(56, 1)), fc_get_host_port_state);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(72, 1)), fc_get_host_speed);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(96, 1)), $0.ref);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(104, 1)), fc_get_host_stats);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(120, 1)), fcoe_reset);
    $M.108 := $store.ref($M.108, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(136, 1)), fc_rport_terminate_io);
    $M.110 := $store.ref($M.110, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.113 := $store.ref($M.113, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(192, 1)), fc_lport_bsg_request);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.118 := $store.i32($M.118, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(208, 1)), 24);
    $M.119 := $store.i32($M.119, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(212, 1)), 0);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(216, 1)), 0);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(220, 1)), $sub.i8(0, 1));
    $M.122 := $store.i8($M.122, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(221, 1)), $sub.i8(0, 2));
    $M.123 := $store.i8($M.123, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(222, 1)), $sub.i8(0, 1));
    $M.124 := $store.i8($M.124, $add.ref($add.ref(fcoe_vport_fc_functions, $mul.ref(0, 224)), $mul.ref(223, 1)), 15);
    $M.92 := $store.ref($M.92, fcoe_nport_fc_functions, $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(8, 1)), fc_set_rport_loss_tmo);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(16, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(56, 1)), fc_get_host_port_state);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(72, 1)), fc_get_host_speed);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(96, 1)), $0.ref);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(104, 1)), fc_get_host_stats);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(120, 1)), fcoe_reset);
    $M.108 := $store.ref($M.108, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(136, 1)), fc_rport_terminate_io);
    $M.110 := $store.ref($M.110, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(144, 1)), fcoe_set_vport_symbolic_name);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(152, 1)), fcoe_vport_create);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(160, 1)), fcoe_vport_disable);
    $M.113 := $store.ref($M.113, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(168, 1)), fcoe_vport_destroy);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(192, 1)), fc_lport_bsg_request);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.118 := $store.i32($M.118, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(208, 1)), 24);
    $M.119 := $store.i32($M.119, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(212, 1)), 0);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(216, 1)), 0);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(220, 1)), $sub.i8(0, 1));
    $M.122 := $store.i8($M.122, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(221, 1)), $sub.i8(0, 2));
    $M.123 := $store.i8($M.123, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(222, 1)), $sub.i8(0, 1));
    $M.124 := $store.i8($M.124, $add.ref($add.ref(fcoe_nport_fc_functions, $mul.ref(0, 224)), $mul.ref(223, 1)), 15);
    $M.125 := $store.i8($M.125, fcoe_sw_transport, 102);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 99);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 111);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(16, 1)), 0);
    $M.125 := $store.ref($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(24, 1)), $mul.ref(0, 1)), $add.ref(fcoe_sw_transport, $mul.ref(24, 1)));
    $M.125 := $store.ref($M.125, $add.ref($add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(24, 1)), $mul.ref(8, 1)), $add.ref(fcoe_sw_transport, $mul.ref(24, 1)));
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(40, 1)), fcoe_match);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(48, 1)), fcoe_ctlr_alloc);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(56, 1)), fcoe_create);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(64, 1)), fcoe_destroy);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(72, 1)), fcoe_enable);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fcoe_sw_transport, $mul.ref(0, 88)), $mul.ref(80, 1)), fcoe_disable);
    $M.0 := $store.ref($M.0, fcoe_sysfs_templ, fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(8, 1)), fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(16, 1)), fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(24, 1)), fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(32, 1)), fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(40, 1)), fcoe_ctlr_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(48, 1)), fcoe_ctlr_set_fip_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(56, 1)), fcoe_ctlr_enabled);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(64, 1)), fcoe_fcf_get_selected);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_sysfs_templ, $mul.ref(0, 80)), $mul.ref(72, 1)), fcoe_fcf_get_vlan_id);
    $M.14 := $0.ref;
    call {:si_unique_call 1640} {:cexpr "fcoe_ddp_min"} boogie_si_record_i32(4096);
    $M.0 := $store.ref($M.0, fcoe_libfc_fcn_templ, fcoe_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(8, 1)), fcoe_elsct_send);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(24, 1)), fcoe_ddp_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(32, 1)), fcoe_ddp_done);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(40, 1)), fcoe_ddp_target);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(48, 1)), fcoe_get_lesb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(152, 1)), fcoe_set_port_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_libfc_fcn_templ, $mul.ref(0, 272)), $mul.ref(264, 1)), $0.ref);
    $M.43 := $0.ref;
    $M.42 := $0.ref;
    $M.0 := $store.ref($M.0, fcoe_hostlist, fcoe_hostlist);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_hostlist, $mul.ref(0, 16)), $mul.ref(8, 1)), fcoe_hostlist);
    $M.0 := $store.ref($M.0, fcoe_shost_template, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(8, 1)), .str.17);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(56, 1)), fc_queuecommand);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(64, 1)), fc_eh_abort);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(72, 1)), fc_eh_device_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(96, 1)), fc_eh_host_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(104, 1)), fc_slave_alloc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(160, 1)), scsi_change_queue_depth);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(216, 1)), .str.18);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(232, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(236, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(240, 1)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(242, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(244, 1)), 65535);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(256, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(258, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(260, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(264, 1)), 35);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(265, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(268, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(304, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(312, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(fcoe_shost_template, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.0 := $store.i32($M.0, fcoe_flush_completion, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(fcoe_flush_completion, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fcoe_flush_completion, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(fcoe_flush_completion, $mul.ref(80, 1)));
    $M.0 := $store.i32($M.0, fcoe_config_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(fcoe_config_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(fcoe_config_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), fcoe_config_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(fcoe_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(16, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(17, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(16, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(2, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(5, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.135 := $store.i8($M.135, .str.29, 37);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.136 := $store.i8($M.136, .str.26, 37);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(1, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(3, 1)), 118);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(4, 1)), 37);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(5, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(7, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(8, 1)), 118);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(11, 1)), 32);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(12, 1)), 37);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.26, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.137 := $store.i8($M.137, .str.35, 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(2, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(3, 1)), 118);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(4, 1)), 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(7, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(8, 1)), 118);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(11, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(12, 1)), 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(15, 1)), 58);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(16, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(17, 1)), 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.35, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 1641} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 569333);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 570365);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 571397);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i39 := $eq.ref(fc_lport_bsg_request, $p0);
    assume {:branchcond $i39} true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i39 == 1);
    $i38 := $eq.ref(fcoe_vport_destroy, $p0);
    assume {:branchcond $i38} true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i38 == 1);
    $i37 := $eq.ref(fcoe_reset, $p0);
    assume true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i37 == 1);
    $i36 := $eq.ref(fcoe_destroy, $p0);
    assume {:branchcond $i36} true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i36 == 1);
    $i35 := $eq.ref(fcoe_ctlr_alloc, $p0);
    assume {:branchcond $i35} true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i35 == 1);
    $i34 := $eq.ref(fcoe_percpu_receive_thread, $p0);
    assume {:branchcond $i34} true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i34 == 1);
    $i33 := $eq.ref(fcoe_disable, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i33 == 1);
    $i32 := $eq.ref(fcoe_enable, $p0);
    assume {:branchcond $i32} true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i32 == 1);
    $i31 := $eq.ref(fcoe_ctlr_enabled, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i31 == 1);
    $i30 := $eq.ref(fc_slave_alloc, $p0);
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i30 == 1);
    $i29 := $eq.ref(fc_eh_host_reset, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i29 == 1);
    $i28 := $eq.ref(fc_eh_device_reset, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i28 == 1);
    $i27 := $eq.ref(fc_eh_abort, $p0);
    assume {:branchcond $i27} true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume false;
    return;

  $bb2:
    assume $i27 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1642} $i2 := fc_eh_abort($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i28 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1643} $i4 := fc_eh_device_reset($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i29 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1644} $i6 := fc_eh_host_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i30 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1645} $i8 := fc_slave_alloc($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i31 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1646} $i10 := fcoe_ctlr_enabled($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i32 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1647} $i12 := fcoe_enable($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1648} $i14 := fcoe_disable($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1649} $i16 := fcoe_percpu_receive_thread($p15);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    $r := $i16;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i35 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1650} $i18 := fcoe_ctlr_alloc($p17);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    $r := $i18;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i36 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1651} $i20 := fcoe_destroy($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i37 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1652} $i22 := fcoe_reset($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i38 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1653} $i24 := fcoe_vport_destroy($p23);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    $r := $i24;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i39 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1654} $i26 := fc_lport_bsg_request($p25);
    $r := $i26;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 572429);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(fcoe_ddp_target, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(fcoe_ddp_setup, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1655} $i2 := fcoe_ddp_setup($p1, arg1, arg2, arg3);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1656} $i4 := fcoe_ddp_target($p3, arg1, arg2, arg3);
    $r := $i4;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 573461);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.63, $M.64, $M.41, $M.39, $M.40, $M.25, $CurrAddr, $M.50, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.24, $M.54, $M.53, $M.56, $M.55, $M.58, $M.57, $M.60, $M.59, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i16) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(fcoe_create, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(fcoe_ddp_done, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i9 == 1);
    $i8 := $eq.ref(scsi_change_queue_depth, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i16.i32(arg1);
    call {:si_unique_call 1657} $i3 := scsi_change_queue_depth($p1, $i2);
    $r := $i3;
    return;

  $bb3:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1658} $i5 := fcoe_ddp_done($p4, arg1);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    $r := $i5;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    $i6 := $zext.i16.i32(arg1);
    call {:si_unique_call 1659} $i7 := fcoe_create(arg, $i6);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    $r := $i7;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 574493);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 575525);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(fcoe_fip_send, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fcoe_update_src_mac, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(fcoe_get_lesb, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1660} fcoe_get_lesb($p1, $p2);
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1661} fcoe_update_src_mac($p3, $p4);
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1662} fcoe_fip_send($p5, $p6);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 576557);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(fcoe_set_port_id, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1663} fcoe_set_port_id($p1, arg1, $p2);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 577589);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(fc_get_host_stats, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fcoe_get_src_mac, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(fcoe_netdev, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1664} $p2 := fcoe_netdev($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1665} $p4 := fcoe_get_src_mac($p3);
    $r := $p4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1666} $p6 := fc_get_host_stats($p5);
    $r := $p6;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 578621);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 579653);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 580685);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 581717);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 582749);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i35 := $eq.ref(fc_lport_bsg_request, $p0);
    assume {:branchcond $i35} true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i35 == 1);
    $i34 := $eq.ref(fcoe_vport_destroy, $p0);
    assume {:branchcond $i34} true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i34 == 1);
    $i33 := $eq.ref(fcoe_reset, $p0);
    assume true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i33 == 1);
    $i32 := $eq.ref(fcoe_destroy, $p0);
    assume {:branchcond $i32} true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i32 == 1);
    $i31 := $eq.ref(fcoe_ctlr_alloc, $p0);
    assume true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i31 == 1);
    $i30 := $eq.ref(fcoe_percpu_receive_thread, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i30 == 1);
    $i29 := $eq.ref(fcoe_disable, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(fcoe_enable, $p0);
    assume true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i28 == 1);
    $i27 := $eq.ref(fcoe_ctlr_enabled, $p0);
    assume {:branchcond $i27} true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(fc_slave_alloc, $p0);
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(fc_eh_host_reset, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(fc_eh_device_reset, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(fc_eh_abort, $p0);
    assume {:branchcond $i23} true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1667} $i2 := fc_eh_abort($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1668} $i4 := fc_eh_device_reset($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1669} $i6 := fc_eh_host_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1670} $i8 := fc_slave_alloc($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1671} $i10 := fcoe_ctlr_enabled($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i28 == 1;
    call {:si_unique_call 1672} $i11 := fcoe_enable(arg);
    $r := $i11;
    return;

  $bb8:
    assume $i29 == 1;
    call {:si_unique_call 1673} $i12 := fcoe_disable(arg);
    $r := $i12;
    return;

  $bb9:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1674} $i14 := fcoe_percpu_receive_thread($p13);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    $r := $i14;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i31 == 1;
    call {:si_unique_call 1675} $i15 := fcoe_ctlr_alloc(arg);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    $r := $i15;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    call {:si_unique_call 1676} $i16 := fcoe_destroy(arg);
    $r := $i16;
    return;

  $bb12:
    assume $i33 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1677} $i18 := fcoe_reset($p17);
    $r := $i18;
    return;

  $bb13:
    assume $i34 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1678} $i20 := fcoe_vport_destroy($p19);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    $r := $i20;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i35 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1679} $i22 := fc_lport_bsg_request($p21);
    $r := $i22;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 583781);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $M.5, $M.7, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(fcoe_xmit, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(fc_queuecommand, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1680} $i3 := fc_queuecommand($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1681} $i6 := fcoe_xmit($p4, $p5);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    $r := $i6;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 584813);

procedure devirtbounce.15(funcPtr: ref, arg: i32) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 585845);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 586877);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: ref, arg5: ref, arg6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: ref, arg5: ref, arg6: i32) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(fcoe_elsct_send, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1682} $p1 := fcoe_elsct_send(arg, arg1, arg2, arg3, arg4, arg5, arg6);
    $r := $p1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u2: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.65, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.50, $M.85, $M.86, $M.87, $M.88, $M.89, $M.24, $M.15, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.14, $M.43, $M.42, $M.135, $M.136, $M.137, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1683} __SMACK_static_init();
    call {:si_unique_call 1684} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.77, $M.78, $M.79, $M.80, $M.81, $M.53, $M.55, $M.57, $M.59, $M.82, $M.83, $M.16, $M.18, $M.20, $M.22, $M.84, $M.50, $M.85, $M.86, $M.87, $M.88, $M.39, $M.40, $M.9, $M.11, $M.5, $M.7, $M.24, $M.89, $M.75, $M.76, $M.70, $M.71, $M.72, $M.73, $M.74, $M.65, $M.67, $M.68, $M.69, $M.17, $M.19, $M.21, $M.23, $M.51, $M.52, $M.54, $M.56, $M.58, $M.60, $M.15, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.14, $M.43, $M.42, $M.135, $M.136, $M.137, $CurrAddr, $M.25, $M.41, $M.34, $M.35, $M.36, $M.63, $M.64;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation fcoe_hostlist_lookup_port_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p16;
    goto $bb10_dummy;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_929;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_928;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_919;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := fcoe_hostlist_lookup_port_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6);
    return;

  exit:
    return;
}



procedure fcoe_hostlist_lookup_port_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref);



implementation fcoe_hostlist_lookup_realdev_port_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p16: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p16: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p16, out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p6 := in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p17, in_$p18, in_$p16, in_$i19, in_$i20, in_$i21, in_$p22, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  $bb13:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p26;
    goto $bb13_dummy;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1085;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p6;
    assume true;
    goto $bb10;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1076;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    assume {:verifier.code 0} true;
    out_$p16 := out_$p18;
    goto $bb8;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p15;
    goto $bb8;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} out_$p15 := vlan_dev_real_dev(out_$p14);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1068;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 1);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_1061;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p6, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1073;

  $bb7:
    assume !(out_$i12 == 1);
    goto corral_source_split_1072;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p16, out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p6 := fcoe_hostlist_lookup_realdev_port_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p16, out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p6);
    return;

  exit:
    return;
}



procedure fcoe_hostlist_lookup_realdev_port_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p16: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p16: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p6: ref);



implementation fcoe_device_notification_loop_$bb4(in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p11: ref, in_$p32: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p11: ref, out_$p32: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p32 := in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p11, in_$p32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p27;
    goto $bb10_dummy;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p27;
    assume true;
    goto $bb10;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1200;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i14, out_$i15);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_1185;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_1184;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p32 := fcoe_device_notification_loop_$bb4(in_$p4, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p32);
    return;

  exit:
    return;
}



procedure fcoe_device_notification_loop_$bb4(in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p11: ref, in_$p32: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p11: ref, out_$p32: ref);



implementation fcoe_percpu_thread_destroy_loop_$bb54(in_$p78: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p82: ref) returns (out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p82: ref)
{

  entry:
    out_$p83, out_$i84, out_$i85, out_$p82 := in_$p83, in_$i84, in_$i85, in_$p82;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1716;

  $bb56:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$p82 := out_$p83;
    goto $bb56_dummy;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} out_$p83 := __skb_dequeue(in_$p78);
    goto corral_source_split_1719;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} kfree_skb(out_$p82);
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p83, out_$i84, out_$i85, out_$p82 := fcoe_percpu_thread_destroy_loop_$bb54(in_$p78, out_$p83, out_$i84, out_$i85, out_$p82);
    return;

  exit:
    return;
}



procedure fcoe_percpu_thread_destroy_loop_$bb54(in_$p78: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p82: ref) returns (out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p82: ref);
  modifies $M.0;



implementation fcoe_percpu_thread_destroy_loop_$bb45(in_$p66: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p70: ref) returns (out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p70: ref)
{

  entry:
    out_$p71, out_$i72, out_$i73, out_$p70 := in_$p71, in_$i72, in_$i73, in_$p70;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  $bb47:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p70 := out_$p71;
    goto $bb47_dummy;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$p71 := __skb_dequeue(in_$p66);
    goto corral_source_split_1701;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} kfree_skb(out_$p70);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p71, out_$i72, out_$i73, out_$p70 := fcoe_percpu_thread_destroy_loop_$bb45(in_$p66, out_$p71, out_$i72, out_$i73, out_$p70);
    return;

  exit:
    return;
}



procedure fcoe_percpu_thread_destroy_loop_$bb45(in_$p66: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p70: ref) returns (out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p70: ref);
  modifies $M.0;



implementation fcoe_percpu_thread_destroy_loop_$bb36(in_$p42: ref, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p59: ref) returns (out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p59: ref)
{

  entry:
    out_$p60, out_$p61, out_$i62, out_$i63, out_$p59 := in_$p60, in_$p61, in_$i62, in_$i63, in_$p59;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1683;

  $bb38:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p59 := out_$p61;
    goto $bb38_dummy;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$p61 := __skb_dequeue(in_$p55);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} __skb_queue_tail(out_$p60, out_$p59);
    goto corral_source_split_1686;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p42, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p60, out_$p61, out_$i62, out_$i63, out_$p59 := fcoe_percpu_thread_destroy_loop_$bb36(in_$p42, in_$p55, out_$p60, out_$p61, out_$i62, out_$i63, out_$p59);
    return;

  exit:
    return;
}



procedure fcoe_percpu_thread_destroy_loop_$bb36(in_$p42: ref, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p59: ref) returns (out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p59: ref);
  modifies $M.0;



implementation fcoe_percpu_receive_thread_loop_$bb11(in_$p1: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$p23 := in_$p24, in_$i25, in_$i26, in_$p23;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p24;
    goto $bb13_dummy;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$p24 := __skb_dequeue(in_$p1);
    goto corral_source_split_1899;

  SeqInstr_45:
    goto corral_source_split_1898;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} fcoe_recv_frame(out_$p23);
    goto SeqInstr_44;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$p23 := fcoe_percpu_receive_thread_loop_$bb11(in_$p1, out_$p24, out_$i25, out_$i26, out_$p23);
    return;

  exit:
    return;
}



procedure fcoe_percpu_receive_thread_loop_$bb11(in_$p1: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref);
  modifies $M.0, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_percpu_receive_thread_loop_$bb2(in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$i30: i32, in_$i31: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31 := in_$p6, in_$p7, in_$i8, in_$i9, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p23, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_$i27 := kthread_should_stop();
    goto corral_source_split_1863;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb10;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume !(out_$i26 == 1);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$p24 := __skb_dequeue(in_$p1);
    goto corral_source_split_1899;

  SeqInstr_45:
    goto corral_source_split_1898;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} fcoe_recv_frame(out_$p23);
    goto SeqInstr_44;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    call out_$p24, out_$i25, out_$i26, out_$p23 := fcoe_percpu_receive_thread_loop_$bb11(in_$p1, out_$p24, out_$i25, out_$i26, out_$p23);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p20;
    goto $bb11;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p24;
    assume false;
    return;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$p20 := __skb_dequeue(in_$p1);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock_bh(out_$p19);
    goto corral_source_split_1889;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1888;

  $bb5:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} out_$i8 := skb_queue_len(in_$p1);
    call {:si_unique_call 441} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} skb_queue_splice_init(out_$p7, in_$p1);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} spin_lock_bh(out_$p6);
    goto corral_source_split_1868;

  $bb3:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1867;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1908;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  $bb17:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := 1;
    goto $bb18;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i30 := 0;
    goto $bb18;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_1905;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(out_$i28);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i8(out_$i27);
    call {:si_unique_call 437} {:cexpr "tmp___7"} boogie_si_record_i8(out_$i28);
    goto corral_source_split_1864;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31 := fcoe_percpu_receive_thread_loop_$bb2(in_$p1, in_$p3, out_$p6, out_$p7, out_$i8, out_$i9, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure fcoe_percpu_receive_thread_loop_$bb2(in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$i30: i32, in_$i31: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$i30: i32, out_$i31: i1);
  modifies $M.0, $M.25, $M.39, $M.40, $CurrAddr, $M.24, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_percpu_receive_thread_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$i30: i32, in_$i31: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31 := in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$p17, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p23, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886_dummy;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} schedule();
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_bh(out_$p17);
    goto corral_source_split_1885;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p2, out_$i15);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 444} out_$i15 := devirtbounce.11(0, out_$p14, out_$i13, out_$p14);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.25, in_$p2);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} out_$p12 := get_current();
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p2, 1);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p11, 0);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} out_$p10 := get_current();
    goto corral_source_split_1875;

  $bb4:
    assume out_$i9 == 1;
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} out_$i8 := skb_queue_len(in_$p1);
    call {:si_unique_call 441} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} skb_queue_splice_init(out_$p7, in_$p1);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} spin_lock_bh(out_$p6);
    goto corral_source_split_1868;

  $bb3:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1867;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1908;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  $bb17:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := 1;
    goto $bb18;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i30 := 0;
    goto $bb18;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_1905;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(out_$i28);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i8(out_$i27);
    call {:si_unique_call 437} {:cexpr "tmp___7"} boogie_si_record_i8(out_$i28);
    goto corral_source_split_1864;

  $bb2:
    call out_$p6, out_$p7, out_$i8, out_$i9, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31 := fcoe_percpu_receive_thread_loop_$bb2(in_$p1, in_$p3, out_$p6, out_$p7, out_$i8, out_$i9, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_$i27 := kthread_should_stop();
    goto corral_source_split_1863;

  $bb15:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb10;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume !(out_$i26 == 1);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$p24 := __skb_dequeue(in_$p1);
    goto corral_source_split_1899;

  SeqInstr_45:
    goto corral_source_split_1898;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} fcoe_recv_frame(out_$p23);
    goto SeqInstr_44;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    call out_$p24, out_$i25, out_$i26, out_$p23 := fcoe_percpu_receive_thread_loop_$bb11(in_$p1, out_$p24, out_$i25, out_$i26, out_$p23);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p20;
    goto $bb11;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p24;
    assume false;
    return;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$p20 := __skb_dequeue(in_$p1);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock_bh(out_$p19);
    goto corral_source_split_1889;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1888;

  $bb5:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1886_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31 := fcoe_percpu_receive_thread_loop_$bb1(in_$p1, in_$p2, in_$p3, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p23, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure fcoe_percpu_receive_thread_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p23: ref, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$i30: i32, in_$i31: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p23: ref, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$i30: i32, out_$i31: i1);
  modifies $M.24, $M.25, $M.0, $M.39, $M.40, $CurrAddr, $M.50, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_destroy_work_loop_$bb4(in_$p6: ref, in_$i23: i64, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p25: ref, in_$p26: ref, in_vslice_dummy_var_95: i1) returns (out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p25: ref, out_$p26: ref, out_vslice_dummy_var_95: i1)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25, out_$p26, out_vslice_dummy_var_95 := in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p25, in_$p26, in_vslice_dummy_var_95;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;

  $bb9:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p49, out_$p25;
    goto $bb9_dummy;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i23);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p25, $mul.ref(0, 1656)), $mul.ref(136, 1));
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p48, $mul.ref($sub.ref(0, 136), 1656));
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_3270;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 1656)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_vslice_dummy_var_95 := queue_work(out_$p42, out_$p43);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i31 == 1;
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 7);
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_3247;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1656)), $mul.ref(1576, 1));
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 1712)), $mul.ref(1664, 1));
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p6, $mul.ref(0, 3832)), $mul.ref(3816, 1));
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p37, out_$i36);
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i8(out_$i35);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i34, 2);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.0, out_$p32);
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1656)), $mul.ref(128, 1));
    goto corral_source_split_3255;

  $bb7:
    assume !(out_$i31 == 1);
    goto corral_source_split_3254;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25, out_$p26, out_vslice_dummy_var_95 := fcoe_destroy_work_loop_$bb4(in_$p6, in_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p25, out_$p26, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure fcoe_destroy_work_loop_$bb4(in_$p6: ref, in_$i23: i64, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p25: ref, in_$p26: ref, in_vslice_dummy_var_95: i1) returns (out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p25: ref, out_$p26: ref, out_vslice_dummy_var_95: i1);
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.0;



implementation fcoe_em_config_loop_$bb16(in_$p31: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p49: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p39: ref) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p49: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p39: ref)
{

  entry:
    out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p49, out_$i52, out_$i53, out_$i54, out_$p55, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p39 := in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p50, in_$p51, in_$p49, in_$i52, in_$i53, in_$i54, in_$p55, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p39;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  $bb25:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p61;
    goto $bb25_dummy;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3760;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  $bb22:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p39;
    assume true;
    goto $bb22;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i52, out_$i53);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(in_$p31);
    goto corral_source_split_3744;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    assume {:verifier.code 0} true;
    out_$p49 := out_$p51;
    goto $bb20;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p48;
    goto $bb20;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$p48 := vlan_dev_real_dev(out_$p47);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3736;

  $bb18:
    assume out_$i45 == 1;
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i32(out_$i43, 1);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3729;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p39, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3741;

  $bb19:
    assume !(out_$i45 == 1);
    goto corral_source_split_3740;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p49, out_$i52, out_$i53, out_$i54, out_$p55, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p39 := fcoe_em_config_loop_$bb16(in_$p31, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p49, out_$i52, out_$i53, out_$i54, out_$p55, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p39);
    return;

  exit:
    return;
}



procedure fcoe_em_config_loop_$bb16(in_$p31: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p49: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p39: ref) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p49: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p39: ref);



implementation fcoe_percpu_clean_loop_$bb4(in_$i6: i64, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p38: ref, in_$i5: i32, in_vslice_dummy_var_121: i32) returns (out_$i6: i64, out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p38: ref, out_$i5: i32, out_vslice_dummy_var_121: i32)
{

  entry:
    out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p38, out_$i5, out_vslice_dummy_var_121 := in_$i6, in_$i7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p28, in_$p29, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p38, in_$i5, in_vslice_dummy_var_121;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;

  $bb9:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i17;
    goto $bb9_dummy;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(out_$i18, out_$i17);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_$i17 := cpumask_next(out_$i5, out_$p16);
    call {:si_unique_call 941} {:cexpr "cpu"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4117;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4116;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i14, 0);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$p11 := $i2p.i64.ref(out_$i10);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i64(out_$i9, out_$i6);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i64($M.0, out_$p8);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i7, 8));
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i5);
    goto corral_source_split_4099;

  $bb5:
    call {:si_unique_call 936} out_$i6 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 937} {:cexpr "__ptr"} boogie_si_record_i64(out_$i6);
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume out_$i22 == 1;
    goto corral_source_split_4123;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_$i21 := cpumask_test_cpu(out_$i5, out_$p20);
    call {:si_unique_call 939} {:cexpr "tmp"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_4112;

  $bb7:
    assume !(out_$i15 == 1);
    goto corral_source_split_4111;

  $bb15:
    assume out_$i25 == 1;
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4126;

  SeqInstr_135:
    goto corral_source_split_4125;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_$p23 := dev_alloc_skb(0);
    goto SeqInstr_134;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} wait_for_completion(fcoe_flush_completion);
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} spin_unlock_bh(out_$p38);
    goto corral_source_split_4147;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4146;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} out_vslice_dummy_var_121 := wake_up_process(out_$p35);
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 1);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __skb_queue_tail(out_$p29, out_$p23);
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} spin_lock_bh(out_$p28);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p26, fcoe_percpu_flush_done);
    goto corral_source_split_4132;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(0, 232)), $mul.ref(96, 1));
    goto corral_source_split_4131;

  $bb16:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p38, out_$i5, out_vslice_dummy_var_121 := fcoe_percpu_clean_loop_$bb4(out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p38, out_$i5, out_vslice_dummy_var_121);
    return;

  exit:
    return;
}



procedure fcoe_percpu_clean_loop_$bb4(in_$i6: i64, in_$i7: i64, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p38: ref, in_$i5: i32, in_vslice_dummy_var_121: i32) returns (out_$i6: i64, out_$i7: i64, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p38: ref, out_$i5: i32, out_vslice_dummy_var_121: i32);
  modifies assertsPassed, $M.24, $M.0;



implementation fcoe_interface_setup_loop_$bb26(in_$p5: ref, in_$p6: ref, in_$i75: i64, in_$p78: ref, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$p87: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$p77: ref) returns (out_$p78: ref, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$p87: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$p77: ref)
{

  entry:
    out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p77 := in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p87, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p77;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4603;

  $bb35:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$p77 := out_$p100;
    goto $bb35_dummy;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, in_$i75);
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$i104 := $p2i.ref.i64(out_$p103);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p102, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$p102 := $bitcast.ref.ref(out_$p100);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_$i101 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1063} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.62, out_$p99);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __read_once_size(out_$p96, out_$p98, 8);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$p98 := $bitcast.ref.ref(out_$p97);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p5, out_$p95);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_4633;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p77, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4632;

  $bb29:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$p87 := out_$p77;
    assume true;
    goto $bb31;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i85);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i8(out_$i84);
    call {:si_unique_call 1058} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i85);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} out_$i84 := is_valid_ether_addr(out_$p83);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p77, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4611;

  $bb28:
    assume out_$i81 == 1;
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 2);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i79);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i8($M.0, out_$p78);
    goto corral_source_split_4606;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p77 := fcoe_interface_setup_loop_$bb26(in_$p5, in_$p6, in_$i75, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p77);
    return;

  exit:
    return;
}



procedure fcoe_interface_setup_loop_$bb26(in_$p5: ref, in_$p6: ref, in_$i75: i64, in_$p78: ref, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$p87: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$p77: ref) returns (out_$p78: ref, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$p87: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$p77: ref);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i8, in_$i124: i1, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i1, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$i151: i64, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i16, in_$i203: i32, in_$i204: i16, in_$p205: ref, in_$i206: i32, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$p212: ref, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$p221: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i16, in_$i226: i32, in_$i227: i16, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i16, in_$i241: i32, in_$i242: i16, in_$p243: ref, in_$i244: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i64, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i32, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$i340: i32, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i32, in_$i349: i1, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i64, in_$i363: i32, in_$i364: i1, in_$i365: i32, in_$i366: i1, in_$i367: i1, in_$i368: i1, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$i372: i1, in_$i373: i1, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i1, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: ref, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i1, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: ref, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: ref) returns (out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i8, out_$i124: i1, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i1, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$i151: i64, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i16, out_$i203: i32, out_$i204: i16, out_$p205: ref, out_$i206: i32, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$p212: ref, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$p221: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i16, out_$i226: i32, out_$i227: i16, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i16, out_$i241: i32, out_$i242: i16, out_$p243: ref, out_$i244: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i64, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i32, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$i340: i32, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i32, out_$i349: i1, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i64, out_$i363: i32, out_$i364: i1, out_$i365: i32, out_$i366: i1, out_$i367: i1, out_$i368: i1, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$i372: i1, out_$i373: i1, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i1, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: ref, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i1, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: ref, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: ref)
{

  entry:
    out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i208, out_$i209, out_$p210, out_$i211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187 := in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i167, in_$i168, in_$p169, in_$i171, in_$i172, in_$p173, in_$i175, in_$i176, in_$p177, in_$i179, in_$i180, in_$p181, in_$i183, in_$i184, in_$p185, in_$i186, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i208, in_$i209, in_$p210, in_$i211, in_$p212, in_$i213, in_$p214, in_$i215, in_$i217, in_$i218, in_$p219, in_$i220, in_$p221, in_$i222, in_$i223, in_$p224, in_$i225, in_$i226, in_$i227, in_$i229, in_$i230, in_$p231, in_$i232, in_$i233, in_$p234, in_$p235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p278, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$p285, in_$i286, in_$i287, in_$p288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$p294, in_$i295, in_$i296, in_$p297, in_$i298, in_$i299, in_$p300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$p315, in_$i316, in_$i318, in_$i319, in_$p320, in_$i322, in_$i323, in_$p324, in_$i326, in_$i327, in_$p328, in_$i330, in_$i331, in_$p332, in_$i334, in_$i335, in_$p336, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$p376, in_$i377, in_$i378, in_$p379, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i388, in_$i389, in_$p390, in_$i392, in_$i393, in_$p394, in_$i395, in_$i396, in_$p397, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1303} out_$i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 1304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i73);
    call {:si_unique_call 1305} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i73);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb95_dummy;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb31:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} fc_get_host_speed(out_$p104);
    goto corral_source_split_5450;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    out_$p104 := $M.67;
    goto corral_source_split_5449;

  $bb58:
    assume out_$i103 == 1;
    goto corral_source_split_5448;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 1);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i102 := $M.77;
    goto corral_source_split_5445;

  $bb56:
    assume out_$i101 == 1;
    goto corral_source_split_5444;

  $bb54:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb48:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb33:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i89, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_5402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1306} out_$i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1307} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i89);
    call {:si_unique_call 1308} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i88 == 1;
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i87 := $M.77;
    goto corral_source_split_5399;

  $bb28:
    assume out_$i86 == 1;
    goto corral_source_split_5398;

  $bb24:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb63:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} out_vslice_dummy_var_158 := fcoe_reset(out_$p107);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p107 := $M.67;
    goto corral_source_split_5454;

  $bb62:
    assume out_$i106 == 1;
    goto corral_source_split_5453;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    out_$i105 := $M.77;
    goto corral_source_split_5441;

  $bb55:
    assume !(out_$i100 == 1);
    goto corral_source_split_5440;

  $bb66:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} fc_set_rport_loss_tmo(out_$p111, out_$i112);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$p111 := $M.69;
    goto corral_source_split_5459;

  $bb65:
    assume out_$i110 == 1;
    goto corral_source_split_5458;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i109 := $M.77;
    goto corral_source_split_5429;

  $bb50:
    assume out_$i98 == 1;
    goto corral_source_split_5428;

  $bb49:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i89, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb69:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5467;

  SeqInstr_192:
    goto corral_source_split_5466;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_vslice_dummy_var_159 := fcoe_vport_destroy(out_$p115);
    goto SeqInstr_191;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$p115 := $M.68;
    goto corral_source_split_5465;

  $bb68:
    assume out_$i114 == 1;
    goto corral_source_split_5464;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i113 := $M.77;
    goto corral_source_split_5433;

  $bb52:
    assume out_$i99 == 1;
    goto corral_source_split_5432;

  $bb51:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i89, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb72:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1318} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} out_vslice_dummy_var_160 := fc_lport_bsg_request(in_$p20);
    goto corral_source_split_5470;

  $bb71:
    assume out_$i118 == 1;
    goto corral_source_split_5469;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i117 := $M.77;
    goto corral_source_split_5437;

  $bb53:
    assume !(out_$i99 == 1);
    goto corral_source_split_5436;

  $bb75:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5478;

  SeqInstr_195:
    goto corral_source_split_5477;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} out_vslice_dummy_var_161 := fcoe_vport_create(out_$p122, out_$i124);
    goto SeqInstr_194;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i8.i1(out_$i123);
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.0, in_$p0);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$p122 := $M.68;
    goto corral_source_split_5474;

  $bb74:
    assume out_$i121 == 1;
    goto corral_source_split_5473;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i120 := $M.77;
    goto corral_source_split_5417;

  $bb44:
    assume out_$i95 == 1;
    goto corral_source_split_5416;

  $bb35:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i89, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb34:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i89, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb78:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} fcoe_set_vport_symbolic_name(out_$p128);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$p128 := $M.68;
    goto corral_source_split_5481;

  $bb77:
    assume out_$i127 == 1;
    goto corral_source_split_5480;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i126 := $M.77;
    goto corral_source_split_5421;

  $bb46:
    assume out_$i96 == 1;
    goto corral_source_split_5420;

  $bb45:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i89, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb81:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} out_vslice_dummy_var_162 := fc_get_host_stats(out_$p131);
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$p131 := $M.67;
    goto corral_source_split_5486;

  $bb80:
    assume out_$i130 == 1;
    goto corral_source_split_5485;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_5426;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$i129 := $M.77;
    goto corral_source_split_5425;

  $bb47:
    assume !(out_$i96 == 1);
    goto corral_source_split_5424;

  $bb84:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} out_vslice_dummy_var_163 := fcoe_vport_disable(out_$p135, out_$i137);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i8.i1(out_$i136);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.0, in_$p2);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$p135 := $M.68;
    goto corral_source_split_5491;

  $bb83:
    assume out_$i134 == 1;
    goto corral_source_split_5490;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 1);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i133 := $M.77;
    goto corral_source_split_5405;

  $bb37:
    assume out_$i92 == 1;
    goto corral_source_split_5404;

  $bb36:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i89, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb87:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1328} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} fc_rport_terminate_io(out_$p141);
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$p141 := $M.69;
    goto corral_source_split_5498;

  $bb86:
    assume out_$i140 == 1;
    goto corral_source_split_5497;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 1);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i139 := $M.77;
    goto corral_source_split_5409;

  $bb39:
    assume out_$i93 == 1;
    goto corral_source_split_5408;

  $bb38:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb90:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} fc_get_host_port_state(out_$p144);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p144 := $M.67;
    goto corral_source_split_5503;

  $bb89:
    assume out_$i143 == 1;
    goto corral_source_split_5502;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 1);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i142 := $M.77;
    goto corral_source_split_5413;

  $bb41:
    assume out_$i94 == 1;
    goto corral_source_split_5412;

  $bb40:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i89, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_stop();
    goto corral_source_split_5507;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb43;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb43;

  $bb97:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5518;

  SeqInstr_198:
    goto corral_source_split_5517;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_vslice_dummy_var_164 := fcoe_device_notification(in_$p22, out_$i151, in_$p23);
    goto SeqInstr_197;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i64($M.0, in_$p3);
    goto corral_source_split_5516;

  $bb101:
    assume out_$i150 == 1;
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$i149 := $M.78;
    goto corral_source_split_5512;

  $bb99:
    assume out_$i148 == 1;
    goto corral_source_split_5511;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} out_$i147 := __VERIFIER_nondet_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i147);
    call {:si_unique_call 1334} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i147);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume out_$i146 == 1;
    goto corral_source_split_5509;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i145, 0);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i145 := $M.78;
    goto corral_source_split_5391;

  $bb26:
    assume out_$i85 == 1;
    goto corral_source_split_5390;

  $bb25:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_stop();
    goto corral_source_split_5520;

  $bb100:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb109:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} out_vslice_dummy_var_165 := fcoe_disable(out_$p165);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$p165 := $M.65;
    goto corral_source_split_5549;

  $bb126:
    assume out_$i164 == 1;
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 1);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i163 := $M.79;
    goto corral_source_split_5545;

  $bb124:
    assume out_$i162 == 1;
    goto corral_source_split_5544;

  $bb120:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i155, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb111:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := $slt.i32(out_$i155, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i155, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_5522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1338} out_$i155 := __VERIFIER_nondet_int();
    call {:si_unique_call 1339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i155);
    call {:si_unique_call 1340} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i155);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i154 == 1;
    goto corral_source_split_5522;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_5396;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i153 := $M.79;
    goto corral_source_split_5395;

  $bb27:
    assume !(out_$i85 == 1);
    goto corral_source_split_5394;

  $bb131:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_vslice_dummy_var_166 := fcoe_destroy(out_$p169);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p169 := $M.65;
    goto corral_source_split_5554;

  $bb130:
    assume out_$i168 == 1;
    goto corral_source_split_5553;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$i167 := $M.79;
    goto corral_source_split_5537;

  $bb122:
    assume out_$i161 == 1;
    goto corral_source_split_5536;

  $bb121:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i155, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb134:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} out_vslice_dummy_var_167 := fcoe_match(out_$p173);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$p173 := $M.65;
    goto corral_source_split_5559;

  $bb133:
    assume out_$i172 == 1;
    goto corral_source_split_5558;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 1);
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i171 := $M.79;
    goto corral_source_split_5541;

  $bb123:
    assume !(out_$i161 == 1);
    goto corral_source_split_5540;

  $bb137:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5566;

  SeqInstr_201:
    goto corral_source_split_5565;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} out_vslice_dummy_var_168 := fcoe_ctlr_alloc(out_$p177);
    goto SeqInstr_200;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$p177 := $M.65;
    goto corral_source_split_5564;

  $bb136:
    assume out_$i176 == 1;
    goto corral_source_split_5563;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 1);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$i175 := $M.79;
    goto corral_source_split_5525;

  $bb113:
    assume out_$i157 == 1;
    goto corral_source_split_5524;

  $bb112:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i155, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb140:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} out_vslice_dummy_var_169 := fcoe_enable(out_$p181);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$p181 := $M.65;
    goto corral_source_split_5569;

  $bb139:
    assume out_$i180 == 1;
    goto corral_source_split_5568;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 1);
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    out_$i179 := $M.79;
    goto corral_source_split_5529;

  $bb115:
    assume out_$i158 == 1;
    goto corral_source_split_5528;

  $bb114:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i155, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb143:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5577;

  SeqInstr_204:
    goto corral_source_split_5576;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} out_vslice_dummy_var_170 := fcoe_create(out_$p185, out_$i186);
    goto SeqInstr_203;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, in_$p4);
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$p185 := $M.65;
    goto corral_source_split_5574;

  $bb142:
    assume out_$i184 == 1;
    goto corral_source_split_5573;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 1);
    goto corral_source_split_5534;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$i183 := $M.79;
    goto corral_source_split_5533;

  $bb117:
    assume out_$i159 == 1;
    goto corral_source_split_5532;

  $bb116:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i155, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} ldv_stop();
    goto corral_source_split_5579;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb119;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb119;

  $bb149:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} out_vslice_dummy_var_171 := fcoe_ddp_setup(out_$p201, out_$i204, out_$p205, out_$i206);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$p205 := $M.74;
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i204 := $trunc.i32.i16(out_$i203);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i16.i32(out_$i202);
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i16($M.0, in_$p13);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p201 := $M.73;
    goto corral_source_split_5612;

  $bb168:
    assume out_$i200 == 1;
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i199 := $M.80;
    goto corral_source_split_5608;

  $bb166:
    assume out_$i198 == 1;
    goto corral_source_split_5607;

  $bb162:
    assume out_$i196 == 1;
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i190, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb151:
    assume out_$i191 == 1;
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i190, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i190, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1354} out_$i190 := __VERIFIER_nondet_int();
    call {:si_unique_call 1355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i190);
    call {:si_unique_call 1356} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i190);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb148:
    assume out_$i189 == 1;
    goto corral_source_split_5581;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$i189 := $ne.i32(out_$i188, 0);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$i188 := $M.80;
    goto corral_source_split_5379;

  $bb20:
    assume out_$i82 == 1;
    goto corral_source_split_5378;

  $bb19:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb173:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} out_vslice_dummy_var_172 := fcoe_elsct_send(out_$p210, out_$i211, out_$p212, out_$i213, out_$p214, in_$p24, out_$i215);
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$p214 := $load.ref($M.0, in_$p11);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.0, in_$p12);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$p212 := $M.72;
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i211 := $load.i32($M.0, in_$p8);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$p210 := $M.73;
    goto corral_source_split_5622;

  $bb172:
    assume out_$i209 == 1;
    goto corral_source_split_5621;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$i208 := $M.80;
    goto corral_source_split_5600;

  $bb164:
    assume out_$i197 == 1;
    goto corral_source_split_5599;

  $bb163:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i190, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb176:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} fcoe_set_port_id(out_$p219, out_$i220, out_$p221);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$p221 := $M.72;
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5633;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$p219 := $M.73;
    goto corral_source_split_5632;

  $bb175:
    assume out_$i218 == 1;
    goto corral_source_split_5631;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$i217 := $M.80;
    goto corral_source_split_5604;

  $bb165:
    assume !(out_$i197 == 1);
    goto corral_source_split_5603;

  $bb179:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5644;

  SeqInstr_207:
    goto corral_source_split_5643;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} out_vslice_dummy_var_173 := fcoe_ddp_done(out_$p224, out_$i227);
    goto SeqInstr_206;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$i227 := $trunc.i32.i16(out_$i226);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$i226 := $zext.i16.i32(out_$i225);
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i16($M.0, in_$p6);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$p224 := $M.73;
    goto corral_source_split_5639;

  $bb178:
    assume out_$i223 == 1;
    goto corral_source_split_5638;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 1);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i222 := $M.80;
    goto corral_source_split_5592;

  $bb160:
    assume out_$i195 == 1;
    goto corral_source_split_5591;

  $bb153:
    assume out_$i192 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb152:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i190, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb182:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5649;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} fcoe_get_lesb(out_$p231, in_$p26);
    goto corral_source_split_5648;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    out_$p231 := $M.73;
    goto corral_source_split_5647;

  $bb181:
    assume out_$i230 == 1;
    goto corral_source_split_5646;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i229 := $M.80;
    goto corral_source_split_5596;

  $bb161:
    assume !(out_$i195 == 1);
    goto corral_source_split_5595;

  $bb185:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5655;

  SeqInstr_210:
    goto corral_source_split_5654;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} out_vslice_dummy_var_174 := fcoe_xmit(out_$p234, out_$p235);
    goto SeqInstr_209;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$p235 := $M.72;
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$p234 := $M.73;
    goto corral_source_split_5652;

  $bb184:
    assume out_$i233 == 1;
    goto corral_source_split_5651;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 1);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i232 := $M.80;
    goto corral_source_split_5584;

  $bb155:
    assume out_$i193 == 1;
    goto corral_source_split_5583;

  $bb154:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i190, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb188:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} out_vslice_dummy_var_175 := fcoe_ddp_target(out_$p239, out_$i242, out_$p243, out_$i244);
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.0, in_$p10);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$p243 := $M.74;
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i242 := $trunc.i32.i16(out_$i241);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i241 := $zext.i16.i32(out_$i240);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i16($M.0, in_$p14);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$p239 := $M.73;
    goto corral_source_split_5658;

  $bb187:
    assume out_$i238 == 1;
    goto corral_source_split_5657;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i237 := $M.80;
    goto corral_source_split_5588;

  $bb157:
    assume out_$i194 == 1;
    goto corral_source_split_5587;

  $bb156:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i190, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_stop();
    goto corral_source_split_5667;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb158:
    assume {:verifier.code 0} true;
    assume !(out_$i194 == 1);
    goto $bb159;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i198 == 1);
    goto $bb159;

  $bb194:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb199:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} out_vslice_dummy_var_176 := fcoe_dcb_app_notification(in_$p29, out_$i252, in_$p27);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i64($M.0, in_$p15);
    goto corral_source_split_5676;

  $bb198:
    assume out_$i251 == 1;
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 1);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i250 := $M.81;
    goto corral_source_split_5672;

  $bb196:
    assume out_$i249 == 1;
    goto corral_source_split_5671;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_5669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1372} out_$i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 1373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i248);
    call {:si_unique_call 1374} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i248);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb193:
    assume out_$i247 == 1;
    goto corral_source_split_5669;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i246 := $M.81;
    goto corral_source_split_5383;

  $bb22:
    assume out_$i83 == 1;
    goto corral_source_split_5382;

  $bb21:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_stop();
    goto corral_source_split_5680;

  $bb197:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb206:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} choose_timer_2();
    goto corral_source_split_5683;

  $bb205:
    assume out_$i255 == 1;
    goto corral_source_split_5682;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i32(out_$i254, 0);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i254 := $M.82;
    goto corral_source_split_5387;

  $bb23:
    assume !(out_$i83 == 1);
    goto corral_source_split_5386;

  $bb209:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb235:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} fcoe_ctlr_get_lesb(out_$p272);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$p272 := $M.70;
    goto corral_source_split_5728;

  $bb234:
    assume out_$i271 == 1;
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i270 := $M.83;
    goto corral_source_split_5724;

  $bb232:
    assume out_$i269 == 1;
    goto corral_source_split_5723;

  $bb230:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb224:
    assume out_$i265 == 1;
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb211:
    assume out_$i259 == 1;
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i258, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb210:
    assume {:verifier.code 0} true;
    out_$i259 := $slt.i32(out_$i258, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_5685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1379} out_$i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i258);
    call {:si_unique_call 1381} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i258);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb208:
    assume out_$i257 == 1;
    goto corral_source_split_5685;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i32(out_$i256, 0);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i256 := $M.83;
    goto corral_source_split_5367;

  $bb14:
    assume out_$i79 == 1;
    goto corral_source_split_5366;

  $bb5:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb239:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} fcoe_ctlr_get_lesb(out_$p275);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$p275 := $M.70;
    goto corral_source_split_5733;

  $bb238:
    assume out_$i274 == 1;
    goto corral_source_split_5732;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 1);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$i273 := $M.83;
    goto corral_source_split_5720;

  $bb231:
    assume !(out_$i268 == 1);
    goto corral_source_split_5719;

  $bb242:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} out_vslice_dummy_var_177 := fcoe_ctlr_enabled(out_$p278);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$p278 := $M.70;
    goto corral_source_split_5738;

  $bb241:
    assume out_$i277 == 1;
    goto corral_source_split_5737;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 1);
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i276 := $M.83;
    goto corral_source_split_5708;

  $bb226:
    assume out_$i266 == 1;
    goto corral_source_split_5707;

  $bb225:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb245:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} fcoe_ctlr_set_fip_mode(out_$p282);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$p282 := $M.70;
    goto corral_source_split_5743;

  $bb244:
    assume out_$i281 == 1;
    goto corral_source_split_5742;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i280 := $M.83;
    goto corral_source_split_5712;

  $bb228:
    assume out_$i267 == 1;
    goto corral_source_split_5711;

  $bb227:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i258, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb248:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} fcoe_ctlr_get_lesb(out_$p285);
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$p285 := $M.70;
    goto corral_source_split_5748;

  $bb247:
    assume out_$i284 == 1;
    goto corral_source_split_5747;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$i283 := $M.83;
    goto corral_source_split_5716;

  $bb229:
    assume !(out_$i267 == 1);
    goto corral_source_split_5715;

  $bb251:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5755;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} fcoe_ctlr_get_lesb(out_$p288);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$p288 := $M.70;
    goto corral_source_split_5753;

  $bb250:
    assume out_$i287 == 1;
    goto corral_source_split_5752;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 1);
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i286 := $M.83;
    goto corral_source_split_5700;

  $bb222:
    assume out_$i264 == 1;
    goto corral_source_split_5699;

  $bb213:
    assume out_$i260 == 1;
    assume {:verifier.code 0} true;
    out_$i264 := $slt.i32(out_$i258, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb212:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i258, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb254:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5760;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} fcoe_fcf_get_selected(out_$p291);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$p291 := $M.71;
    goto corral_source_split_5758;

  $bb253:
    assume out_$i290 == 1;
    goto corral_source_split_5757;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 1);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i289 := $M.83;
    goto corral_source_split_5704;

  $bb223:
    assume !(out_$i264 == 1);
    goto corral_source_split_5703;

  $bb257:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5765;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} fcoe_ctlr_get_lesb(out_$p294);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$p294 := $M.70;
    goto corral_source_split_5763;

  $bb256:
    assume out_$i293 == 1;
    goto corral_source_split_5762;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 1);
    goto corral_source_split_5689;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i292 := $M.83;
    goto corral_source_split_5688;

  $bb215:
    assume out_$i261 == 1;
    goto corral_source_split_5687;

  $bb214:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $slt.i32(out_$i258, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb260:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} fcoe_fcf_get_vlan_id(out_$p297);
    goto corral_source_split_5769;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    out_$p297 := $M.71;
    goto corral_source_split_5768;

  $bb259:
    assume out_$i296 == 1;
    goto corral_source_split_5767;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$i295 := $M.83;
    goto corral_source_split_5692;

  $bb217:
    assume out_$i262 == 1;
    goto corral_source_split_5691;

  $bb216:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    out_$i262 := $slt.i32(out_$i258, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb263:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} fcoe_ctlr_get_lesb(out_$p300);
    goto corral_source_split_5774;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    out_$p300 := $M.70;
    goto corral_source_split_5773;

  $bb262:
    assume out_$i299 == 1;
    goto corral_source_split_5772;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 1);
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i298 := $M.83;
    goto corral_source_split_5696;

  $bb219:
    assume out_$i263 == 1;
    goto corral_source_split_5695;

  $bb218:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i258, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_stop();
    goto corral_source_split_5777;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb220:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb221;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb221;

  $bb269:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb270;

  SeqInstr_213:
    goto corral_source_split_5780;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} invoke_work_1();
    goto SeqInstr_212;

  $bb268:
    assume out_$i302 == 1;
    goto corral_source_split_5779;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i302 := $ne.i32(out_$i301, 0);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i301 := $M.84;
    goto corral_source_split_5371;

  $bb16:
    assume out_$i80 == 1;
    goto corral_source_split_5370;

  $bb15:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb272:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1408} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} out_vslice_dummy_var_178 := scsi_change_queue_depth(out_$p315, out_$i316);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i32($M.0, in_$p16);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p315 := $M.52;
    goto corral_source_split_5809;

  $bb289:
    assume out_$i314 == 1;
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 1);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i313 := $M.50;
    goto corral_source_split_5805;

  $bb287:
    assume out_$i312 == 1;
    goto corral_source_split_5804;

  $bb283:
    assume out_$i310 == 1;
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i305, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb274:
    assume out_$i306 == 1;
    assume {:verifier.code 0} true;
    out_$i310 := $slt.i32(out_$i305, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb273:
    assume {:verifier.code 0} true;
    out_$i306 := $slt.i32(out_$i305, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1404} out_$i305 := __VERIFIER_nondet_int();
    call {:si_unique_call 1405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i305);
    call {:si_unique_call 1406} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i305);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb271:
    assume out_$i304 == 1;
    goto corral_source_split_5782;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i304 := $ne.i32(out_$i303, 0);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i303 := $M.50;
    goto corral_source_split_5375;

  $bb17:
    assume !(out_$i80 == 1);
    goto corral_source_split_5374;

  $bb294:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} out_vslice_dummy_var_179 := fc_queuecommand(in_$p31, out_$p320);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$p320 := $M.51;
    goto corral_source_split_5815;

  $bb293:
    assume out_$i319 == 1;
    goto corral_source_split_5814;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 1);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i318 := $M.50;
    goto corral_source_split_5797;

  $bb285:
    assume out_$i311 == 1;
    goto corral_source_split_5796;

  $bb284:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    out_$i311 := $slt.i32(out_$i305, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb297:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1412} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} out_vslice_dummy_var_180 := fc_eh_device_reset(out_$p324);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$p324 := $M.51;
    goto corral_source_split_5820;

  $bb296:
    assume out_$i323 == 1;
    goto corral_source_split_5819;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 1);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i322 := $M.50;
    goto corral_source_split_5801;

  $bb286:
    assume !(out_$i311 == 1);
    goto corral_source_split_5800;

  $bb300:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} out_vslice_dummy_var_181 := fc_eh_abort(out_$p328);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p328 := $M.51;
    goto corral_source_split_5825;

  $bb299:
    assume out_$i327 == 1;
    goto corral_source_split_5824;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i326 := $M.50;
    goto corral_source_split_5785;

  $bb276:
    assume out_$i307 == 1;
    goto corral_source_split_5784;

  $bb275:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    out_$i307 := $slt.i32(out_$i305, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb303:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1416} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} out_vslice_dummy_var_182 := fc_slave_alloc(out_$p332);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$p332 := $M.52;
    goto corral_source_split_5830;

  $bb302:
    assume out_$i331 == 1;
    goto corral_source_split_5829;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 1);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i330 := $M.50;
    goto corral_source_split_5789;

  $bb278:
    assume out_$i308 == 1;
    goto corral_source_split_5788;

  $bb277:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i305, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb306:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_vslice_dummy_var_183 := fc_eh_host_reset(out_$p336);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$p336 := $M.51;
    goto corral_source_split_5835;

  $bb305:
    assume out_$i335 == 1;
    goto corral_source_split_5834;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 1);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i334 := $M.50;
    goto corral_source_split_5793;

  $bb280:
    assume out_$i309 == 1;
    goto corral_source_split_5792;

  $bb279:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i305, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} ldv_stop();
    goto corral_source_split_5839;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(out_$i309 == 1);
    goto $bb282;

  $bb288:
    assume {:verifier.code 0} true;
    assume !(out_$i312 == 1);
    goto $bb282;

  $bb312:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb322:
    assume {:verifier.code 0} true;
    assume !(out_$i345 == 1);
    goto $bb323;

  $bb325:
    assume {:verifier.code 0} true;
    assume !(out_$i347 == 1);
    goto $bb323;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 0);
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$i346 := $M.85;
    goto corral_source_split_5852;

  $bb321:
    assume out_$i345 == 1;
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 3);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$i344 := $M.86;
    goto corral_source_split_5848;

  $bb319:
    assume out_$i343 == 1;
    goto corral_source_split_5847;

  $bb314:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i340, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i340, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_5841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1420} out_$i340 := __VERIFIER_nondet_int();
    call {:si_unique_call 1421} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i340);
    call {:si_unique_call 1422} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i340);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb311:
    assume out_$i339 == 1;
    goto corral_source_split_5841;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i339 := $ne.i32(out_$i338, 0);
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$i338 := $M.86;
    goto corral_source_split_5355;

  $bb7:
    assume out_$i76 == 1;
    goto corral_source_split_5354;

  $bb6:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb330:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb335:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i354 := $ne.i32(out_$i353, 0);
    goto corral_source_split_5884;

  $bb333:
    assume {:verifier.code 0} true;
    out_$i353 := $M.89;
    goto corral_source_split_5883;

  $bb332:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_initialize_fc_function_template_6();
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_initialize_fcoe_transport_3();
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_initialize_libfc_function_template_7();
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} ldv_initialize_fcoe_sysfs_function_template_8();
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_initialize_fc_function_template_5();
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5868;

  $bb331:
    assume out_$i352 == 1;
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 0);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$i351 := $M.89;
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $M.89 := out_$i350;
    call {:si_unique_call 1427} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_5863;

  SeqInstr_219:
    goto corral_source_split_5862;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} out_$i350 := fcoe_init();
    goto SeqInstr_218;

  $bb329:
    assume out_$i349 == 1;
    goto corral_source_split_5861;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 1);
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i348 := $M.86;
    goto corral_source_split_5844;

  $bb316:
    assume out_$i342 == 1;
    goto corral_source_split_5843;

  $bb315:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i340, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_stop();
    goto corral_source_split_5889;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb317:
    assume {:verifier.code 0} true;
    assume !(out_$i342 == 1);
    goto $bb318;

  $bb320:
    assume {:verifier.code 0} true;
    assume !(out_$i343 == 1);
    goto $bb318;

  $bb342:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5900;

  SeqInstr_222:
    goto corral_source_split_5899;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_vslice_dummy_var_184 := fcoe_cpu_callback(in_$p34, out_$i361, in_$p32);
    goto SeqInstr_221;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$i361 := $load.i64($M.0, in_$p17);
    goto corral_source_split_5898;

  $bb346:
    assume out_$i360 == 1;
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 1);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i359 := $M.87;
    goto corral_source_split_5894;

  $bb344:
    assume out_$i358 == 1;
    goto corral_source_split_5893;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_5891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} out_$i357 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i357);
    call {:si_unique_call 1446} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i357);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb341:
    assume out_$i356 == 1;
    goto corral_source_split_5891;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i356 := $ne.i32(out_$i355, 0);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i355 := $M.87;
    goto corral_source_split_5359;

  $bb9:
    assume out_$i77 == 1;
    goto corral_source_split_5358;

  $bb8:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_stop();
    goto corral_source_split_5902;

  $bb345:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb354:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb374:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} fc_get_host_speed(out_$p376);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$p376 := $M.75;
    goto corral_source_split_5935;

  $bb373:
    assume out_$i375 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 1);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i374 := $M.88;
    goto corral_source_split_5931;

  $bb371:
    assume out_$i373 == 1;
    goto corral_source_split_5930;

  $bb367:
    assume out_$i371 == 1;
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i365, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb356:
    assume out_$i366 == 1;
    assume {:verifier.code 0} true;
    out_$i371 := $slt.i32(out_$i365, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i366 := $slt.i32(out_$i365, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_5904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} out_$i365 := __VERIFIER_nondet_int();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i365);
    call {:si_unique_call 1452} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i365);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume out_$i364 == 1;
    goto corral_source_split_5904;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i364 := $ne.i32(out_$i363, 0);
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i363 := $M.88;
    goto corral_source_split_5363;

  $bb11:
    assume out_$i78 == 1;
    goto corral_source_split_5362;

  $bb10:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb378:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} out_vslice_dummy_var_185 := fcoe_reset(out_$p379);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$p379 := $M.75;
    goto corral_source_split_5940;

  $bb377:
    assume out_$i378 == 1;
    goto corral_source_split_5939;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 1);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$i377 := $M.88;
    goto corral_source_split_5923;

  $bb369:
    assume out_$i372 == 1;
    goto corral_source_split_5922;

  $bb368:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    out_$i372 := $slt.i32(out_$i365, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb381:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} fc_set_rport_loss_tmo(out_$p383, out_$i384);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i32($M.0, in_$p18);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$p383 := $M.76;
    goto corral_source_split_5945;

  $bb380:
    assume out_$i382 == 1;
    goto corral_source_split_5944;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 1);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i381 := $M.88;
    goto corral_source_split_5927;

  $bb370:
    assume !(out_$i372 == 1);
    goto corral_source_split_5926;

  $bb384:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} out_vslice_dummy_var_186 := fc_lport_bsg_request(in_$p36);
    goto corral_source_split_5951;

  $bb383:
    assume out_$i386 == 1;
    goto corral_source_split_5950;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 1);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i385 := $M.88;
    goto corral_source_split_5915;

  $bb365:
    assume out_$i370 == 1;
    goto corral_source_split_5914;

  $bb358:
    assume out_$i367 == 1;
    assume {:verifier.code 0} true;
    out_$i370 := $slt.i32(out_$i365, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb357:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    out_$i367 := $slt.i32(out_$i365, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb387:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_vslice_dummy_var_187 := fc_get_host_stats(out_$p390);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$p390 := $M.75;
    goto corral_source_split_5955;

  $bb386:
    assume out_$i389 == 1;
    goto corral_source_split_5954;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 1);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i388 := $M.88;
    goto corral_source_split_5919;

  $bb366:
    assume !(out_$i370 == 1);
    goto corral_source_split_5918;

  $bb390:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} fc_rport_terminate_io(out_$p394);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$p394 := $M.76;
    goto corral_source_split_5960;

  $bb389:
    assume out_$i393 == 1;
    goto corral_source_split_5959;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 1);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i392 := $M.88;
    goto corral_source_split_5907;

  $bb360:
    assume out_$i368 == 1;
    goto corral_source_split_5906;

  $bb359:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    out_$i368 := $slt.i32(out_$i365, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb393:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} fc_get_host_port_state(out_$p397);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$p397 := $M.75;
    goto corral_source_split_5965;

  $bb392:
    assume out_$i396 == 1;
    goto corral_source_split_5964;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 1);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i395 := $M.88;
    goto corral_source_split_5911;

  $bb362:
    assume out_$i369 == 1;
    goto corral_source_split_5910;

  $bb361:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i365, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_stop();
    goto corral_source_split_5969;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb363:
    assume {:verifier.code 0} true;
    assume !(out_$i369 == 1);
    goto $bb364;

  $bb372:
    assume {:verifier.code 0} true;
    assume !(out_$i373 == 1);
    goto $bb364;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_stop();
    goto corral_source_split_5971;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb13;

  $bb95_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i208, out_$i209, out_$p210, out_$i211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p22, in_$p23, in_$p24, in_$p26, in_$p27, in_$p29, in_$p31, in_$p32, in_$p34, in_$p36, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i208, out_$i209, out_$p210, out_$i211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$p221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i8, in_$i124: i1, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i1, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$i151: i64, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i16, in_$i203: i32, in_$i204: i16, in_$p205: ref, in_$i206: i32, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$p212: ref, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$p221: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i16, in_$i226: i32, in_$i227: i16, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i16, in_$i241: i32, in_$i242: i16, in_$p243: ref, in_$i244: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i64, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i32, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$i340: i32, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i32, in_$i349: i1, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i64, in_$i363: i32, in_$i364: i1, in_$i365: i32, in_$i366: i1, in_$i367: i1, in_$i368: i1, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$i372: i1, in_$i373: i1, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i1, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: ref, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i1, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: ref, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: ref) returns (out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i8, out_$i124: i1, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i1, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$i151: i64, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i16, out_$i203: i32, out_$i204: i16, out_$p205: ref, out_$i206: i32, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$p212: ref, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$p221: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i16, out_$i226: i32, out_$i227: i16, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i16, out_$i241: i32, out_$i242: i16, out_$p243: ref, out_$i244: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i64, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i32, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$i340: i32, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i32, out_$i349: i1, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i64, out_$i363: i32, out_$i364: i1, out_$i365: i32, out_$i366: i1, out_$i367: i1, out_$i368: i1, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$i372: i1, out_$i373: i1, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i1, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: ref, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i1, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: ref, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: ref);
  modifies $M.77, $M.39, $M.40, $M.0, $M.25, $M.50, $M.53, $M.55, $M.57, $M.59, $CurrAddr, $M.24, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed, $M.78, $M.79, $M.80, $M.81, $M.83, $M.67, $M.68, $M.69, $M.65, $M.72, $M.73, $M.74, $M.70, $M.71, $M.87, $M.75, $M.76, $M.88, $M.86, $M.89, $M.14, $M.43, $M.42;



implementation fcoe_exit_loop_$bb12(in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i33: i32) returns (out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i33: i32)
{

  entry:
    out_$p34, out_$i35, out_$i36, out_$i37, out_$i33 := in_$p34, in_$i35, in_$i36, in_$i37, in_$i33;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  $bb14:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i35;
    goto $bb14_dummy;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(out_$i36, out_$i35);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} out_$i35 := cpumask_next(out_$i33, out_$p34);
    call {:si_unique_call 1481} {:cexpr "cpu"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6025;

  SeqInstr_225:
    goto corral_source_split_6024;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} fcoe_percpu_thread_destroy(out_$i33);
    goto SeqInstr_224;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$i36, out_$i37, out_$i33 := fcoe_exit_loop_$bb12(out_$p34, out_$i35, out_$i36, out_$i37, out_$i33);
    return;

  exit:
    return;
}



procedure fcoe_exit_loop_$bb12(in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i33: i32) returns (out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i33: i32);
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_exit_loop_$bb4(in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_188: i1) returns (out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_188: i1)
{

  entry:
    out_$p11, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p9, out_$p10, out_vslice_dummy_var_188 := in_$p11, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p9, in_$p10, in_vslice_dummy_var_188;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5990;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p10, out_$p24;
    goto $bb6_dummy;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, $p2i.ref.i64(fcoe_hostlist));
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_6008;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p10, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6007;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_vslice_dummy_var_188 := queue_work(out_$p19, out_$p20);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$p19 := $M.14;
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} fcoe_hostlist_del(out_$p18);
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_$p15 := lport_priv(out_$p14);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0, 1), 784)), $mul.ref(8, 1));
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto corral_source_split_5993;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p9, out_$p10, out_vslice_dummy_var_188 := fcoe_exit_loop_$bb4(out_$p11, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p9, out_$p10, out_vslice_dummy_var_188);
    return;

  exit:
    return;
}



procedure fcoe_exit_loop_$bb4(in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_188: i1) returns (out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_188: i1);
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation fcoe_init_loop_$bb34(in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i43: i32) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i43: i32)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$i43 := in_$p44, in_$i45, in_$i46, in_$i47, in_$i43;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  $bb36:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i45;
    goto $bb36_dummy;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i47 := $ugt.i32(out_$i46, out_$i45);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_$i45 := cpumask_next(out_$i43, out_$p44);
    call {:si_unique_call 1518} {:cexpr "cpu"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6125;

  SeqInstr_231:
    goto corral_source_split_6124;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} fcoe_percpu_thread_destroy(out_$i43);
    goto SeqInstr_230;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$i43 := fcoe_init_loop_$bb34(out_$p44, out_$i45, out_$i46, out_$i47, out_$i43);
    return;

  exit:
    return;
}



procedure fcoe_init_loop_$bb34(in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i43: i32) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i43: i32);
  modifies $M.0, $M.25, $M.39, $M.40, $M.24, $M.50, $CurrAddr, $M.34, $M.35, $M.36, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.53, $M.55, $M.57, $M.59, $M.63, $M.64, $M.41, $M.51, $M.52, $M.9, $M.11, $M.5, $M.7, $M.54, $M.56, $M.58, $M.60, assertsPassed;



implementation fcoe_init_loop_$bb19(in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i29: i32) returns (out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$i33, out_$i29 := in_$p30, in_$i31, in_$i32, in_$i33, in_$i29;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6090;

  $bb21:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i31;
    goto $bb21_dummy;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i32(out_$i32, out_$i31);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} out_$i31 := cpumask_next(out_$i29, out_$p30);
    call {:si_unique_call 1506} {:cexpr "cpu"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6093;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} fcoe_percpu_thread_create(out_$i29);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$i33, out_$i29 := fcoe_init_loop_$bb19(out_$p30, out_$i31, out_$i32, out_$i33, out_$i29);
    return;

  exit:
    return;
}



procedure fcoe_init_loop_$bb19(in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i29: i32) returns (out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i29: i32);
  modifies $M.0, $M.24;



implementation fcoe_init_loop_$bb11(in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i13: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i13 := in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i13;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  $bb13:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i22;
    goto $bb13_dummy;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$i24 := $ugt.i32(out_$i23, out_$i22);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} out_$i22 := cpumask_next(out_$i13, out_$p21);
    call {:si_unique_call 1500} {:cexpr "cpu"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} skb_queue_head_init(out_$p20);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, out_$i14);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i15, 8));
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i13);
    goto corral_source_split_6068;

  $bb12:
    call {:si_unique_call 1496} out_$i14 := devirtbounce.10(0, fcoe_percpu);
    call {:si_unique_call 1497} {:cexpr "__ptr"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i13 := fcoe_init_loop_$bb11(out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i13);
    return;

  exit:
    return;
}



procedure fcoe_init_loop_$bb11(in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i13: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i13: i32);
  modifies $M.0, $CurrAddr;


