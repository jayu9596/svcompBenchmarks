var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.5: i32;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i64;

var $M.9: ref;

var $M.10: [ref]i64;

var $M.11: [ref]i16;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: i32;

var $M.17: [ref]i8;

var $M.18: [ref]ref;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i64;

var $M.22: [ref]i64;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: i64;

var $M.39: ref;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i64;

var $M.45: ref;

var $M.46: i32;

var $M.47: i32;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: i64;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: i64;

var $M.59: ref;

var $M.60: i64;

var $M.61: i32;

var $M.62: i32;

var $M.63: ref;

var $M.64: ref;

var $M.65: i32;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: i64;

var $M.73: i32;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: i64;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: [ref]i32;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 438823);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 1028);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 2056);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 3084);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 4112);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5140);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 6168);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 7196);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 8224);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 9252);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 10284);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 11316);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 12348);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 13380);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 14412);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 15444);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 16476);

const ida_fops_group0: ref;

axiom ida_fops_group0 == $sub.ref(0, 17508);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 18536);

const ida_fops_group1: ref;

axiom ida_fops_group1 == $sub.ref(0, 19568);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 20596);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 21624);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 22656);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 23688);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 24716);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 25744);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 26776);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 27808);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 28840);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 29872);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 30904);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 31936);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 32968);

const ida_proc_fops_group1: ref;

axiom ida_proc_fops_group1 == $sub.ref(0, 34000);

const ida_proc_fops_group2: ref;

axiom ida_proc_fops_group2 == $sub.ref(0, 35032);

const ldvarg24: ref;

axiom ldvarg24 == $sub.ref(0, 36064);

const ldvarg23: ref;

axiom ldvarg23 == $sub.ref(0, 37096);

const ldvarg22: ref;

axiom ldvarg22 == $sub.ref(0, 38128);

const ldvarg21: ref;

axiom ldvarg21 == $sub.ref(0, 39160);

const ldvarg20: ref;

axiom ldvarg20 == $sub.ref(0, 40188);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 41216);

const cpqarray_pci_driver_group0: ref;

axiom cpqarray_pci_driver_group0 == $sub.ref(0, 42248);

const ldvarg25: ref;

axiom ldvarg25 == $sub.ref(0, 43280);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 44308);

const ldvarg32: ref;

axiom ldvarg32 == $sub.ref(0, 45340);

const ldvarg31: ref;

axiom ldvarg31 == $sub.ref(0, 46372);

const ldvarg30: ref;

axiom ldvarg30 == $sub.ref(0, 47404);

const ldvarg28: ref;

axiom ldvarg28 == $sub.ref(0, 48436);

const ldvarg29: ref;

axiom ldvarg29 == $sub.ref(0, 49468);

const ldvarg26: ref;

axiom ldvarg26 == $sub.ref(0, 50500);

const ldvarg27: ref;

axiom ldvarg27 == $sub.ref(0, 51532);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 52560);

const ldvarg39: ref;

axiom ldvarg39 == $sub.ref(0, 53592);

const ldvarg38: ref;

axiom ldvarg38 == $sub.ref(0, 54624);

const ldvarg37: ref;

axiom ldvarg37 == $sub.ref(0, 55656);

const ldvarg35: ref;

axiom ldvarg35 == $sub.ref(0, 56688);

const ldvarg36: ref;

axiom ldvarg36 == $sub.ref(0, 57720);

const ldvarg33: ref;

axiom ldvarg33 == $sub.ref(0, 58752);

const ldvarg34: ref;

axiom ldvarg34 == $sub.ref(0, 59784);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 60840);

const {:count 8} eisa: ref;

axiom eisa == $sub.ref(0, 61896);

const {:count 11} cpqarray_pci_device_id: ref;

axiom cpqarray_pci_device_id == $sub.ref(0, 63272);

const cpqarray_pci_driver: ref;

axiom cpqarray_pci_driver == $sub.ref(0, 64608);

const nr_ctlr: ref;

axiom nr_ctlr == $sub.ref(0, 65636);

const ida_fops: ref;

axiom ida_fops == $sub.ref(0, 66756);

const ida_proc_fops: ref;

axiom ida_proc_fops == $sub.ref(0, 67996);

const proc_array: ref;

axiom proc_array == $sub.ref(0, 69028);

const smart4_access: ref;

axiom smart4_access == $sub.ref(0, 70092);

const smart2_access: ref;

axiom smart2_access == $sub.ref(0, 71156);

const smart2e_access: ref;

axiom smart2e_access == $sub.ref(0, 72220);

const smart1_access: ref;

axiom smart1_access == $sub.ref(0, 73284);

const {:count 15} products: ref;

axiom products == $sub.ref(0, 74668);

const {:count 8} ida_gendisk: ref;

axiom ida_gendisk == $sub.ref(0, 76716);

const {:count 8} hba: ref;

axiom hba == $sub.ref(0, 77804);

const cpqarray_mutex: ref;

axiom cpqarray_mutex == $sub.ref(0, 78996);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 80024);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 81052);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 82080);

const ldv_mutex_cpqarray_mutex: ref;

axiom ldv_mutex_cpqarray_mutex == $sub.ref(0, 83108);

const .str: ref;

axiom .str == $sub.ref(0, 84157);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 85196);

const {:count 4} .str.33: ref;

axiom .str.33 == $sub.ref(0, 86224);

const {:count 6} .str.34: ref;

axiom .str.34 == $sub.ref(0, 87254);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 88283);

const {:count 6} .str.36: ref;

axiom .str.36 == $sub.ref(0, 89313);

const {:count 10} .str.37: ref;

axiom .str.37 == $sub.ref(0, 90347);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 91381);

const {:count 10} .str.39: ref;

axiom .str.39 == $sub.ref(0, 92415);

const {:count 17} .str.40: ref;

axiom .str.40 == $sub.ref(0, 93456);

const {:count 19} .str.41: ref;

axiom .str.41 == $sub.ref(0, 94499);

const {:count 16} .str.42: ref;

axiom .str.42 == $sub.ref(0, 95539);

const {:count 17} .str.43: ref;

axiom .str.43 == $sub.ref(0, 96580);

const {:count 16} .str.44: ref;

axiom .str.44 == $sub.ref(0, 97620);

const {:count 17} .str.45: ref;

axiom .str.45 == $sub.ref(0, 98661);

const {:count 19} .str.46: ref;

axiom .str.46 == $sub.ref(0, 99704);

const {:count 16} .str.47: ref;

axiom .str.47 == $sub.ref(0, 100744);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 304} .str.19: ref;

axiom .str.19 == $sub.ref(0, 102072);

const {:count 21} .str.20: ref;

axiom .str.20 == $sub.ref(0, 103117);

const {:count 33} .str.21: ref;

axiom .str.21 == $sub.ref(0, 104174);

const {:count 30} .str.22: ref;

axiom .str.22 == $sub.ref(0, 105228);

const {:count 59} .str.7: ref;

axiom .str.7 == $sub.ref(0, 106311);

const {:count 28} .str.8: ref;

axiom .str.8 == $sub.ref(0, 107363);

const {:count 40} .str.9: ref;

axiom .str.9 == $sub.ref(0, 108427);

const {:count 7} .str.10: ref;

axiom .str.10 == $sub.ref(0, 109458);

const {:count 117} .str.11: ref;

axiom .str.11 == $sub.ref(0, 110599);

const {:count 134} .str.12: ref;

axiom .str.12 == $sub.ref(0, 111757);

const {:count 43} .str.13: ref;

axiom .str.13 == $sub.ref(0, 112824);

const {:count 39} .str.14: ref;

axiom .str.14 == $sub.ref(0, 113887);

const {:count 52} .str.15: ref;

axiom .str.15 == $sub.ref(0, 114963);

const {:count 79} .str.16: ref;

axiom .str.16 == $sub.ref(0, 116066);

const {:count 79} .str.17: ref;

axiom .str.17 == $sub.ref(0, 117169);

const {:count 101} .str.18: ref;

axiom .str.18 == $sub.ref(0, 118294);

const {:count 125} .str.4: ref;

axiom .str.4 == $sub.ref(0, 119443);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 122} .str.5: ref;

axiom .str.5 == $sub.ref(0, 120589);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 41} .str.6: ref;

axiom .str.6 == $sub.ref(0, 121654);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 124} .str.2: ref;

axiom .str.2 == $sub.ref(0, 122802);

const {:count 27} .str.3: ref;

axiom .str.3 == $sub.ref(0, 123853);

const {:count 9} .str.30: ref;

axiom .str.30 == $sub.ref(0, 124886);

const {:count 37} .str.68: ref;

axiom .str.68 == $sub.ref(0, 125947);

const {:count 63} .str.69: ref;

axiom .str.69 == $sub.ref(0, 127034);

const {:count 41} .str.70: ref;

axiom .str.70 == $sub.ref(0, 128099);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 64} .str.23: ref;

axiom .str.23 == $sub.ref(0, 129187);

const {:count 6} .str.24: ref;

axiom .str.24 == $sub.ref(0, 130217);

const {:count 40} .str.52: ref;

axiom .str.52 == $sub.ref(0, 131281);

const {:count 32} .str.53: ref;

axiom .str.53 == $sub.ref(0, 132337);

const {:count 24} .str.54: ref;

axiom .str.54 == $sub.ref(0, 133385);

const {:count 17} .str.55: ref;

axiom .str.55 == $sub.ref(0, 134426);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 11} .str.56: ref;

axiom .str.56 == $sub.ref(0, 135461);

const {:count 25} .str.57: ref;

axiom .str.57 == $sub.ref(0, 136510);

const {:count 16} .str.67: ref;

axiom .str.67 == $sub.ref(0, 137550);

const {:count 54} .str.64: ref;

axiom .str.64 == $sub.ref(0, 138628);

const {:count 66} .str.65: ref;

axiom .str.65 == $sub.ref(0, 139718);

const {:count 50} .str.66: ref;

axiom .str.66 == $sub.ref(0, 140792);

const {:count 223} .str.62: ref;

axiom .str.62 == $sub.ref(0, 142039);

const {:count 28} .str.63: ref;

axiom .str.63 == $sub.ref(0, 143091);

const {:count 40} .str.58: ref;

axiom .str.58 == $sub.ref(0, 144155);

const {:count 32} .str.59: ref;

axiom .str.59 == $sub.ref(0, 145211);

const {:count 28} .str.60: ref;

axiom .str.60 == $sub.ref(0, 146263);

const {:count 71} .str.61: ref;

axiom .str.61 == $sub.ref(0, 147358);

const {:count 40} .str.27: ref;

axiom .str.27 == $sub.ref(0, 148422);

const {:count 35} .str.28: ref;

axiom .str.28 == $sub.ref(0, 149481);

const {:count 46} .str.29: ref;

axiom .str.29 == $sub.ref(0, 150551);

const {:count 65} .str.31: ref;

axiom .str.31 == $sub.ref(0, 151640);

const {:count 79} .str.32: ref;

axiom .str.32 == $sub.ref(0, 152743);

const {:count 27} .str.25: ref;

axiom .str.25 == $sub.ref(0, 153794);

const {:count 61} .str.26: ref;

axiom .str.26 == $sub.ref(0, 154879);

const {:count 32} .str.72: ref;

axiom .str.72 == $sub.ref(0, 155935);

const {:count 61} .str.73: ref;

axiom .str.73 == $sub.ref(0, 157020);

const {:count 46} .str.74: ref;

axiom .str.74 == $sub.ref(0, 158090);

const {:count 40} .str.71: ref;

axiom .str.71 == $sub.ref(0, 159154);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 160186);

const {:count 3} .str.1.131: ref;

axiom .str.1.131 == $sub.ref(0, 161213);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 162251);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 163279);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 164311);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 165343);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const smart1_submit_command: ref;

axiom smart1_submit_command == $sub.ref(0, 166375);

procedure smart1_submit_command($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation smart1_submit_command($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 3215);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} outb(2, $i7);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 3216);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} outl($i9, $i13);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 3220);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} outw($i18, $i22);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 3213);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} outb(1, $i26);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    return;
}



const smart1_intr_mask: ref;

axiom smart1_intr_mask == $sub.ref(0, 167407);

procedure smart1_intr_mask($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation smart1_intr_mask($p0: ref, $i1: i64)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} {:cexpr "smart1_intr_mask:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 3214);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} outb(0, $i22);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 3215);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} outb($sub.i8(0, 3), $i6);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 3213);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} outb(1, $i10);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 3209);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} outb(1, $i14);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 3214);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} outb(1, $i18);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const smart1_fifo_full: ref;

axiom smart1_fifo_full == $sub.ref(0, 168439);

procedure smart1_fifo_full($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation smart1_fifo_full($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 3215);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i5 := inb($i4);
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 12} {:cexpr "chan"} boogie_si_record_i8($i8);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i64($i8);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const smart1_intr_pending: ref;

axiom smart1_intr_pending == $sub.ref(0, 169471);

procedure smart1_intr_pending($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation smart1_intr_pending($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 3215);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i5 := inb($i4);
    call {:si_unique_call 14} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 15} {:cexpr "chan"} boogie_si_record_i8($i8);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i64($i8);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const smart1_completed: ref;

axiom smart1_completed == $sub.ref(0, 170503);

procedure smart1_completed($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart1_completed($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $i34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 3215);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i5 := inb($i4);
    call {:si_unique_call 17} {:cexpr "tmp___1"} boogie_si_record_i8($i5);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 3215);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} outb(1, $i12);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 3224);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i17 := inl($i16);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    call {:si_unique_call 21} {:cexpr "cmd"} boogie_si_record_i64($i18);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 3230);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i23 := inb($i22);
    call {:si_unique_call 23} {:cexpr "status"} boogie_si_record_i8($i23);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 3213);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} outb(2, $i27);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i18, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i34 := $i18;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p29 := phys_to_virt($i18);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p30, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i23);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const inb: ref;

axiom inb == $sub.ref(0, 171535);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 27} $i1 := devirtbounce(0, $i0);
    call {:si_unique_call 28} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 172567);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 30} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 31} devirtbounce.1(0, $i0, $i1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    return;
}



const inl: ref;

axiom inl == $sub.ref(0, 173599);

procedure inl($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inl($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "inl:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 33} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 34} {:cexpr "value"} boogie_si_record_i32($i1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 174631);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const outl: ref;

axiom outl == $sub.ref(0, 175663);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 37} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 38} devirtbounce.3(0, $i0, $i1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    return;
}



const outw: ref;

axiom outw == $sub.ref(0, 176695);

procedure outw($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw($i0: i16, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "outw:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 40} {:cexpr "outw:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 41} devirtbounce.4(0, $i0, $i1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    return;
}



const smart2e_submit_command: ref;

axiom smart2e_submit_command == $sub.ref(0, 177727);

procedure smart2e_submit_command($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation smart2e_submit_command($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 4);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} outl($i3, $i7);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    return;
}



const smart2e_intr_mask: ref;

axiom smart2e_intr_mask == $sub.ref(0, 178759);

procedure smart2e_intr_mask($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation smart2e_intr_mask($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} {:cexpr "smart2e_intr_mask:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 12);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} outl($i2, $i6);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    return;
}



const smart2e_fifo_full: ref;

axiom smart2e_fifo_full == $sub.ref(0, 179791);

procedure smart2e_fifo_full($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation smart2e_fifo_full($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 4);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i5 := inl($i4);
    call {:si_unique_call 46} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const smart2e_intr_pending: ref;

axiom smart2e_intr_pending == $sub.ref(0, 180823);

procedure smart2e_intr_pending($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation smart2e_intr_pending($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 20);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i5 := inl($i4);
    call {:si_unique_call 48} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const smart2e_completed: ref;

axiom smart2e_completed == $sub.ref(0, 181855);

procedure smart2e_completed($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation smart2e_completed($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 8);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i5 := inl($i4);
    call {:si_unique_call 50} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const smart2_submit_command: ref;

axiom smart2_submit_command == $sub.ref(0, 182887);

procedure smart2_submit_command($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation smart2_submit_command($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} writel($i3, $p6);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    return;
}



const smart2_intr_mask: ref;

axiom smart2_intr_mask == $sub.ref(0, 183919);

procedure smart2_intr_mask($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation smart2_intr_mask($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "smart2_intr_mask:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(12, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} writel($i2, $p5);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    return;
}



const smart2_fifo_full: ref;

axiom smart2_fifo_full == $sub.ref(0, 184951);

procedure smart2_fifo_full($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart2_fifo_full($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i4 := readl($p3);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const smart2_intr_pending: ref;

axiom smart2_intr_pending == $sub.ref(0, 185983);

procedure smart2_intr_pending($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart2_intr_pending($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(20, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i4 := readl($p3);
    call {:si_unique_call 57} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const smart2_completed: ref;

axiom smart2_completed == $sub.ref(0, 187015);

procedure smart2_completed($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart2_completed($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i4 := readl($p3);
    call {:si_unique_call 59} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 188047);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 60} $i2 := devirtbounce.5(0, $p1);
    call {:si_unique_call 61} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 189079);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 63} devirtbounce.6(0, $i0, $p2);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    return;
}



const smart4_submit_command: ref;

axiom smart4_submit_command == $sub.ref(0, 190111);

procedure smart4_submit_command($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation smart4_submit_command($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(64, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} writel($i3, $p6);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    return;
}



const smart4_intr_mask: ref;

axiom smart4_intr_mask == $sub.ref(0, 191143);

procedure smart4_intr_mask($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation smart4_intr_mask($p0: ref, $i1: i64)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} {:cexpr "smart4_intr_mask:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(52, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} writel(8, $p8);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(52, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} writel(0, $p5);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const smart4_fifo_full: ref;

axiom smart4_fifo_full == $sub.ref(0, 192175);

procedure smart4_fifo_full($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart4_fifo_full($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(64, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i4 := readl($p3);
    call {:si_unique_call 69} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const smart4_intr_pending: ref;

axiom smart4_intr_pending == $sub.ref(0, 193207);

procedure smart4_intr_pending($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart4_intr_pending($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(48, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i4 := readl($p3);
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 72} {:cexpr "register_value"} boogie_si_record_i64($i5);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 8);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;
}



const smart4_completed: ref;

axiom smart4_completed == $sub.ref(0, 194239);

procedure smart4_completed($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation smart4_completed($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(68, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i4 := readl($p3);
    call {:si_unique_call 74} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 75} {:cexpr "register_value"} boogie_si_record_i64($i5);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 4294967295);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(68, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} writel(0, $p10);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 195271);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 77} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 78} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 79} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 80} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 196303);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 83} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ida_proc_open: ref;

axiom ida_proc_open == $sub.ref(0, 197335);

procedure ida_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ida_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p2 := PDE($p0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i5 := single_open($p1, ida_proc_show, $p4);
    call {:si_unique_call 86} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 198367);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const PDE: ref;

axiom PDE == $sub.ref(0, 199399);

procedure PDE($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PDE($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p1 := PROC_I($p0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1096)), $mul.ref(24, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ida_proc_show: ref;

axiom ida_proc_show == $sub.ref(0, 200431);

procedure ida_proc_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 201463);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 202495);

procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.i64.i32.i32.i32.i32.i64.i64.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i64, p.10: i64, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32) returns ($r: i32);



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 203527);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);



const PROC_I: ref;

axiom PROC_I == $sub.ref(0, 204559);

procedure PROC_I($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PROC_I($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 64), 1096));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ida_unlocked_open: ref;

axiom ida_unlocked_open == $sub.ref(0, 205591);

procedure ida_unlocked_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.0, assertsPassed;



implementation ida_unlocked_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "ida_unlocked_open:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ldv_mutex_lock_8(cpqarray_mutex);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i2 := ida_open($p0, $i1);
    call {:si_unique_call 95} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ldv_mutex_unlock_9(cpqarray_mutex);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ida_release: ref;

axiom ida_release == $sub.ref(0, 206623);

procedure ida_release($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, assertsPassed;



implementation ida_release($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "ida_release:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_mutex_lock_10(cpqarray_mutex);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p2 := get_host($p0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_mutex_unlock_11(cpqarray_mutex);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ida_ioctl: ref;

axiom ida_ioctl == $sub.ref(0, 207655);

procedure ida_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.17, assertsPassed, $CurrAddr, $M.8;



implementation ida_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "ida_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 102} {:cexpr "ida_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 103} {:cexpr "ida_ioctl:arg:param"} boogie_si_record_i64($i3);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_mutex_lock_12(cpqarray_mutex);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i4 := ida_locked_ioctl($p0, $i1, $i2, $i3);
    call {:si_unique_call 106} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} ldv_mutex_unlock_13(cpqarray_mutex);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ida_revalidate: ref;

axiom ida_revalidate == $sub.ref(0, 208687);

procedure ida_revalidate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ida_revalidate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} set_capacity($p0, $i6);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ida_getgeo: ref;

axiom ida_getgeo == $sub.ref(0, 209719);

procedure ida_getgeo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ida_getgeo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p4 := get_drv($p3);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $sub.i8(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 63);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 16065);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $i18);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_drv: ref;

axiom get_drv == $sub.ref(0, 210751);

procedure get_drv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_drv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 211783);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 212815);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} ldv_mutex_lock_cpqarray_mutex($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} mutex_lock($p0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ida_locked_ioctl: ref;

axiom ida_locked_ioctl == $sub.ref(0, 213847);

procedure ida_locked_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $CurrAddr, $M.8;



implementation ida_locked_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i43: i32;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 114} {:cexpr "ida_locked_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 115} {:cexpr "ida_locked_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 116} {:cexpr "ida_locked_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p7 := get_drv($p6);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p10 := get_host($p9);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 808464689);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 825307698);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 842150707);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 842150707);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i3, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 1440)), $mul.ref(208, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $i79);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $i85);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i3);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p4);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i92 := copy_to_user($p90, $p91, 8);
    call {:si_unique_call 141} {:cexpr "tmp___8"} boogie_si_record_i32($i92);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb27;

  $bb68:
    assume $i93 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb27;

  $bb65:
    assume $i73 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb27;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, 825307698);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i3, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} might_fault();
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i3);
    call {:si_unique_call 138} $i70 := devirtbounce.8(0, 132608, $p69);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    call {:si_unique_call 139} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i71);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb27;

  $bb62:
    assume $i72 == 1;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb27;

  $bb58:
    assume $i68 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb27;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, 808464689);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(0, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1048575);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i67 := revalidate_allvol($p10);
    call {:si_unique_call 136} {:cexpr "tmp___7"} boogie_si_record_i32($i67);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i29 := $i67;
    goto $bb27;

  $bb55:
    assume $i66 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 6);
    goto $bb27;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i2, 673720617);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i2, 690565168);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 690565168);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i3, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} might_fault();
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(32, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    call {:si_unique_call 132} {:cexpr "__pu_val"} boogie_si_record_i32($i59);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i3);
    call {:si_unique_call 133} $i61 := devirtbounce.7(0, $i59, $p60);
    call {:si_unique_call 134} {:cexpr "__ret_pu"} boogie_si_record_i32($i61);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb27;

  $bb52:
    assume $i62 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb27;

  $bb48:
    assume $i57 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb27;

  $bb17:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i2, 673720617);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i30 := capable(17);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 120} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p35 := kmalloc(1560, 208);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p36);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p11);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i41 := copy_from_user($p39, $p40, 1560);
    call {:si_unique_call 125} {:cexpr "tmp___5"} boogie_si_record_i64($i41);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p7);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i47 := $sub.i64($i44, $i46);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i48 := $sdiv.i64($i47, 24);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i50 := ida_ctlr_ioctl($p10, $i49, $p36);
    call {:si_unique_call 128} {:cexpr "error"} boogie_si_record_i32($i50);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p11);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p36);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i54 := copy_to_user($p52, $p53, 1560);
    call {:si_unique_call 130} {:cexpr "tmp___6"} boogie_si_record_i32($i54);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p36);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} kfree($p56);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i29 := $i43;
    goto $bb27;

  $bb45:
    assume $i55 == 1;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 14);
    goto $bb40;

  $bb42:
    assume $i51 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i43 := $i50;
    goto $bb40;

  $bb38:
    assume $i42 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 14);
    goto $bb40;

  $bb35:
    assume $i38 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb27;

  $bb32:
    assume $i34 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 1);
    goto $bb27;

  $bb29:
    assume $i32 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb31;

  $bb15:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i2, 656877608);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 1568)), $mul.ref(532, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p7);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i27 := copy_to_user($p25, $p26, 24);
    call {:si_unique_call 122} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb27;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb27;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 214879);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_mutex_unlock_cpqarray_mutex($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} mutex_unlock($p0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_cpqarray_mutex: ref;

axiom ldv_mutex_unlock_cpqarray_mutex == $sub.ref(0, 215911);

procedure ldv_mutex_unlock_cpqarray_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_cpqarray_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 145} {:cexpr "ldv_mutex_cpqarray_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 216943);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 217975);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const get_host: ref;

axiom get_host == $sub.ref(0, 219007);

procedure get_host($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_host($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3080)), $mul.ref(1840, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 220039);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} might_fault();
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 150} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 221071);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 153} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 222103);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 155} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 223135);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_51: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 159} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 160} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} might_fault();
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 163} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 167} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 171} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_51 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} warn_slowpath_fmt.ref.i32.ref(.str.2, 66, .str.3);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 169} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 165} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ida_ctlr_ioctl: ref;

axiom ida_ctlr_ioctl == $sub.ref(0, 224167);

procedure ida_ctlr_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation ida_ctlr_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p20: ref;
  var $i21: i8;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i64;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $p85: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i104: i32;
  var $p108: ref;
  var $p111: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $i137: i64;
  var $i138: i32;
  var $p142: ref;
  var $p145: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $i153: i64;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $i157: i64;
  var $i158: i32;
  var $p161: ref;
  var $i162: i64;
  var $i163: i32;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i32;
  var $p181: ref;
  var $p184: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i64;
  var $i199: i64;
  var $i200: i32;
  var $p204: ref;
  var $p207: ref;
  var $p112: ref;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i1;
  var $i246: i1;
  var $i247: i1;
  var $i248: i1;
  var $i249: i1;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i1;
  var $i255: i1;
  var $i256: i1;
  var $i257: i1;
  var $i258: i1;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i64;
  var $p269: ref;
  var $p270: ref;
  var $p273: ref;
  var $i274: i64;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p280: ref;
  var $i281: i8;
  var $p282: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "ida_ctlr_ioctl:arg:dsk"} boogie_si_record_i32($i1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 175} {:cexpr "ctlr"} boogie_si_record_i32($i4);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p5 := cmd_alloc($p0, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i4);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(2, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i21);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 68);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 272);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i31);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(4, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i41);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 145);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 210);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i48, 246);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i48, 247);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i48, 247);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 1024);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(532, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i198 := $zext.i32.i64($i197);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i199 := pci_map_single($p190, $p192, $i198, 0);
    call {:si_unique_call 208} {:cexpr "tmp___7"} boogie_si_record_i64($i199);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i64.i32($i199);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p204, $i200);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p112 := $0.ref;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i208, 8));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.6, $p209);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p212 := spinlock_check($p211);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i213 := _raw_spin_lock_irqsave($p212);
    call {:si_unique_call 194} {:cexpr "flags"} boogie_si_record_i64($i213);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} addQ($p214, $p5);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i216, 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, $i217);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} start_io($p0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i4);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i219, 8));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.6, $p220);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p221, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} spin_unlock_irqrestore($p222, $i213);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 2);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i235 := $zext.i32.i64($i234);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i241 := $zext.i32.i64($i240);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} pci_unmap_single($p229, $i235, $i241, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i245 := $slt.i32($i244, 145);
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    $i246 := $slt.i32($i244, 210);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    $i247 := $slt.i32($i244, 246);
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i244, 247);
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb73, $bb75;

  $bb75:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i244, 247);
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb76, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.0, $p280);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(1, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, $i281);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} cmd_free($p0, $p5, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} kfree($p112);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.0, $p273);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i64.i32($i274);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i276 := copy_to_user($p270, $p112, $i275);
    call {:si_unique_call 212} {:cexpr "tmp___9"} boogie_si_record_i32($i276);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb106:
    assume $i277 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} kfree($p112);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb71:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i244, 210);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb79;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb81;

  $bb69:
    assume $i246 == 1;
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i244, 168);
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i244, 168);
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb85, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb79;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb83:
    assume $i251 == 1;
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i244, 145);
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb79;

  $bb88:
    assume $i253 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i266 := $zext.i32.i64($i265);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} pci_unmap_single($p261, $i266, 1560, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb67:
    assume $i245 == 1;
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i244, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    $i255 := $slt.i32($i244, 65);
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i244, 65);
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb94, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb79;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb95;

  $bb92:
    assume $i255 == 1;
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i244, 49);
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb97, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb79;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb98;

  $bb90:
    assume $i254 == 1;
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i244, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb102;

  $bb100:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i244, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb103, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb79;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb104;

  $bb58:
    assume $i225 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    call $i226, $i227 := ida_ctlr_ioctl_loop_$bb61($p223, $i226, $i227);
    goto $bb61_last;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} schedule();
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p223);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 2);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i227 == 1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb63_dummy;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p154 := memdup_user($p149, $i153);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i155 := IS_ERR($p154);
    call {:si_unique_call 179} {:cexpr "tmp___5"} boogie_si_record_i64($i155);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.0, $p161);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i64.i32($i162);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i163);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i175 := $zext.i32.i64($i174);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i176 := pci_map_single($p169, $p154, $i175, 0);
    call {:si_unique_call 206} {:cexpr "tmp___6"} boogie_si_record_i64($i176);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i64.i32($i176);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i177);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p184, 1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p112 := $p154;
    goto $bb49;

  $bb53:
    assume $i156 == 1;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i157 := PTR_ERR($p154);
    call {:si_unique_call 202} {:cexpr "tmp___4"} boogie_si_record_i64($i157);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i64.i32($i157);
    call {:si_unique_call 203} {:cexpr "error"} boogie_si_record_i32($i158);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} cmd_free($p0, $p5, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i8 := $i158;
    goto $bb3;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.0, $p115);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p117 := kmalloc($i116, 208);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i64.i32($i123);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i124);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i137 := pci_map_single($p130, $p117, $i136, 0);
    call {:si_unique_call 200} {:cexpr "tmp___3"} boogie_si_record_i64($i137);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i64.i32($i137);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, $i138);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p112 := $p117;
    goto $bb49;

  $bb50:
    assume $i119 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} cmd_free($p0, $p5, 0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb13:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i48, 210);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i48, 168);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i48, 168);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb21;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb28;

  $bb25:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i48, 145);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb21;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p72 := memdup_user($p67, $i71);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i73 := IS_ERR($p72);
    call {:si_unique_call 183} {:cexpr "tmp___0"} boogie_si_record_i64($i73);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(532, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i81 := pci_map_single($p78, $p80, 1560, 0);
    call {:si_unique_call 189} {:cexpr "tmp___1"} boogie_si_record_i64($i81);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i82);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(16, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i90);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i103 := pci_map_single($p96, $p72, $i102, 0);
    call {:si_unique_call 191} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i104);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p112 := $p72;
    goto $bb49;

  $bb46:
    assume $i74 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i75 := PTR_ERR($p72);
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i64($i75);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    call {:si_unique_call 186} {:cexpr "error"} boogie_si_record_i32($i76);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} cmd_free($p0, $p5, 0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i8 := $i76;
    goto $bb3;

  $bb9:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i48, 49);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i48, 65);
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i48, 65);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb21;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb34:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i48, 49);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb39, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb21;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i48, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i62 == 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb42:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i48, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb21;

  $bb44:
    assume $i63 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(2, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 127);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i18);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb63_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    goto $bb62;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 225199);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} free_($p0);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 226231);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    return;
}



const revalidate_allvol: ref;

axiom revalidate_allvol == $sub.ref(0, 227263);

procedure revalidate_allvol($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation revalidate_allvol($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i19: i32;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i16;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i16;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $i151: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i16;
  var $i166: i32;
  var $i167: i16;
  var $p168: ref;
  var $i169: i32;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $i176: i64;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i16;
  var $i191: i32;
  var $i192: i16;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i201: i64;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i16;
  var $i216: i32;
  var $i217: i16;
  var $p218: ref;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i16;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $i244: i32;
  var $i245: i64;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p250: ref;
  var $i251: i64;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i16;
  var $i266: i32;
  var $i267: i16;
  var $p268: ref;
  var $i269: i32;
  var $i270: i64;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $i276: i64;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $i289: i32;
  var $i290: i16;
  var $i291: i32;
  var $i292: i16;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p300: ref;
  var $i301: i64;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i315: i16;
  var $i316: i32;
  var $i317: i16;
  var $p318: ref;
  var $i319: i32;
  var $i320: i64;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p325: ref;
  var $i326: i64;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i339: i32;
  var $i340: i16;
  var $i341: i32;
  var $i342: i16;
  var $p343: ref;
  var $i344: i32;
  var $i345: i64;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p350: ref;
  var $i351: i64;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i360: i1;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $i365: i16;
  var $i366: i32;
  var $i367: i16;
  var $p368: ref;
  var $i369: i32;
  var $i370: i64;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p375: ref;
  var $i376: i64;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i32;
  var $i390: i16;
  var $i391: i32;
  var $i392: i16;
  var $p393: ref;
  var $i394: i32;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p400: ref;
  var $i401: i64;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i415: i16;
  var $i416: i32;
  var $i417: i16;
  var $p418: ref;
  var $i419: i32;
  var $i420: i64;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p425: ref;
  var $i426: i64;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i434: i32;
  var $i435: i1;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $i439: i32;
  var $i440: i16;
  var $i441: i32;
  var $i442: i16;
  var $p443: ref;
  var $i444: i32;
  var $i445: i64;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p450: ref;
  var $i451: i64;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i32;
  var $i457: i32;
  var $i458: i1;
  var $i459: i64;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $i466: i1;
  var $i467: i64;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i32;
  var $i473: i32;
  var $i474: i1;
  var $i475: i64;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i32;
  var $i482: i1;
  var $i483: i64;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $i491: i64;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i32;
  var $i497: i32;
  var $i498: i1;
  var $i499: i64;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i32;
  var $i505: i32;
  var $i506: i1;
  var $i507: i64;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i32;
  var $i513: i32;
  var $i514: i1;
  var $i515: i64;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i32;
  var $i522: i1;
  var $i523: i64;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $i528: i32;
  var $i529: i32;
  var $i530: i1;
  var $i531: i64;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $i536: i32;
  var $i537: i32;
  var $i538: i1;
  var $i539: i64;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $i544: i32;
  var $i545: i32;
  var $i546: i1;
  var $i547: i64;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $i552: i32;
  var $i553: i32;
  var $i554: i1;
  var $i555: i64;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $i560: i32;
  var $i561: i32;
  var $i562: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 218} {:cexpr "ctlr"} boogie_si_record_i32($i2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i3, 8));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p7 := spinlock_check($p6);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 221} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i2);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i24, 8));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} spin_unlock_irqrestore($p27, $i8);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i2);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i28, 128)), $mul.ref(0, 8));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.7, $p30);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} set_capacity($p31, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i2);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i32, 128)), $mul.ref(1, 8));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.7, $p34);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i451 := $sext.i32.i64($i2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i451, 128)), $mul.ref(2, 8));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.7, $p453);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p454, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.0, $p455);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i457 := $and.i32($i456, 16);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i459 := $sext.i32.i64($i2);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i459, 128)), $mul.ref(3, 8));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.7, $p461);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p462, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.0, $p463);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i465 := $and.i32($i464, 16);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i2);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i467, 128)), $mul.ref(4, 8));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.7, $p469);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p470, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p471);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i473 := $and.i32($i472, 16);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i474 := $ne.i32($i473, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i475 := $sext.i32.i64($i2);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i475, 128)), $mul.ref(5, 8));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.7, $p477);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p478, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i480 := $load.i32($M.0, $p479);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i481 := $and.i32($i480, 16);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i482 := $ne.i32($i481, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i2);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i483, 128)), $mul.ref(6, 8));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.7, $p485);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p486, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i488 := $load.i32($M.0, $p487);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i489 := $and.i32($i488, 16);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i489, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i491 := $sext.i32.i64($i2);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i491, 128)), $mul.ref(7, 8));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p494 := $load.ref($M.7, $p493);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p494, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p495);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i497 := $and.i32($i496, 16);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i499 := $sext.i32.i64($i2);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i499, 128)), $mul.ref(8, 8));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.7, $p501);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p502, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i504 := $load.i32($M.0, $p503);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i505 := $and.i32($i504, 16);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i506 := $ne.i32($i505, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i507 := $sext.i32.i64($i2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i507, 128)), $mul.ref(9, 8));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.7, $p509);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p510, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i512 := $load.i32($M.0, $p511);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i513 := $and.i32($i512, 16);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i514 := $ne.i32($i513, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i515 := $sext.i32.i64($i2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i515, 128)), $mul.ref(10, 8));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.7, $p517);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.0, $p519);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i521 := $and.i32($i520, 16);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i522 := $ne.i32($i521, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i523 := $sext.i32.i64($i2);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i523, 128)), $mul.ref(11, 8));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.7, $p525);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p526, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i528 := $load.i32($M.0, $p527);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i529 := $and.i32($i528, 16);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i530 := $ne.i32($i529, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i531 := $sext.i32.i64($i2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i531, 128)), $mul.ref(12, 8));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.7, $p533);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p534, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i536 := $load.i32($M.0, $p535);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i537 := $and.i32($i536, 16);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i538 := $ne.i32($i537, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i538} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i539 := $sext.i32.i64($i2);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i539, 128)), $mul.ref(13, 8));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.7, $p541);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p542, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i544 := $load.i32($M.0, $p543);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i545 := $and.i32($i544, 16);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i546 := $ne.i32($i545, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i547 := $sext.i32.i64($i2);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i547, 128)), $mul.ref(14, 8));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.7, $p549);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p550, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i552 := $load.i32($M.0, $p551);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i553 := $and.i32($i552, 16);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i554 := $ne.i32($i553, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i555 := $sext.i32.i64($i2);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i555, 128)), $mul.ref(15, 8));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p558 := $load.ref($M.7, $p557);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p558, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i560 := $load.i32($M.0, $p559);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i561 := $and.i32($i560, 16);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i562 := $ne.i32($i561, 0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i562} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 227} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p41, 0, 384, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(8, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 228} devirtbounce.9($p44, $p0, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} getgeometry($i2);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(8, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    call {:si_unique_call 230} devirtbounce.9($p47, $p0, 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i2);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i48, 128)), $mul.ref(0, 8));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.7, $p50);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} blk_queue_logical_block_size($p58, $i63);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i65);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} set_capacity($p51, $i66);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p51, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p51, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p52);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i2);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i76, 128)), $mul.ref(1, 8));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.7, $p78);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(1, 24));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p81, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} blk_queue_logical_block_size($p87, $i92);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p81, $mul.ref(1, 24)), $mul.ref(4, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} set_capacity($p79, $i95);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p79, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $p97);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p79, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p82);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i101, 128)), $mul.ref(2, 8));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.7, $p103);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(2, 24));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p106, $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} blk_queue_logical_block_size($p112, $i117);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p106, $mul.ref(2, 24)), $mul.ref(4, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i120 := $zext.i32.i64($i119);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} set_capacity($p104, $i120);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p104, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p122);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p104, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p107);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i2);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i126, 128)), $mul.ref(3, 8));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.7, $p128);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p131, $mul.ref(3, 24));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p131, $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} blk_queue_logical_block_size($p137, $i142);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p131, $mul.ref(3, 24)), $mul.ref(4, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i144);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} set_capacity($p129, $i145);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p129, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $p147);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p129, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p150, $p132);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb54, $bb55;

  $bb55:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i2);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i151, 128)), $mul.ref(4, 8));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.7, $p153);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(4, 24));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p156, $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i164);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i16($i166);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} blk_queue_logical_block_size($p162, $i167);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p156, $mul.ref(4, 24)), $mul.ref(4, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i170 := $zext.i32.i64($i169);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} set_capacity($p154, $i170);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p154, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p173, $p172);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p154, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p175, $p157);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb65, $bb66;

  $bb66:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i2);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i176, 128)), $mul.ref(5, 8));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.7, $p178);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(5, 24));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p181, $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i190);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i16($i191);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} blk_queue_logical_block_size($p187, $i192);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p181, $mul.ref(5, 24)), $mul.ref(4, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i194);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} set_capacity($p179, $i195);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p179, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p198, $p197);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p179, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, $p182);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb76, $bb77;

  $bb77:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i2);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i201, 128)), $mul.ref(6, 8));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.7, $p203);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p206, $mul.ref(6, 24));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p206, $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i215);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} blk_queue_logical_block_size($p212, $i217);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p206, $mul.ref(6, 24)), $mul.ref(4, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i220 := $zext.i32.i64($i219);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} set_capacity($p204, $i220);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p204, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p223, $p222);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p204, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, $p207);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb88;

  $bb88:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i226, 128)), $mul.ref(7, 8));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.7, $p228);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p231, $mul.ref(7, 24));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p231, $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i16($i239);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} blk_queue_logical_block_size($p237, $i242);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p231, $mul.ref(7, 24)), $mul.ref(4, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i245 := $zext.i32.i64($i244);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} set_capacity($p229, $i245);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p229, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p248, $p247);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p229, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p250, $p232);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb98, $bb99;

  $bb99:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i251, 128)), $mul.ref(8, 8));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.7, $p253);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p256 := $bitcast.ref.ref($p255);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p256, $mul.ref(8, 24));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p256, $mul.ref(8, 24)), $mul.ref(0, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i16($i264);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} blk_queue_logical_block_size($p262, $i267);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p256, $mul.ref(8, 24)), $mul.ref(4, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p268);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i270 := $zext.i32.i64($i269);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} set_capacity($p254, $i270);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p254, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p273, $p272);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p254, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, $p257);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb109, $bb110;

  $bb110:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i276 := $sext.i32.i64($i2);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i276, 128)), $mul.ref(9, 8));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.7, $p278);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p280);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p281, $mul.ref(9, 24));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p281, $mul.ref(9, 24)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p288);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i290 := $trunc.i32.i16($i289);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i290);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} blk_queue_logical_block_size($p287, $i292);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p281, $mul.ref(9, 24)), $mul.ref(4, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i294);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} set_capacity($p279, $i295);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p279, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p298, $p297);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p279, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p300, $p282);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb120, $bb121;

  $bb121:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i301 := $sext.i32.i64($i2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i301, 128)), $mul.ref(10, 8));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.7, $p303);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($p306, $mul.ref(10, 24));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p306, $mul.ref(10, 24)), $mul.ref(0, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i16($i314);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i316 := $zext.i16.i32($i315);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i16($i316);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} blk_queue_logical_block_size($p312, $i317);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p306, $mul.ref(10, 24)), $mul.ref(4, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i320 := $zext.i32.i64($i319);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} set_capacity($p304, $i320);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p304, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p323, $p322);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p304, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p325, $p307);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb131, $bb132;

  $bb132:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i2);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i326, 128)), $mul.ref(11, 8));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.7, $p328);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($p331, $mul.ref(11, 24));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p331, $mul.ref(11, 24)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i339 := $load.i32($M.0, $p338);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i16($i339);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i340);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i16($i341);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} blk_queue_logical_block_size($p337, $i342);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p331, $mul.ref(11, 24)), $mul.ref(4, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p343);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i345 := $zext.i32.i64($i344);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} set_capacity($p329, $i345);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p329, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p348, $p347);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p329, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p350, $p332);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb142, $bb143;

  $bb143:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i351 := $sext.i32.i64($i2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i351, 128)), $mul.ref(12, 8));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.7, $p353);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p356 := $bitcast.ref.ref($p355);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p356, $mul.ref(12, 24));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p356, $mul.ref(12, 24)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i16($i364);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i366 := $zext.i16.i32($i365);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i16($i366);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} blk_queue_logical_block_size($p362, $i367);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p356, $mul.ref(12, 24)), $mul.ref(4, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.0, $p368);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i370 := $zext.i32.i64($i369);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} set_capacity($p354, $i370);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p354, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p373, $p372);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p354, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p375, $p357);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb153, $bb154;

  $bb154:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i2);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i376, 128)), $mul.ref(13, 8));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.7, $p378);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p381 := $bitcast.ref.ref($p380);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p381, $mul.ref(13, 24));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p381, $mul.ref(13, 24)), $mul.ref(0, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.0, $p388);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i390 := $trunc.i32.i16($i389);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i391 := $zext.i16.i32($i390);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i32.i16($i391);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} blk_queue_logical_block_size($p387, $i392);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p381, $mul.ref(13, 24)), $mul.ref(4, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p393);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i395 := $zext.i32.i64($i394);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} set_capacity($p379, $i395);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p379, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p398, $p397);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p379, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p400, $p382);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb164, $bb165;

  $bb165:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i401 := $sext.i32.i64($i2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i401, 128)), $mul.ref(14, 8));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.7, $p403);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($p406, $mul.ref(14, 24));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p406, $mul.ref(14, 24)), $mul.ref(0, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i32.i16($i414);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i416 := $zext.i16.i32($i415);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i417 := $trunc.i32.i16($i416);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} blk_queue_logical_block_size($p412, $i417);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p406, $mul.ref(14, 24)), $mul.ref(4, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i420 := $zext.i32.i64($i419);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} set_capacity($p404, $i420);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p404, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p423, $p422);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p404, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p425, $p407);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb175, $bb176;

  $bb176:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i426 := $sext.i32.i64($i2);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i426, 128)), $mul.ref(15, 8));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.7, $p428);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p431 := $bitcast.ref.ref($p430);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($p431, $mul.ref(15, 24));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p431, $mul.ref(15, 24)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.0, $p438);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i16($i439);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i441 := $zext.i16.i32($i440);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i32.i16($i441);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} blk_queue_logical_block_size($p437, $i442);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p431, $mul.ref(15, 24)), $mul.ref(4, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.0, $p443);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i445 := $zext.i32.i64($i444);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} set_capacity($p429, $i445);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p429, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p448, $p447);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p429, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p450, $p432);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb186, $bb187;

  $bb187:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i73, 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb186:
    assume 1 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} add_disk($p429);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb180:
    assume 1 == 1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p431, $mul.ref(15, 24)), $mul.ref(4, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.0, $p433);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i434, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i435 == 1);
    goto $bb182;

  $bb183:
    assume $i435 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb175:
    assume 1 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} add_disk($p404);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb169:
    assume 1 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p406, $mul.ref(14, 24)), $mul.ref(4, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.0, $p408);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb171;

  $bb172:
    assume $i410 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb164:
    assume 1 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} add_disk($p379);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb158:
    assume 1 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p381, $mul.ref(13, 24)), $mul.ref(4, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i385 == 1);
    goto $bb160;

  $bb161:
    assume $i385 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb153:
    assume 1 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} add_disk($p354);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb147:
    assume 1 == 1;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p356, $mul.ref(12, 24)), $mul.ref(4, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p358);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb149;

  $bb150:
    assume $i360 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb142:
    assume 1 == 1;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} add_disk($p329);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb136:
    assume 1 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p331, $mul.ref(11, 24)), $mul.ref(4, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p333);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb138;

  $bb139:
    assume $i335 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb131:
    assume 1 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} add_disk($p304);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb125:
    assume 1 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p306, $mul.ref(10, 24)), $mul.ref(4, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.0, $p308);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb127;

  $bb128:
    assume $i310 == 1;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb120:
    assume 1 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} add_disk($p279);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb114:
    assume 1 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p281, $mul.ref(9, 24)), $mul.ref(4, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb116;

  $bb117:
    assume $i285 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb109:
    assume 1 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} add_disk($p254);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb103:
    assume 1 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p256, $mul.ref(8, 24)), $mul.ref(4, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb105;

  $bb106:
    assume $i260 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb98:
    assume 1 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} add_disk($p229);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb92:
    assume 1 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p231, $mul.ref(7, 24)), $mul.ref(4, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb94;

  $bb95:
    assume $i235 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb87:
    assume 1 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} add_disk($p204);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81:
    assume 1 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p206, $mul.ref(6, 24)), $mul.ref(4, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb83;

  $bb84:
    assume $i210 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb76:
    assume 1 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} add_disk($p179);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb70:
    assume 1 == 1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p181, $mul.ref(5, 24)), $mul.ref(4, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb72;

  $bb73:
    assume $i185 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb65:
    assume 1 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} add_disk($p154);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume 1 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p156, $mul.ref(4, 24)), $mul.ref(4, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb61;

  $bb62:
    assume $i160 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb54:
    assume 1 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} add_disk($p129);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p131, $mul.ref(3, 24)), $mul.ref(4, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb50;

  $bb51:
    assume $i135 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb43:
    assume 1 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} add_disk($p104);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume 1 == 1;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p106, $mul.ref(2, 24)), $mul.ref(4, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb39;

  $bb40:
    assume $i110 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} add_disk($p79);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume 1 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p81, $mul.ref(1, 24)), $mul.ref(4, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb28;

  $bb29:
    assume $i85 == 1;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume 0 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} add_disk($p51);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume 0 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb242:
    assume $i562 == 1;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} del_gendisk($p558);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb238:
    assume $i554 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} del_gendisk($p550);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb234:
    assume $i546 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} del_gendisk($p542);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb230:
    assume $i538 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} del_gendisk($p534);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb226:
    assume $i530 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} del_gendisk($p526);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb222:
    assume $i522 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} del_gendisk($p518);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb218:
    assume $i514 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} del_gendisk($p510);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb214:
    assume $i506 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} del_gendisk($p502);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb210:
    assume $i498 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} del_gendisk($p494);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb206:
    assume $i490 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} del_gendisk($p486);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb202:
    assume $i482 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} del_gendisk($p478);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb198:
    assume $i474 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} del_gendisk($p470);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb194:
    assume $i466 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} del_gendisk($p462);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb190:
    assume $i458 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} del_gendisk($p454);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} del_gendisk($p35);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i12, 8));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} spin_unlock_irqrestore($p15, $i8);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_52 := printk.ref.i32(.str.7, $i17);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 228295);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 229327);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 294} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 230359);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 231391);

procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 300} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 302} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 303} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 305} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 306} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 307} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 308} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 314} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 232423);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 233455);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const getgeometry: ref;

axiom getgeometry == $sub.ref(0, 234487);

procedure getgeometry($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation getgeometry($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $p65: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $p89: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $p94: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $i58: i32;
  var $i59: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $i150: i8;
  var $p152: ref;
  var $p154: ref;
  var $i155: i8;
  var $p157: ref;
  var $p159: ref;
  var $i160: i8;
  var $p162: ref;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "getgeometry:arg:ctlr"} boogie_si_record_i32($i0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1, 8));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p5 := kzalloc(25, 208);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p10 := kzalloc(512, 208);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p15 := kzalloc(1024, 208);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p20 := kzalloc(476, 208);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(40, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(20, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(24, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i31 := sendcmd(17, $i0, $p30, 0, 0, 0, 0);
    call {:si_unique_call 332} {:cexpr "ret_code"} boogie_si_record_i32($i31);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(36, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(28, 1)), $mul.ref(0, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i40);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(8, 1)), $mul.ref(1, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(28, 1)), $mul.ref(1, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i150);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(28, 1)), $mul.ref(2, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p157, $i155);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(8, 1)), $mul.ref(3, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(28, 1)), $mul.ref(3, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, $i160);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(4, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(32, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_58 := printk.ref.ref(.str.10, $p47);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i51, 16);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 524)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i57 := $ugt.i32($i56, 0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p21);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} kfree($p144);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p16);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} kfree($p145);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p11);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} kfree($p146);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p6);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} kfree($p147);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i57 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i58, $i59 := 0, 0;
    goto $bb31;

  $bb31:
    call $p60, $i61, $i62, $i63, $i64, $p67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $p78, $i79, $i80, $p81, $p82, $i83, $p84, $p86, $i87, $i88, $p89, $p91, $i92, $i93, $p94, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $p110, $i111, $i112, $p115, $i116, $i117, $p118, $p119, $i120, $p121, $i122, $i123, $p124, $p125, $i126, $p127, $i128, $i129, $p130, $p131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i58, $i59, $i143, vslice_dummy_var_61 := getgeometry_loop_$bb31($i0, $p3, $p6, $p16, $p21, $p54, $p60, $i61, $i62, $i63, $i64, $p67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $p78, $i79, $i80, $p81, $p82, $i83, $p84, $p86, $i87, $i88, $p89, $p91, $i92, $i93, $p94, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $p110, $i111, $i112, $p115, $i116, $i117, $p118, $p119, $i120, $p121, $i122, $i123, $p124, $p125, $i126, $p127, $i128, $i129, $p130, $p131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i58, $i59, $i143, vslice_dummy_var_61);
    goto $bb31_last;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i143 := $ule.i32($i59, 15);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i143 == 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb47:
    assume $i143 == 1;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p16);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64(1024);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i62 := sendcmd(18, $i0, $p60, $i61, 0, 0, $i59);
    call {:si_unique_call 338} {:cexpr "ret_code"} boogie_si_record_i32($i62);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i64 := $i59;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p16, $mul.ref(0, 1036)), $mul.ref(0, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 2);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i58;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i59, 1);
    call {:si_unique_call 347} {:cexpr "log_unit"} boogie_si_record_i32($i139);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p54);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i142 := $ugt.i32($i141, $i138);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i142 == 1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb45:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i58, $i59 := $i138, $i139;
    goto $bb45_dummy;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p6);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i72 := sendcmd(16, $i0, $p71, 25, 0, 0, $i59);
    call {:si_unique_call 341} {:cexpr "ret_code"} boogie_si_record_i32($i72);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i58, 1);
    call {:si_unique_call 346} {:cexpr "log_index"} boogie_si_record_i32($i137);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i138 := $i137;
    goto $bb44;

  $bb38:
    assume $i73 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i59);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(0, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(4, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(8, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(12, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(16, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32(1, $i59);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i101, $i102);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i103);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p75, $mul.ref($i76, 24)), $mul.ref(4, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_61 := printk.ref.i32.i32.i32.i32(.str.13, $i0, $i59, $i106, $i108);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p21);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i111 := sendcmd(80, $i0, $p110, 476, 0, 0, $i59);
    call {:si_unique_call 344} {:cexpr "ret_code"} boogie_si_record_i32($i111);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 1);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p21, $mul.ref(0, 484)), $mul.ref(8, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(40, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p21, $mul.ref(0, 484)), $mul.ref(48, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i120, $i122);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p21, $mul.ref(0, 484)), $mul.ref(56, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i126, $i128);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(20, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p21, $mul.ref(0, 484)), $mul.ref(56, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i132, $i134);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(20, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i112 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_62 := printk.ref(.str.14);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb33:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_60 := printk.ref.i32.i32(.str.12, $i0, $i64);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_59 := printk.ref.i32(.str.11, $i0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_57 := printk.ref(.str.9);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_56 := printk.ref(.str.8);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_55 := printk.ref(.str.8);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_54 := printk.ref(.str.8);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_53 := printk.ref(.str.8);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;
}



const blk_queue_logical_block_size: ref;

axiom blk_queue_logical_block_size == $sub.ref(0, 235519);

procedure blk_queue_logical_block_size($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_logical_block_size($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "blk_queue_logical_block_size:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    return;
}



const add_disk: ref;

axiom add_disk == $sub.ref(0, 236551);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 237583);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 350} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sendcmd: ref;

axiom sendcmd == $sub.ref(0, 238615);

procedure sendcmd($i0: i8, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation sendcmd($i0: i8, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p28: ref;
  var $p31: ref;
  var $p33: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i1;
  var $p44: ref;
  var $i45: i32;
  var $p49: ref;
  var $p52: ref;
  var $i53: i16;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i32;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i85: i64;
  var $i86: i1;
  var $i77: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i109: i64;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i13: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "sendcmd:arg:cmd"} boogie_si_record_i8($i0);
    call {:si_unique_call 353} {:cexpr "sendcmd:arg:ctlr"} boogie_si_record_i32($i1);
    call {:si_unique_call 354} {:cexpr "sendcmd:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 355} {:cexpr "sendcmd:arg:blk"} boogie_si_record_i32($i4);
    call {:si_unique_call 356} {:cexpr "sendcmd:arg:blkcnt"} boogie_si_record_i32($i5);
    call {:si_unique_call 357} {:cexpr "sendcmd:arg:log_unit"} boogie_si_record_i32($i6);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i7, 8));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p10 := cmd_alloc($p9, 1);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i6);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i15);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 68);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 272);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(268, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 1);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i3, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i3);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i45);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i4);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i5);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i53);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i68 := pci_map_single($p61, $p2, $i67, 0);
    call {:si_unique_call 360} {:cexpr "tmp"} boogie_si_record_i64($i68);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i68);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i69);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(8, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    call {:si_unique_call 361} devirtbounce.9($p76, $p9, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i77 := 200000;
    goto $bb8;

  $bb8:
    call $p79, $p80, $p81, $i82, $i83, $i85, $i86, $i77, vslice_dummy_var_63 := sendcmd_loop_$bb8($i1, $p9, $p79, $p80, $p81, $i82, $i83, $i85, $i86, $i77, vslice_dummy_var_63);
    goto $bb8_last;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    call {:si_unique_call 362} $i82 := devirtbounce.10($p81, $p9);
    call {:si_unique_call 363} {:cexpr "temp"} boogie_si_record_i64($i82);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __const_udelay(42950);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_63 := printk.ref.i32(.str.15, $i1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i85 := $sub.i64($i77, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i64($i85);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i86 == 1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(0, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    call {:si_unique_call 364} devirtbounce.11($p89, $p9, $p10);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i90 := pollcomplete($i1);
    call {:si_unique_call 366} {:cexpr "complete___0"} boogie_si_record_i32($i90);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} pci_unmap_single($p92, $i98, $i104, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i90, 1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 254);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} cmd_free($p9, $p10, 1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb21:
    assume $i118 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 64);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i125 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_66 := printk.ref.i32.i32.i32(.str.18, $i1, $i130, $i135);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} cmd_free($p9, $p10, 1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb16:
    assume $i105 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i90, $i107);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i108 == 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_65 := printk.ref.i32(.str.17, $i1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} cmd_free($p9, $p10, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb18:
    assume $i108 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i90);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_64 := printk.ref.i32.i64(.str.16, $i1, $i109);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} cmd_free($p9, $p10, 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb14:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i77 := $i85;
    goto $bb14_dummy;

  $bb10:
    assume $i83 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 512);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;
}



const cmd_alloc: ref;

axiom cmd_alloc == $sub.ref(0, 239647);

procedure cmd_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation cmd_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $i17: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p11: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $p10: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 379} {:cexpr "cmd_alloc:arg:get_from_pool"} boogie_si_record_i32($i1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i14 := find_first_zero_bit($p13, 128);
    call {:si_unique_call 382} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 383} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 128);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb11;

  $bb11:
    call $p18, $i19, $i20, $i21, $i17, $i22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30 := cmd_alloc_loop_$bb11($p0, $p12, $p18, $i19, $i20, $i21, $i17, $i22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30);
    goto $bb11_last;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i17, 63);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i25 := $sdiv.i32($i17, 64);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p24, $mul.ref($i26, 8));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i28 := test_and_set_bit($i22, $p27);
    call {:si_unique_call 389} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i30 := $i17;
    assume true;
    goto $bb12, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 328));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(568, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i30);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i38 := $mul.i64($i37, 320);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i36, $i38);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p2, $i39);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(676, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(676, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    assume {:verifier.code 0} true;
    $p11 := $p34;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p11);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 384} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p44, 0, 320, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.8, $p2);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p10 := $p11;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p12);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i19 := find_first_zero_bit($p18, 128);
    call {:si_unique_call 386} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 128);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb14_dummy;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p6 := pci_alloc_consistent($p5, 320, $p2);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $p6;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb5;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 240679);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 391} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 393} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 241711);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    return;
}



const pollcomplete: ref;

axiom pollcomplete == $sub.ref(0, 242743);

procedure pollcomplete($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pollcomplete($i0: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $i1: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "pollcomplete:arg:ctlr"} boogie_si_record_i32($i0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i1 := 200000;
    goto $bb1;

  $bb1:
    call $i2, $p3, $p4, $p6, $p7, $p8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $i17, $i18, $i1 := pollcomplete_loop_$bb1($i0, $i2, $p3, $p4, $p6, $p7, $p8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $i17, $i18, $i1);
    goto $bb1_last;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i2, 8));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(32, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i9, 8));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    call {:si_unique_call 396} $i12 := devirtbounce.10($p8, $p11);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 398} {:cexpr "done"} boogie_si_record_i32($i13);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __const_udelay(42950);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i1, 1);
    call {:si_unique_call 400} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i17;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 243775);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 402} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 403} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const cmd_free: ref;

axiom cmd_free == $sub.ref(0, 244807);

procedure cmd_free($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cmd_free($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "cmd_free:arg:got_from_pool"} boogie_si_record_i32($i2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i10, $i13);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i15 := $sdiv.i64($i14, 320);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    call {:si_unique_call 407} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 63);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i20 := $sdiv.i32($i16, 64);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p19, $mul.ref($i21, 8));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} clear_bit($i17, $p22);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(680, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(680, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} pci_free_consistent($p5, 320, $p6, $i9);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 245839);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 410} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 246871);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 413} devirtbounce.12(0, $p1, $i0, $p1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 247903);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 415} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p5 := get_dma_ops($p0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i6 := arch_local_save_flags();
    call {:si_unique_call 418} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 421} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 423} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_67 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 427} devirtbounce.13($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} warn_slowpath_null(.str.4, 166);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 248935);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 429} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 249967);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 433} $i7 := devirtbounce.15(0, 45, pv_irq_ops, 1);
    call {:si_unique_call 434} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 432} devirtbounce.14(0, .str.5, 825, 12);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 250999);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 252031);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 437} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 253063);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 254095);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 440} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 255127);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 442} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 443} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p5 := get_dma_ops($p0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 446} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 448} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 450} devirtbounce.16($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 449} devirtbounce.14(0, .str.6, 36, 12);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 256159);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 257191);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 454} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 455} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 456} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 258223);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 458} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p5 := get_dma_ops($p0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 462} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 464} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i14 := __phys_addr($i13);
    call {:si_unique_call 467} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($sub.i64(0, 24189255811072), $i17);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4095);
    call {:si_unique_call 468} $i22 := devirtbounce.17($p16, $p0, $p19, $i21, $i2, $i3, $p4);
    call {:si_unique_call 469} {:cexpr "addr"} boogie_si_record_i64($i22);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i24 := __phys_addr($i23);
    call {:si_unique_call 471} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i24, 12);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($sub.i64(0, 24189255811072), $i25);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 4095);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} debug_dma_map_page($p0, $p27, $i29, $i2, $i3, $i22, 1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 465} devirtbounce.14(0, .str.6, 19, 12);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 259255);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 260287);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 474} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 475} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 476} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 261319);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 478} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 479} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 480} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 481} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 262351);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const find_first_zero_bit: ref;

axiom find_first_zero_bit == $sub.ref(0, 263383);

procedure find_first_zero_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_zero_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 484} {:cexpr "find_first_zero_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 485} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 486} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 264415);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 488} $i2 := devirtbounce.18(0, $p1, $i0, $p1);
    call {:si_unique_call 489} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 265447);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 491} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p5 := get_dma_ops($p0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 493} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 497} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 498} $p20 := devirtbounce.19($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 266479);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 267511);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 504} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 503} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 268543);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 506} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 269575);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 508} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 4294967295;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i7 := 16777215;
    goto $bb5;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 270607);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 271639);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 510} $free($p0);
    return;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 272671);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p2 := external_alloc();
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 273703);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 514} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 274735);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const addQ: ref;

axiom addQ == $sub.ref(0, 275767);

procedure addQ($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation addQ($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p1);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p0);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const start_io: ref;

axiom start_io == $sub.ref(0, 276799);

procedure start_io($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation start_io($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p5: ref;
  var vslice_dummy_var_68: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $i11, $p12, $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p5, vslice_dummy_var_68 := start_io_loop_$bb4($p0, $p1, $p7, $p8, $p9, $i10, $i11, $p12, $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p5, vslice_dummy_var_68);
    goto $bb4_last;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 515} $i10 := devirtbounce.10($p9, $p0);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_68 := removeQ($p12, $p5);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    call {:si_unique_call 518} devirtbounce.11($p20, $p0, $p5);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} addQ($p21, $p5);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p1);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 277831);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    return;
}



const removeQ: ref;

axiom removeQ == $sub.ref(0, 278863);

procedure removeQ($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation removeQ($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i6, $i7);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i10, $i11);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p16);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 328)), $mul.ref(296, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p21);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p14);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 279895);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 520} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 521} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 280927);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 281959);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 522} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 282991);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 284023);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 527} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := ldv_malloc($i0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 285055);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 530} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 531} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := malloc($i0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i4 := ldv_is_err($p3);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 534} __VERIFIER_assume($i7);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 286087);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 535} $r := $malloc($i0);
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 287119);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_cpqarray_mutex: ref;

axiom ldv_mutex_lock_cpqarray_mutex == $sub.ref(0, 288151);

procedure ldv_mutex_lock_cpqarray_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_cpqarray_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 540} {:cexpr "ldv_mutex_cpqarray_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 289183);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 290215);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_mutex_lock_cpqarray_mutex($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} mutex_lock($p0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 291247);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_mutex_unlock_cpqarray_mutex($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} mutex_unlock($p0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 292279);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_mutex_lock_cpqarray_mutex($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} mutex_lock($p0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ida_open: ref;

axiom ida_open == $sub.ref(0, 293311);

procedure ida_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ida_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "ida_open:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p4 := get_drv($p3);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p7 := get_host($p6);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 824)), $mul.ref(108, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i11 := capable(17);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 551} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i17 := capable(21);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 553} {:cexpr "tmp___3"} boogie_si_record_i8($i18);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p4);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i24, $i25);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 6);
    goto $bb8;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 6);
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 294343);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_mutex_unlock_cpqarray_mutex($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} mutex_unlock($p0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const cpqarray_init_one: ref;

axiom cpqarray_init_one == $sub.ref(0, 295375);

procedure cpqarray_init_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.10, $M.7, $M.16, $M.9, $CurrAddr, $M.8;



implementation cpqarray_init_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i20: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1440)), $mul.ref(208, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i11, 3);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 31);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 7);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_69 := printk.ref.i32.i32.i32.i32(.str.23, $i4, $i9, $i13, $i16);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i18 := alloc_cpqarray_hba();
    call {:si_unique_call 558} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i18);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i21, 8));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 559} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p24, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i18);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i25, 8));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_70 := sprintf.ref.ref.i32($p29, .str.24, $i18);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i18);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i31, 8));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i18);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i18);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i35, 8));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} pci_set_drvdata($p0, $p38);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i18);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i39, 8));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i42 := cpqarray_pci_init($p41, $p0);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i47 := cpqarray_register_ctlr($i18, $p0);
    call {:si_unique_call 568} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i20 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i18);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i44, 8));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} release_io_mem($p46);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} free_hba($i18);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb3;
}



const cpqarray_remove_one_pci: ref;

axiom cpqarray_remove_one_pci == $sub.ref(0, 296407);

procedure cpqarray_remove_one_pci($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.6, $CurrAddr;



implementation cpqarray_remove_one_pci($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p5 := pci_get_drvdata($p0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 572} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i9, 8));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} cpqarray_remove_one($i8);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_72 := printk.ref.i32(.str.69, $i8);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_71 := printk.ref(.str.68);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 297439);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 298471);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_73 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    return;
}



const cpqarray_remove_one: ref;

axiom cpqarray_remove_one == $sub.ref(0, 299503);

procedure cpqarray_remove_one($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.6, $CurrAddr;



implementation cpqarray_remove_one($i0: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i64;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i171: i64;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i187: i64;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i203: i64;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i219: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i64;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i64;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i64;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $i283: i64;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i299: i64;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $i315: i64;
  var $p317: ref;
  var $p318: ref;
  var $i319: i64;
  var $p321: ref;
  var $p322: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 579} {:cexpr "cpqarray_remove_one:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i3 := sendcmd($sub.i8(0, 62), $i0, $p2, 4, 0, 0, 0);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i6, 8));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i11, 8));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} free_irq($i10, $p14);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i15, 8));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} iounmap($p19);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i0, 72);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i21, 8));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} unregister_blkdev($i20, $p25);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i26, 8));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 824)), $mul.ref(688, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_75 := del_timer($p29);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i31, 8));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p36 := $M.9;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} remove_proc_entry($p35, $p36);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i37, 8));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i42, 8));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i48, 8));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 824)), $mul.ref(568, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} pci_free_consistent($p41, 40960, $p47, $i52);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i53, 8));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p54);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} kfree($p58);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i59, 128)), $mul.ref(0, 8));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.7, $p61);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 16);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i71, 128)), $mul.ref(0, 8));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.7, $p73);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} put_disk($p74);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i83, 128)), $mul.ref(1, 8));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.7, $p85);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 16);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i95, 128)), $mul.ref(1, 8));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.7, $p97);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} put_disk($p98);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i99, 128)), $mul.ref(2, 8));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.7, $p101);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 16);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i111, 128)), $mul.ref(2, 8));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.7, $p113);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} put_disk($p114);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i115, 128)), $mul.ref(3, 8));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.7, $p117);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 16);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i127, 128)), $mul.ref(3, 8));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.7, $p129);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} put_disk($p130);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i131, 128)), $mul.ref(4, 8));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.7, $p133);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 16);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i143, 128)), $mul.ref(4, 8));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.7, $p145);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} put_disk($p146);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i147, 128)), $mul.ref(5, 8));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.7, $p149);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 16);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i159, 128)), $mul.ref(5, 8));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.7, $p161);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} put_disk($p162);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i163, 128)), $mul.ref(6, 8));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.7, $p165);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 16);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i175, 128)), $mul.ref(6, 8));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.7, $p177);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} put_disk($p178);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i179, 128)), $mul.ref(7, 8));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.7, $p181);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 16);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i191, 128)), $mul.ref(7, 8));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.7, $p193);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} put_disk($p194);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i0);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i195, 128)), $mul.ref(8, 8));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.7, $p197);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i201 := $and.i32($i200, 16);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i207, 128)), $mul.ref(8, 8));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.7, $p209);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} put_disk($p210);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i211, 128)), $mul.ref(9, 8));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.7, $p213);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p214, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 16);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i223, 128)), $mul.ref(9, 8));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.7, $p225);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} put_disk($p226);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i227, 128)), $mul.ref(10, 8));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.7, $p229);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p230, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i232, 16);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i239, 128)), $mul.ref(10, 8));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.7, $p241);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} put_disk($p242);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i243, 128)), $mul.ref(11, 8));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.7, $p245);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 16);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i255, 128)), $mul.ref(11, 8));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.7, $p257);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} put_disk($p258);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i259 := $sext.i32.i64($i0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i259, 128)), $mul.ref(12, 8));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.7, $p261);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i265 := $and.i32($i264, 16);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i0);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i271, 128)), $mul.ref(12, 8));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.7, $p273);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} put_disk($p274);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i275, 128)), $mul.ref(13, 8));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.7, $p277);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i281 := $and.i32($i280, 16);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i287 := $sext.i32.i64($i0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i287, 128)), $mul.ref(13, 8));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.7, $p289);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} put_disk($p290);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i291 := $sext.i32.i64($i0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i291, 128)), $mul.ref(14, 8));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.7, $p293);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p294, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p295);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i297 := $and.i32($i296, 16);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i303 := $sext.i32.i64($i0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i303, 128)), $mul.ref(14, 8));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.7, $p305);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} put_disk($p306);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i307 := $sext.i32.i64($i0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i307, 128)), $mul.ref(15, 8));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.7, $p309);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p310, $mul.ref(0, 1424)), $mul.ref(1360, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 16);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i319 := $sext.i32.i64($i0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i319, 128)), $mul.ref(15, 8));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.7, $p321);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} put_disk($p322);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i75, 8));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} blk_cleanup_queue($p79);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i80, 8));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} release_io_mem($p82);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} free_hba($i0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    return;

  $bb67:
    assume $i314 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i315 := $sext.i32.i64($i0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i315, 128)), $mul.ref(15, 8));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.7, $p317);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} del_gendisk($p318);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i298 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i299, 128)), $mul.ref(14, 8));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.7, $p301);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} del_gendisk($p302);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i282 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i283, 128)), $mul.ref(13, 8));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.7, $p285);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} del_gendisk($p286);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume $i266 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i267 := $sext.i32.i64($i0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i267, 128)), $mul.ref(12, 8));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.7, $p269);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} del_gendisk($p270);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i250 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i251, 128)), $mul.ref(11, 8));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.7, $p253);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} del_gendisk($p254);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i234 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i235, 128)), $mul.ref(10, 8));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.7, $p237);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} del_gendisk($p238);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i218 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i219, 128)), $mul.ref(9, 8));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.7, $p221);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} del_gendisk($p222);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i202 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i203, 128)), $mul.ref(8, 8));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.7, $p205);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} del_gendisk($p206);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i186 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i187, 128)), $mul.ref(7, 8));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.7, $p189);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} del_gendisk($p190);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i170 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i171, 128)), $mul.ref(6, 8));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.7, $p173);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} del_gendisk($p174);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i154 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i155, 128)), $mul.ref(5, 8));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.7, $p157);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} del_gendisk($p158);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i138 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i139, 128)), $mul.ref(4, 8));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.7, $p141);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} del_gendisk($p142);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i122 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i123, 128)), $mul.ref(3, 8));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.7, $p125);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} del_gendisk($p126);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i106 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i107, 128)), $mul.ref(2, 8));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.7, $p109);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} del_gendisk($p110);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i90 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i91, 128)), $mul.ref(1, 8));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.7, $p93);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} del_gendisk($p94);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i66 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i67, 128)), $mul.ref(0, 8));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.7, $p69);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} del_gendisk($p70);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_74 := printk.ref.i32(.str.70, $i0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 300535);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 301567);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    return;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 302599);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 303631);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 627} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 304663);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 305695);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 306727);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    return;
}



const release_io_mem: ref;

axiom release_io_mem == $sub.ref(0, 307759);

procedure release_io_mem($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation release_io_mem($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __release_region(ioport_resource, $i5, $i7);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_hba: ref;

axiom free_hba == $sub.ref(0, 308791);

procedure free_hba($i0: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation free_hba($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} {:cexpr "free_hba:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1, 8));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} kfree($p4);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i5, 8));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $0.ref);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 309823);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 633} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 310855);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 311887);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p1 := external_alloc();
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const alloc_cpqarray_hba: ref;

axiom alloc_cpqarray_hba == $sub.ref(0, 312919);

procedure alloc_cpqarray_hba() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation alloc_cpqarray_hba() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.6, hba);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(1, 8)));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(2, 8)));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i3 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(3, 8)));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i3 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(4, 8)));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i3 := 4;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(5, 8)));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i3 := 5;
    assume {:branchcond $i30} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(6, 8)));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i3 := 6;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(7, 8)));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i3 := 7;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_77 := printk.ref(.str.26);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p4 := kmalloc(824, 208);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i6, 8));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, $p4);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i3);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i8, 8));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $i3;
    goto $bb8;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_76 := printk.ref(.str.25);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb4;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 313951);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const cpqarray_pci_init: ref;

axiom cpqarray_pci_init == $sub.ref(0, 314983);

procedure cpqarray_pci_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr;



implementation cpqarray_pci_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $p33: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $i11: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p165: ref;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $p171: ref;
  var $i172: i64;
  var $i173: i64;
  var $i174: i1;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p189: ref;
  var $i190: i64;
  var $i191: i64;
  var $i192: i1;
  var $p195: ref;
  var $i196: i64;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $p202: ref;
  var $i203: i64;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p209: ref;
  var $i210: i64;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $p216: ref;
  var $i217: i64;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $p223: ref;
  var $i224: i64;
  var $i225: i32;
  var $i226: i32;
  var $i227: i1;
  var $p230: ref;
  var $i231: i64;
  var $p232: ref;
  var $p235: ref;
  var $i236: i64;
  var $p237: ref;
  var $p240: ref;
  var $i241: i64;
  var $p242: ref;
  var $p245: ref;
  var $i246: i64;
  var $p247: ref;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} pci_set_master($p1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i8 := pci_enable_device($p1);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 649} {:cexpr "irq"} boogie_si_record_i8($i14);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 8));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p19, $i18);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i231 := $load.i64($M.0, $p230);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(1, 8));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p232, $i231);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i236 := $load.i64($M.0, $p235);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(2, 8));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p237, $i236);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i241 := $load.i64($M.0, $p240);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(3, 8));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p242, $i241);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i246 := $load.i64($M.0, $p245);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(4, 8));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p247, $i246);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(5, 56)), $mul.ref(0, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(5, 8));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p252, $i251);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i20 := pci_set_dma_mask($p1, 4294967295);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_80 := pci_read_config_word($p1, 4, $p2);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_81 := pci_read_config_byte($p1, 12, $p3);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_82 := pci_read_config_byte($p1, 13, $p4);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_83 := pci_read_config_dword($p1, 44, $p6);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.11, $p2);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i14);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i41 := 0;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(1, 56)), $mul.ref(24, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i196 := $load.i64($M.0, $p195);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i64.i32($i196);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i41 := 1;
    assume {:branchcond $i199} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(24, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.0, $p202);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i64.i32($i203);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i41 := 2;
    assume {:branchcond $i206} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(3, 56)), $mul.ref(24, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i64.i32($i210);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i212 := $and.i32($i211, 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i41 := 3;
    assume {:branchcond $i213} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(4, 56)), $mul.ref(24, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i217 := $load.i64($M.0, $p216);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i64.i32($i217);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, 1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i41 := 4;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(5, 56)), $mul.ref(24, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i224 := $load.i64($M.0, $p223);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i64.i32($i224);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, 1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i41 := 5;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i80 := 0;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(1, 56)), $mul.ref(24, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.0, $p165);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i167 := $and.i64($i166, 1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i80 := 1;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(24, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i172 := $load.i64($M.0, $p171);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i173 := $and.i64($i172, 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i174 := $eq.i64($i173, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i80 := 2;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(3, 56)), $mul.ref(24, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i178 := $load.i64($M.0, $p177);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i179 := $and.i64($i178, 1);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i80 := 3;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(4, 56)), $mul.ref(24, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.0, $p183);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i185 := $and.i64($i184, 1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i185, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i80 := 4;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(5, 56)), $mul.ref(24, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.0, $p189);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i191 := $and.i64($i190, 1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i192 := $eq.i64($i191, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i80 := 5;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p92 := remap_pci_mem($i91, 128);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(72, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.12, $p6);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.13, products);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.12, $p6);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i100, $i101);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i103 := 0;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.12, $p6);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i121, $i122);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i103 := 1;
    assume {:branchcond $i123} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.12, $p6);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i124, $i125);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i103 := 2;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.12, $p6);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i127, $i128);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i103 := 3;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.12, $p6);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i130, $i131);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i103 := 4;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.12, $p6);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, $i134);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i103 := 5;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.12, $p6);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i136, $i137);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i103 := 6;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.12, $p6);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i139, $i140);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i103 := 7;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.12, $p6);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i142, $i143);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i103 := 8;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.12, $p6);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i145, $i146);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i103 := 9;
    assume {:branchcond $i147} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.12, $p6);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i148, $i149);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i103 := 10;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.12, $p6);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i151, $i152);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i103 := 11;
    assume {:branchcond $i153} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.12, $p6);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i154, $i155);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i103 := 12;
    assume {:branchcond $i156} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.12, $p6);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i157, $i158);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i103 := 13;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.12, $p6);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i160, $i161);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i103 := 14;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i116 := 15;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 15);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb48:
    assume $i117 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.12, $p6);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i118);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_86 := printk.ref.i64(.str.32, $i119);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i104, 24)), $mul.ref(8, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.14, $p106);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, $p107);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i103);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i110, 24)), $mul.ref(16, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.15, $p112);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p109);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p113);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 661} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p114, $p115, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i116 := $i103;
    goto $bb45;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb43;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb43;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb43;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb43;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb43;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb43;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb43;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb43;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb43;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb43;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb43;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb43;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb43;

  $bb37:
    assume $i97 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb34:
    assume $i89 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i81, 56)), $mul.ref(0, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i85);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb29;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb29;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb29;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb29;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref($i42, 8));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.10, $p43);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i41);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i46, 56)), $mul.ref(8, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i41);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i51, 56)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i56 := $sub.i64($i50, $i55);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, $i57);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p63 := __request_region(ioport_resource, $i60, $i62, .str.30, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i65 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_85 := printk.ref.i64.i64(.str.31, $i67, $i69);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb18;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb18;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb18;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb18;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_84 := printk.ref(.str.29);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_79 := printk.ref(.str.28);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_78 := printk.ref(.str.27);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;
}



const cpqarray_register_ctlr: ref;

axiom cpqarray_register_ctlr == $sub.ref(0, 316015);

procedure cpqarray_register_ctlr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.16, $M.6, $M.9, $CurrAddr, $M.8;



implementation cpqarray_register_ctlr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i63: i32;
  var $i64: i1;
  var $i48: i32;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i16;
  var $i214: i32;
  var $i215: i16;
  var $p216: ref;
  var $i217: i32;
  var $i218: i64;
  var $i219: i64;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i228: i64;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $i241: i64;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i62: i32;
  var $i257: i32;
  var $i258: i1;
  var $i260: i64;
  var $i261: i64;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $i266: i64;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $i259: i32;
  var $i271: i64;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $i275: i32;
  var $i276: i64;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i64;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $i227: i32;
  var $i292: i64;
  var $p294: ref;
  var $p295: ref;
  var $i296: i64;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $i305: i32;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i32;
  var $i311: i1;
  var $i312: i64;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i16;
  var $i320: i32;
  var $i321: i16;
  var $p322: ref;
  var $i323: i32;
  var $i324: i64;
  var $i325: i64;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p332: ref;
  var $i333: i64;
  var $p335: ref;
  var $p336: ref;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i346: i32;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i1;
  var $i353: i64;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i360: i16;
  var $i361: i32;
  var $i362: i16;
  var $p363: ref;
  var $i364: i32;
  var $i365: i64;
  var $i366: i64;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p373: ref;
  var $i374: i64;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $i387: i32;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $i394: i64;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i32;
  var $i401: i16;
  var $i402: i32;
  var $i403: i16;
  var $p404: ref;
  var $i405: i32;
  var $i406: i64;
  var $i407: i64;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p414: ref;
  var $i415: i64;
  var $p417: ref;
  var $p418: ref;
  var $i419: i64;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $i428: i32;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i32;
  var $i434: i1;
  var $i435: i64;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $i441: i32;
  var $i442: i16;
  var $i443: i32;
  var $i444: i16;
  var $p445: ref;
  var $i446: i32;
  var $i447: i64;
  var $i448: i64;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p455: ref;
  var $i456: i64;
  var $p458: ref;
  var $p459: ref;
  var $i460: i64;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i469: i32;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i32;
  var $i475: i1;
  var $i476: i64;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $i482: i32;
  var $i483: i16;
  var $i484: i32;
  var $i485: i16;
  var $p486: ref;
  var $i487: i32;
  var $i488: i64;
  var $i489: i64;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p496: ref;
  var $i497: i64;
  var $p499: ref;
  var $p500: ref;
  var $i501: i64;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $i510: i32;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i1;
  var $i517: i64;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $i523: i32;
  var $i524: i16;
  var $i525: i32;
  var $i526: i16;
  var $p527: ref;
  var $i528: i32;
  var $i529: i64;
  var $i530: i64;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p537: ref;
  var $i538: i64;
  var $p540: ref;
  var $p541: ref;
  var $i542: i64;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $i551: i32;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i32;
  var $i557: i1;
  var $i558: i64;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $i564: i32;
  var $i565: i16;
  var $i566: i32;
  var $i567: i16;
  var $p568: ref;
  var $i569: i32;
  var $i570: i64;
  var $i571: i64;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p578: ref;
  var $i579: i64;
  var $p581: ref;
  var $p582: ref;
  var $i583: i64;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $i592: i32;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $i597: i32;
  var $i598: i1;
  var $i599: i64;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $i605: i32;
  var $i606: i16;
  var $i607: i32;
  var $i608: i16;
  var $p609: ref;
  var $i610: i32;
  var $i611: i64;
  var $i612: i64;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p619: ref;
  var $i620: i64;
  var $p622: ref;
  var $p623: ref;
  var $i624: i64;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $i633: i32;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i32;
  var $i639: i1;
  var $i640: i64;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $i646: i32;
  var $i647: i16;
  var $i648: i32;
  var $i649: i16;
  var $p650: ref;
  var $i651: i32;
  var $i652: i64;
  var $i653: i64;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p660: ref;
  var $i661: i64;
  var $p663: ref;
  var $p664: ref;
  var $i665: i64;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $i674: i32;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $i679: i32;
  var $i680: i1;
  var $i681: i64;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $i688: i16;
  var $i689: i32;
  var $i690: i16;
  var $p691: ref;
  var $i692: i32;
  var $i693: i64;
  var $i694: i64;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p701: ref;
  var $i702: i64;
  var $p704: ref;
  var $p705: ref;
  var $i706: i64;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $i715: i32;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $i720: i32;
  var $i721: i1;
  var $i722: i64;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $i728: i32;
  var $i729: i16;
  var $i730: i32;
  var $i731: i16;
  var $p732: ref;
  var $i733: i32;
  var $i734: i64;
  var $i735: i64;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $p742: ref;
  var $i743: i64;
  var $p745: ref;
  var $p746: ref;
  var $i747: i64;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $i756: i32;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $i761: i32;
  var $i762: i1;
  var $i763: i64;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i32;
  var $i770: i16;
  var $i771: i32;
  var $i772: i16;
  var $p773: ref;
  var $i774: i32;
  var $i775: i64;
  var $i776: i64;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p783: ref;
  var $i784: i64;
  var $p786: ref;
  var $p787: ref;
  var $i788: i64;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i797: i32;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $i802: i32;
  var $i803: i1;
  var $i804: i64;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $i810: i32;
  var $i811: i16;
  var $i812: i32;
  var $i813: i16;
  var $p814: ref;
  var $i815: i32;
  var $i816: i64;
  var $i817: i64;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p824: ref;
  var $i825: i64;
  var $p827: ref;
  var $p828: ref;
  var $i829: i64;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $p836: ref;
  var $i838: i32;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $i843: i32;
  var $i844: i1;
  var $i845: i64;
  var $p846: ref;
  var $p847: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $i851: i32;
  var $i852: i16;
  var $i853: i32;
  var $i854: i16;
  var $p855: ref;
  var $i856: i32;
  var $i857: i64;
  var $i858: i64;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $p865: ref;
  var $i866: i64;
  var $p868: ref;
  var $p869: ref;
  var $i870: i64;
  var $p871: ref;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $p877: ref;
  var $i879: i32;
  var $p880: ref;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $i884: i32;
  var $i885: i1;
  var $i886: i64;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $i892: i32;
  var $i893: i16;
  var $i894: i32;
  var $i895: i16;
  var $p896: ref;
  var $i897: i32;
  var $i898: i64;
  var $i899: i64;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $p904: ref;
  var $p906: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 665} {:cexpr "cpqarray_register_ctlr:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, 72);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i5, 8));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i10 := register_blkdev($i4, $p9);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i0);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i12, 8));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(8, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i18, 8));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    call {:si_unique_call 668} devirtbounce.9($p17, $p20, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i21, 8));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i26, 8));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i31, 8));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i35 := request_irq($i25, do_ida_intr, 160, $p30, $p34);
    call {:si_unique_call 670} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb9;

  $bb9:
    call $p49, $i50, $i51, $p53, $i54, $i55, $p57, $p58, $i59, $i60, $i61, $i63, $i64, $i48, $i65 := cpqarray_register_ctlr_loop_$bb9($i0, $p49, $i50, $i51, $p53, $i54, $i55, $p57, $p58, $i59, $i60, $i61, $i63, $i64, $i48, $i65);
    goto $bb9_last;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p49 := alloc_disk(16);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i48);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i51, 128)), $mul.ref($i50, 8));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, $p49);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i48);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i55, 128)), $mul.ref($i54, 8));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.7, $p57);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i61 := $i48;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i48, 1);
    call {:si_unique_call 675} {:cexpr "j"} boogie_si_record_i32($i63);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 15);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i66, 8));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i71, 8));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 824)), $mul.ref(568, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p75 := pci_alloc_consistent($p70, 40960, $p74);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i77, 8));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p75);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p81 := kcalloc(2, 8, 208);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i83, 8));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p81);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i87, 8));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.6, $p88);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i93 == 1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i94, 8));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.6, $p95);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i101, 8));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p102);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 680} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p106, 0, 40960, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i107, 8));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_88 := printk.ref.ref(.str.53, $p111);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i113, 8));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_89 := spinlock_check($p116);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i118, 8));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 824)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __raw_spin_lock_init($p123, .str.54, $p2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i124, 8));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.6, $p125);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p128 := blk_init_queue(do_ida_request, $p127);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i131, 8));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p132);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $p128);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i135, 8));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.6, $p136);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p128, $mul.ref(0, 3080)), $mul.ref(1840, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p137);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} getgeometry($i0);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} start_fwbk($i0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ida_procinit($i0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} blk_queue_max_segments($p128, 32);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i149, 8));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.6, $p150);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 824)), $mul.ref(688, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} init_timer_key($p152, 0, .str.55, $p3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, jiffies);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 1250);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i155, 8));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.6, $p156);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p157, $mul.ref(0, 824)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p159, $i154);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i160, 8));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.6, $p161);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i164, 8));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.6, $p165);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p166, $mul.ref(0, 824)), $mul.ref(688, 1)), $mul.ref(40, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p168, $i163);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i169, 8));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.6, $p170);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 824)), $mul.ref(688, 1)), $mul.ref(32, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p173, ida_timer);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i174, 8));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.6, $p175);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p176, $mul.ref(0, 824)), $mul.ref(688, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} add_timer($p177);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i178, 8));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.6, $p179);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p180, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(8, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i184, 8));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.6, $p185);
    call {:si_unique_call 692} devirtbounce.9($p183, $p186, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i187, 128)), $mul.ref(0, 8));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.7, $p189);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i191, 8));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.6, $p192);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_90 := sprintf.ref.ref.i32.i32($p197, .str.56, $i0, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i0, 72);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, $i199);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, ida_fops);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i206, 8));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.6, $p207);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p195, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i212);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} blk_queue_logical_block_size($p210, $i215);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p195, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i218 := $zext.i32.i64($i217);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} set_capacity($p190, $i218);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i219, 8));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.6, $p220);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p221, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p223);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p190, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, $p194);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} add_disk($p190);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i292, 128)), $mul.ref(1, 8));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.7, $p294);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i296 := $sext.i32.i64($i0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i296, 8));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.6, $p297);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p298, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p300, $mul.ref(1, 24));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_91 := sprintf.ref.ref.i32.i32($p303, .str.56, $i0, 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i305 := $add.i32($i0, 72);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, $i305);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p307, 16);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p308, ida_fops);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i312 := $sext.i32.i64($i0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i312, 8));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.6, $p313);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p314, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.0, $p315);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p300, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.0, $p317);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i16($i318);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i320 := $zext.i16.i32($i319);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i16($i320);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} blk_queue_logical_block_size($p316, $i321);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p300, $mul.ref(1, 24)), $mul.ref(4, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $p322);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i324 := $zext.i32.i64($i323);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} set_capacity($p295, $i324);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i325 := $sext.i32.i64($i0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i325, 8));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.6, $p326);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p327, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p330, $p329);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p295, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p332, $p301);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} add_disk($p295);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i333 := $sext.i32.i64($i0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i333, 128)), $mul.ref(2, 8));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.7, $p335);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i337, 8));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.6, $p338);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p339, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref(2, 24));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_93 := sprintf.ref.ref.i32.i32($p344, .str.56, $i0, 2);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i346 := $add.i32($i0, 72);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p347, $i346);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, 32);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p349, ida_fops);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i353 := $sext.i32.i64($i0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i353, 8));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.6, $p354);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p341, $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p358);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i360 := $trunc.i32.i16($i359);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i361 := $zext.i16.i32($i360);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i16($i361);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} blk_queue_logical_block_size($p357, $i362);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p341, $mul.ref(2, 24)), $mul.ref(4, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i365 := $zext.i32.i64($i364);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} set_capacity($p336, $i365);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i366 := $sext.i32.i64($i0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i366, 8));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.6, $p367);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p368, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p371, $p370);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p336, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p373, $p342);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} add_disk($p336);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i374 := $sext.i32.i64($i0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i374, 128)), $mul.ref(3, 8));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.7, $p376);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i378, 8));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.6, $p379);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p380, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($p382, $mul.ref(3, 24));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p385 := $bitcast.ref.ref($p384);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_94 := sprintf.ref.ref.i32.i32($p385, .str.56, $i0, 3);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i387 := $add.i32($i0, 72);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p388, $i387);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p389, 48);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p390, ida_fops);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i394 := $sext.i32.i64($i0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i394, 8));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.6, $p395);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p396, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p382, $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i400 := $load.i32($M.0, $p399);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i401 := $trunc.i32.i16($i400);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i402 := $zext.i16.i32($i401);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i32.i16($i402);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} blk_queue_logical_block_size($p398, $i403);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p382, $mul.ref(3, 24)), $mul.ref(4, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.0, $p404);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i406 := $zext.i32.i64($i405);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} set_capacity($p377, $i406);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i407 := $sext.i32.i64($i0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i407, 8));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.6, $p408);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p409, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.0, $p410);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p412, $p411);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p377, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p414, $p383);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} add_disk($p377);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i415, 128)), $mul.ref(4, 8));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.7, $p417);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i419 := $sext.i32.i64($i0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i419, 8));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.6, $p420);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p423 := $bitcast.ref.ref($p422);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p423, $mul.ref(4, 24));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p426 := $bitcast.ref.ref($p425);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_95 := sprintf.ref.ref.i32.i32($p426, .str.56, $i0, 4);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i0, 72);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p429, $i428);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p430, 64);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p431, ida_fops);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i435 := $sext.i32.i64($i0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i435, 8));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.6, $p436);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p423, $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.0, $p440);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i32.i16($i441);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i443 := $zext.i16.i32($i442);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i444 := $trunc.i32.i16($i443);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} blk_queue_logical_block_size($p439, $i444);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p423, $mul.ref(4, 24)), $mul.ref(4, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i446 := $load.i32($M.0, $p445);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i447 := $zext.i32.i64($i446);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} set_capacity($p418, $i447);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i448 := $sext.i32.i64($i0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i448, 8));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.6, $p449);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p450, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.0, $p451);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p453, $p452);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p418, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, $p424);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} add_disk($p418);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i456 := $sext.i32.i64($i0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i456, 128)), $mul.ref(5, 8));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.7, $p458);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i460 := $sext.i32.i64($i0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i460, 8));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.6, $p461);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p462, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p464 := $bitcast.ref.ref($p463);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p464, $mul.ref(5, 24));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p467 := $bitcast.ref.ref($p466);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_96 := sprintf.ref.ref.i32.i32($p467, .str.56, $i0, 5);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i0, 72);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p470, $i469);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p471, 80);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p472, ida_fops);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i476 := $sext.i32.i64($i0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i476, 8));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.6, $p477);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p478, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p464, $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i482 := $load.i32($M.0, $p481);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i16($i482);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i484 := $zext.i16.i32($i483);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i485 := $trunc.i32.i16($i484);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} blk_queue_logical_block_size($p480, $i485);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p464, $mul.ref(5, 24)), $mul.ref(4, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p486);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i488 := $zext.i32.i64($i487);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} set_capacity($p459, $i488);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i489 := $sext.i32.i64($i0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i489, 8));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.6, $p490);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p491, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p494, $p493);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p459, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p496, $p465);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} add_disk($p459);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i497 := $sext.i32.i64($i0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i497, 128)), $mul.ref(6, 8));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.7, $p499);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i501 := $sext.i32.i64($i0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i501, 8));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p503 := $load.ref($M.6, $p502);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p503, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p505 := $bitcast.ref.ref($p504);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($p505, $mul.ref(6, 24));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p508 := $bitcast.ref.ref($p507);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_97 := sprintf.ref.ref.i32.i32($p508, .str.56, $i0, 6);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i510 := $add.i32($i0, 72);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p511, $i510);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p512, 96);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p513, ida_fops);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i517 := $sext.i32.i64($i0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i517, 8));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.6, $p518);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p519, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p505, $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i523 := $load.i32($M.0, $p522);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i524 := $trunc.i32.i16($i523);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i525 := $zext.i16.i32($i524);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i526 := $trunc.i32.i16($i525);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} blk_queue_logical_block_size($p521, $i526);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p505, $mul.ref(6, 24)), $mul.ref(4, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i528 := $load.i32($M.0, $p527);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i529 := $zext.i32.i64($i528);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} set_capacity($p500, $i529);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i530 := $sext.i32.i64($i0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i530, 8));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.6, $p531);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p532, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p535, $p534);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p500, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p537, $p506);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} add_disk($p500);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i538 := $sext.i32.i64($i0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i538, 128)), $mul.ref(7, 8));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p541 := $load.ref($M.7, $p540);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i542 := $sext.i32.i64($i0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i542, 8));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.6, $p543);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p544, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p546 := $bitcast.ref.ref($p545);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($p546, $mul.ref(7, 24));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p549 := $bitcast.ref.ref($p548);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_98 := sprintf.ref.ref.i32.i32($p549, .str.56, $i0, 7);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i551 := $add.i32($i0, 72);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p552, $i551);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p553, 112);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p554, ida_fops);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i558 := $sext.i32.i64($i0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i558, 8));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.6, $p559);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p560, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p546, $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.0, $p563);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i565 := $trunc.i32.i16($i564);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i566 := $zext.i16.i32($i565);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i32.i16($i566);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} blk_queue_logical_block_size($p562, $i567);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p546, $mul.ref(7, 24)), $mul.ref(4, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i569 := $load.i32($M.0, $p568);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i570 := $zext.i32.i64($i569);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} set_capacity($p541, $i570);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i571 := $sext.i32.i64($i0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i571, 8));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p573 := $load.ref($M.6, $p572);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p573, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.0, $p574);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p576, $p575);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p541, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p578, $p547);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} add_disk($p541);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i579 := $sext.i32.i64($i0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i579, 128)), $mul.ref(8, 8));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.7, $p581);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i583 := $sext.i32.i64($i0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i583, 8));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p585 := $load.ref($M.6, $p584);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p585, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p587 := $bitcast.ref.ref($p586);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($p587, $mul.ref(8, 24));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p590 := $bitcast.ref.ref($p589);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_99 := sprintf.ref.ref.i32.i32($p590, .str.56, $i0, 8);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i592 := $add.i32($i0, 72);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p593, $i592);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p594, 128);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p595, ida_fops);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i599 := $sext.i32.i64($i0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i599, 8));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p601 := $load.ref($M.6, $p600);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p601, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p587, $mul.ref(8, 24)), $mul.ref(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.0, $p604);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i606 := $trunc.i32.i16($i605);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i607 := $zext.i16.i32($i606);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i608 := $trunc.i32.i16($i607);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} blk_queue_logical_block_size($p603, $i608);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p587, $mul.ref(8, 24)), $mul.ref(4, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p609);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i611 := $zext.i32.i64($i610);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} set_capacity($p582, $i611);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i612 := $sext.i32.i64($i0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i612, 8));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.6, $p613);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p614, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.0, $p615);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p617, $p616);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p582, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p619, $p588);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} add_disk($p582);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i620 := $sext.i32.i64($i0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i620, 128)), $mul.ref(9, 8));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.7, $p622);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i624 := $sext.i32.i64($i0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i624, 8));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.6, $p625);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p626, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p628 := $bitcast.ref.ref($p627);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($p628, $mul.ref(9, 24));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p631 := $bitcast.ref.ref($p630);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_100 := sprintf.ref.ref.i32.i32($p631, .str.56, $i0, 9);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i633 := $add.i32($i0, 72);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p634, $i633);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p635, 144);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p636, ida_fops);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i640 := $sext.i32.i64($i0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i640, 8));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.6, $p641);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p642, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p644 := $load.ref($M.0, $p643);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p628, $mul.ref(9, 24)), $mul.ref(0, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i646 := $load.i32($M.0, $p645);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i647 := $trunc.i32.i16($i646);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i648 := $zext.i16.i32($i647);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i649 := $trunc.i32.i16($i648);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} blk_queue_logical_block_size($p644, $i649);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p628, $mul.ref(9, 24)), $mul.ref(4, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i651 := $load.i32($M.0, $p650);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i652 := $zext.i32.i64($i651);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} set_capacity($p623, $i652);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i653 := $sext.i32.i64($i0);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i653, 8));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p655 := $load.ref($M.6, $p654);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p655, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p658, $p657);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p623, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p660, $p629);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} add_disk($p623);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i661 := $sext.i32.i64($i0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i661, 128)), $mul.ref(10, 8));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p664 := $load.ref($M.7, $p663);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i665 := $sext.i32.i64($i0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i665, 8));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.6, $p666);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p667, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p669 := $bitcast.ref.ref($p668);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($p669, $mul.ref(10, 24));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p672 := $bitcast.ref.ref($p671);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_101 := sprintf.ref.ref.i32.i32($p672, .str.56, $i0, 10);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i674 := $add.i32($i0, 72);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p675, $i674);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p676, 160);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p677, ida_fops);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i681 := $sext.i32.i64($i0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i681, 8));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p683 := $load.ref($M.6, $p682);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p683, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.0, $p684);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p669, $mul.ref(10, 24)), $mul.ref(0, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i687 := $load.i32($M.0, $p686);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i688 := $trunc.i32.i16($i687);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i689 := $zext.i16.i32($i688);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i690 := $trunc.i32.i16($i689);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} blk_queue_logical_block_size($p685, $i690);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p669, $mul.ref(10, 24)), $mul.ref(4, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i692 := $load.i32($M.0, $p691);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i693 := $zext.i32.i64($i692);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} set_capacity($p664, $i693);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i694 := $sext.i32.i64($i0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i694, 8));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p696 := $load.ref($M.6, $p695);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p696, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p698 := $load.ref($M.0, $p697);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p699, $p698);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p664, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p701, $p670);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} add_disk($p664);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i702 := $sext.i32.i64($i0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i702, 128)), $mul.ref(11, 8));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.7, $p704);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i706 := $sext.i32.i64($i0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i706, 8));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.6, $p707);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p708, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p710 := $bitcast.ref.ref($p709);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($p710, $mul.ref(11, 24));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p713 := $bitcast.ref.ref($p712);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_102 := sprintf.ref.ref.i32.i32($p713, .str.56, $i0, 11);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i715 := $add.i32($i0, 72);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p716, $i715);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p717, 176);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p718, ida_fops);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i722 := $sext.i32.i64($i0);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i722, 8));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.6, $p723);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p724, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p726 := $load.ref($M.0, $p725);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p710, $mul.ref(11, 24)), $mul.ref(0, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i728 := $load.i32($M.0, $p727);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i729 := $trunc.i32.i16($i728);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i730 := $zext.i16.i32($i729);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i731 := $trunc.i32.i16($i730);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} blk_queue_logical_block_size($p726, $i731);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p710, $mul.ref(11, 24)), $mul.ref(4, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.0, $p732);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i734 := $zext.i32.i64($i733);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} set_capacity($p705, $i734);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i735 := $sext.i32.i64($i0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i735, 8));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.6, $p736);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p737, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p739 := $load.ref($M.0, $p738);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p740, $p739);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p705, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p742, $p711);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} add_disk($p705);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i743 := $sext.i32.i64($i0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i743, 128)), $mul.ref(12, 8));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.7, $p745);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i747 := $sext.i32.i64($i0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i747, 8));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p749 := $load.ref($M.6, $p748);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p749, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p751 := $bitcast.ref.ref($p750);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($p751, $mul.ref(12, 24));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p754 := $bitcast.ref.ref($p753);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_103 := sprintf.ref.ref.i32.i32($p754, .str.56, $i0, 12);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i756 := $add.i32($i0, 72);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p757, $i756);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p758, 192);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p759, ida_fops);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i763 := $sext.i32.i64($i0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i763, 8));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.6, $p764);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p765, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p767 := $load.ref($M.0, $p766);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p751, $mul.ref(12, 24)), $mul.ref(0, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.0, $p768);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i770 := $trunc.i32.i16($i769);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i771 := $zext.i16.i32($i770);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i772 := $trunc.i32.i16($i771);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} blk_queue_logical_block_size($p767, $i772);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p751, $mul.ref(12, 24)), $mul.ref(4, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i774 := $load.i32($M.0, $p773);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i775 := $zext.i32.i64($i774);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} set_capacity($p746, $i775);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i776 := $sext.i32.i64($i0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i776, 8));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.6, $p777);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p778, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p780 := $load.ref($M.0, $p779);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p781, $p780);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p746, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p783, $p752);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} add_disk($p746);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i784 := $sext.i32.i64($i0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i784, 128)), $mul.ref(13, 8));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.7, $p786);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i788 := $sext.i32.i64($i0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i788, 8));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.6, $p789);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p790, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p792 := $bitcast.ref.ref($p791);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($p792, $mul.ref(13, 24));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p795 := $bitcast.ref.ref($p794);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_104 := sprintf.ref.ref.i32.i32($p795, .str.56, $i0, 13);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i797 := $add.i32($i0, 72);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p798, $i797);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p799, 208);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p800, ida_fops);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i804 := $sext.i32.i64($i0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i804, 8));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.6, $p805);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p792, $mul.ref(13, 24)), $mul.ref(0, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i810 := $load.i32($M.0, $p809);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i811 := $trunc.i32.i16($i810);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i812 := $zext.i16.i32($i811);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i813 := $trunc.i32.i16($i812);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} blk_queue_logical_block_size($p808, $i813);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p792, $mul.ref(13, 24)), $mul.ref(4, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i815 := $load.i32($M.0, $p814);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i816 := $zext.i32.i64($i815);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} set_capacity($p787, $i816);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i817 := $sext.i32.i64($i0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i817, 8));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p819 := $load.ref($M.6, $p818);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p819, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p821 := $load.ref($M.0, $p820);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p822, $p821);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p787, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p824, $p793);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} add_disk($p787);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i825 := $sext.i32.i64($i0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i825, 128)), $mul.ref(14, 8));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.7, $p827);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i829 := $sext.i32.i64($i0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i829, 8));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.6, $p830);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p831, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p833 := $bitcast.ref.ref($p832);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($p833, $mul.ref(14, 24));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p836 := $bitcast.ref.ref($p835);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_105 := sprintf.ref.ref.i32.i32($p836, .str.56, $i0, 14);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i838 := $add.i32($i0, 72);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p839, $i838);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, 224);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p841, ida_fops);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i845 := $sext.i32.i64($i0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i845, 8));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p847 := $load.ref($M.6, $p846);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p847, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p849 := $load.ref($M.0, $p848);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p833, $mul.ref(14, 24)), $mul.ref(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i851 := $load.i32($M.0, $p850);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i852 := $trunc.i32.i16($i851);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i853 := $zext.i16.i32($i852);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i854 := $trunc.i32.i16($i853);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} blk_queue_logical_block_size($p849, $i854);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p833, $mul.ref(14, 24)), $mul.ref(4, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i856 := $load.i32($M.0, $p855);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i857 := $zext.i32.i64($i856);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} set_capacity($p828, $i857);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i858 := $sext.i32.i64($i0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i858, 8));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p860 := $load.ref($M.6, $p859);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p860, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.0, $p861);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p863, $p862);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($p828, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p865, $p834);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} add_disk($p828);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i866 := $sext.i32.i64($i0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i866, 128)), $mul.ref(15, 8));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.7, $p868);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i870 := $sext.i32.i64($i0);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i870, 8));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.6, $p871);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($p872, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p874 := $bitcast.ref.ref($p873);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($p874, $mul.ref(15, 24));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p877 := $bitcast.ref.ref($p876);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_106 := sprintf.ref.ref.i32.i32($p877, .str.56, $i0, 15);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i879 := $add.i32($i0, 72);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p880, $i879);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(4, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p881, 240);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(1336, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p882, ida_fops);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i886 := $sext.i32.i64($i0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i886, 8));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p888 := $load.ref($M.6, $p887);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p888, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($p874, $mul.ref(15, 24)), $mul.ref(0, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i892 := $load.i32($M.0, $p891);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i893 := $trunc.i32.i16($i892);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i894 := $zext.i16.i32($i893);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i895 := $trunc.i32.i16($i894);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} blk_queue_logical_block_size($p890, $i895);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p874, $mul.ref(15, 24)), $mul.ref(4, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i897 := $load.i32($M.0, $p896);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i898 := $zext.i32.i64($i897);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} set_capacity($p869, $i898);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i899 := $sext.i32.i64($i0);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i899, 8));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p901 := $load.ref($M.6, $p900);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p901, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p903 := $load.ref($M.0, $p902);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p904, $p903);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p869, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p906, $p875);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} add_disk($p869);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i227 := $i0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $r := $i227;
    return;

  $bb169:
    assume 1 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p874, $mul.ref(15, 24)), $mul.ref(4, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i884 := $load.i32($M.0, $p883);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i885 := $eq.i32($i884, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i885 == 1);
    goto $bb171;

  $bb172:
    assume $i885 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb161:
    assume 1 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p833, $mul.ref(14, 24)), $mul.ref(4, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i843 := $load.i32($M.0, $p842);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i844 := $eq.i32($i843, 0);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i844} true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i844 == 1);
    goto $bb163;

  $bb164:
    assume $i844 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb153:
    assume 1 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p792, $mul.ref(13, 24)), $mul.ref(4, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i802, 0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i803 == 1);
    goto $bb155;

  $bb156:
    assume $i803 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb145:
    assume 1 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p751, $mul.ref(12, 24)), $mul.ref(4, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i761 := $load.i32($M.0, $p760);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i761, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb147;

  $bb148:
    assume $i762 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb137:
    assume 1 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p710, $mul.ref(11, 24)), $mul.ref(4, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i720 := $load.i32($M.0, $p719);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i721 := $eq.i32($i720, 0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i721 == 1);
    goto $bb139;

  $bb140:
    assume $i721 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb129:
    assume 1 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p669, $mul.ref(10, 24)), $mul.ref(4, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i679 := $load.i32($M.0, $p678);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i679, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb131;

  $bb132:
    assume $i680 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb121:
    assume 1 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p628, $mul.ref(9, 24)), $mul.ref(4, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i638 := $load.i32($M.0, $p637);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i639 == 1);
    goto $bb123;

  $bb124:
    assume $i639 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb113:
    assume 1 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p587, $mul.ref(8, 24)), $mul.ref(4, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i597 := $load.i32($M.0, $p596);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i598 == 1);
    goto $bb115;

  $bb116:
    assume $i598 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb105:
    assume 1 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p546, $mul.ref(7, 24)), $mul.ref(4, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i556 := $load.i32($M.0, $p555);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i556, 0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb107;

  $bb108:
    assume $i557 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb97:
    assume 1 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p505, $mul.ref(6, 24)), $mul.ref(4, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i515 := $load.i32($M.0, $p514);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i516} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i516 == 1);
    goto $bb99;

  $bb100:
    assume $i516 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb89:
    assume 1 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p464, $mul.ref(5, 24)), $mul.ref(4, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i474 := $load.i32($M.0, $p473);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i475 := $eq.i32($i474, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb91;

  $bb92:
    assume $i475 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb81:
    assume 1 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p423, $mul.ref(4, 24)), $mul.ref(4, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.0, $p432);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i433, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb83;

  $bb84:
    assume $i434 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb73:
    assume 1 == 1;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p382, $mul.ref(3, 24)), $mul.ref(4, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.0, $p391);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb75;

  $bb76:
    assume $i393 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb65:
    assume 1 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p341, $mul.ref(2, 24)), $mul.ref(4, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i351 := $load.i32($M.0, $p350);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i352 == 1);
    goto $bb67;

  $bb68:
    assume $i352 == 1;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb57:
    assume 1 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p300, $mul.ref(1, 24)), $mul.ref(4, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb59;

  $bb60:
    assume $i311 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb33:
    assume 0 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p195, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $p203);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb35;

  $bb36:
    assume $i205 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i141 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i142, 8));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.6, $p143);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 2696)), $mul.ref(88, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} blk_queue_bounce_limit($p128, $i148);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i130 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.16 := $i0;
    call {:si_unique_call 678} {:cexpr "nr_ctlr"} boogie_si_record_i32($i0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i228, 8));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.6, $p229);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p230, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} kfree($p233);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i234 := $sext.i32.i64($i0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i234, 8));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.6, $p235);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i62 := $i65;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i257 := $sub.i32($i62, 1);
    call {:si_unique_call 674} {:cexpr "j"} boogie_si_record_i32($i257);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i62, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i271, 8));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.6, $p272);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p273, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.0, $p274);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i276 := $sext.i32.i64($i0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i276, 8));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.6, $p277);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} free_irq($i275, $p279);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i280 := $add.i32($i0, 72);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i281 := $sext.i32.i64($i0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i281, 8));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.6, $p282);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} unregister_blkdev($i280, $p285);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i288 := $sext.i32.i64($i0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i288, 8));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.6, $p289);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} release_io_mem($p290);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} free_hba($i0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_92 := printk.ref(.str.57);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i227 := $sub.i32(0, 1);
    goto $bb42;

  $bb54:
    assume $i287 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} pci_set_drvdata($p1, $0.ref);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb46:
    assume $i258 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i259 := $i257;
    goto $bb49;

  $bb49:
    call $i260, $i261, $p263, $p264, $i265, $i266, $p268, $i269, $i270, $i259 := cpqarray_register_ctlr_loop_$bb49($i0, $i260, $i261, $p263, $p264, $i265, $i266, $p268, $i269, $i270, $i259);
    goto $bb49_last;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i259);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i261 := $sext.i32.i64($i0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i261, 128)), $mul.ref($i260, 8));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.7, $p263);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} put_disk($p264);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i265 := $sext.i32.i64($i259);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref($i266, 128)), $mul.ref($i265, 8));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p268, $0.ref);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i269 := $sub.i32($i259, 1);
    call {:si_unique_call 700} {:cexpr "j"} boogie_si_record_i32($i269);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i259, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i270 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb51:
    assume $i270 == 1;
    assume {:verifier.code 0} true;
    $i259 := $i269;
    goto $bb51_dummy;

  $bb43:
    assume $i240 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i241, 8));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.6, $p242);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i246 := $sext.i32.i64($i0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i246, 8));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.6, $p247);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 824)), $mul.ref(560, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i252 := $sext.i32.i64($i0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i252, 8));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.6, $p253);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 824)), $mul.ref(568, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.0, $p255);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} pci_free_consistent($p245, 40960, $p251, $i256);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb19;

  $bb15:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i63;
    goto $bb15_dummy;

  $bb11:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb13;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i37, 8));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i42, 8));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_87 := printk.ref.i32.ref(.str.52, $i41, $p46);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;
}



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 317047);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 765} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const do_ida_intr: ref;

axiom do_ida_intr == $sub.ref(0, 318079);

procedure do_ida_intr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.8, $CurrAddr;



implementation do_ida_intr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p44: ref;
  var $p57: ref;
  var $p43: ref;
  var $p53: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i28: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i9: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "do_ida_intr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(24, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 769} $i7 := devirtbounce.10($p6, $p2);
    call {:si_unique_call 770} {:cexpr "istat"} boogie_si_record_i64($i7);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i12, 8));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p16 := spinlock_check($p15);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i17 := _raw_spin_lock_irqsave($p16);
    call {:si_unique_call 773} {:cexpr "flags"} boogie_si_record_i64($i17);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i7);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(584, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} do_ida_request($p82);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i85, 8));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 824)), $mul.ref(592, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} spin_unlock_irqrestore($p88, $i17);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(32, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 774} $i25 := devirtbounce.10($p24, $p2);
    call {:si_unique_call 775} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    call {:si_unique_call 776} {:cexpr "a"} boogie_si_record_i32($i26);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb10;

  $bb10:
    call $i29, $p30, $p31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $p40, $i41, $i42, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $p44, $p57, $p43, $p53, $p58, $i59, $i60, $p61, $i63, $i64, $p67, $i68, $i69, $i70, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $i28, vslice_dummy_var_107, vslice_dummy_var_108 := do_ida_intr_loop_$bb10($p2, $p23, $i29, $p30, $p31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $p40, $i41, $i42, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $p44, $p57, $p43, $p53, $p58, $i59, $i60, $p61, $i63, $i64, $p67, $i68, $i69, $i70, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $i28, vslice_dummy_var_107, vslice_dummy_var_108);
    goto $bb10_last;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 4));
    call {:si_unique_call 777} {:cexpr "a"} boogie_si_record_i32($i29);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p31, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.17, $p40);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, $i29);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p43 := $p31;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p53 := $p43;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.17, $p58);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, $i29);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p23);
    call {:si_unique_call 779} $i37 := devirtbounce.10($p36, $p2);
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    call {:si_unique_call 781} {:cexpr "a"} boogie_si_record_i32($i38);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i38;
    goto $bb15_dummy;

  $bb29:
    assume $i60 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_108 := removeQ($p61, $p53);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i28, 3);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.17, $p74);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i76 == 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.17, $p77);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb40:
    assume $i79 == 1;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p80, 2);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i76 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} complete_command($p53, 0);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} cmd_free($p2, $p53, 1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i64 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.17, $p67);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb33;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p73, 16);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p44 := $p31;
    goto $bb21;

  $bb21:
    call $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $p44, $p57 := do_ida_intr_loop_$bb21($p2, $i29, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $p44, $p57);
    goto $bb21_last;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.17, $p45);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p46);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i49, $i50);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p52 := $p46;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p46, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.17, $p54);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, $i29);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p57 := $p46;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p43 := $p57;
    goto $bb20;

  $bb27:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p44 := $p46;
    goto $bb27_dummy;

  $bb23:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p53 := $p52;
    goto $bb25;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i28);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_107 := printk.ref.i64(.str.58, $i34);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 319111);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 788} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 320143);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p1 := external_alloc();
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 321175);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 794} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 795} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 322207);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    return;
}



const do_ida_request: ref;

axiom do_ida_request == $sub.ref(0, 323239);

procedure do_ida_request($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation do_ida_request($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i8;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i32;
  var $i84: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i56: i32;
  var $i91: i8;
  var $p94: ref;
  var $i95: i32;
  var $i96: i16;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p106: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p1 := $alloc($mul.ref(1280, $zext.i32.i64(1)));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3080)), $mul.ref(1840, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.18, $p2);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p5 := blk_peek_request($p0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $p22, $p23, $p24, $p25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p34, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p45, $p46, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i57, $p59, $i60, $i61, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $i84, $p88, $i89, $i90, $i56, $i91, $p94, $i95, $i96, $p99, $p100, $i101, $i102, $i103, $p106, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $p121, $i122, $p123, $p124, $i125, $i126 := do_ida_request_loop_$bb4($p0, $p1, $p4, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $p22, $p23, $p24, $p25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p34, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p45, $p46, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i57, $p59, $i60, $i61, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $i84, $p88, $i89, $i90, $i56, $i91, $p94, $i95, $i96, $p99, $p100, $i101, $i102, $i103, $p106, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $p121, $i122, $p123, $p124, $i125, $i126);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(232, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 32);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 801} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p17 := cmd_alloc($p4, 1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} blk_start_request($p8);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(184, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i27, $i29);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i31 := $sdiv.i64($i30, 24);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i8($i31);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i32);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 68);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 272);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i41 := blk_rq_pos($p8);
    call {:si_unique_call 806} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i42);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(312, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p8);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} sg_init_table($p47, 32);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i49 := blk_rq_map_sg($p0, $p8, $p48);
    call {:si_unique_call 809} {:cexpr "seg"} boogie_si_record_i32($i49);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32(0, $i49);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i49);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $i91);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i95 := blk_rq_sectors($p8);
    call {:si_unique_call 815} {:cexpr "tmp___3"} boogie_si_record_i32($i95);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $i96);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p8, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i103 == 1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 48);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} addQ($p111, $p17);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i114);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(668, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i120 := $ugt.i32($i117, $i119);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p124 := blk_peek_request($p0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb32;

  $bb32:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $p8 := $p124;
    goto $bb32_dummy;

  $bb5:
    assume $i126 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} start_io($p4);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i120 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(668, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i122);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i103 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 32);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb21;

  $bb21:
    call $i57, $p59, $i60, $i61, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $i84, $p88, $i89, $i90, $i56 := do_ida_request_loop_$bb21($p1, $p4, $p17, $i49, $i54, $i57, $p59, $i60, $i61, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $i84, $p88, $i89, $i90, $i56);
    goto $bb21_last;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref($i57, 40)), $mul.ref(20, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.19, $p59);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i56);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref($i61, 8)), $mul.ref(0, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i60);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i56);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p66, $mul.ref($i67, 40));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p69 := sg_page($p68);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i56);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref($i72, 40)), $mul.ref(16, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.20, $p74);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i56);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref($i77, 40)), $mul.ref(20, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.19, $p79);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i82 := pci_map_page($p71, $p69, $i76, $i81, $i54);
    call {:si_unique_call 812} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i56);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref($i84, 8)), $mul.ref(4, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i83);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i56, 1);
    call {:si_unique_call 813} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, $i49);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i90 == 1);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i89;
    goto $bb23_dummy;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i54 := 2;
    goto $bb17;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    call {:si_unique_call 802} devirtbounce.14(0, .str.62, 970, 12);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call do_ida_request_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb32_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const blk_init_queue: ref;

axiom blk_init_queue == $sub.ref(0, 324271);

procedure blk_init_queue($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_init_queue($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p2 := external_alloc();
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const start_fwbk: ref;

axiom start_fwbk == $sub.ref(0, 325303);

procedure start_fwbk($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation start_fwbk($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} {:cexpr "start_fwbk:arg:ctlr"} boogie_si_record_i32($i0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1, 8));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1077939729);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_109 := printk.ref(.str.64);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p14 := kmalloc(512, 208);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p15);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i20 := sendcmd($sub.i8(0, 103), $i0, $p19, 0, 0, 0, 0);
    call {:si_unique_call 824} {:cexpr "ret_code"} boogie_si_record_i32($i20);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p15);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} kfree($p23);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_111 := printk.ref(.str.66);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_110 := printk.ref(.str.65);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i7, 8));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 1078464017);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ida_procinit: ref;

axiom ida_procinit == $sub.ref(0, 326335);

procedure ida_procinit($i0: i32);
  free requires assertsPassed;
  modifies $M.9;



implementation ida_procinit($i0: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_112: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "ida_procinit:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p1 := $M.9;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i8, 8));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p13 := $M.9;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i14, 8));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_112 := proc_create_data($p12, 0, $p13, ida_proc_fops, $p17);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p4 := proc_mkdir(.str.67, $0.ref);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.9 := $p4;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p5 := $M.9;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const blk_queue_bounce_limit: ref;

axiom blk_queue_bounce_limit == $sub.ref(0, 327367);

procedure blk_queue_bounce_limit($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation blk_queue_bounce_limit($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "blk_queue_bounce_limit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_segments: ref;

axiom blk_queue_max_segments == $sub.ref(0, 328399);

procedure blk_queue_max_segments($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_max_segments($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "blk_queue_max_segments:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 329431);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    return;
}



const ida_timer: ref;

axiom ida_timer == $sub.ref(0, 330463);

procedure ida_timer($i0: i64);



const add_timer: ref;

axiom add_timer == $sub.ref(0, 331495);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    return;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 332527);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p2 := external_alloc();
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 333559);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p5 := external_alloc();
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const blk_peek_request: ref;

axiom blk_peek_request == $sub.ref(0, 334591);

procedure blk_peek_request($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_peek_request($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p1 := external_alloc();
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_start_request: ref;

axiom blk_start_request == $sub.ref(0, 335623);

procedure blk_start_request($p0: ref);
  free requires assertsPassed;



implementation blk_start_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    return;
}



const blk_rq_pos: ref;

axiom blk_rq_pos == $sub.ref(0, 336655);

procedure blk_rq_pos($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation blk_rq_pos($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(88, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 337687);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    return;
}



const blk_rq_map_sg: ref;

axiom blk_rq_map_sg == $sub.ref(0, 338719);

procedure blk_rq_map_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 339751);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.21, $p1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 841} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.22, $p8);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 844} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.22, $p15);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 845} devirtbounce.14(0, .str.63, 99, 12);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 842} devirtbounce.14(0, .str.63, 98, 12);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_page_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const pci_map_page: ref;

axiom pci_map_page == $sub.ref(0, 340783);

procedure pci_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "pci_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 847} {:cexpr "pci_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 848} {:cexpr "pci_map_page:arg:direction"} boogie_si_record_i32($i4);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i9 := dma_map_page($p8, $p1, $i2, $i3, $i4);
    call {:si_unique_call 850} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const blk_rq_sectors: ref;

axiom blk_rq_sectors == $sub.ref(0, 341815);

procedure blk_rq_sectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_sectors($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i1 := blk_rq_bytes($p0);
    call {:si_unique_call 852} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 9);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 342847);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(84, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 343879);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 854} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 855} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p5 := get_dma_ops($p0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p6 := lowmem_page_address($p1);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 860} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 864} $i17 := devirtbounce.17($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 865} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 863} devirtbounce.14(0, .str.6, 79, 12);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 344911);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 80);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 345943);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 868} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 869} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 346975);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 872} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 874} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const complete_command: ref;

axiom complete_command == $sub.ref(0, 348007);

procedure complete_command($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation complete_command($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i55: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $p76: ref;
  var $i77: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $i132: i32;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i110: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} {:cexpr "complete_command:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(312, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.17, $p6);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.17, $p43);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.17, $p58);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i55;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i1, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i94;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.17, $p99);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 32);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.17, $p106);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i109 := $sgt.i32($i108, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} __blk_end_request_all($p3, $i96);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i109 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb22;

  $bb22:
    call $p111, $i112, $i113, $p114, $p115, $p116, $p117, $i118, $p122, $i123, $i124, $i125, $p129, $i130, $i131, $i132, $i133, $i134, $i135, $i110 := complete_command_loop_$bb22($p0, $i103, $p106, $p111, $i112, $i113, $p114, $p115, $p116, $p117, $i118, $p122, $i123, $i124, $i125, $p129, $i130, $i131, $i132, $i133, $i134, $i135, $i110);
    goto $bb22_last;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.17, $p111);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i113, 8));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i110);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref($i118, 8)), $mul.ref(4, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.17, $p122);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i110);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref($i125, 8)), $mul.ref(0, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.17, $p129);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i130);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} pci_unmap_page($p117, $i124, $i131, $i103);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i110, 1);
    call {:si_unique_call 880} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.17, $p106);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i134, $i132);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i135 == 1);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i110 := $i132;
    goto $bb24_dummy;

  $bb16:
    assume $i102 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i103 := 2;
    goto $bb18;

  $bb13:
    assume $i95 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(0, 5);
    goto $bb15;

  $bb10:
    assume $i62 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.17, $p63);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.17, $p66);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.17, $p71);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.17, $p76);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.17, $p80);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.17, $p85);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.17, $p90);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_115 := printk.ref.i32.i32.i32.i32.i32.i32.i32(.str.61, $i64, $i68, $i73, $i77, $i82, $i87, $i92);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 5);
    goto $bb12;

  $bb7:
    assume $i47 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.17, $p48);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.17, $p51);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_114 := printk.ref.i32.i32(.str.60, $i49, $i53);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 5);
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.17, $p11);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i13, 8));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 824)), $mul.ref(816, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.17, $p20);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.17, $p23);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_113 := printk.ref.i32.i32(.str.59, $i21, $i25);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.17, $p27);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i29, 8));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 824)), $mul.ref(816, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.17, $p35);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i37, 8));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 824)), $mul.ref(816, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i34);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;
}



const pci_unmap_page: ref;

axiom pci_unmap_page == $sub.ref(0, 349039);

procedure pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} {:cexpr "pci_unmap_page:arg:dma_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 883} {:cexpr "pci_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 884} {:cexpr "pci_unmap_page:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} dma_unmap_page($p7, $i1, $i2, $i3);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const __blk_end_request_all: ref;

axiom __blk_end_request_all == $sub.ref(0, 350071);

procedure __blk_end_request_all($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __blk_end_request_all($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} {:cexpr "__blk_end_request_all:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 351103);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 888} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 889} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p4 := get_dma_ops($p0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 892} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 894} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 896} devirtbounce.16($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 895} devirtbounce.14(0, .str.6, 91, 12);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 352135);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 353167);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 354199);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 355231);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 905} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 356263);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 908} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 357295);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 911} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 358327);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 913} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 914} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p5 := external_alloc();
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const remap_pci_mem: ref;

axiom remap_pci_mem == $sub.ref(0, 359359);

procedure remap_pci_mem($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation remap_pci_mem($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "remap_pci_mem:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 917} {:cexpr "remap_pci_mem:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i0, $sub.i64(0, 4096));
    call {:si_unique_call 918} {:cexpr "page_base"} boogie_si_record_i64($i2);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, $i2);
    call {:si_unique_call 919} {:cexpr "page_offs"} boogie_si_record_i64($i3);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p5 := ioremap($i2, $i4);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i3, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 360391);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ioremap: ref;

axiom ioremap == $sub.ref(0, 361423);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 922} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 362455);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 925} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := external_alloc();
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 363487);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 928} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 364519);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 932} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 365551);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 936} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 938} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 366583);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 941} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 367615);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.0, $M.47, $M.62, $M.65, $M.73, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.84, $M.92, $M.93, $M.16, $M.9, $M.13, $M.14, $M.15, $M.7, $M.6, $M.83, $M.82, $M.81, $M.5, $M.121, $M.122, $CurrAddr, $M.10, assertsPassed, $M.17, $M.8;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i64;
  var $i151: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i64;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i64;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i64;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i64;
  var vslice_dummy_var_127: i64;
  var vslice_dummy_var_128: i64;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i64;
  var vslice_dummy_var_131: i64;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i64;
  var vslice_dummy_var_134: i64;
  var vslice_dummy_var_135: i64;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i64;

  $bb0:
    call {:si_unique_call 942} $initialize();
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_initialize();
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 946} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 951} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p21, $i23, $i24, $p25, $i27, $i28, $p29, $i31, $i32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $p64, $i65, $i66, $i67, $i69, $i70, $p71, $p72, $i74, $i75, $p76, $p77, $i79, $i80, $p81, $i83, $i84, $p85, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $p135, $p136, $i138, $i139, $i140, $i141, $p142, $p143, $i144, $p145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $p170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $p206, $i207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i253, $i254, $p255, $i256, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p21, $i23, $i24, $p25, $i27, $i28, $p29, $i31, $i32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $p64, $i65, $i66, $i67, $i69, $i70, $p71, $p72, $i74, $i75, $p76, $p77, $i79, $i80, $p81, $i83, $i84, $p85, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $p135, $p136, $i138, $i139, $i140, $i141, $p142, $p143, $i144, $p145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $p170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $p206, $i207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i253, $i254, $p255, $i256, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb56_dummy;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i228 := $M.31;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb254:
    assume $i229 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1059} $i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1060} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i230);
    call {:si_unique_call 1061} {:cexpr "tmp___7"} boogie_si_record_i32($i230);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb263:
    assume $i234 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i253 := $M.31;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb283:
    assume $i254 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p255 := $M.79;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i256 := $M.80;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} smart2e_intr_mask($p255, $i256);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb261:
    assume $i233 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i249 := $M.31;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb280:
    assume $i250 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p251 := $M.77;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p252 := $M.78;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} smart2e_submit_command($p251, $p252);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb259:
    assume $i232 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i245 := $M.31;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb277:
    assume $i246 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p247 := $M.76;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_137 := smart2e_completed($p247);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb257:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i235 == 1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i241 := $M.31;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb274:
    assume $i242 == 1;
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p243 := $M.75;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_136 := smart2e_intr_pending($p243);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb266:
    assume $i235 == 1;
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb265;

  $bb268:
    assume $i236 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i237 := $M.31;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb270:
    assume $i238 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p239 := $M.74;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_135 := smart2e_fifo_full($p239);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i211 := $M.30;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb225:
    assume $i212 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i213);
    call {:si_unique_call 1044} {:cexpr "tmp___6"} boogie_si_record_i32($i213);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb230:
    assume $i215 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i221 := $M.30;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb243:
    assume $i222 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i223 := cpqarray_init();
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.73 := $i223;
    call {:si_unique_call 1049} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i223);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i224 := $M.73;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i226 := $M.73;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb248:
    assume $i227 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_check_final_state();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb245:
    assume $i225 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1052} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb228:
    assume $i214 == 1;
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb232;

  $bb233:
    assume $i216 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i217 := $M.30;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 3);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb235:
    assume $i218 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i219 := $M.29;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb237;

  $bb238:
    assume $i220 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} cpqarray_exit();
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1046} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb5:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i182 := $M.28;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb191:
    assume $i183 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} $i184 := __VERIFIER_nondet_int();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i184);
    call {:si_unique_call 1031} {:cexpr "tmp___5"} boogie_si_record_i32($i184);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i184, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i184, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i184, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i184, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb200:
    assume $i188 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i207 := $M.28;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb220:
    assume $i208 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p209 := $M.71;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i210 := $M.72;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} smart1_intr_mask($p209, $i210);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb198:
    assume $i187 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i203 := $M.28;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb217:
    assume $i204 == 1;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p205 := $M.69;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p206 := $M.70;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} smart1_submit_command($p205, $p206);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1039} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb196:
    assume $i186 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i199 := $M.28;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb214:
    assume $i200 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p201 := $M.68;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_134 := smart1_completed($p201);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1037} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb194:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i189 == 1);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i195 := $M.28;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 1);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb211:
    assume $i196 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p197 := $M.67;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_133 := smart1_intr_pending($p197);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb203:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i184, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb202;

  $bb205:
    assume $i190 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i191 := $M.28;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb207:
    assume $i192 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p193 := $M.66;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_132 := smart1_fifo_full($p193);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb12:
    assume $i5 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i162 := $M.27;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb169:
    assume $i163 == 1;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} $i164 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i164);
    call {:si_unique_call 1021} {:cexpr "tmp___4"} boogie_si_record_i32($i164);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i164, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb174:
    assume $i166 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i177 := $M.27;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 2);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb186:
    assume $i178 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p179 := $M.63;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} cpqarray_remove_one_pci($p179);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i180 := $M.29;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32($i180, 1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.29 := $i181;
    call {:si_unique_call 1028} {:cexpr "ref_cnt"} boogie_si_record_i32($i181);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb172:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i164, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb176;

  $bb177:
    assume $i167 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i168 := $M.27;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb179:
    assume $i169 == 1;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p170 := $M.63;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p171 := $M.64;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i172 := cpqarray_init_one($p170, $p171);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.65 := $i172;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i172);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i173 := $M.65;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i174 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i175 := $M.29;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i175, 1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.29 := $i176;
    call {:si_unique_call 1025} {:cexpr "ref_cnt"} boogie_si_record_i32($i176);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i7 == 1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i125 := $M.26;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb137:
    assume $i126 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} $i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1006} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i127);
    call {:si_unique_call 1007} {:cexpr "tmp___3"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb144:
    assume $i130 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i153 := $M.26;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb161:
    assume $i154 == 1;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p155 := $M.55;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p156 := $M.56;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i157 := ida_proc_open($p155, $p156);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.62 := $i157;
    call {:si_unique_call 1016} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i157);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i158 := $M.62;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb163:
    assume $i159 == 1;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i160 := $M.29;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, 1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.29 := $i161;
    call {:si_unique_call 1018} {:cexpr "ref_cnt"} boogie_si_record_i32($i161);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb142:
    assume $i129 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i147 := $M.26;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb158:
    assume $i148 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p149 := $M.56;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i150 := $M.60;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i151 := $M.61;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_131 := seq_lseek($p149, $i150, $i151);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb140:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i127, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i131 == 1);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i140 := $M.26;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb155:
    assume $i141 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p142 := $M.56;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p143 := $M.57;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i144 := $M.58;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p145 := $M.59;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_130 := seq_read($p142, $p143, $i144, $p145);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb147:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb146;

  $bb149:
    assume $i132 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i133 := $M.26;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 2);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb151:
    assume $i134 == 1;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p135 := $M.55;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p136 := $M.56;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_129 := single_release($p135, $p136);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i138 := $M.29;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i138, 1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.29 := $i139;
    call {:si_unique_call 1010} {:cexpr "ref_cnt"} boogie_si_record_i32($i139);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb16:
    assume $i7 == 1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i96 := $M.25;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb103:
    assume $i97 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} $i98 := __VERIFIER_nondet_int();
    call {:si_unique_call 993} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i98);
    call {:si_unique_call 994} {:cexpr "tmp___2"} boogie_si_record_i32($i98);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i98, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i98, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i98, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb112:
    assume $i102 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i121 := $M.25;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb132:
    assume $i122 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p123 := $M.53;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i124 := $M.54;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} smart4_intr_mask($p123, $i124);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb110:
    assume $i101 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i117 := $M.25;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb129:
    assume $i118 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p119 := $M.51;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p120 := $M.52;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} smart4_submit_command($p119, $p120);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb108:
    assume $i100 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i113 := $M.25;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb126:
    assume $i114 == 1;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p115 := $M.50;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_128 := smart4_completed($p115);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb106:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i98, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i103 == 1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i109 := $M.25;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb123:
    assume $i110 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p111 := $M.49;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_127 := smart4_intr_pending($p111);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb115:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i98, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb114;

  $bb117:
    assume $i104 == 1;
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i105 := $M.25;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i106 == 1;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p107 := $M.48;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_126 := smart4_fifo_full($p107);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb14:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i8 == 1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i39 := $M.24;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume $i40 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i41);
    call {:si_unique_call 972} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb66:
    assume $i45 == 1;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i87 := $M.24;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb95:
    assume $i88 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p89 := $M.41;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i90 := $M.46;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i91 := ida_unlocked_open($p89, $i90);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $M.47 := $i91;
    call {:si_unique_call 989} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i91);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i92 := $M.47;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i93 == 1;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i94 := $M.29;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.29 := $i95;
    call {:si_unique_call 991} {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i44 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i79 := $M.24;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i83 := $M.24;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb92:
    assume $i84 == 1;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p85 := $M.39;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_125 := ida_revalidate($p85);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i80 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p81 := $M.39;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_124 := ida_revalidate($p81);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb62:
    assume $i43 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i69 := $M.24;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i74 := $M.24;
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb86:
    assume $i75 == 1;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p76 := $M.41;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p77 := $M.45;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_123 := ida_getgeo($p76, $p77);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i70 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p71 := $M.41;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p72 := $M.45;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_122 := ida_getgeo($p71, $p72);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb60:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i46 == 1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i55 := $M.24;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i62 := $M.24;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb80:
    assume $i63 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p64 := $M.41;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i65 := $M.42;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i66 := $M.43;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i67 := $M.44;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_121 := ida_ioctl($p64, $i65, $i66, $i67);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i56 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p57 := $M.41;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i58 := $M.42;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i59 := $M.43;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i60 := $M.44;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_120 := ida_ioctl($p57, $i58, $i59, $i60);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb68;

  $bb71:
    assume $i47 == 1;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i48 := $M.24;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i49 == 1;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p50 := $M.39;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i51 := $M.40;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_119 := ida_release($p50, $i51);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i53 := $M.29;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 1);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.29 := $i54;
    call {:si_unique_call 975} {:cexpr "ref_cnt"} boogie_si_record_i32($i54);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i10 := $M.23;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 959} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i35 := $M.23;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb51:
    assume $i36 == 1;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p37 := $M.37;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i38 := $M.38;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} smart2_intr_mask($p37, $i38);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i31 := $M.23;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb48:
    assume $i32 == 1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p33 := $M.35;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p34 := $M.36;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} smart2_submit_command($p33, $p34);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i27 := $M.23;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb45:
    assume $i28 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p29 := $M.34;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_118 := smart2_completed($p29);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i17 == 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i23 := $M.23;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42:
    assume $i24 == 1;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p25 := $M.33;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_117 := smart2_intr_pending($p25);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb34:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb33;

  $bb36:
    assume $i18 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i19 := $M.23;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i20 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p21 := $M.32;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_116 := smart2_fifo_full($p21);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb56_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 956} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 368647);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.5, $M.81, $M.82, $M.83;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_mutex_cpqarray_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1074} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1075} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    return;
}



const cpqarray_exit: ref;

axiom cpqarray_exit == $sub.ref(0, 369679);

procedure cpqarray_exit();
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.6, $CurrAddr;



implementation cpqarray_exit()
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i0: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} pci_unregister_driver(cpqarray_pci_driver);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $p2, $p3, $i4, $i5, $i7, $i8, $i0, vslice_dummy_var_138 := cpqarray_exit_loop_$bb1($i1, $p2, $p3, $i4, $i5, $i7, $i8, $i0, vslice_dummy_var_138);
    goto $bb1_last;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1, 8));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i0, 1);
    call {:si_unique_call 1079} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i7, 7);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} remove_proc_entry(.str.67, $0.ref);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i7;
    goto $bb6_dummy;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} vslice_dummy_var_138 := printk.ref.i32(.str.71, $i0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} cpqarray_remove_one_eisa($i0);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;
}



const cpqarray_init: ref;

axiom cpqarray_init == $sub.ref(0, 370711);

procedure cpqarray_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.7, $M.16, $M.9, $CurrAddr, $M.8;



implementation cpqarray_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i3: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i15: i32;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i25: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i30: i32;
  var $i29: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i35: i32;
  var $i34: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i40: i32;
  var $i39: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i10: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_139 := printk.ref(.str.72);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i1 := __pci_register_driver(cpqarray_pci_driver, __this_module, .str.30);
    call {:si_unique_call 1083} {:cexpr "rc"} boogie_si_record_i32($i1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} vslice_dummy_var_140 := cpqarray_eisa_detect();
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, hba);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(1, 8)));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(2, 8)));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i14;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(3, 8)));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i19;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(4, 8)));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i24;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(5, 8)));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i29;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(6, 8)));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i34;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(7, 8)));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i39;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i10, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i9 == 1);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} pci_unregister_driver(cpqarray_pci_driver);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb12:
    assume $i9 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i39, 1);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i10 := $i44;
    goto $bb40;

  $bb34:
    assume $i38 == 1;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i34, 1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb36;

  $bb30:
    assume $i33 == 1;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i29, 1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb32;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb28;

  $bb22:
    assume $i23 == 1;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i19, 1);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb24;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i14, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb20;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i8, 1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb16;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 371743);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.81;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.82;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_error();
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.83;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 372775);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1090} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1091} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cpqarray_eisa_detect: ref;

axiom cpqarray_eisa_detect == $sub.ref(0, 373807);

procedure cpqarray_eisa_detect() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.7, $M.16, $M.9, $CurrAddr, $M.8;



implementation cpqarray_eisa_detect() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i69: i32;
  var $i66: i32;
  var $i63: i32;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i84: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i14: i32;
  var $i120: i32;
  var $i3: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i158: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i64;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $p213: ref;
  var $i214: i64;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i64;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i247: i64;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i64;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $i280: i64;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i64;
  var $i285: i64;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $i289: i64;
  var $i291: i64;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $i302: i32;
  var $i331: i32;
  var $i332: i1;
  var $i333: i64;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i64;
  var $i339: i64;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i64;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i64;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $i352: i64;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $p357: ref;
  var $i358: i64;
  var $i359: i1;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $i364: i32;
  var $i365: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i32;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $i374: i32;
  var $i375: i1;
  var $i376: i32;
  var $i377: i32;
  var $i378: i32;
  var $i379: i32;
  var $i380: i64;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i32;
  var $i391: i64;
  var $p393: ref;
  var $p394: ref;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i64;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i64;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i64;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i64;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $i417: i64;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $i424: i64;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $i429: i64;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i435: i64;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $i441: i32;
  var $i442: i32;
  var $i443: i32;
  var $i444: i32;
  var $i445: i1;
  var $i447: i32;
  var $i448: i1;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i455: i32;
  var $i456: i1;
  var $i457: i32;
  var $i458: i1;
  var $i459: i32;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i1;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $i471: i32;
  var $i472: i1;
  var $i473: i32;
  var $i474: i1;
  var $i446: i32;
  var $i475: i32;
  var $i476: i1;
  var $i477: i64;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $i481: i32;
  var $i482: i64;
  var $i483: i64;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i64;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i64;
  var $i496: i64;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $i500: i64;
  var $p501: ref;
  var $i502: i64;
  var $i503: i1;
  var $i504: i32;
  var $i505: i32;
  var $i506: i32;
  var $i507: i32;
  var $i508: i32;
  var $i509: i8;
  var $i510: i32;
  var $i511: i32;
  var $i512: i32;
  var $i513: i1;
  var $i514: i32;
  var $i515: i1;
  var $i516: i32;
  var $i517: i1;
  var $i518: i32;
  var $i519: i1;
  var $i520: i32;
  var $i521: i32;
  var $i522: i32;
  var $i523: i32;
  var $i524: i64;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $i528: i64;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $i533: i32;
  var $i535: i64;
  var $p537: ref;
  var $p538: ref;
  var $i539: i64;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $i543: i64;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $i547: i64;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $i553: i64;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $i557: i64;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $i561: i64;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $i565: i32;
  var $i566: i1;
  var $i568: i64;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $i572: i64;
  var $i573: i64;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $i577: i64;
  var $i579: i64;
  var $i581: i32;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var $i585: i32;
  var $i586: i32;
  var $i587: i32;
  var $i588: i32;
  var $i589: i1;
  var $i591: i32;
  var $i592: i1;
  var $i593: i32;
  var $i594: i1;
  var $i595: i32;
  var $i596: i1;
  var $i597: i32;
  var $i598: i1;
  var $i599: i32;
  var $i600: i1;
  var $i601: i32;
  var $i602: i1;
  var $i603: i32;
  var $i604: i1;
  var $i605: i32;
  var $i606: i1;
  var $i607: i32;
  var $i608: i1;
  var $i609: i32;
  var $i610: i1;
  var $i611: i32;
  var $i612: i1;
  var $i613: i32;
  var $i614: i1;
  var $i615: i32;
  var $i616: i1;
  var $i617: i32;
  var $i618: i1;
  var $i590: i32;
  var $i619: i32;
  var $i620: i1;
  var $i621: i64;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $i625: i32;
  var $i626: i64;
  var $i627: i64;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i64;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $i635: i64;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $i639: i64;
  var $i640: i64;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i64;
  var $p645: ref;
  var $i646: i64;
  var $i647: i1;
  var $i648: i32;
  var $i649: i32;
  var $i650: i32;
  var $i651: i32;
  var $i652: i32;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i32;
  var $i657: i1;
  var $i658: i32;
  var $i659: i1;
  var $i660: i32;
  var $i661: i1;
  var $i662: i32;
  var $i663: i1;
  var $i664: i32;
  var $i665: i32;
  var $i666: i32;
  var $i667: i32;
  var $i668: i64;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $i672: i64;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $i677: i32;
  var $i679: i64;
  var $p681: ref;
  var $p682: ref;
  var $i683: i64;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i64;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $i691: i64;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $i697: i64;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $i701: i64;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $i705: i64;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $i709: i32;
  var $i710: i1;
  var $i712: i64;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i64;
  var $i717: i64;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $i721: i64;
  var $i723: i64;
  var $i725: i32;
  var $i726: i1;
  var $i727: i32;
  var $i728: i1;
  var $i729: i32;
  var $i730: i32;
  var $i731: i32;
  var $i732: i32;
  var $i733: i1;
  var $i735: i32;
  var $i736: i1;
  var $i737: i32;
  var $i738: i1;
  var $i739: i32;
  var $i740: i1;
  var $i741: i32;
  var $i742: i1;
  var $i743: i32;
  var $i744: i1;
  var $i745: i32;
  var $i746: i1;
  var $i747: i32;
  var $i748: i1;
  var $i749: i32;
  var $i750: i1;
  var $i751: i32;
  var $i752: i1;
  var $i753: i32;
  var $i754: i1;
  var $i755: i32;
  var $i756: i1;
  var $i757: i32;
  var $i758: i1;
  var $i759: i32;
  var $i760: i1;
  var $i761: i32;
  var $i762: i1;
  var $i734: i32;
  var $i763: i32;
  var $i764: i1;
  var $i765: i64;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i32;
  var $i770: i64;
  var $i771: i64;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $i775: i64;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $i779: i64;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $i783: i64;
  var $i784: i64;
  var $p785: ref;
  var $p786: ref;
  var $p787: ref;
  var $i788: i64;
  var $p789: ref;
  var $i790: i64;
  var $i791: i1;
  var $i792: i32;
  var $i793: i32;
  var $i794: i32;
  var $i795: i32;
  var $i796: i32;
  var $i797: i8;
  var $i798: i32;
  var $i799: i32;
  var $i800: i32;
  var $i801: i1;
  var $i802: i32;
  var $i803: i1;
  var $i804: i32;
  var $i805: i1;
  var $i806: i32;
  var $i807: i1;
  var $i808: i32;
  var $i809: i32;
  var $i810: i32;
  var $i811: i32;
  var $i812: i64;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $i816: i64;
  var $p817: ref;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $i821: i32;
  var $i823: i64;
  var $p825: ref;
  var $p826: ref;
  var $i827: i64;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $i831: i64;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $i835: i64;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $i841: i64;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $i845: i64;
  var $p846: ref;
  var $p847: ref;
  var $p848: ref;
  var $i849: i64;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $i853: i32;
  var $i854: i1;
  var $i856: i64;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $i860: i64;
  var $i861: i64;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $i865: i64;
  var $i867: i64;
  var $i869: i32;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i32;
  var $i874: i32;
  var $i875: i32;
  var $i876: i32;
  var $i877: i1;
  var $i879: i32;
  var $i880: i1;
  var $i881: i32;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i32;
  var $i886: i1;
  var $i887: i32;
  var $i888: i1;
  var $i889: i32;
  var $i890: i1;
  var $i891: i32;
  var $i892: i1;
  var $i893: i32;
  var $i894: i1;
  var $i895: i32;
  var $i896: i1;
  var $i897: i32;
  var $i898: i1;
  var $i899: i32;
  var $i900: i1;
  var $i901: i32;
  var $i902: i1;
  var $i903: i32;
  var $i904: i1;
  var $i905: i32;
  var $i906: i1;
  var $i878: i32;
  var $i907: i32;
  var $i908: i1;
  var $i909: i64;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $i913: i32;
  var $i914: i64;
  var $i915: i64;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $i919: i64;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $i923: i64;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $i927: i64;
  var $i928: i64;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $i932: i64;
  var $p933: ref;
  var $i934: i64;
  var $i935: i1;
  var $i936: i32;
  var $i937: i32;
  var $i938: i32;
  var $i939: i32;
  var $i940: i32;
  var $i941: i8;
  var $i942: i32;
  var $i943: i32;
  var $i944: i32;
  var $i945: i1;
  var $i946: i32;
  var $i947: i1;
  var $i948: i32;
  var $i949: i1;
  var $i950: i32;
  var $i951: i1;
  var $i952: i32;
  var $i953: i32;
  var $i954: i32;
  var $i955: i32;
  var $i956: i64;
  var $p957: ref;
  var $p958: ref;
  var $p959: ref;
  var $i960: i64;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $p964: ref;
  var $i965: i32;
  var $i967: i64;
  var $p969: ref;
  var $p970: ref;
  var $i971: i64;
  var $p972: ref;
  var $p973: ref;
  var $p974: ref;
  var $i975: i64;
  var $p976: ref;
  var $p977: ref;
  var $p978: ref;
  var $i979: i64;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $i985: i64;
  var $p986: ref;
  var $p987: ref;
  var $p988: ref;
  var $i989: i64;
  var $p990: ref;
  var $p991: ref;
  var $p992: ref;
  var $i993: i64;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $i997: i32;
  var $i998: i1;
  var $i1000: i64;
  var $p1001: ref;
  var $p1002: ref;
  var $p1003: ref;
  var $i1004: i64;
  var $i1005: i64;
  var $p1006: ref;
  var $p1007: ref;
  var $p1008: ref;
  var $i1009: i64;
  var $i1011: i64;
  var $i1013: i32;
  var $i1014: i1;
  var $i1015: i32;
  var $i1016: i1;
  var $i1017: i32;
  var $i1018: i32;
  var $i1019: i32;
  var $i1020: i32;
  var $i1021: i1;
  var $i1023: i32;
  var $i1024: i1;
  var $i1025: i32;
  var $i1026: i1;
  var $i1027: i32;
  var $i1028: i1;
  var $i1029: i32;
  var $i1030: i1;
  var $i1031: i32;
  var $i1032: i1;
  var $i1033: i32;
  var $i1034: i1;
  var $i1035: i32;
  var $i1036: i1;
  var $i1037: i32;
  var $i1038: i1;
  var $i1039: i32;
  var $i1040: i1;
  var $i1041: i32;
  var $i1042: i1;
  var $i1043: i32;
  var $i1044: i1;
  var $i1045: i32;
  var $i1046: i1;
  var $i1047: i32;
  var $i1048: i1;
  var $i1049: i32;
  var $i1050: i1;
  var $i1022: i32;
  var $i1051: i32;
  var $i1052: i1;
  var $i1053: i64;
  var $p1054: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $i1057: i32;
  var $i1058: i64;
  var $i1059: i64;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $i1063: i64;
  var $p1064: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $i1067: i64;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $i1071: i64;
  var $i1072: i64;
  var $p1073: ref;
  var $p1074: ref;
  var $p1075: ref;
  var $i1076: i64;
  var $p1077: ref;
  var $i1078: i64;
  var $i1079: i1;
  var $i1080: i32;
  var $i1081: i32;
  var $i1082: i32;
  var $i1083: i32;
  var $i1084: i32;
  var $i1085: i8;
  var $i1086: i32;
  var $i1087: i32;
  var $i1088: i32;
  var $i1089: i1;
  var $i1090: i32;
  var $i1091: i1;
  var $i1092: i32;
  var $i1093: i1;
  var $i1094: i32;
  var $i1095: i1;
  var $i1096: i32;
  var $i1097: i32;
  var $i1098: i32;
  var $i1099: i32;
  var $i1100: i64;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $i1104: i64;
  var $p1105: ref;
  var $p1106: ref;
  var $p1107: ref;
  var $p1108: ref;
  var $i1109: i32;
  var $i1111: i64;
  var $p1113: ref;
  var $p1114: ref;
  var $i1115: i64;
  var $p1116: ref;
  var $p1117: ref;
  var $p1118: ref;
  var $i1119: i64;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $i1123: i64;
  var $p1125: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $p1128: ref;
  var $i1129: i64;
  var $p1130: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $i1133: i64;
  var $p1134: ref;
  var $p1135: ref;
  var $p1136: ref;
  var $i1137: i64;
  var $p1138: ref;
  var $p1139: ref;
  var $p1140: ref;
  var $i1141: i32;
  var $i1142: i1;
  var $i1144: i64;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $i1148: i64;
  var $i1149: i64;
  var $p1150: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $i1153: i64;
  var $i1155: i64;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $p39, $i40, $i41, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $i42, $i43, $i44, $i117, $i118, $i119, $i14, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, cmdloc_dummy_var_11, cmdloc_dummy_var_12, vslice_dummy_var_141, vslice_dummy_var_142 := cpqarray_eisa_detect_loop_$bb20($i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $p39, $i40, $i41, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $i42, $i43, $i44, $i117, $i118, $i119, $i14, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, cmdloc_dummy_var_11, cmdloc_dummy_var_12, vslice_dummy_var_141, vslice_dummy_var_142);
    goto $bb20_last;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i119 := 0;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i3 := $i120;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb43:
    assume $i118 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i0 := alloc_cpqarray_hba();
    call {:si_unique_call 1093} {:cexpr "ctlr"} boogie_si_record_i32($i0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.84, eisa);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 3200);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i6 := inl($i5);
    call {:si_unique_call 1095} {:cexpr "board_id"} boogie_si_record_i32($i6);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.13, products);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i6);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, $i6);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i9 := 1;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, $i6);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i9 := 2;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, $i6);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i9 := 3;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, $i6);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i9 := 4;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, $i6);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i9 := 5;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, $i6);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i9 := 6;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, $i6);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i9 := 7;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, $i6);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i9 := 8;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, $i6);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i9 := 9;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, $i6);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i9 := 10;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, $i6);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i9 := 11;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, $i6);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i9 := 12;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, $i6);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i9 := 13;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, $i6);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i9 := 14;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i10 := 15;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 15);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i15, 8));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 1097} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p18, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.84, eisa);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i0);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i21, 8));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i20);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i25, 8));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 2047);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i0);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i29, 8));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i0);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i34, 8));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p39 := __request_region(ioport_resource, $i33, $i38, .str.30, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i42, $i43, $i44 := $i0, $i6, $i10;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.84, eisa);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 3264);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i58 := inb($i57);
    call {:si_unique_call 1102} {:cexpr "tmp___0"} boogie_si_record_i8($i58);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i60 := $ashr.i32($i59, 4);
    call {:si_unique_call 1103} {:cexpr "intr"} boogie_si_record_i32($i60);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i60, 2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i60, 4);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i60, 8);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i60;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i69 := $i72;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i66;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i42);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i73, 8));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p74);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i63);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i42);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i77, 8));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i82 := $M.16;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_143 := sprintf.ref.ref.i32($p81, .str.24, $i82);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i44);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i84, 24)), $mul.ref(8, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.14, $p86);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i42);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i88, 8));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $p87);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i42);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i92, 8));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.6, $p93);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i44);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i96, 24)), $mul.ref(16, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.15, $p98);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p95);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p99);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 1105} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p100, $p101, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i42);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i102, 8));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p103);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i42);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i42);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i106, 8));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p107);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i43);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i42);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i110, 8));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.6, $p111);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, $0.ref);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i114 := cpqarray_register_ctlr($i42, $0.ref);
    call {:si_unique_call 1107} {:cexpr "tmp___1"} boogie_si_record_i32($i114);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, $sub.i32(0, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    call $i2, $i119, $i14, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i158, $i187, $i188, $i189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $i199, $p200, $p201, $p202, $i203, $p204, $p205, $p206, $i207, $i208, $p209, $p210, $p211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $i280, $p281, $p282, $p283, $i284, $i285, $p286, $p287, $p288, $i289, $i291, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_145, vslice_dummy_var_146 := cpqarray_eisa_detect_loop_$bb42($i2, $i119, $i14, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i158, $i187, $i188, $i189, $p190, $p191, $p192, $i193, $i194, $i195, $p196, $p197, $p198, $i199, $p200, $p201, $p202, $i203, $p204, $p205, $p206, $i207, $i208, $p209, $p210, $p211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $i280, $p281, $p282, $p283, $i284, $i285, $p286, $p287, $p288, $i289, $i291, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_145, vslice_dummy_var_146);
    goto $bb42_last;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i119 := 1;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb45;

  $bb102:
    assume $i150 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i151 := alloc_cpqarray_hba();
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, $sub.i32(0, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i153, 3200);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i155 := inl($i154);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.13, products);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, $i155);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i158 := 0;
    assume true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, $i155);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i158 := 1;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, $i155);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i158 := 2;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, $i155);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i158 := 3;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, $i155);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i158 := 4;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, $i155);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i158 := 5;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, $i155);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i158 := 6;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, $i155);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i158 := 7;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, $i155);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i158 := 8;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, $i155);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i158 := 9;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, $i155);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i158 := 10;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, $i155);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i158 := 11;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, $i155);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i158 := 12;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, $i155);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i158 := 13;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, $i155);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i158 := 14;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i187 := 15;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 15);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i151);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i189, 8));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.6, $p190);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1112} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p192, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i193);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i151);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i195, 8));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.6, $p196);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p198, $i194);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i151);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i199, 8));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.6, $p200);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p202, 2047);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i151);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i203, 8));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.6, $p204);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i151);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i208, 8));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.6, $p209);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i212 := $load.i64($M.0, $p211);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p213 := __request_region(ioport_resource, $i207, $i212, .str.30, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p213);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i215 := $eq.i64($i214, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i216, $i217, $i218 := $i151, $i155, $i187;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, 3264);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i221 := inb($i220);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i223 := $ashr.i32($i222, 4);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i225 == 1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i223, 2);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i227 == 1);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i223, 4);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i229 == 1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i223, 8);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $i223;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i233 := $i232;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i234 := $i233;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i235 := $i234;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i216);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i236, 8));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.6, $p237);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p239, $i235);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i216);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i240, 8));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.6, $p241);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i245 := $M.16;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_147 := sprintf.ref.ref.i32($p244, .str.24, $i245);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i218);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i247, 24)), $mul.ref(8, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.14, $p249);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i216);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i251, 8));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.6, $p252);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p253, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p254, $p250);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i216);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i255, 8));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.6, $p256);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p257, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i259 := $sext.i32.i64($i218);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i259, 24)), $mul.ref(16, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.15, $p261);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p258);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p262);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 1118} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p263, $p264, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i265 := $sext.i32.i64($i216);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i265, 8));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.6, $p266);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p268, $i216);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i269 := $sext.i32.i64($i216);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i269, 8));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.6, $p270);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p271, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p272, $i217);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i216);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i273, 8));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.6, $p274);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p276, $0.ref);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i277 := cpqarray_register_ctlr($i216, $0.ref);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, $sub.i32(0, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    call $i2, $i119, $i14, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i302, $i331, $i332, $i333, $p334, $p335, $p336, $i337, $i338, $i339, $p340, $p341, $p342, $i343, $p344, $p345, $p346, $i347, $p348, $p349, $p350, $i351, $i352, $p353, $p354, $p355, $i356, $p357, $i358, $i359, $i360, $i361, $i362, $i424, $p425, $p426, $p427, $i428, $i429, $p430, $p431, $p432, $i433, $i435, cmdloc_dummy_var_21, cmdloc_dummy_var_22, vslice_dummy_var_149, vslice_dummy_var_150 := cpqarray_eisa_detect_loop_$bb192($i2, $i119, $i14, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i302, $i331, $i332, $i333, $p334, $p335, $p336, $i337, $i338, $i339, $p340, $p341, $p342, $i343, $p344, $p345, $p346, $i347, $p348, $p349, $p350, $i351, $i352, $p353, $p354, $p355, $i356, $p357, $i358, $i359, $i360, $i361, $i362, $i424, $p425, $p426, $p427, $i428, $i429, $p430, $p431, $p432, $i433, $i435, cmdloc_dummy_var_21, cmdloc_dummy_var_22, vslice_dummy_var_149, vslice_dummy_var_150);
    goto $bb192_last;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i119 := 2;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb45;

  $bb196:
    assume $i294 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i295 := alloc_cpqarray_hba();
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, $sub.i32(0, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i2 := 2;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i297, 3200);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i299 := inl($i298);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.13, products);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, $i299);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i302 := 0;
    assume true;
    goto $bb204, $bb206;

  $bb206:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, $i299);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i302 := 1;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, $i299);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i302 := 2;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, $i299);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i302 := 3;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, $i299);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i302 := 4;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, $i299);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i302 := 5;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, $i299);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i302 := 6;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, $i299);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i302 := 7;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, $i299);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i302 := 8;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, $i299);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i302 := 9;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, $i299);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i302 := 10;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, $i299);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i302 := 11;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, $i299);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i302 := 12;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, $i299);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i302 := 13;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, $i299);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i302 := 14;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i331 := 15;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 15);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $i333 := $sext.i32.i64($i295);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i333, 8));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.6, $p334);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p336 := $bitcast.ref.ref($p335);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 1124} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p336, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i338 := $sext.i32.i64($i337);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i339 := $sext.i32.i64($i295);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i339, 8));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.6, $p340);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p342, $i338);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i295);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i343, 8));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.6, $p344);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p345, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p346, 2047);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i347 := $sext.i32.i64($i295);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i347, 8));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.6, $p348);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p349, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.0, $p350);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i352 := $sext.i32.i64($i295);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i352, 8));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.6, $p353);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p354, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i356 := $load.i64($M.0, $p355);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p357 := __request_region(ioport_resource, $i351, $i356, .str.30, 0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i358 := $p2i.ref.i64($p357);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i359 := $eq.i64($i358, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i360, $i361, $i362 := $i295, $i299, $i331;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i364 := $add.i32($i363, 3264);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i365 := inb($i364);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i367 := $ashr.i32($i366, 4);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i368 := $and.i32($i367, 1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i369 := $ne.i32($i368, 0);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i369 == 1);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i370 := $and.i32($i367, 2);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i371 == 1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i372 := $and.i32($i367, 4);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i373 == 1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i374 := $and.i32($i367, 8);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    $i376 := $i367;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i377 := $i376;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i378 := $i377;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i379 := $i378;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i380 := $sext.i32.i64($i360);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i380, 8));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.6, $p381);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p382, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p383, $i379);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i384 := $sext.i32.i64($i360);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i384, 8));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.6, $p385);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p386, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i389 := $M.16;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_151 := sprintf.ref.ref.i32($p388, .str.24, $i389);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i391 := $sext.i32.i64($i362);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i391, 24)), $mul.ref(8, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.14, $p393);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i395 := $sext.i32.i64($i360);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i395, 8));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.6, $p396);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p397, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p398, $p394);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i399 := $sext.i32.i64($i360);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i399, 8));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.6, $p400);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p401, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i403 := $sext.i32.i64($i362);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i403, 24)), $mul.ref(16, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.15, $p405);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p407 := $bitcast.ref.ref($p402);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p408 := $bitcast.ref.ref($p406);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 1130} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p407, $p408, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i409 := $sext.i32.i64($i360);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i409, 8));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.6, $p410);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p411, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p412, $i360);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i413 := $sext.i32.i64($i360);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i413, 8));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.6, $p414);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p415, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p416, $i361);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i417 := $sext.i32.i64($i360);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i417, 8));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.6, $p418);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p419, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p420, $0.ref);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i421 := cpqarray_register_ctlr($i360, $0.ref);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, $sub.i32(0, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    call $i2, $i119, $i14, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i446, $i475, $i476, $i477, $p478, $p479, $p480, $i481, $i482, $i483, $p484, $p485, $p486, $i487, $p488, $p489, $p490, $i491, $p492, $p493, $p494, $i495, $i496, $p497, $p498, $p499, $i500, $p501, $i502, $i503, $i504, $i505, $i506, $i568, $p569, $p570, $p571, $i572, $i573, $p574, $p575, $p576, $i577, $i579, cmdloc_dummy_var_26, cmdloc_dummy_var_27, vslice_dummy_var_153, vslice_dummy_var_154 := cpqarray_eisa_detect_loop_$bb286($i2, $i119, $i14, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i446, $i475, $i476, $i477, $p478, $p479, $p480, $i481, $i482, $i483, $p484, $p485, $p486, $i487, $p488, $p489, $p490, $i491, $p492, $p493, $p494, $i495, $i496, $p497, $p498, $p499, $i500, $p501, $i502, $i503, $i504, $i505, $i506, $i568, $p569, $p570, $p571, $i572, $i573, $p574, $p575, $p576, $i577, $i579, cmdloc_dummy_var_26, cmdloc_dummy_var_27, vslice_dummy_var_153, vslice_dummy_var_154);
    goto $bb286_last;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i438 := $ne.i32($i437, 0);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i119 := 3;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb45;

  $bb290:
    assume $i438 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i439 := alloc_cpqarray_hba();
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i439, $sub.i32(0, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i2 := 3;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i442 := $add.i32($i441, 3200);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i443 := inl($i442);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.13, products);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i444, $i443);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i446 := 0;
    assume true;
    goto $bb298, $bb300;

  $bb300:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, $i443);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i446 := 1;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i449 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, $i443);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i446 := 2;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, $i443);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i446 := 3;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $i453 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, $i443);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i446 := 4;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i455 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, $i443);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i446 := 5;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, $i443);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i446 := 6;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i459 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i459, $i443);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i446 := 7;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, $i443);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i446 := 8;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i463, $i443);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i446 := 9;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $i465 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, $i443);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i446 := 10;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i467, $i443);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i446 := 11;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i469 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, $i443);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i446 := 12;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $i471 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i471, $i443);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i446 := 13;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i473 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, $i443);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i446 := 14;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $i475 := 15;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 15);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i477 := $sext.i32.i64($i439);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i477, 8));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.6, $p478);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p480 := $bitcast.ref.ref($p479);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1136} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p480, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i482 := $sext.i32.i64($i481);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i439);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i483, 8));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.6, $p484);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p485, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p486, $i482);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i487 := $sext.i32.i64($i439);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i487, 8));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p489 := $load.ref($M.6, $p488);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p489, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p490, 2047);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i491 := $sext.i32.i64($i439);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i491, 8));
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.6, $p492);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p493, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i495 := $load.i64($M.0, $p494);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i496 := $sext.i32.i64($i439);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i496, 8));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.6, $p497);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p498, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i500 := $load.i64($M.0, $p499);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p501 := __request_region(ioport_resource, $i495, $i500, .str.30, 0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i502 := $p2i.ref.i64($p501);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i503 := $eq.i64($i502, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i504, $i505, $i506 := $i439, $i443, $i475;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i507 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i508 := $add.i32($i507, 3264);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i509 := inb($i508);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i511 := $ashr.i32($i510, 4);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i512 := $and.i32($i511, 1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i513 == 1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i514 := $and.i32($i511, 2);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i515 := $ne.i32($i514, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i515 == 1);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i516 := $and.i32($i511, 4);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i517 := $ne.i32($i516, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i517 == 1);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i518 := $and.i32($i511, 8);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i519 := $ne.i32($i518, 0);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i519} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    $i520 := $i511;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i521 := $i520;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i522 := $i521;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i523 := $i522;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i524 := $sext.i32.i64($i504);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i524, 8));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.6, $p525);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p526, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p527, $i523);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i528 := $sext.i32.i64($i504);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i528, 8));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.6, $p529);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p530, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p532 := $bitcast.ref.ref($p531);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i533 := $M.16;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_155 := sprintf.ref.ref.i32($p532, .str.24, $i533);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i535 := $sext.i32.i64($i506);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i535, 24)), $mul.ref(8, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.14, $p537);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i539 := $sext.i32.i64($i504);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i539, 8));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p541 := $load.ref($M.6, $p540);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p541, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p542, $p538);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i543 := $sext.i32.i64($i504);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i543, 8));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p545 := $load.ref($M.6, $p544);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p545, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i547 := $sext.i32.i64($i506);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i547, 24)), $mul.ref(16, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.15, $p549);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p551 := $bitcast.ref.ref($p546);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p552 := $bitcast.ref.ref($p550);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 1142} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p551, $p552, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i553 := $sext.i32.i64($i504);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i553, 8));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p555 := $load.ref($M.6, $p554);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p555, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p556, $i504);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i557 := $sext.i32.i64($i504);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i557, 8));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p559 := $load.ref($M.6, $p558);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p559, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p560, $i505);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i561 := $sext.i32.i64($i504);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i561, 8));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.6, $p562);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p563, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p564, $0.ref);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i565 := cpqarray_register_ctlr($i504, $0.ref);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i565, $sub.i32(0, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    call $i2, $i119, $i14, $i581, $i582, $i583, $i584, $i585, $i586, $i587, $i588, $i589, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $i598, $i599, $i600, $i601, $i602, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $i613, $i614, $i615, $i616, $i617, $i618, $i590, $i619, $i620, $i621, $p622, $p623, $p624, $i625, $i626, $i627, $p628, $p629, $p630, $i631, $p632, $p633, $p634, $i635, $p636, $p637, $p638, $i639, $i640, $p641, $p642, $p643, $i644, $p645, $i646, $i647, $i648, $i649, $i650, $i712, $p713, $p714, $p715, $i716, $i717, $p718, $p719, $p720, $i721, $i723, cmdloc_dummy_var_31, cmdloc_dummy_var_32, vslice_dummy_var_157, vslice_dummy_var_158 := cpqarray_eisa_detect_loop_$bb380($i2, $i119, $i14, $i581, $i582, $i583, $i584, $i585, $i586, $i587, $i588, $i589, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $i598, $i599, $i600, $i601, $i602, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $i613, $i614, $i615, $i616, $i617, $i618, $i590, $i619, $i620, $i621, $p622, $p623, $p624, $i625, $i626, $i627, $p628, $p629, $p630, $i631, $p632, $p633, $p634, $i635, $p636, $p637, $p638, $i639, $i640, $p641, $p642, $p643, $i644, $p645, $i646, $i647, $i648, $i649, $i650, $i712, $p713, $p714, $p715, $i716, $i717, $p718, $p719, $p720, $i721, $i723, cmdloc_dummy_var_31, cmdloc_dummy_var_32, vslice_dummy_var_157, vslice_dummy_var_158);
    goto $bb380_last;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i582 := $ne.i32($i581, 0);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i119 := 4;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    assume !($i582 == 1);
    goto $bb45;

  $bb384:
    assume $i582 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i583 := alloc_cpqarray_hba();
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i583, $sub.i32(0, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i2 := 4;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i585 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i586 := $add.i32($i585, 3200);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i587 := inl($i586);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $i588 := $load.i32($M.13, products);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i589 := $eq.i32($i588, $i587);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i590 := 0;
    assume true;
    goto $bb392, $bb394;

  $bb394:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $i591 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i591, $i587);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i590 := 1;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $i593 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i594 := $eq.i32($i593, $i587);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i590 := 2;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i595, $i587);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i590 := 3;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $i597 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, $i587);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i590 := 4;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $i599 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i599, $i587);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i590 := 5;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, $i587);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i590 := 6;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $i603 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i604 := $eq.i32($i603, $i587);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i590 := 7;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i605, $i587);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i590 := 8;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $i607 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i607, $i587);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i590 := 9;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $i609 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i609, $i587);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i590 := 10;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $i611 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i611, $i587);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i590 := 11;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i613, $i587);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i590 := 12;
    assume true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $i615 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i616 := $eq.i32($i615, $i587);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i590 := 13;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $i617 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i618 := $eq.i32($i617, $i587);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i590 := 14;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $i619 := 15;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i619, 15);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $i621 := $sext.i32.i64($i583);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i621, 8));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.6, $p622);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p624 := $bitcast.ref.ref($p623);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1148} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p624, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i625 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i626 := $sext.i32.i64($i625);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i627 := $sext.i32.i64($i583);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i627, 8));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.6, $p628);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p629, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p630, $i626);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i631 := $sext.i32.i64($i583);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i631, 8));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p633 := $load.ref($M.6, $p632);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p633, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p634, 2047);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i635 := $sext.i32.i64($i583);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i635, 8));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.6, $p636);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p637, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i639 := $load.i64($M.0, $p638);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i640 := $sext.i32.i64($i583);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i640, 8));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.6, $p641);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p642, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i644 := $load.i64($M.0, $p643);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p645 := __request_region(ioport_resource, $i639, $i644, .str.30, 0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i646 := $p2i.ref.i64($p645);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i647 := $eq.i64($i646, 0);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i648, $i649, $i650 := $i583, $i587, $i619;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $i651 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i652 := $add.i32($i651, 3264);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i653 := inb($i652);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i655 := $ashr.i32($i654, 4);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i656 := $and.i32($i655, 1);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i657 := $ne.i32($i656, 0);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i657} true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i657 == 1);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i658 := $and.i32($i655, 2);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i659 := $ne.i32($i658, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i659 == 1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i660 := $and.i32($i655, 4);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i661 := $ne.i32($i660, 0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i661 == 1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i662 := $and.i32($i655, 8);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i663 := $ne.i32($i662, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    $i664 := $i655;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i665 := $i664;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i666 := $i665;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i667 := $i666;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i668 := $sext.i32.i64($i648);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i668, 8));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.6, $p669);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p670, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p671, $i667);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i672 := $sext.i32.i64($i648);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i672, 8));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.6, $p673);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p674, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p676 := $bitcast.ref.ref($p675);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i677 := $M.16;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_159 := sprintf.ref.ref.i32($p676, .str.24, $i677);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i679 := $sext.i32.i64($i650);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i679, 24)), $mul.ref(8, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.14, $p681);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i683 := $sext.i32.i64($i648);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i683, 8));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.6, $p684);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p685, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p686, $p682);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i687 := $sext.i32.i64($i648);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i687, 8));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.6, $p688);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p689, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i691 := $sext.i32.i64($i650);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i691, 24)), $mul.ref(16, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.15, $p693);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p695 := $bitcast.ref.ref($p690);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p696 := $bitcast.ref.ref($p694);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1154} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p695, $p696, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i697 := $sext.i32.i64($i648);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i697, 8));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.6, $p698);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p699, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p700, $i648);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i701 := $sext.i32.i64($i648);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i701, 8));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p703 := $load.ref($M.6, $p702);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p703, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, $i649);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i705 := $sext.i32.i64($i648);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i705, 8));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.6, $p706);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p707, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p708, $0.ref);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i709 := cpqarray_register_ctlr($i648, $0.ref);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i709, $sub.i32(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i710 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    call $i2, $i119, $i14, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $i733, $i735, $i736, $i737, $i738, $i739, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i734, $i763, $i764, $i765, $p766, $p767, $p768, $i769, $i770, $i771, $p772, $p773, $p774, $i775, $p776, $p777, $p778, $i779, $p780, $p781, $p782, $i783, $i784, $p785, $p786, $p787, $i788, $p789, $i790, $i791, $i792, $i793, $i794, $i856, $p857, $p858, $p859, $i860, $i861, $p862, $p863, $p864, $i865, $i867, cmdloc_dummy_var_36, cmdloc_dummy_var_37, vslice_dummy_var_161, vslice_dummy_var_162 := cpqarray_eisa_detect_loop_$bb474($i2, $i119, $i14, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $i733, $i735, $i736, $i737, $i738, $i739, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i734, $i763, $i764, $i765, $p766, $p767, $p768, $i769, $i770, $i771, $p772, $p773, $p774, $i775, $p776, $p777, $p778, $i779, $p780, $p781, $p782, $i783, $i784, $p785, $p786, $p787, $i788, $p789, $i790, $i791, $i792, $i793, $i794, $i856, $p857, $p858, $p859, $i860, $i861, $p862, $p863, $p864, $i865, $i867, cmdloc_dummy_var_36, cmdloc_dummy_var_37, vslice_dummy_var_161, vslice_dummy_var_162);
    goto $bb474_last;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i726 := $ne.i32($i725, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i119 := 5;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    assume !($i726 == 1);
    goto $bb45;

  $bb478:
    assume $i726 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i727 := alloc_cpqarray_hba();
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i727, $sub.i32(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i2 := 5;
    assume true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $i729 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i730 := $add.i32($i729, 3200);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i731 := inl($i730);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $i732 := $load.i32($M.13, products);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i733 := $eq.i32($i732, $i731);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i734 := 0;
    assume true;
    goto $bb486, $bb488;

  $bb488:
    assume !($i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $i735 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i736 := $eq.i32($i735, $i731);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i734 := 1;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $i737 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i738 := $eq.i32($i737, $i731);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i734 := 2;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $i739 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i739, $i731);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i734 := 3;
    assume true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $i741 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i742 := $eq.i32($i741, $i731);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i734 := 4;
    assume true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $i743 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i744 := $eq.i32($i743, $i731);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i734 := 5;
    assume true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $i745 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i745, $i731);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i734 := 6;
    assume true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $i747 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i748 := $eq.i32($i747, $i731);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i734 := 7;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $i749 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i750 := $eq.i32($i749, $i731);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i734 := 8;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $i751 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i751, $i731);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i734 := 9;
    assume true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $i753 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i754 := $eq.i32($i753, $i731);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i734 := 10;
    assume true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $i755 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i756 := $eq.i32($i755, $i731);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i734 := 11;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $i757 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i757, $i731);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i734 := 12;
    assume true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    $i759 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i760 := $eq.i32($i759, $i731);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i734 := 13;
    assume true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i760 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $i761 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i761, $i731);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i734 := 14;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $i763 := 15;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i763, 15);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    $i765 := $sext.i32.i64($i727);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i765, 8));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p767 := $load.ref($M.6, $p766);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p768 := $bitcast.ref.ref($p767);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1160} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p768, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i770 := $sext.i32.i64($i769);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i771 := $sext.i32.i64($i727);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i771, 8));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p773 := $load.ref($M.6, $p772);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p773, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p774, $i770);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i775 := $sext.i32.i64($i727);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i775, 8));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p777 := $load.ref($M.6, $p776);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p777, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p778, 2047);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i779 := $sext.i32.i64($i727);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i779, 8));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p781 := $load.ref($M.6, $p780);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p781, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i783 := $load.i64($M.0, $p782);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i784 := $sext.i32.i64($i727);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i784, 8));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.6, $p785);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p786, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i788 := $load.i64($M.0, $p787);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p789 := __request_region(ioport_resource, $i783, $i788, .str.30, 0);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i790 := $p2i.ref.i64($p789);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i791 := $eq.i64($i790, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i792, $i793, $i794 := $i727, $i731, $i763;
    assume true;
    goto $bb550, $bb551;

  $bb551:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    $i795 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i796 := $add.i32($i795, 3264);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i797 := inb($i796);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i798 := $zext.i8.i32($i797);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i799 := $ashr.i32($i798, 4);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i800 := $and.i32($i799, 1);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i801 := $ne.i32($i800, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i801} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i801 == 1);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i802 := $and.i32($i799, 2);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i803 := $ne.i32($i802, 0);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i803 == 1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i804 := $and.i32($i799, 4);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i805 := $ne.i32($i804, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i805} true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i805 == 1);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i806 := $and.i32($i799, 8);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i807 := $ne.i32($i806, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i807} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    $i808 := $i799;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i809 := $i808;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i810 := $i809;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i811 := $i810;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i812 := $sext.i32.i64($i792);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i812, 8));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.6, $p813);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p814, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p815, $i811);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i816 := $sext.i32.i64($i792);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i816, 8));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p818 := $load.ref($M.6, $p817);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p818, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p820 := $bitcast.ref.ref($p819);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i821 := $M.16;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} vslice_dummy_var_163 := sprintf.ref.ref.i32($p820, .str.24, $i821);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i823 := $sext.i32.i64($i794);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i823, 24)), $mul.ref(8, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p826 := $load.ref($M.14, $p825);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i827 := $sext.i32.i64($i792);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i827, 8));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p829 := $load.ref($M.6, $p828);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p829, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p830, $p826);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i831 := $sext.i32.i64($i792);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i831, 8));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.6, $p832);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p833, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i835 := $sext.i32.i64($i794);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i835, 24)), $mul.ref(16, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.15, $p837);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p839 := $bitcast.ref.ref($p834);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p840 := $bitcast.ref.ref($p838);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 1166} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p839, $p840, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i841 := $sext.i32.i64($i792);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i841, 8));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.6, $p842);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($p843, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p844, $i792);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i845 := $sext.i32.i64($i792);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i845, 8));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p847 := $load.ref($M.6, $p846);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p847, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p848, $i793);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i849 := $sext.i32.i64($i792);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i849, 8));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p851 := $load.ref($M.6, $p850);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p851, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p852, $0.ref);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i853 := cpqarray_register_ctlr($i792, $0.ref);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i853, $sub.i32(0, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    call $i2, $i119, $i14, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i886, $i887, $i888, $i889, $i890, $i891, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $i904, $i905, $i906, $i878, $i907, $i908, $i909, $p910, $p911, $p912, $i913, $i914, $i915, $p916, $p917, $p918, $i919, $p920, $p921, $p922, $i923, $p924, $p925, $p926, $i927, $i928, $p929, $p930, $p931, $i932, $p933, $i934, $i935, $i936, $i937, $i938, $i1000, $p1001, $p1002, $p1003, $i1004, $i1005, $p1006, $p1007, $p1008, $i1009, $i1011, cmdloc_dummy_var_41, cmdloc_dummy_var_42, vslice_dummy_var_165, vslice_dummy_var_166 := cpqarray_eisa_detect_loop_$bb568($i2, $i119, $i14, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i886, $i887, $i888, $i889, $i890, $i891, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $i904, $i905, $i906, $i878, $i907, $i908, $i909, $p910, $p911, $p912, $i913, $i914, $i915, $p916, $p917, $p918, $i919, $p920, $p921, $p922, $i923, $p924, $p925, $p926, $i927, $i928, $p929, $p930, $p931, $i932, $p933, $i934, $i935, $i936, $i937, $i938, $i1000, $p1001, $p1002, $p1003, $i1004, $i1005, $p1006, $p1007, $p1008, $i1009, $i1011, cmdloc_dummy_var_41, cmdloc_dummy_var_42, vslice_dummy_var_165, vslice_dummy_var_166);
    goto $bb568_last;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i870 := $ne.i32($i869, 0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i119 := 6;
    assume true;
    goto $bb572, $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    assume !($i870 == 1);
    goto $bb45;

  $bb572:
    assume $i870 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i871 := alloc_cpqarray_hba();
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i871, $sub.i32(0, 1));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i2 := 6;
    assume true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $i873 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i874 := $add.i32($i873, 3200);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i875 := inl($i874);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $i876 := $load.i32($M.13, products);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i877 := $eq.i32($i876, $i875);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i878 := 0;
    assume true;
    goto $bb580, $bb582;

  $bb582:
    assume !($i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $i879 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i880 := $eq.i32($i879, $i875);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i878 := 1;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    $i881 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i881, $i875);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i878 := 2;
    assume true;
    goto $bb589, $bb590;

  $bb590:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    $i883 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i883, $i875);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i878 := 3;
    assume true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $i885 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i886 := $eq.i32($i885, $i875);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i878 := 4;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i886 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    $i887 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i888 := $eq.i32($i887, $i875);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i878 := 5;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $i889 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i889, $i875);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i878 := 6;
    assume true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    $i891 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i891, $i875);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i878 := 7;
    assume true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    $i893 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i894 := $eq.i32($i893, $i875);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i878 := 8;
    assume true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    $i895 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i895, $i875);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i878 := 9;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    $i897 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i898 := $eq.i32($i897, $i875);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i878 := 10;
    assume true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i898 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    $i899 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i900 := $eq.i32($i899, $i875);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i878 := 11;
    assume true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i900 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    $i901 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i901, $i875);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i878 := 12;
    assume true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i902 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    $i903 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i904 := $eq.i32($i903, $i875);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i878 := 13;
    assume true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i904 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    $i905 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i906 := $eq.i32($i905, $i875);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i878 := 14;
    assume true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i906 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $i907 := 15;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i907, 15);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb641, $bb642;

  $bb642:
    assume !($i908 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $i909 := $sext.i32.i64($i871);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i909, 8));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p911 := $load.ref($M.6, $p910);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p912 := $bitcast.ref.ref($p911);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 1172} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p912, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i913 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i914 := $sext.i32.i64($i913);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i915 := $sext.i32.i64($i871);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i915, 8));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p917 := $load.ref($M.6, $p916);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p917, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p918, $i914);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i919 := $sext.i32.i64($i871);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i919, 8));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p921 := $load.ref($M.6, $p920);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p921, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p922, 2047);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i923 := $sext.i32.i64($i871);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i923, 8));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p925 := $load.ref($M.6, $p924);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p925, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i927 := $load.i64($M.0, $p926);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i928 := $sext.i32.i64($i871);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i928, 8));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p930 := $load.ref($M.6, $p929);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p930, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i932 := $load.i64($M.0, $p931);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p933 := __request_region(ioport_resource, $i927, $i932, .str.30, 0);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i934 := $p2i.ref.i64($p933);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i935 := $eq.i64($i934, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i936, $i937, $i938 := $i871, $i875, $i907;
    assume true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i935 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    $i939 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i940 := $add.i32($i939, 3264);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i941 := inb($i940);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i942 := $zext.i8.i32($i941);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i943 := $ashr.i32($i942, 4);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i944 := $and.i32($i943, 1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i945 := $ne.i32($i944, 0);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i945 == 1);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i946 := $and.i32($i943, 2);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i947 := $ne.i32($i946, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i947 == 1);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i948 := $and.i32($i943, 4);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i949 := $ne.i32($i948, 0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i949} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i949 == 1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i950 := $and.i32($i943, 8);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i951 := $ne.i32($i950, 0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i951} true;
    goto $bb653, $bb654;

  $bb654:
    assume !($i951 == 1);
    assume {:verifier.code 0} true;
    $i952 := $i943;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i953 := $i952;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i954 := $i953;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i955 := $i954;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i956 := $sext.i32.i64($i936);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i956, 8));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p958 := $load.ref($M.6, $p957);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($p958, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p959, $i955);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i960 := $sext.i32.i64($i936);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i960, 8));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.6, $p961);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p962, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p964 := $bitcast.ref.ref($p963);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i965 := $M.16;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} vslice_dummy_var_167 := sprintf.ref.ref.i32($p964, .str.24, $i965);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i967 := $sext.i32.i64($i938);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i967, 24)), $mul.ref(8, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p970 := $load.ref($M.14, $p969);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i971 := $sext.i32.i64($i936);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i971, 8));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p973 := $load.ref($M.6, $p972);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($p973, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p974, $p970);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i975 := $sext.i32.i64($i936);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i975, 8));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p977 := $load.ref($M.6, $p976);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($p977, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i979 := $sext.i32.i64($i938);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i979, 24)), $mul.ref(16, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.15, $p981);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p983 := $bitcast.ref.ref($p978);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p984 := $bitcast.ref.ref($p982);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 1178} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p983, $p984, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i985 := $sext.i32.i64($i936);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i985, 8));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p987 := $load.ref($M.6, $p986);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($p987, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p988, $i936);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i989 := $sext.i32.i64($i936);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i989, 8));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p991 := $load.ref($M.6, $p990);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p991, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p992, $i937);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i993 := $sext.i32.i64($i936);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i993, 8));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p995 := $load.ref($M.6, $p994);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p995, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p996, $0.ref);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i997 := cpqarray_register_ctlr($i936, $0.ref);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i998 := $eq.i32($i997, $sub.i32(0, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i998} true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i998 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    call $i2, $i119, $i14, $i1013, $i1014, $i1015, $i1016, $i1017, $i1018, $i1019, $i1020, $i1021, $i1023, $i1024, $i1025, $i1026, $i1027, $i1028, $i1029, $i1030, $i1031, $i1032, $i1033, $i1034, $i1035, $i1036, $i1037, $i1038, $i1039, $i1040, $i1041, $i1042, $i1043, $i1044, $i1045, $i1046, $i1047, $i1048, $i1049, $i1050, $i1022, $i1051, $i1052, $i1053, $p1054, $p1055, $p1056, $i1057, $i1058, $i1059, $p1060, $p1061, $p1062, $i1063, $p1064, $p1065, $p1066, $i1067, $p1068, $p1069, $p1070, $i1071, $i1072, $p1073, $p1074, $p1075, $i1076, $p1077, $i1078, $i1079, $i1080, $i1081, $i1082, $i1144, $p1145, $p1146, $p1147, $i1148, $i1149, $p1150, $p1151, $p1152, $i1153, $i1155, cmdloc_dummy_var_46, cmdloc_dummy_var_47, vslice_dummy_var_169, vslice_dummy_var_170 := cpqarray_eisa_detect_loop_$bb662($i2, $i119, $i14, $i1013, $i1014, $i1015, $i1016, $i1017, $i1018, $i1019, $i1020, $i1021, $i1023, $i1024, $i1025, $i1026, $i1027, $i1028, $i1029, $i1030, $i1031, $i1032, $i1033, $i1034, $i1035, $i1036, $i1037, $i1038, $i1039, $i1040, $i1041, $i1042, $i1043, $i1044, $i1045, $i1046, $i1047, $i1048, $i1049, $i1050, $i1022, $i1051, $i1052, $i1053, $p1054, $p1055, $p1056, $i1057, $i1058, $i1059, $p1060, $p1061, $p1062, $i1063, $p1064, $p1065, $p1066, $i1067, $p1068, $p1069, $p1070, $i1071, $i1072, $p1073, $p1074, $p1075, $i1076, $p1077, $i1078, $i1079, $i1080, $i1081, $i1082, $i1144, $p1145, $p1146, $p1147, $i1148, $i1149, $p1150, $p1151, $p1152, $i1153, $i1155, cmdloc_dummy_var_46, cmdloc_dummy_var_47, vslice_dummy_var_169, vslice_dummy_var_170);
    goto $bb662_last;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i1014 := $ne.i32($i1013, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i119 := 7;
    assume true;
    goto $bb666, $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    assume !($i1014 == 1);
    goto $bb45;

  $bb666:
    assume $i1014 == 1;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i1015 := alloc_cpqarray_hba();
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i1016 := $eq.i32($i1015, $sub.i32(0, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i2 := 7;
    assume true;
    goto $bb669, $bb670;

  $bb670:
    assume !($i1016 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $i1017 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i1018 := $add.i32($i1017, 3200);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i1019 := inl($i1018);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    $i1020 := $load.i32($M.13, products);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i1021 := $eq.i32($i1020, $i1019);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i1022 := 0;
    assume true;
    goto $bb674, $bb676;

  $bb676:
    assume !($i1021 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    $i1023 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i1024 := $eq.i32($i1023, $i1019);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i1022 := 1;
    assume true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i1024 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $i1025 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i1026 := $eq.i32($i1025, $i1019);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i1022 := 2;
    assume true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i1026 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $i1027 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i1028 := $eq.i32($i1027, $i1019);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i1022 := 3;
    assume true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i1028 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    $i1029 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i1030 := $eq.i32($i1029, $i1019);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i1022 := 4;
    assume true;
    goto $bb691, $bb692;

  $bb692:
    assume !($i1030 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $i1031 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i1032 := $eq.i32($i1031, $i1019);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i1022 := 5;
    assume true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i1032 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $i1033 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i1034 := $eq.i32($i1033, $i1019);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i1022 := 6;
    assume true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i1034 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $i1035 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i1036 := $eq.i32($i1035, $i1019);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i1022 := 7;
    assume true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    $i1037 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i1038 := $eq.i32($i1037, $i1019);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i1022 := 8;
    assume true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i1038 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $i1039 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i1040 := $eq.i32($i1039, $i1019);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i1022 := 9;
    assume true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i1040 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    $i1041 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i1042 := $eq.i32($i1041, $i1019);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i1022 := 10;
    assume true;
    goto $bb715, $bb716;

  $bb716:
    assume !($i1042 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    $i1043 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i1044 := $eq.i32($i1043, $i1019);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i1022 := 11;
    assume true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i1044 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $i1045 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i1046 := $eq.i32($i1045, $i1019);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i1022 := 12;
    assume true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i1046 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $i1047 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i1048 := $eq.i32($i1047, $i1019);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i1022 := 13;
    assume true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i1048 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    $i1049 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i1050 := $eq.i32($i1049, $i1019);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i1022 := 14;
    assume true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    $i1051 := 15;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i1052 := $eq.i32($i1051, 15);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i1052 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    $i1053 := $sext.i32.i64($i1015);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1053, 8));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p1055 := $load.ref($M.6, $p1054);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p1056 := $bitcast.ref.ref($p1055);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1184} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p1056, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i1057 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i1058 := $sext.i32.i64($i1057);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i1059 := $sext.i32.i64($i1015);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1059, 8));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p1061 := $load.ref($M.6, $p1060);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p1061, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1062, $i1058);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i1063 := $sext.i32.i64($i1015);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1063, 8));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p1065 := $load.ref($M.6, $p1064);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1065, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1066, 2047);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i1067 := $sext.i32.i64($i1015);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1067, 8));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p1069 := $load.ref($M.6, $p1068);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1069, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i1071 := $load.i64($M.0, $p1070);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i1072 := $sext.i32.i64($i1015);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1072, 8));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p1074 := $load.ref($M.6, $p1073);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($p1074, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i1076 := $load.i64($M.0, $p1075);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p1077 := __request_region(ioport_resource, $i1071, $i1076, .str.30, 0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i1078 := $p2i.ref.i64($p1077);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i1079 := $eq.i64($i1078, 0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i1080, $i1081, $i1082 := $i1015, $i1019, $i1051;
    assume true;
    goto $bb738, $bb739;

  $bb739:
    assume !($i1079 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $i1083 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i1084 := $add.i32($i1083, 3264);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i1085 := inb($i1084);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i1086 := $zext.i8.i32($i1085);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i1087 := $ashr.i32($i1086, 4);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i1088 := $and.i32($i1087, 1);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i1089 := $ne.i32($i1088, 0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1089} true;
    goto $bb741, $bb742;

  $bb742:
    assume !($i1089 == 1);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i1090 := $and.i32($i1087, 2);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i1091 := $ne.i32($i1090, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1091} true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i1091 == 1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i1092 := $and.i32($i1087, 4);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i1093 := $ne.i32($i1092, 0);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1093} true;
    goto $bb745, $bb746;

  $bb746:
    assume !($i1093 == 1);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i1094 := $and.i32($i1087, 8);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i1095 := $ne.i32($i1094, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1095} true;
    goto $bb747, $bb748;

  $bb748:
    assume !($i1095 == 1);
    assume {:verifier.code 0} true;
    $i1096 := $i1087;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i1097 := $i1096;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i1098 := $i1097;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i1099 := $i1098;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i1100 := $sext.i32.i64($i1080);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1100, 8));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p1102 := $load.ref($M.6, $p1101);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($p1102, $mul.ref(0, 824)), $mul.ref(104, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1103, $i1099);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i1104 := $sext.i32.i64($i1080);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1104, 8));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p1106 := $load.ref($M.6, $p1105);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($add.ref($p1106, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p1108 := $bitcast.ref.ref($p1107);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i1109 := $M.16;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_171 := sprintf.ref.ref.i32($p1108, .str.24, $i1109);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i1111 := $sext.i32.i64($i1082);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i1111, 24)), $mul.ref(8, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p1114 := $load.ref($M.14, $p1113);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i1115 := $sext.i32.i64($i1080);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1115, 8));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p1117 := $load.ref($M.6, $p1116);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($p1117, $mul.ref(0, 824)), $mul.ref(64, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1118, $p1114);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i1119 := $sext.i32.i64($i1080);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1119, 8));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p1121 := $load.ref($M.6, $p1120);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p1122 := $add.ref($add.ref($p1121, $mul.ref(0, 824)), $mul.ref(504, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i1123 := $sext.i32.i64($i1082);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref($i1123, 24)), $mul.ref(16, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p1126 := $load.ref($M.15, $p1125);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p1127 := $bitcast.ref.ref($p1122);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p1128 := $bitcast.ref.ref($p1126);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 1190} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p1127, $p1128, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i1129 := $sext.i32.i64($i1080);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1129, 8));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p1131 := $load.ref($M.6, $p1130);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p1131, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1132, $i1080);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i1133 := $sext.i32.i64($i1080);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p1134 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1133, 8));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p1135 := $load.ref($M.6, $p1134);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p1136 := $add.ref($add.ref($p1135, $mul.ref(0, 824)), $mul.ref(56, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1136, $i1081);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i1137 := $sext.i32.i64($i1080);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1137, 8));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p1139 := $load.ref($M.6, $p1138);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1139, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1140, $0.ref);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i1141 := cpqarray_register_ctlr($i1080, $0.ref);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i1142 := $eq.i32($i1141, $sub.i32(0, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1142} true;
    goto $bb753, $bb754;

  $bb754:
    assume !($i1142 == 1);
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $i120 := 8;
    goto $bb46;

  $bb753:
    assume $i1142 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} vslice_dummy_var_172 := printk.ref.i32(.str.74, $i1080);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb747:
    assume $i1095 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i1096 := 15;
    goto $bb749;

  $bb745:
    assume $i1093 == 1;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i1097 := 14;
    goto $bb750;

  $bb743:
    assume $i1091 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i1098 := 10;
    goto $bb751;

  $bb741:
    assume $i1089 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i1099 := 11;
    goto $bb752;

  $bb738:
    assume $i1079 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i1144 := $sext.i32.i64($i1015);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p1145 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1144, 8));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p1146 := $load.ref($M.6, $p1145);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p1147 := $add.ref($add.ref($p1146, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i1148 := $load.i64($M.0, $p1147);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i1149 := $sext.i32.i64($i1015);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1149, 8));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p1151 := $load.ref($M.6, $p1150);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($p1151, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i1153 := $load.i64($M.0, $p1152);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_170 := printk.ref.i64.i64(.str.73, $i1148, $i1153);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} free_hba($i1015);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    $i14 := 7;
    assume {:branchcond 1} true;
    goto $bb757, $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i120 := $i14;
    goto $bb46;

  $bb757:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb757_dummy;

  $bb735:
    assume $i1052 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i1155 := $zext.i32.i64($i1019);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vslice_dummy_var_169 := printk.ref.i64(.str.32, $i1155);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb731:
    assume {:verifier.code 0} true;
    assume $i1050 == 1;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i1051 := $i1022;
    goto $bb734;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i1048 == 1;
    goto $bb675;

  $bb723:
    assume {:verifier.code 0} true;
    assume $i1046 == 1;
    goto $bb675;

  $bb719:
    assume {:verifier.code 0} true;
    assume $i1044 == 1;
    goto $bb675;

  $bb715:
    assume {:verifier.code 0} true;
    assume $i1042 == 1;
    goto $bb675;

  $bb711:
    assume {:verifier.code 0} true;
    assume $i1040 == 1;
    goto $bb675;

  $bb707:
    assume {:verifier.code 0} true;
    assume $i1038 == 1;
    goto $bb675;

  $bb703:
    assume {:verifier.code 0} true;
    assume $i1036 == 1;
    goto $bb675;

  $bb699:
    assume {:verifier.code 0} true;
    assume $i1034 == 1;
    goto $bb675;

  $bb695:
    assume {:verifier.code 0} true;
    assume $i1032 == 1;
    goto $bb675;

  $bb691:
    assume {:verifier.code 0} true;
    assume $i1030 == 1;
    goto $bb675;

  $bb687:
    assume {:verifier.code 0} true;
    assume $i1028 == 1;
    goto $bb675;

  $bb683:
    assume {:verifier.code 0} true;
    assume $i1026 == 1;
    goto $bb675;

  $bb679:
    assume {:verifier.code 0} true;
    assume $i1024 == 1;
    goto $bb675;

  $bb674:
    assume {:verifier.code 0} true;
    assume $i1021 == 1;
    goto $bb675;

  $bb669:
    assume {:verifier.code 0} true;
    assume $i1016 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i3 := $i2;
    goto $bb6;

  $bb659:
    assume $i998 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} vslice_dummy_var_168 := printk.ref.i32(.str.74, $i936);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb653:
    assume $i951 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i952 := 15;
    goto $bb655;

  $bb651:
    assume $i949 == 1;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i953 := 14;
    goto $bb656;

  $bb649:
    assume $i947 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i954 := 10;
    goto $bb657;

  $bb647:
    assume $i945 == 1;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i955 := 11;
    goto $bb658;

  $bb644:
    assume $i935 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i1000 := $sext.i32.i64($i871);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1000, 8));
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.6, $p1001);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p1002, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i1004 := $load.i64($M.0, $p1003);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i1005 := $sext.i32.i64($i871);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1005, 8));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p1007 := $load.ref($M.6, $p1006);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($p1007, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i1009 := $load.i64($M.0, $p1008);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} vslice_dummy_var_166 := printk.ref.i64.i64(.str.73, $i1004, $i1009);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} free_hba($i871);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $i14 := 6;
    assume {:branchcond 1} true;
    goto $bb664, $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb664:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb664_dummy;

  $bb641:
    assume $i908 == 1;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i1011 := $zext.i32.i64($i875);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} vslice_dummy_var_165 := printk.ref.i64(.str.32, $i1011);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb637:
    assume {:verifier.code 0} true;
    assume $i906 == 1;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i907 := $i878;
    goto $bb640;

  $bb633:
    assume {:verifier.code 0} true;
    assume $i904 == 1;
    goto $bb581;

  $bb629:
    assume {:verifier.code 0} true;
    assume $i902 == 1;
    goto $bb581;

  $bb625:
    assume {:verifier.code 0} true;
    assume $i900 == 1;
    goto $bb581;

  $bb621:
    assume {:verifier.code 0} true;
    assume $i898 == 1;
    goto $bb581;

  $bb617:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb581;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i894 == 1;
    goto $bb581;

  $bb609:
    assume {:verifier.code 0} true;
    assume $i892 == 1;
    goto $bb581;

  $bb605:
    assume {:verifier.code 0} true;
    assume $i890 == 1;
    goto $bb581;

  $bb601:
    assume {:verifier.code 0} true;
    assume $i888 == 1;
    goto $bb581;

  $bb597:
    assume {:verifier.code 0} true;
    assume $i886 == 1;
    goto $bb581;

  $bb593:
    assume {:verifier.code 0} true;
    assume $i884 == 1;
    goto $bb581;

  $bb589:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb581;

  $bb585:
    assume {:verifier.code 0} true;
    assume $i880 == 1;
    goto $bb581;

  $bb580:
    assume {:verifier.code 0} true;
    assume $i877 == 1;
    goto $bb581;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i872 == 1;
    goto $bb4;

  $bb565:
    assume $i854 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} vslice_dummy_var_164 := printk.ref.i32(.str.74, $i792);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb559:
    assume $i807 == 1;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i808 := 15;
    goto $bb561;

  $bb557:
    assume $i805 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i809 := 14;
    goto $bb562;

  $bb555:
    assume $i803 == 1;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i810 := 10;
    goto $bb563;

  $bb553:
    assume $i801 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i811 := 11;
    goto $bb564;

  $bb550:
    assume $i791 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i856 := $sext.i32.i64($i727);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i856, 8));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p858 := $load.ref($M.6, $p857);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p858, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i860 := $load.i64($M.0, $p859);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i861 := $sext.i32.i64($i727);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i861, 8));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p863 := $load.ref($M.6, $p862);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p863, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i865 := $load.i64($M.0, $p864);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} vslice_dummy_var_162 := printk.ref.i64.i64(.str.73, $i860, $i865);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} free_hba($i727);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    $i14 := 5;
    assume {:branchcond 1} true;
    goto $bb570, $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb570:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb570_dummy;

  $bb547:
    assume $i764 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i867 := $zext.i32.i64($i731);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_161 := printk.ref.i64(.str.32, $i867);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i762 == 1;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i763 := $i734;
    goto $bb546;

  $bb539:
    assume {:verifier.code 0} true;
    assume $i760 == 1;
    goto $bb487;

  $bb535:
    assume {:verifier.code 0} true;
    assume $i758 == 1;
    goto $bb487;

  $bb531:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb487;

  $bb527:
    assume {:verifier.code 0} true;
    assume $i754 == 1;
    goto $bb487;

  $bb523:
    assume {:verifier.code 0} true;
    assume $i752 == 1;
    goto $bb487;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb487;

  $bb515:
    assume {:verifier.code 0} true;
    assume $i748 == 1;
    goto $bb487;

  $bb511:
    assume {:verifier.code 0} true;
    assume $i746 == 1;
    goto $bb487;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i744 == 1;
    goto $bb487;

  $bb503:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb487;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i740 == 1;
    goto $bb487;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb487;

  $bb491:
    assume {:verifier.code 0} true;
    assume $i736 == 1;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    assume $i733 == 1;
    goto $bb487;

  $bb481:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb4;

  $bb471:
    assume $i710 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} vslice_dummy_var_160 := printk.ref.i32(.str.74, $i648);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb465:
    assume $i663 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i664 := 15;
    goto $bb467;

  $bb463:
    assume $i661 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i665 := 14;
    goto $bb468;

  $bb461:
    assume $i659 == 1;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i666 := 10;
    goto $bb469;

  $bb459:
    assume $i657 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i667 := 11;
    goto $bb470;

  $bb456:
    assume $i647 == 1;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i712 := $sext.i32.i64($i583);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i712, 8));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.6, $p713);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p714, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i716 := $load.i64($M.0, $p715);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i717 := $sext.i32.i64($i583);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i717, 8));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p719 := $load.ref($M.6, $p718);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p719, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i721 := $load.i64($M.0, $p720);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_158 := printk.ref.i64.i64(.str.73, $i716, $i721);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} free_hba($i583);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i14 := 4;
    assume {:branchcond 1} true;
    goto $bb476, $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb476:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb476_dummy;

  $bb453:
    assume $i620 == 1;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i723 := $zext.i32.i64($i587);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_157 := printk.ref.i64(.str.32, $i723);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb449:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i619 := $i590;
    goto $bb452;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i616 == 1;
    goto $bb393;

  $bb441:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb393;

  $bb437:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb393;

  $bb433:
    assume {:verifier.code 0} true;
    assume $i610 == 1;
    goto $bb393;

  $bb429:
    assume {:verifier.code 0} true;
    assume $i608 == 1;
    goto $bb393;

  $bb425:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb393;

  $bb421:
    assume {:verifier.code 0} true;
    assume $i604 == 1;
    goto $bb393;

  $bb417:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb393;

  $bb413:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb393;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb393;

  $bb405:
    assume {:verifier.code 0} true;
    assume $i596 == 1;
    goto $bb393;

  $bb401:
    assume {:verifier.code 0} true;
    assume $i594 == 1;
    goto $bb393;

  $bb397:
    assume {:verifier.code 0} true;
    assume $i592 == 1;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    assume $i589 == 1;
    goto $bb393;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb4;

  $bb377:
    assume $i566 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_156 := printk.ref.i32(.str.74, $i504);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb371:
    assume $i519 == 1;
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i520 := 15;
    goto $bb373;

  $bb369:
    assume $i517 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i521 := 14;
    goto $bb374;

  $bb367:
    assume $i515 == 1;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i522 := 10;
    goto $bb375;

  $bb365:
    assume $i513 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i523 := 11;
    goto $bb376;

  $bb362:
    assume $i503 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i568 := $sext.i32.i64($i439);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i568, 8));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.6, $p569);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p570, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i572 := $load.i64($M.0, $p571);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i573 := $sext.i32.i64($i439);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i573, 8));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.6, $p574);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p575, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i577 := $load.i64($M.0, $p576);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_154 := printk.ref.i64.i64(.str.73, $i572, $i577);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} free_hba($i439);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $i14 := 3;
    assume {:branchcond 1} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb382:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb382_dummy;

  $bb359:
    assume $i476 == 1;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i579 := $zext.i32.i64($i443);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_153 := printk.ref.i64(.str.32, $i579);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i475 := $i446;
    goto $bb358;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i472 == 1;
    goto $bb299;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb299;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb299;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i466 == 1;
    goto $bb299;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i464 == 1;
    goto $bb299;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb299;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i460 == 1;
    goto $bb299;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb299;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb299;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb299;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb299;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb299;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i445 == 1;
    goto $bb299;

  $bb293:
    assume {:verifier.code 0} true;
    assume $i440 == 1;
    goto $bb4;

  $bb283:
    assume $i422 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_152 := printk.ref.i32(.str.74, $i360);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb277:
    assume $i375 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i376 := 15;
    goto $bb279;

  $bb275:
    assume $i373 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i377 := 14;
    goto $bb280;

  $bb273:
    assume $i371 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i378 := 10;
    goto $bb281;

  $bb271:
    assume $i369 == 1;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i379 := 11;
    goto $bb282;

  $bb268:
    assume $i359 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i424 := $sext.i32.i64($i295);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i424, 8));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.6, $p425);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p426, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i428 := $load.i64($M.0, $p427);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i429 := $sext.i32.i64($i295);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i429, 8));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.6, $p430);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p431, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i433 := $load.i64($M.0, $p432);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_150 := printk.ref.i64.i64(.str.73, $i428, $i433);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} free_hba($i295);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i14 := 2;
    assume {:branchcond 1} true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb288:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb288_dummy;

  $bb265:
    assume $i332 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i435 := $zext.i32.i64($i299);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_149 := printk.ref.i64(.str.32, $i435);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb261:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i331 := $i302;
    goto $bb264;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb205;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb205;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb205;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb205;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb205;

  $bb237:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb205;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb205;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb205;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb205;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb205;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb205;

  $bb213:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb205;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb205;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb4;

  $bb189:
    assume $i278 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_148 := printk.ref.i32(.str.74, $i216);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb183:
    assume $i231 == 1;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i232 := 15;
    goto $bb185;

  $bb181:
    assume $i229 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i233 := 14;
    goto $bb186;

  $bb179:
    assume $i227 == 1;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i234 := 10;
    goto $bb187;

  $bb177:
    assume $i225 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i235 := 11;
    goto $bb188;

  $bb174:
    assume $i215 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i280 := $sext.i32.i64($i151);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i280, 8));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.6, $p281);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p282, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i284 := $load.i64($M.0, $p283);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i151);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i285, 8));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.6, $p286);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p287, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i289 := $load.i64($M.0, $p288);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_146 := printk.ref.i64.i64(.str.73, $i284, $i289);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} free_hba($i151);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i14 := 1;
    assume {:branchcond 1} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb194:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb194_dummy;

  $bb171:
    assume $i188 == 1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i291 := $zext.i32.i64($i155);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_145 := printk.ref.i64(.str.32, $i291);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i187 := $i158;
    goto $bb170;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb111;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb111;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb111;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb111;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb111;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb111;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb111;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb111;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb111;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb111;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb111;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb111;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb111;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb4;

  $bb39:
    assume $i115 == 1;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_144 := printk.ref.i32(.str.74, $i42);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i71 == 1;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i72 := 15;
    goto $bb38;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i69 := 14;
    goto $bb35;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i66 := 10;
    goto $bb32;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i63 := 11;
    goto $bb29;

  $bb24:
    assume $i41 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i0);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i45, 8));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i50, 8));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_142 := printk.ref.i64.i64(.str.73, $i49, $i54);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} free_hba($i0);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume {:branchcond 1} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb22;

  $bb19:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb19_dummy;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i6);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_141 := printk.ref.i64(.str.32, $i12);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb13;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb11;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb11;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb11;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb11;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb11;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb11;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb11;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb11;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb11;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb11;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb11;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb11;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb11;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb4;

  $bb757_dummy:
    assume false;
    return;

  $bb662_last:
    assume {:verifier.code 0} true;
    $i1013 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7416;

  $bb664_dummy:
    assume false;
    return;

  $bb568_last:
    assume {:verifier.code 0} true;
    $i869 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7225;

  $bb570_dummy:
    assume false;
    return;

  $bb474_last:
    assume {:verifier.code 0} true;
    $i725 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7034;

  $bb476_dummy:
    assume false;
    return;

  $bb380_last:
    assume {:verifier.code 0} true;
    $i581 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6843;

  $bb382_dummy:
    assume false;
    return;

  $bb286_last:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6652;

  $bb288_dummy:
    assume false;
    return;

  $bb192_last:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6461;

  $bb194_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6225;

  $bb19_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.84, eisa);
    goto corral_source_split_6095;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 374839);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    return;
}



const cpqarray_remove_one_eisa: ref;

axiom cpqarray_remove_one_eisa == $sub.ref(0, 375871);

procedure cpqarray_remove_one_eisa($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.6, $CurrAddr;



implementation cpqarray_remove_one_eisa($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "cpqarray_remove_one_eisa:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref($i1, 8));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} cpqarray_remove_one($i0);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vslice_dummy_var_173 := printk.ref.i32(.str.69, $i0);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 376903);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 1} true;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 377935);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 378967);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 379999);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 381031);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 382063);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 383095);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 384127);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 385159);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 386191);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 387223);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 388255);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 389287);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 390319);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1197} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1198} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1199} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1200} __VERIFIER_assume($i4);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 391351);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 392383);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 393415);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 394447);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 395479);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1202} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1203} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1204} __VERIFIER_assume($i4);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 396511);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 397543);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 398575);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 399607);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 400639);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1207} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1209} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1210} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1211} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1212} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1213} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1214} __VERIFIER_assume($i7);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} __VERIFIER_assume($i11);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 401671);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 402703);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 403735);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 404767);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 405799);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 406831);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 407863);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 408895);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 409927);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1216} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1218} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1219} __VERIFIER_assume($i10);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 410959);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1220} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1221} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1222} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 411991);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1223} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1224} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 413023);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 414055);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1225} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1226} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 415087);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 416119);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 417151);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 418183);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.84, $M.92, $M.93, $M.16, $M.0, $M.9, $M.13, $M.14, $M.15, $M.7, $M.6, $M.83, $M.82, $M.81, $M.5, $M.121, $M.122;



implementation __SMACK_static_init()
{

  $bb0:
    $M.23 := 0;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1228} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1230} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1233} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1234} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1235} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1236} {:cexpr "ldvarg1"} boogie_si_record_i64(0);
    $M.39 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 1237} {:cexpr "ldvarg12"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1238} {:cexpr "ldvarg11"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1239} {:cexpr "ldvarg10"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1240} {:cexpr "ldvarg9"} boogie_si_record_i64(0);
    $M.45 := $0.ref;
    $M.46 := 0;
    call {:si_unique_call 1241} {:cexpr "ldvarg7"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1242} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1243} {:cexpr "ldvarg14"} boogie_si_record_i64(0);
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 1244} {:cexpr "ldvarg23"} boogie_si_record_i64(0);
    $M.59 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1245} {:cexpr "ldvarg21"} boogie_si_record_i64(0);
    $M.61 := 0;
    call {:si_unique_call 1246} {:cexpr "ldvarg20"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1247} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 1248} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := $0.ref;
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := 0;
    call {:si_unique_call 1249} {:cexpr "ldvarg27"} boogie_si_record_i64(0);
    $M.73 := 0;
    call {:si_unique_call 1250} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.75 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := 0;
    call {:si_unique_call 1251} {:cexpr "ldvarg34"} boogie_si_record_i64(0);
    $M.84 := $store.i32($M.84, eisa, 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.92 := $store.i32($M.92, cpqarray_pci_device_id, 4113);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(4, 1)), 70);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(12, 1)), 16472);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4113);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(4, 1)), 70);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(12, 1)), 16465);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4113);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(4, 1)), 70);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(12, 1)), 16464);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4096);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(4, 1)), 16);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(12, 1)), 16456);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4096);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(4, 1)), 16);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(12, 1)), 16448);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(4, 1)), 44560);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(12, 1)), 16436);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(4, 1)), 44560);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(12, 1)), 16435);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(4, 1)), 44560);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(12, 1)), 16434);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(4, 1)), 44560);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(12, 1)), 16433);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(4, 1)), 44560);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(8, 1)), 3601);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(12, 1)), 16432);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref(cpqarray_pci_device_id, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.93 := $store.ref($M.93, cpqarray_pci_driver, $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.30);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), cpqarray_pci_device_id);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), cpqarray_init_one);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), cpqarray_remove_one_pci);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref($add.ref($add.ref(cpqarray_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.16 := 0;
    call {:si_unique_call 1252} {:cexpr "nr_ctlr"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, ida_fops, ida_unlocked_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(8, 1)), ida_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(16, 1)), ida_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(64, 1)), ida_revalidate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(72, 1)), ida_getgeo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ida_fops, $mul.ref(0, 96)), $mul.ref(88, 1)), __this_module);
    $M.9 := $0.ref;
    $M.0 := $store.ref($M.0, smart4_access, smart4_submit_command);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart4_access, $mul.ref(0, 40)), $mul.ref(8, 1)), smart4_intr_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart4_access, $mul.ref(0, 40)), $mul.ref(16, 1)), smart4_fifo_full);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart4_access, $mul.ref(0, 40)), $mul.ref(24, 1)), smart4_intr_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart4_access, $mul.ref(0, 40)), $mul.ref(32, 1)), smart4_completed);
    $M.0 := $store.ref($M.0, smart2_access, smart2_submit_command);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2_access, $mul.ref(0, 40)), $mul.ref(8, 1)), smart2_intr_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2_access, $mul.ref(0, 40)), $mul.ref(16, 1)), smart2_fifo_full);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2_access, $mul.ref(0, 40)), $mul.ref(24, 1)), smart2_intr_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2_access, $mul.ref(0, 40)), $mul.ref(32, 1)), smart2_completed);
    $M.0 := $store.ref($M.0, smart2e_access, smart2e_submit_command);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2e_access, $mul.ref(0, 40)), $mul.ref(8, 1)), smart2e_intr_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2e_access, $mul.ref(0, 40)), $mul.ref(16, 1)), smart2e_fifo_full);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2e_access, $mul.ref(0, 40)), $mul.ref(24, 1)), smart2e_intr_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart2e_access, $mul.ref(0, 40)), $mul.ref(32, 1)), smart2e_completed);
    $M.0 := $store.ref($M.0, smart1_access, smart1_submit_command);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart1_access, $mul.ref(0, 40)), $mul.ref(8, 1)), smart1_intr_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart1_access, $mul.ref(0, 40)), $mul.ref(16, 1)), smart1_fifo_full);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart1_access, $mul.ref(0, 40)), $mul.ref(24, 1)), smart1_intr_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smart1_access, $mul.ref(0, 40)), $mul.ref(32, 1)), smart1_completed);
    $M.13 := $store.i32($M.13, products, 4198670);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(0, 24)), $mul.ref(8, 1)), .str.33);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(0, 24)), $mul.ref(16, 1)), smart1_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)), 20975886);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(8, 1)), .str.34);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(16, 1)), smart1_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)), 272634126);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(8, 1)), .str.35);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(16, 1)), smart1_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)), 541069582);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(8, 1)), .str.36);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(16, 1)), smart1_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)), 809505038);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(8, 1)), .str.37);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(16, 1)), smart2e_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)), 1076891153);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(8, 1)), .str.38);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(16, 1)), smart2_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)), 1076956689);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(8, 1)), .str.39);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(16, 1)), smart2_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)), 1077022225);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(8, 1)), .str.40);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(16, 1)), smart2_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)), 1077087761);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(8, 1)), .str.41);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(16, 1)), smart2_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)), 1077153297);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(8, 1)), .str.42);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(16, 1)), smart2_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)), 1077939729);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(8, 1)), .str.43);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(16, 1)), smart4_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)), 1078464017);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(8, 1)), .str.44);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(16, 1)), smart4_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)), 1078988305);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(8, 1)), .str.45);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(16, 1)), smart4_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)), 1079053841);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(8, 1)), .str.46);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(16, 1)), smart4_access);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)), 1079512593);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(8, 1)), .str.47);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(16, 1)), smart4_access);
    $M.7 := $store.ref($M.7, ida_gendisk, $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(0, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(1, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(2, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(3, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(4, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(5, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(6, 128)), $mul.ref(15, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(2, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(3, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(4, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(5, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(6, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(7, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(8, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(9, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(10, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(11, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(12, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(13, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(14, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(7, 128)), $mul.ref(15, 8)), $0.ref);
    $M.6 := $store.ref($M.6, hba, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(2, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(3, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(4, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(5, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(6, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(7, 8)), $0.ref);
    $M.0 := $store.i32($M.0, cpqarray_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(cpqarray_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(cpqarray_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), cpqarray_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cpqarray_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.83 := 0;
    call {:si_unique_call 1253} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1254} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1255} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1256} {:cexpr "ldv_mutex_cpqarray_mutex"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.33, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 4)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 4)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 6)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 6)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 6)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 6)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(2, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 6)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 6)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 6)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 6)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(5, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(7, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(8, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(5, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(7, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(5, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(8, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(12, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(13, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(15, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(12, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(13, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(15, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(17, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(12, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(13, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(11, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(5, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(12, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(13, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(14, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(12, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(13, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(15, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(12, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(13, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(14, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(15, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(17, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(12, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(13, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.121 := $store.i8($M.121, .str.24, 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.24, $mul.ref(0, 6)), $mul.ref(1, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.24, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.24, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.24, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.24, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.122 := $store.i8($M.122, .str.56, 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(2, 1)), 97);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(3, 1)), 47);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(4, 1)), 99);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(5, 1)), 37);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(6, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(8, 1)), 37);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.56, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(6, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(9, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(14, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    call {:si_unique_call 1257} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 419215);

procedure devirtbounce(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 420247);

procedure devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 421279);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1258} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 422311);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 423343);

procedure devirtbounce.4(funcPtr: ref, arg: i16, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i16, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 424375);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(ida_revalidate, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1259} $i2 := ida_revalidate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1260} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 425407);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 426439);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.8, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(do_ida_intr, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 1261} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1262} $i3 := do_ida_intr(arg, $p2);
    $r := $i3;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 427471);

procedure devirtbounce.8(funcPtr: ref, arg: i64, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i64, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 428503);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(smart4_intr_mask, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i4 == 1);
    $i3 := $eq.ref(smart2_intr_mask, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i3 == 1);
    $i2 := $eq.ref(smart2e_intr_mask, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i2 == 1);
    $i1 := $eq.ref(smart1_intr_mask, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1263} smart1_intr_mask(arg, arg1);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1264} smart2e_intr_mask(arg, arg1);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1265} smart2_intr_mask(arg, arg1);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1266} smart4_intr_mask(arg, arg1);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 429535);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(smart4_completed, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(smart4_intr_pending, $p0);
    assume {:branchcond $i23} true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(smart4_fifo_full, $p0);
    assume {:branchcond $i22} true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(smart2_completed, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(smart2_intr_pending, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(smart2_fifo_full, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(smart2e_completed, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(smart2e_intr_pending, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(smart2e_fifo_full, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(smart1_completed, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(smart1_intr_pending, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(smart1_fifo_full, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    call {:si_unique_call 1267} $i1 := smart1_fifo_full(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i14 == 1;
    call {:si_unique_call 1268} $i2 := smart1_intr_pending(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i15 == 1;
    call {:si_unique_call 1269} $i3 := smart1_completed(arg);
    $r := $i3;
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 1270} $i4 := smart2e_fifo_full(arg);
    $r := $i4;
    return;

  $bb6:
    assume $i17 == 1;
    call {:si_unique_call 1271} $i5 := smart2e_intr_pending(arg);
    $r := $i5;
    return;

  $bb7:
    assume $i18 == 1;
    call {:si_unique_call 1272} $i6 := smart2e_completed(arg);
    $r := $i6;
    return;

  $bb8:
    assume $i19 == 1;
    call {:si_unique_call 1273} $i7 := smart2_fifo_full(arg);
    $r := $i7;
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 1274} $i8 := smart2_intr_pending(arg);
    $r := $i8;
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 1275} $i9 := smart2_completed(arg);
    $r := $i9;
    return;

  $bb11:
    assume $i22 == 1;
    call {:si_unique_call 1276} $i10 := smart4_fifo_full(arg);
    $r := $i10;
    return;

  $bb12:
    assume $i23 == 1;
    call {:si_unique_call 1277} $i11 := smart4_intr_pending(arg);
    $r := $i11;
    return;

  $bb13:
    assume $i24 == 1;
    call {:si_unique_call 1278} $i12 := smart4_completed(arg);
    $r := $i12;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 430567);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(smart4_submit_command, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i4 == 1);
    $i3 := $eq.ref(smart2_submit_command, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i3 == 1);
    $i2 := $eq.ref(smart2e_submit_command, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i2 == 1);
    $i1 := $eq.ref(smart1_submit_command, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1279} smart1_submit_command(arg, arg1);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1280} smart2e_submit_command(arg, arg1);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1281} smart2_submit_command(arg, arg1);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1282} smart4_submit_command(arg, arg1);
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 431599);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 432631);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 433663);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 434695);

procedure devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 435727);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 436759);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 437791);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1283} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 438823);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.84, $M.92, $M.93, $M.16, $M.0, $M.9, $M.13, $M.14, $M.15, $M.7, $M.6, $M.83, $M.82, $M.81, $M.5, $M.121, $M.122, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1284} __SMACK_static_init();
    call {:si_unique_call 1285} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.0, $M.47, $M.62, $M.65, $M.73, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.84, $M.92, $M.93, $M.16, $M.9, $M.13, $M.14, $M.15, $M.7, $M.6, $M.83, $M.82, $M.81, $M.5, $M.121, $M.122, $CurrAddr, $M.10, $M.17, $M.8;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ida_ctlr_ioctl_loop_$bb61(in_$p223: ref, in_$i226: i32, in_$i227: i1) returns (out_$i226: i32, out_$i227: i1)
{

  entry:
    out_$i226, out_$i227 := in_$i226, in_$i227;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb63:
    assume {:verifier.code 0} true;
    assume out_$i227 == 1;
    goto $bb63_dummy;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 2);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.0, in_$p223);
    goto corral_source_split_810;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} schedule();
    goto corral_source_split_809;

  $bb63_dummy:
    call {:si_unique_call 1} out_$i226, out_$i227 := ida_ctlr_ioctl_loop_$bb61(in_$p223, out_$i226, out_$i227);
    return;

  exit:
    return;
}



procedure ida_ctlr_ioctl_loop_$bb61(in_$p223: ref, in_$i226: i32, in_$i227: i1) returns (out_$i226: i32, out_$i227: i1);



implementation getgeometry_loop_$bb31(in_$i0: i32, in_$p3: ref, in_$p6: ref, in_$p16: ref, in_$p21: ref, in_$p54: ref, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$p89: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$p94: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i8, in_$i141: i32, in_$i142: i1, in_$i58: i32, in_$i59: i32, in_$i143: i1, in_vslice_dummy_var_61: i32) returns (out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$p89: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$p94: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i8, out_$i141: i32, out_$i142: i1, out_$i58: i32, out_$i59: i32, out_$i143: i1, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p86, out_$i87, out_$i88, out_$p89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$p121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i58, out_$i59, out_$i143, out_vslice_dummy_var_61 := in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$p84, in_$p86, in_$i87, in_$i88, in_$p89, in_$p91, in_$i92, in_$i93, in_$p94, in_$p96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$p107, in_$i108, in_$p110, in_$i111, in_$i112, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$p121, in_$i122, in_$i123, in_$p124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i58, in_$i59, in_$i143, in_vslice_dummy_var_61;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  $bb45:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i138, out_$i139;
    goto $bb45_dummy;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i142 := $ugt.i32(out_$i141, out_$i138);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i140);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i8($M.0, in_$p54);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i139 := $add.i32(out_$i59, 1);
    call {:si_unique_call 347} {:cexpr "log_unit"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_1924;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  $bb37:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := out_$i58;
    goto $bb44;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i137;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i58, 1);
    call {:si_unique_call 346} {:cexpr "log_index"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_1921;

  $bb39:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p136, out_$i135);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(20, 1));
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i135 := $or.i32(out_$i132, out_$i134);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p21, $mul.ref(0, 484)), $mul.ref(56, 1));
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, out_$p131);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(20, 1));
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, out_$i129);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i129 := $or.i32(out_$i126, out_$i128);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p21, $mul.ref(0, 484)), $mul.ref(56, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p124, out_$i123);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i123 := $or.i32(out_$i120, out_$i122);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p21, $mul.ref(0, 484)), $mul.ref(48, 1));
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(16, 1));
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p118, out_$i117);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(40, 1));
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.0, out_$p115);
    goto corral_source_split_1895;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p21, $mul.ref(0, 484)), $mul.ref(8, 1));
    goto corral_source_split_1894;

  $bb41:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 1);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} out_$i111 := sendcmd(80, in_$i0, out_$p110, 476, 0, 0, out_$i59);
    call {:si_unique_call 344} {:cexpr "ret_code"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(in_$p21);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_vslice_dummy_var_61 := printk.ref.i32.i32.i32.i32(.str.13, in_$i0, out_$i59, out_$i106, out_$i108);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.0, out_$p107);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(4, 1));
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, out_$p105);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p104, out_$i103);
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i103 := $or.i32(out_$i101, out_$i102);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i102 := $shl.i32(1, out_$i59);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(12, 1));
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, out_$i98);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(16, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p96);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p94, out_$i93);
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(12, 1));
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.0, out_$p91);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p89, out_$i88);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(8, 1));
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i87);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i16($M.0, out_$p86);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p84, out_$i83);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(4, 1));
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p81, out_$i80);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 24)), $mul.ref(0, 1));
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i16.i32(out_$i79);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i16($M.0, out_$p78);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i59);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_1846;

  $bb38:
    assume out_$i73 == 1;
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 1);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$i72 := sendcmd(16, in_$i0, out_$p71, 25, 0, 0, out_$i59);
    call {:si_unique_call 341} {:cexpr "ret_code"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_1841;

  $bb36:
    assume out_$i70 == 1;
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 2);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.0, out_$p67);
    goto corral_source_split_1836;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p16, $mul.ref(0, 1036)), $mul.ref(0, 1));
    goto corral_source_split_1835;

  $bb34:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i59;
    assume true;
    goto $bb34;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_$i62 := sendcmd(18, in_$i0, out_$p60, out_$i61, 0, 0, out_$i59);
    call {:si_unique_call 338} {:cexpr "ret_code"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(1024);
    goto corral_source_split_1826;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p16);
    goto corral_source_split_1825;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb47:
    assume out_$i143 == 1;
    goto corral_source_split_1931;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i143 := $ule.i32(out_$i59, 15);
    goto corral_source_split_1823;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p86, out_$i87, out_$i88, out_$p89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$p121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i58, out_$i59, out_$i143, out_vslice_dummy_var_61 := getgeometry_loop_$bb31(in_$i0, in_$p3, in_$p6, in_$p16, in_$p21, in_$p54, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p86, out_$i87, out_$i88, out_$p89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p110, out_$i111, out_$i112, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$p121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i58, out_$i59, out_$i143, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure getgeometry_loop_$bb31(in_$i0: i32, in_$p3: ref, in_$p6: ref, in_$p16: ref, in_$p21: ref, in_$p54: ref, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$p89: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$p94: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i8, in_$i141: i32, in_$i142: i1, in_$i58: i32, in_$i59: i32, in_$i143: i1, in_vslice_dummy_var_61: i32) returns (out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$p89: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$p94: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i8, out_$i141: i32, out_$i142: i1, out_$i58: i32, out_$i59: i32, out_$i143: i1, out_vslice_dummy_var_61: i32);
  modifies $M.0, $M.8, $CurrAddr;



implementation sendcmd_loop_$bb8(in_$i1: i32, in_$p9: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$i85: i64, in_$i86: i1, in_$i77: i64, in_vslice_dummy_var_63: i32) returns (out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$i85: i64, out_$i86: i1, out_$i77: i64, out_vslice_dummy_var_63: i32)
{

  entry:
    out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i77, out_vslice_dummy_var_63 := in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i77, in_vslice_dummy_var_63;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;

  $bb14:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i85;
    goto $bb14_dummy;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i64(out_$i77, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} out_vslice_dummy_var_63 := printk.ref.i32(.str.15, in_$i1);
    goto corral_source_split_2042;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __const_udelay(42950);
    goto corral_source_split_2041;

  $bb11:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i64(out_$i82, 0);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    call {:si_unique_call 362} out_$i82 := devirtbounce.10(out_$p81, in_$p9);
    call {:si_unique_call 363} {:cexpr "temp"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p79);
    goto corral_source_split_2021;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p9, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i77, out_vslice_dummy_var_63 := sendcmd_loop_$bb8(in_$i1, in_$p9, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i77, out_vslice_dummy_var_63);
    return;

  exit:
    return;
}



procedure sendcmd_loop_$bb8(in_$i1: i32, in_$p9: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$i85: i64, in_$i86: i1, in_$i77: i64, in_vslice_dummy_var_63: i32) returns (out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$i85: i64, out_$i86: i1, out_$i77: i64, out_vslice_dummy_var_63: i32);
  modifies $M.0;



implementation cmd_alloc_loop_$bb11(in_$p0: ref, in_$p12: ref, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i1, in_$i17: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32) returns (out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i1, out_$i17: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i17, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30 := in_$p18, in_$i19, in_$i20, in_$i21, in_$i17, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i20;
    goto $bb14_dummy;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 128);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i64.i32(out_$i19);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} out_$i19 := find_first_zero_bit(out_$p18, 128);
    call {:si_unique_call 386} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, in_$p12);
    goto corral_source_split_2120;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_2119;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i17;
    assume true;
    goto $bb12;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$i28 := test_and_set_bit(out_$i22, out_$p27);
    call {:si_unique_call 389} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p24, $mul.ref(out_$i26, 8));
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$i25 := $sdiv.i32(out_$i17, 64);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(576, 1));
    goto corral_source_split_2128;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i17, 63);
    goto corral_source_split_2127;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$i17, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30 := cmd_alloc_loop_$bb11(in_$p0, in_$p12, out_$p18, out_$i19, out_$i20, out_$i21, out_$i17, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure cmd_alloc_loop_$bb11(in_$p0: ref, in_$p12: ref, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i1, in_$i17: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32) returns (out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i1, out_$i17: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32);



implementation pollcomplete_loop_$bb1(in_$i0: i32, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i1: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i1 := in_$i2, in_$p3, in_$p4, in_$p6, in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  $bb7:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i17;
    goto $bb7_dummy;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, 0);
    goto corral_source_split_2187;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i1, 1);
    call {:si_unique_call 400} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2186;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __const_udelay(42950);
    goto corral_source_split_2182;

  $bb3:
    assume out_$i14 == 1;
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i13;
    assume true;
    goto $bb3;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i64.i32(out_$i12);
    call {:si_unique_call 398} {:cexpr "done"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    call {:si_unique_call 396} out_$i12 := devirtbounce.10(out_$p8, out_$p11);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i9, 8));
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(in_$i0);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(32, 1));
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$p4 := $load.ref($M.6, out_$p3);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i2, 8));
    goto corral_source_split_2170;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(in_$i0);
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i1 := pollcomplete_loop_$bb1(in_$i0, out_$i2, out_$p3, out_$p4, out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i1);
    return;

  exit:
    return;
}



procedure pollcomplete_loop_$bb1(in_$i0: i32, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i1: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i1: i32);
  modifies $M.0;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation start_io_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p5: ref, in_vslice_dummy_var_68: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p5: ref, out_vslice_dummy_var_68: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p5, out_vslice_dummy_var_68 := in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p14, in_$i15, in_$i16, in_$p17, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p5, in_vslice_dummy_var_68;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, in_$p1);
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} addQ(out_$p21, out_$p5);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    call {:si_unique_call 518} devirtbounce.11(out_$p20, in_$p0, out_$p5);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p17, out_$i16);
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i15, 1);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_vslice_dummy_var_68 := removeQ(out_$p12, out_$p5);
    goto corral_source_split_2552;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_2551;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    call {:si_unique_call 515} out_$i10 := devirtbounce.10(out_$p9, in_$p0);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_2545;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 824)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p5, out_vslice_dummy_var_68 := start_io_loop_$bb4(in_$p0, in_$p1, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p5, out_vslice_dummy_var_68);
    return;

  exit:
    return;
}



procedure start_io_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p5: ref, in_vslice_dummy_var_68: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p5: ref, out_vslice_dummy_var_68: ref);
  modifies $M.0;



implementation cpqarray_register_ctlr_loop_$bb49(in_$i0: i32, in_$i260: i64, in_$i261: i64, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i266: i64, in_$p268: ref, in_$i269: i32, in_$i270: i1, in_$i259: i32) returns (out_$i260: i64, out_$i261: i64, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i266: i64, out_$p268: ref, out_$i269: i32, out_$i270: i1, out_$i259: i32)
{

  entry:
    out_$i260, out_$i261, out_$p263, out_$p264, out_$i265, out_$i266, out_$p268, out_$i269, out_$i270, out_$i259 := in_$i260, in_$i261, in_$p263, in_$p264, in_$i265, in_$i266, in_$p268, in_$i269, in_$i270, in_$i259;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  $bb51:
    assume out_$i270 == 1;
    assume {:verifier.code 0} true;
    out_$i259 := out_$i269;
    goto $bb51_dummy;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i270 := $ne.i32(out_$i259, 0);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i269 := $sub.i32(out_$i259, 1);
    call {:si_unique_call 700} {:cexpr "j"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p268, $0.ref);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(out_$i266, 128)), $mul.ref(out_$i265, 8));
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i266 := $sext.i32.i64(in_$i0);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i265 := $sext.i32.i64(out_$i259);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} put_disk(out_$p264);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p264 := $load.ref($M.7, out_$p263);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(out_$i261, 128)), $mul.ref(out_$i260, 8));
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i261 := $sext.i32.i64(in_$i0);
    goto corral_source_split_3918;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i259);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i260, out_$i261, out_$p263, out_$p264, out_$i265, out_$i266, out_$p268, out_$i269, out_$i270, out_$i259 := cpqarray_register_ctlr_loop_$bb49(in_$i0, out_$i260, out_$i261, out_$p263, out_$p264, out_$i265, out_$i266, out_$p268, out_$i269, out_$i270, out_$i259);
    return;

  exit:
    return;
}



procedure cpqarray_register_ctlr_loop_$bb49(in_$i0: i32, in_$i260: i64, in_$i261: i64, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i266: i64, in_$p268: ref, in_$i269: i32, in_$i270: i1, in_$i259: i32) returns (out_$i260: i64, out_$i261: i64, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i266: i64, out_$p268: ref, out_$i269: i32, out_$i270: i1, out_$i259: i32);
  modifies $M.7;



implementation cpqarray_register_ctlr_loop_$bb9(in_$i0: i32, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i63: i32, in_$i64: i1, in_$i48: i32, in_$i65: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i63: i32, out_$i64: i1, out_$i48: i32, out_$i65: i32)
{

  entry:
    out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i48, out_$i65 := in_$p49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i63, in_$i64, in_$i48, in_$i65;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;

  $bb15:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i63;
    goto $bb15_dummy;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i63;
    assume true;
    goto $bb15;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i64 := $sle.i32(out_$i63, 15);
    goto corral_source_split_3657;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i48, 1);
    call {:si_unique_call 675} {:cexpr "j"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3656;

  $bb12:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i48;
    assume true;
    goto $bb12;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i59, 0);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.7, out_$p57);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(out_$i55, 128)), $mul.ref(out_$i54, 8));
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(in_$i0);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i48);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p53, out_$p49);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(ida_gendisk, $mul.ref(0, 1024)), $mul.ref(out_$i51, 128)), $mul.ref(out_$i50, 8));
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(in_$i0);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i48);
    goto corral_source_split_3639;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} out_$p49 := alloc_disk(16);
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i48, out_$i65 := cpqarray_register_ctlr_loop_$bb9(in_$i0, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i48, out_$i65);
    return;

  exit:
    return;
}



procedure cpqarray_register_ctlr_loop_$bb9(in_$i0: i32, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i63: i32, in_$i64: i1, in_$i48: i32, in_$i65: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i63: i32, out_$i64: i1, out_$i48: i32, out_$i65: i32);
  modifies $M.7;



implementation do_ida_intr_loop_$bb21(in_$p2: ref, in_$i29: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p44: ref, in_$p57: ref) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p44: ref, out_$p57: ref)
{

  entry:
    out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57 := in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p44, in_$p57;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  $bb27:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p44 := out_$p46;
    goto $bb27_dummy;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p46;
    assume true;
    goto $bb27;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, in_$i29);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.17, out_$p54);
    goto corral_source_split_4821;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p46, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4820;

  $bb24:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p46;
    assume true;
    goto $bb24;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i49, out_$i50);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.17, out_$p45);
    goto corral_source_split_4806;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57 := do_ida_intr_loop_$bb21(in_$p2, in_$i29, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57);
    return;

  exit:
    return;
}



procedure do_ida_intr_loop_$bb21(in_$p2: ref, in_$i29: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p44: ref, in_$p57: ref) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p44: ref, out_$p57: ref);



implementation do_ida_intr_loop_$bb10(in_$p2: ref, in_$p23: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p44: ref, in_$p57: ref, in_$p43: ref, in_$p53: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i1, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i28: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: ref) returns (out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p44: ref, out_$p57: ref, out_$p43: ref, out_$p53: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i1, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i28: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: ref)
{

  entry:
    out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57, out_$p43, out_$p53, out_$p58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i28, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p44, in_$p57, in_$p43, in_$p53, in_$p58, in_$i59, in_$i60, in_$p61, in_$i63, in_$i64, in_$p67, in_$i68, in_$i69, in_$i70, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i28, in_vslice_dummy_var_107, in_vslice_dummy_var_108;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;

  $bb15:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i38;
    goto $bb15_dummy;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    call {:si_unique_call 781} {:cexpr "a"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_4790;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, in_$p23);
    call {:si_unique_call 779} out_$i37 := devirtbounce.10(out_$p36, in_$p2);
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_4789;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_vslice_dummy_var_107 := printk.ref.i64(.str.58, out_$i34);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i28);
    goto corral_source_split_4786;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, 0);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4780;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, $sub.i32(0, 4));
    call {:si_unique_call 777} {:cexpr "a"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} cmd_free(in_$p2, out_$p53, 1);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} complete_command(out_$p53, 0);
    goto corral_source_split_4847;

  $bb37:
    assume out_$i76 == 1;
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 0);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.17, out_$p74);
    goto corral_source_split_4843;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4842;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, out_$p73, 16);
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4839;

  $bb34:
    assume out_$i70 == 1;
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.17, out_$p67);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4833;

  $bb31:
    assume out_$i64 == 1;
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i28, 3);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_108 := removeQ(out_$p61, out_$p53);
    goto corral_source_split_4828;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4827;

  $bb29:
    assume out_$i60 == 1;
    goto corral_source_split_4826;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, out_$i29);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.17, out_$p58);
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4816;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4815;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p43;
    goto $bb25;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p52;
    goto $bb25;

  $bb23:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p46;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i49, out_$i50);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 824)), $mul.ref(552, 1));
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.17, out_$p45);
    goto corral_source_split_4806;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 328)), $mul.ref(304, 1));
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57 := do_ida_intr_loop_$bb21(in_$p2, out_$i29, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p31;
    goto $bb21;

  $bb27:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p44 := out_$p46;
    assume false;
    return;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p46;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, out_$i29);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.17, out_$p54);
    goto corral_source_split_4821;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p46, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4820;

  $bb24:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume out_$i42 == 1;
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p31;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, out_$i29);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.17, out_$p40);
    goto corral_source_split_4796;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p31, $mul.ref(0, 328)), $mul.ref(284, 1));
    goto corral_source_split_4795;

  $bb13:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb20;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p57;
    goto $bb20;

  $bb28:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4824;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb33;

  $bb41:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, out_$p80, 2);
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4856;

  $bb40:
    assume out_$i79 == 1;
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.17, out_$p77);
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p53, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_4851;

  $bb38:
    assume !(out_$i76 == 1);
    goto corral_source_split_4850;

  $bb30:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57, out_$p43, out_$p53, out_$p58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i28, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := do_ida_intr_loop_$bb10(in_$p2, in_$p23, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p44, out_$p57, out_$p43, out_$p53, out_$p58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i28, out_vslice_dummy_var_107, out_vslice_dummy_var_108);
    return;

  exit:
    return;
}



procedure do_ida_intr_loop_$bb10(in_$p2: ref, in_$p23: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p44: ref, in_$p57: ref, in_$p43: ref, in_$p53: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i1, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i28: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: ref) returns (out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p44: ref, out_$p57: ref, out_$p43: ref, out_$p53: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i1, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i28: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: ref);
  modifies $M.0, $M.17;



implementation do_ida_request_loop_$bb21(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$i49: i32, in_$i54: i32, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i32, in_$i84: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i56: i32) returns (out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i32, out_$i84: i64, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i56: i32)
{

  entry:
    out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56 := in_$i57, in_$p59, in_$i60, in_$i61, in_$p65, in_$p66, in_$i67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i77, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p88, in_$i89, in_$i90, in_$i56;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  $bb23:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i89;
    goto $bb23_dummy;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, in_$i49);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i56, 1);
    call {:si_unique_call 813} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, out_$i83);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i84, 8)), $mul.ref(4, 1));
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i64.i32(out_$i82);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} out_$i82 := pci_map_page(out_$p71, out_$p69, out_$i76, out_$i81, in_$i54);
    call {:si_unique_call 812} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i32.i64(out_$i80);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.19, out_$p79);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i77, 40)), $mul.ref(20, 1));
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i75);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.20, out_$p74);
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i72, 40)), $mul.ref(16, 1));
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$p69 := sg_page(out_$p68);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p66, $mul.ref(out_$i67, 40));
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i60);
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i61, 8)), $mul.ref(0, 1));
    goto corral_source_split_4966;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.19, out_$p59);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i57, 40)), $mul.ref(20, 1));
    goto corral_source_split_4963;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56 := do_ida_request_loop_$bb21(in_$p1, in_$p4, in_$p17, in_$i49, in_$i54, out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56);
    return;

  exit:
    return;
}



procedure do_ida_request_loop_$bb21(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$i49: i32, in_$i54: i32, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i32, in_$i84: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i56: i32) returns (out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i32, out_$i84: i64, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i56: i32);
  modifies $M.0;



implementation do_ida_request_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} do_ida_request_loop_$bb10();
    return;

  exit:
    return;
}



procedure do_ida_request_loop_$bb10();



implementation do_ida_request_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i8, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i42: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i32, in_$i84: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i56: i32, in_$i91: i8, in_$p94: ref, in_$i95: i32, in_$i96: i16, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p106: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i8, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i42: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i32, out_$i84: i64, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i56: i32, out_$i91: i8, out_$p94: ref, out_$i95: i32, out_$i96: i16, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p106: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56, out_$i91, out_$p94, out_$i95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p106, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126 := in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i57, in_$p59, in_$i60, in_$i61, in_$p65, in_$p66, in_$i67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i77, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p88, in_$i89, in_$i90, in_$i56, in_$i91, in_$p94, in_$i95, in_$i96, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p106, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p121, in_$i122, in_$p123, in_$p124, in_$i125, in_$i126;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb32:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$p8 := out_$p124;
    goto $bb32_dummy;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i64(out_$i125, 0);
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i125 := $p2i.ref.i64(out_$p124);
    goto corral_source_split_5033;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} out_$p124 := blk_peek_request(in_$p0);
    goto corral_source_split_5032;

  $bb30:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, out_$i122);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(668, 1));
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    goto corral_source_split_5028;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5027;

  $bb29:
    assume out_$i120 == 1;
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$i120 := $ugt.i32(out_$i117, out_$i119);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, out_$p118);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(668, 1));
    goto corral_source_split_5022;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_5021;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p115, out_$i114);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i113, 1);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(664, 1));
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} addQ(out_$p111, out_$p17);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(544, 1));
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, 0);
    goto corral_source_split_5012;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(320, 1));
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p109, 48);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p106, 32);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5005;

  $bb26:
    assume out_$i103 == 1;
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 0);
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 1);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_5000;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p8, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p99, out_$i96);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i16(out_$i95);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i95 := blk_rq_sectors(out_$p8);
    call {:si_unique_call 815} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p94, out_$i91);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_4993;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i32.i8(out_$i49);
    goto corral_source_split_4992;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb20;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume !(out_$i90 == 1);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, out_$i49);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i56, 1);
    call {:si_unique_call 813} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, out_$i83);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i84, 8)), $mul.ref(4, 1));
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i64.i32(out_$i82);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} out_$i82 := pci_map_page(out_$p71, out_$p69, out_$i76, out_$i81, out_$i54);
    call {:si_unique_call 812} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i32.i64(out_$i80);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.19, out_$p79);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i77, 40)), $mul.ref(20, 1));
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i75);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.20, out_$p74);
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i72, 40)), $mul.ref(16, 1));
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$p69 := sg_page(out_$p68);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p66, $mul.ref(out_$i67, 40));
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i60);
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i61, 8)), $mul.ref(0, 1));
    goto corral_source_split_4966;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.19, out_$p59);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 1280)), $mul.ref(out_$i57, 40)), $mul.ref(20, 1));
    goto corral_source_split_4963;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56 := do_ida_request_loop_$bb21(in_$p1, in_$p4, out_$p17, out_$i49, out_$i54, out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i56 := 0;
    goto $bb21;

  $bb23:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i89;
    assume false;
    return;

  $bb18:
    assume out_$i55 == 1;
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(0, out_$i49);
    goto corral_source_split_4956;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  $bb16:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := 1;
    goto $bb17;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i54 := 2;
    goto $bb17;

  $bb15:
    assume out_$i53 == 1;
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i51, 1);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p8, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i49 := blk_rq_map_sg(in_$p0, out_$p8, out_$p48);
    call {:si_unique_call 809} {:cexpr "seg"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} sg_init_table(out_$p47, 32);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p46, out_$p8);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(312, 1));
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i42);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i64.i32(out_$i41);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} out_$i41 := blk_rq_pos(out_$p8);
    call {:si_unique_call 806} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i39);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 272);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(276, 1));
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p36, 68);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p34, out_$i32);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i64.i8(out_$i31);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i31 := $sdiv.i64(out_$i30, 24);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i64(out_$i27, out_$i29);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(112, 1));
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p8, $mul.ref(0, 376)), $mul.ref(184, 1));
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i21);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p4, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_4915;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} blk_start_request(out_$p8);
    goto corral_source_split_4914;

  $bb13:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i18, 0);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_4909;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$p17 := cmd_alloc(in_$p4, 1);
    goto corral_source_split_4908;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_$i15 := ldv__builtin_expect(out_$i14, 0);
    call {:si_unique_call 801} {:cexpr "tmp"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i1.i32(out_$i12);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$i12 := $ugt.i32(out_$i11, 32);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i10);
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i16($M.0, out_$p9);
    goto corral_source_split_4898;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 376)), $mul.ref(232, 1));
    goto corral_source_split_4897;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5009;

  $bb27:
    assume !(out_$i103 == 1);
    goto corral_source_split_5008;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56, out_$i91, out_$p94, out_$i95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p106, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126 := do_ida_request_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$p59, out_$i60, out_$i61, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p88, out_$i89, out_$i90, out_$i56, out_$i91, out_$p94, out_$i95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p106, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126);
    return;

  exit:
    return;
}



procedure do_ida_request_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i8, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i42: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i32, in_$i84: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i56: i32, in_$i91: i8, in_$p94: ref, in_$i95: i32, in_$i96: i16, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p106: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i8, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i42: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i32, out_$i84: i64, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i56: i32, out_$i91: i8, out_$p94: ref, out_$i95: i32, out_$i96: i16, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p106: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1);
  modifies $M.0, $M.8, $CurrAddr;



implementation sg_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb7();



implementation sg_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb3();



implementation dma_map_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_page_loop_$bb3();



implementation complete_command_loop_$bb22(in_$p0: ref, in_$i103: i32, in_$p106: ref, in_$p111: ref, in_$i112: i32, in_$i113: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p122: ref, in_$i123: i32, in_$i124: i64, in_$i125: i64, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$i132: i32, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i110: i32) returns (out_$p111: ref, out_$i112: i32, out_$i113: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p122: ref, out_$i123: i32, out_$i124: i64, out_$i125: i64, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$i132: i32, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i110: i32)
{

  entry:
    out_$p111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p122, out_$i123, out_$i124, out_$i125, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i110 := in_$p111, in_$i112, in_$i113, in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$p122, in_$i123, in_$i124, in_$i125, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i110;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  $bb24:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i132;
    goto $bb24_dummy;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i135 := $sgt.i32(out_$i134, out_$i132);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(out_$i133);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.17, in_$p106);
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i110, 1);
    call {:si_unique_call 880} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} pci_unmap_page(out_$p117, out_$i124, out_$i131, in_$i103);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i32.i64(out_$i130);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.17, out_$p129);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i125, 8)), $mul.ref(0, 1));
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i110);
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i32.i64(out_$i123);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.17, out_$p122);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(12, 1)), $mul.ref(out_$i118, 8)), $mul.ref(4, 1));
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i110);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 824)), $mul.ref(48, 1));
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.6, out_$p114);
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i113, 8));
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i112);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.17, out_$p111);
    goto corral_source_split_5332;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 328)), $mul.ref(288, 1));
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p122, out_$i123, out_$i124, out_$i125, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i110 := complete_command_loop_$bb22(in_$p0, in_$i103, in_$p106, out_$p111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p122, out_$i123, out_$i124, out_$i125, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i110);
    return;

  exit:
    return;
}



procedure complete_command_loop_$bb22(in_$p0: ref, in_$i103: i32, in_$p106: ref, in_$p111: ref, in_$i112: i32, in_$i113: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p122: ref, in_$i123: i32, in_$i124: i64, in_$i125: i64, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$i132: i32, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i110: i32) returns (out_$p111: ref, out_$i112: i32, out_$i113: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p122: ref, out_$i123: i32, out_$i124: i64, out_$i125: i64, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$i132: i32, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i110: i32);



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i64, in_$i151: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i64, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i64, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i64, in_vslice_dummy_var_127: i64, in_vslice_dummy_var_128: i64, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i64, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i64, out_$i151: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i64, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i64, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i64, out_vslice_dummy_var_127: i64, out_vslice_dummy_var_128: i64, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i64, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i64)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$p25, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$p72, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i23, in_$i24, in_$p25, in_$i27, in_$i28, in_$p29, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i69, in_$i70, in_$p71, in_$p72, in_$i74, in_$i75, in_$p76, in_$p77, in_$i79, in_$i80, in_$p81, in_$i83, in_$i84, in_$p85, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$p135, in_$p136, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$p143, in_$i144, in_$p145, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$i195, in_$i196, in_$p197, in_$i199, in_$i200, in_$p201, in_$i203, in_$i204, in_$p205, in_$p206, in_$i207, in_$i208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i241, in_$i242, in_$p243, in_$i245, in_$i246, in_$p247, in_$i249, in_$i250, in_$p251, in_$p252, in_$i253, in_$i254, in_$p255, in_$i256, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 956} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb56_dummy;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb23:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_116 := smart2_fifo_full(out_$p21);
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$p21 := $M.32;
    goto corral_source_split_5523;

  $bb38:
    assume out_$i20 == 1;
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 1);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i19 := $M.23;
    goto corral_source_split_5519;

  $bb36:
    assume out_$i18 == 1;
    goto corral_source_split_5518;

  $bb34:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb25:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} out_$i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i12);
    call {:si_unique_call 959} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i12);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i11 == 1;
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i10 := $M.23;
    goto corral_source_split_5497;

  $bb20:
    assume out_$i9 == 1;
    goto corral_source_split_5496;

  $bb18:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb43:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_117 := smart2_intr_pending(out_$p25);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$p25 := $M.33;
    goto corral_source_split_5528;

  $bb42:
    assume out_$i24 == 1;
    goto corral_source_split_5527;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 1);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i23 := $M.23;
    goto corral_source_split_5515;

  $bb35:
    assume !(out_$i17 == 1);
    goto corral_source_split_5514;

  $bb46:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5535;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_118 := smart2_completed(out_$p29);
    goto corral_source_split_5534;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$p29 := $M.34;
    goto corral_source_split_5533;

  $bb45:
    assume out_$i28 == 1;
    goto corral_source_split_5532;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i27 := $M.23;
    goto corral_source_split_5503;

  $bb27:
    assume out_$i14 == 1;
    goto corral_source_split_5502;

  $bb26:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb49:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} smart2_submit_command(out_$p33, out_$p34);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$p34 := $M.36;
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$p33 := $M.35;
    goto corral_source_split_5538;

  $bb48:
    assume out_$i32 == 1;
    goto corral_source_split_5537;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i31 := $M.23;
    goto corral_source_split_5507;

  $bb29:
    assume out_$i15 == 1;
    goto corral_source_split_5506;

  $bb28:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb52:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} smart2_intr_mask(out_$p37, out_$i38);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i38 := $M.38;
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$p37 := $M.37;
    goto corral_source_split_5544;

  $bb51:
    assume out_$i36 == 1;
    goto corral_source_split_5543;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 1);
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$i35 := $M.23;
    goto corral_source_split_5511;

  $bb31:
    assume out_$i16 == 1;
    goto corral_source_split_5510;

  $bb30:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb33;

  $bb58:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.29 := out_$i54;
    call {:si_unique_call 975} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, 1);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i53 := $M.29;
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5575;

  SeqInstr_48:
    goto corral_source_split_5574;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_vslice_dummy_var_119 := ida_release(out_$p50, out_$i51);
    goto SeqInstr_47;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i51 := $M.40;
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$p50 := $M.39;
    goto corral_source_split_5572;

  $bb73:
    assume out_$i49 == 1;
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 2);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$i48 := $M.24;
    goto corral_source_split_5568;

  $bb71:
    assume out_$i47 == 1;
    goto corral_source_split_5567;

  $bb69:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb60:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} out_$i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i41);
    call {:si_unique_call 972} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume out_$i40 == 1;
    goto corral_source_split_5549;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i39 := $M.24;
    goto corral_source_split_5493;

  $bb19:
    assume !(out_$i8 == 1);
    goto corral_source_split_5492;

  $bb81:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5597;

  SeqInstr_54:
    goto corral_source_split_5596;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} out_vslice_dummy_var_121 := ida_ioctl(out_$p64, out_$i65, out_$i66, out_$i67);
    goto SeqInstr_53;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$i67 := $M.44;
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i66 := $M.43;
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i65 := $M.42;
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$p64 := $M.41;
    goto corral_source_split_5592;

  $bb80:
    assume out_$i63 == 1;
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_5589;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i62 := $M.24;
    goto corral_source_split_5588;

  $bb78:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5586;

  SeqInstr_51:
    goto corral_source_split_5585;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_vslice_dummy_var_120 := ida_ioctl(out_$p57, out_$i58, out_$i59, out_$i60);
    goto SeqInstr_50;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i60 := $M.44;
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$i59 := $M.43;
    goto corral_source_split_5583;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i58 := $M.42;
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p57 := $M.41;
    goto corral_source_split_5581;

  $bb77:
    assume out_$i56 == 1;
    goto corral_source_split_5580;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 1);
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$i55 := $M.24;
    goto corral_source_split_5564;

  $bb70:
    assume !(out_$i46 == 1);
    goto corral_source_split_5563;

  $bb87:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_vslice_dummy_var_123 := ida_getgeo(out_$p76, out_$p77);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p77 := $M.45;
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$p76 := $M.41;
    goto corral_source_split_5609;

  $bb86:
    assume out_$i75 == 1;
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 2);
    goto corral_source_split_5606;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i74 := $M.24;
    goto corral_source_split_5605;

  $bb84:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} out_vslice_dummy_var_122 := ida_getgeo(out_$p71, out_$p72);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$p72 := $M.45;
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$p71 := $M.41;
    goto corral_source_split_5600;

  $bb83:
    assume out_$i70 == 1;
    goto corral_source_split_5599;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 1);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$i69 := $M.24;
    goto corral_source_split_5552;

  $bb62:
    assume out_$i43 == 1;
    goto corral_source_split_5551;

  $bb61:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb93:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_vslice_dummy_var_125 := ida_revalidate(out_$p85);
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$p85 := $M.39;
    goto corral_source_split_5623;

  $bb92:
    assume out_$i84 == 1;
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 2);
    goto corral_source_split_5620;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i83 := $M.24;
    goto corral_source_split_5619;

  $bb90:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_124 := ida_revalidate(out_$p81);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$p81 := $M.39;
    goto corral_source_split_5615;

  $bb89:
    assume out_$i80 == 1;
    goto corral_source_split_5614;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 1);
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    out_$i79 := $M.24;
    goto corral_source_split_5556;

  $bb64:
    assume out_$i44 == 1;
    goto corral_source_split_5555;

  $bb63:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb96:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.29 := out_$i95;
    call {:si_unique_call 991} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, 1);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i94 := $M.29;
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5636;

  $bb97:
    assume out_$i93 == 1;
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_5633;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i92 := $M.47;
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $M.47 := out_$i91;
    call {:si_unique_call 989} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_5631;

  SeqInstr_57:
    goto corral_source_split_5630;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} out_$i91 := ida_unlocked_open(out_$p89, out_$i90);
    goto SeqInstr_56;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i90 := $M.46;
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$p89 := $M.41;
    goto corral_source_split_5628;

  $bb95:
    assume out_$i88 == 1;
    goto corral_source_split_5627;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$i87 := $M.24;
    goto corral_source_split_5560;

  $bb66:
    assume out_$i45 == 1;
    goto corral_source_split_5559;

  $bb65:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb68;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb68;

  $bb104:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} out_vslice_dummy_var_126 := smart4_fifo_full(out_$p107);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$p107 := $M.48;
    goto corral_source_split_5664;

  $bb119:
    assume out_$i106 == 1;
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i105 := $M.25;
    goto corral_source_split_5660;

  $bb117:
    assume out_$i104 == 1;
    goto corral_source_split_5659;

  $bb115:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i98, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb106:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i98, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i98, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5641:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} out_$i98 := __VERIFIER_nondet_int();
    call {:si_unique_call 993} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i98);
    call {:si_unique_call 994} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i98);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume out_$i97 == 1;
    goto corral_source_split_5641;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i96 := $M.25;
    goto corral_source_split_5485;

  $bb16:
    assume out_$i7 == 1;
    goto corral_source_split_5484;

  $bb15:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb124:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} out_vslice_dummy_var_127 := smart4_intr_pending(out_$p111);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$p111 := $M.49;
    goto corral_source_split_5669;

  $bb123:
    assume out_$i110 == 1;
    goto corral_source_split_5668;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i109 := $M.25;
    goto corral_source_split_5656;

  $bb116:
    assume !(out_$i103 == 1);
    goto corral_source_split_5655;

  $bb127:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_vslice_dummy_var_128 := smart4_completed(out_$p115);
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$p115 := $M.50;
    goto corral_source_split_5674;

  $bb126:
    assume out_$i114 == 1;
    goto corral_source_split_5673;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$i113 := $M.25;
    goto corral_source_split_5644;

  $bb108:
    assume out_$i100 == 1;
    goto corral_source_split_5643;

  $bb107:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i98, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb130:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} smart4_submit_command(out_$p119, out_$p120);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$p120 := $M.52;
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$p119 := $M.51;
    goto corral_source_split_5679;

  $bb129:
    assume out_$i118 == 1;
    goto corral_source_split_5678;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_5649;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$i117 := $M.25;
    goto corral_source_split_5648;

  $bb110:
    assume out_$i101 == 1;
    goto corral_source_split_5647;

  $bb109:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i98, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb133:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} smart4_intr_mask(out_$p123, out_$i124);
    goto corral_source_split_5687;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    out_$i124 := $M.54;
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$p123 := $M.53;
    goto corral_source_split_5685;

  $bb132:
    assume out_$i122 == 1;
    goto corral_source_split_5684;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$i121 := $M.25;
    goto corral_source_split_5652;

  $bb112:
    assume out_$i102 == 1;
    goto corral_source_split_5651;

  $bb111:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i98, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb114;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb114;

  $bb138:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb152:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.29 := out_$i139;
    call {:si_unique_call 1010} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i139 := $sub.i32(out_$i138, 1);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i138 := $M.29;
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} out_vslice_dummy_var_129 := single_release(out_$p135, out_$p136);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$p136 := $M.56;
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$p135 := $M.55;
    goto corral_source_split_5709;

  $bb151:
    assume out_$i134 == 1;
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 2);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i133 := $M.26;
    goto corral_source_split_5705;

  $bb149:
    assume out_$i132 == 1;
    goto corral_source_split_5704;

  $bb147:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb140:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i127, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i127, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_5690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} out_$i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1006} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i127);
    call {:si_unique_call 1007} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume out_$i126 == 1;
    goto corral_source_split_5690;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i125 := $M.26;
    goto corral_source_split_5489;

  $bb17:
    assume !(out_$i7 == 1);
    goto corral_source_split_5488;

  $bb156:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} out_vslice_dummy_var_130 := seq_read(out_$p142, out_$p143, out_$i144, out_$p145);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p145 := $M.59;
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$i144 := $M.58;
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$p143 := $M.57;
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$p142 := $M.56;
    goto corral_source_split_5718;

  $bb155:
    assume out_$i141 == 1;
    goto corral_source_split_5717;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i140 := $M.26;
    goto corral_source_split_5701;

  $bb148:
    assume !(out_$i131 == 1);
    goto corral_source_split_5700;

  $bb159:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_vslice_dummy_var_131 := seq_lseek(out_$p149, out_$i150, out_$i151);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$i151 := $M.61;
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i150 := $M.60;
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$p149 := $M.56;
    goto corral_source_split_5726;

  $bb158:
    assume out_$i148 == 1;
    goto corral_source_split_5725;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i147 := $M.26;
    goto corral_source_split_5693;

  $bb142:
    assume out_$i129 == 1;
    goto corral_source_split_5692;

  $bb141:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb162:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb164:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.29 := out_$i161;
    call {:si_unique_call 1018} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$i161 := $add.i32(out_$i160, 1);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$i160 := $M.29;
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5741;

  $bb163:
    assume out_$i159 == 1;
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i158 := $M.62;
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.62 := out_$i157;
    call {:si_unique_call 1016} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_$i157 := ida_proc_open(out_$p155, out_$p156);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$p156 := $M.56;
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$p155 := $M.55;
    goto corral_source_split_5733;

  $bb161:
    assume out_$i154 == 1;
    goto corral_source_split_5732;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i153 := $M.26;
    goto corral_source_split_5697;

  $bb144:
    assume out_$i130 == 1;
    goto corral_source_split_5696;

  $bb143:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb145:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb146;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(out_$i132 == 1);
    goto $bb146;

  $bb170:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb180:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.29 := out_$i176;
    call {:si_unique_call 1025} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_5768;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i32(out_$i175, 1);
    goto corral_source_split_5767;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    out_$i175 := $M.29;
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5765;

  $bb181:
    assume out_$i174 == 1;
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    out_$i173 := $M.65;
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.65 := out_$i172;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_5760;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_$i172 := cpqarray_init_one(out_$p170, out_$p171);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$p171 := $M.64;
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$p170 := $M.63;
    goto corral_source_split_5757;

  $bb179:
    assume out_$i169 == 1;
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 1);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i168 := $M.27;
    goto corral_source_split_5753;

  $bb177:
    assume out_$i167 == 1;
    goto corral_source_split_5752;

  $bb172:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i164, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i165 := $slt.i32(out_$i164, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_5746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} out_$i164 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i164);
    call {:si_unique_call 1021} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i164);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume out_$i163 == 1;
    goto corral_source_split_5746;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i32(out_$i162, 0);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$i162 := $M.27;
    goto corral_source_split_5477;

  $bb12:
    assume out_$i5 == 1;
    goto corral_source_split_5476;

  $bb5:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb187:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.29 := out_$i181;
    call {:si_unique_call 1028} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_5776;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    out_$i181 := $sub.i32(out_$i180, 1);
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    out_$i180 := $M.29;
    goto corral_source_split_5774;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5773;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} cpqarray_remove_one_pci(out_$p179);
    goto corral_source_split_5772;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    out_$p179 := $M.63;
    goto corral_source_split_5771;

  $bb186:
    assume out_$i178 == 1;
    goto corral_source_split_5770;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 2);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i177 := $M.27;
    goto corral_source_split_5749;

  $bb174:
    assume out_$i166 == 1;
    goto corral_source_split_5748;

  $bb173:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i164, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb176;

  $bb178:
    assume {:verifier.code 0} true;
    assume !(out_$i167 == 1);
    goto $bb176;

  $bb192:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb208:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} out_vslice_dummy_var_132 := smart1_fifo_full(out_$p193);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$p193 := $M.66;
    goto corral_source_split_5801;

  $bb207:
    assume out_$i192 == 1;
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 1);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i191 := $M.28;
    goto corral_source_split_5797;

  $bb205:
    assume out_$i190 == 1;
    goto corral_source_split_5796;

  $bb203:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i184, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb194:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i184, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_5778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} out_$i184 := __VERIFIER_nondet_int();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i184);
    call {:si_unique_call 1031} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i184);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume out_$i183 == 1;
    goto corral_source_split_5778;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i182 := $M.28;
    goto corral_source_split_5481;

  $bb13:
    assume !(out_$i5 == 1);
    goto corral_source_split_5480;

  $bb212:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_vslice_dummy_var_133 := smart1_intr_pending(out_$p197);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$p197 := $M.67;
    goto corral_source_split_5806;

  $bb211:
    assume out_$i196 == 1;
    goto corral_source_split_5805;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 1);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i195 := $M.28;
    goto corral_source_split_5793;

  $bb204:
    assume !(out_$i189 == 1);
    goto corral_source_split_5792;

  $bb215:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1037} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_vslice_dummy_var_134 := smart1_completed(out_$p201);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$p201 := $M.68;
    goto corral_source_split_5811;

  $bb214:
    assume out_$i200 == 1;
    goto corral_source_split_5810;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$i199 := $M.28;
    goto corral_source_split_5781;

  $bb196:
    assume out_$i186 == 1;
    goto corral_source_split_5780;

  $bb195:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i184, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb218:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1039} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} smart1_submit_command(out_$p205, out_$p206);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$p206 := $M.70;
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$p205 := $M.69;
    goto corral_source_split_5816;

  $bb217:
    assume out_$i204 == 1;
    goto corral_source_split_5815;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i203 := $M.28;
    goto corral_source_split_5785;

  $bb198:
    assume out_$i187 == 1;
    goto corral_source_split_5784;

  $bb197:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i184, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb221:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} smart1_intr_mask(out_$p209, out_$i210);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$i210 := $M.72;
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$p209 := $M.71;
    goto corral_source_split_5822;

  $bb220:
    assume out_$i208 == 1;
    goto corral_source_split_5821;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 1);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i207 := $M.28;
    goto corral_source_split_5789;

  $bb200:
    assume out_$i188 == 1;
    goto corral_source_split_5788;

  $bb199:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i184, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb202;

  $bb206:
    assume {:verifier.code 0} true;
    assume !(out_$i190 == 1);
    goto $bb202;

  $bb226:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume {:verifier.code 0} true;
    assume !(out_$i218 == 1);
    goto $bb237;

  $bb239:
    assume {:verifier.code 0} true;
    assume !(out_$i220 == 1);
    goto $bb237;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 0);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i219 := $M.29;
    goto corral_source_split_5838;

  $bb235:
    assume out_$i218 == 1;
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 3);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i217 := $M.30;
    goto corral_source_split_5834;

  $bb233:
    assume out_$i216 == 1;
    goto corral_source_split_5833;

  $bb228:
    assume out_$i214 == 1;
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i214 := $slt.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_5827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} out_$i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i213);
    call {:si_unique_call 1044} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i213);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb225:
    assume out_$i212 == 1;
    goto corral_source_split_5827;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i32(out_$i211, 0);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$i211 := $M.30;
    goto corral_source_split_5469;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_5468;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb244:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 0);
    goto corral_source_split_5864;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i226 := $M.73;
    goto corral_source_split_5863;

  $bb246:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1052} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5854;

  $bb245:
    assume out_$i225 == 1;
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i224 := $M.73;
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.73 := out_$i223;
    call {:si_unique_call 1049} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i223);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} out_$i223 := cpqarray_init();
    goto corral_source_split_5848;

  $bb243:
    assume out_$i222 == 1;
    goto corral_source_split_5847;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i221 := $M.30;
    goto corral_source_split_5830;

  $bb230:
    assume out_$i215 == 1;
    goto corral_source_split_5829;

  $bb229:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb231:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb232;

  $bb234:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb232;

  $bb255:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb271:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5894;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_vslice_dummy_var_135 := smart2e_fifo_full(out_$p239);
    goto corral_source_split_5893;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$p239 := $M.74;
    goto corral_source_split_5892;

  $bb270:
    assume out_$i238 == 1;
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$i237 := $M.31;
    goto corral_source_split_5888;

  $bb268:
    assume out_$i236 == 1;
    goto corral_source_split_5887;

  $bb266:
    assume out_$i235 == 1;
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb257:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_5869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1059} out_$i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1060} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i230);
    call {:si_unique_call 1061} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i230);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb254:
    assume out_$i229 == 1;
    goto corral_source_split_5869;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i32(out_$i228, 0);
    goto corral_source_split_5474;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$i228 := $M.31;
    goto corral_source_split_5473;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_5472;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb275:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5899;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} out_vslice_dummy_var_136 := smart2e_intr_pending(out_$p243);
    goto corral_source_split_5898;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    out_$p243 := $M.75;
    goto corral_source_split_5897;

  $bb274:
    assume out_$i242 == 1;
    goto corral_source_split_5896;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 1);
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i241 := $M.31;
    goto corral_source_split_5884;

  $bb267:
    assume !(out_$i235 == 1);
    goto corral_source_split_5883;

  $bb278:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_vslice_dummy_var_137 := smart2e_completed(out_$p247);
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$p247 := $M.76;
    goto corral_source_split_5902;

  $bb277:
    assume out_$i246 == 1;
    goto corral_source_split_5901;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 1);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i245 := $M.31;
    goto corral_source_split_5872;

  $bb259:
    assume out_$i232 == 1;
    goto corral_source_split_5871;

  $bb258:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb281:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} smart2e_submit_command(out_$p251, out_$p252);
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$p252 := $M.78;
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$p251 := $M.77;
    goto corral_source_split_5907;

  $bb280:
    assume out_$i250 == 1;
    goto corral_source_split_5906;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i249 := $M.31;
    goto corral_source_split_5876;

  $bb261:
    assume out_$i233 == 1;
    goto corral_source_split_5875;

  $bb260:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i233 := $slt.i32(out_$i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb284:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} smart2e_intr_mask(out_$p255, out_$i256);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$i256 := $M.80;
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$p255 := $M.79;
    goto corral_source_split_5913;

  $bb283:
    assume out_$i254 == 1;
    goto corral_source_split_5912;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 1);
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i253 := $M.31;
    goto corral_source_split_5880;

  $bb263:
    assume out_$i234 == 1;
    goto corral_source_split_5879;

  $bb262:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb264:
    assume {:verifier.code 0} true;
    assume !(out_$i234 == 1);
    goto $bb265;

  $bb269:
    assume {:verifier.code 0} true;
    assume !(out_$i236 == 1);
    goto $bb265;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb11;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$p25, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$p72, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$p25, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$p72, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i64, in_$i151: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i64, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i64, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i64, in_vslice_dummy_var_127: i64, in_vslice_dummy_var_128: i64, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: i64, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i64, out_$i151: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i64, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i64, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i64, out_vslice_dummy_var_127: i64, out_vslice_dummy_var_128: i64, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: i64, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i64);
  modifies $M.23, $M.0, $M.29, $M.24, $M.5, assertsPassed, $M.17, $CurrAddr, $M.8, $M.47, $M.25, $M.26, $M.62, $M.27, $M.65, $M.6, $M.10, $M.7, $M.16, $M.9, $M.28, $M.31, $M.30, $M.73;



implementation {:SIextraRecBound 8} cpqarray_exit_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i1, in_$i7: i32, in_$i8: i1, in_$i0: i32, in_vslice_dummy_var_138: i32) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i1, out_$i7: i32, out_$i8: i1, out_$i0: i32, out_vslice_dummy_var_138: i32)
{

  entry:
    out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i0, out_vslice_dummy_var_138 := in_$i1, in_$p2, in_$p3, in_$i4, in_$i5, in_$i7, in_$i8, in_$i0, in_vslice_dummy_var_138;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i7;
    goto $bb6_dummy;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i8 := $sle.i32(out_$i7, 7);
    goto corral_source_split_5940;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1079} {:cexpr "i"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_5939;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} cpqarray_remove_one_eisa(out_$i0);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_vslice_dummy_var_138 := printk.ref.i32(.str.71, out_$i0);
    goto corral_source_split_5936;

  $bb3:
    assume out_$i5 == 1;
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i64(out_$i4, 0);
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i4 := $p2i.ref.i64(out_$p3);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$p3 := $load.ref($M.6, out_$p2);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1, 8));
    goto corral_source_split_5930;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $sext.i32.i64(out_$i0);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i0, out_vslice_dummy_var_138 := cpqarray_exit_loop_$bb1(out_$i1, out_$p2, out_$p3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i0, out_vslice_dummy_var_138);
    return;

  exit:
    return;
}



procedure cpqarray_exit_loop_$bb1(in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$i5: i1, in_$i7: i32, in_$i8: i1, in_$i0: i32, in_vslice_dummy_var_138: i32) returns (out_$i1: i64, out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$i5: i1, out_$i7: i32, out_$i8: i1, out_$i0: i32, out_vslice_dummy_var_138: i32);
  modifies $M.0, $M.8, $M.6, $CurrAddr;



implementation cpqarray_eisa_detect_loop_$bb662(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i1013: i32, in_$i1014: i1, in_$i1015: i32, in_$i1016: i1, in_$i1017: i32, in_$i1018: i32, in_$i1019: i32, in_$i1020: i32, in_$i1021: i1, in_$i1023: i32, in_$i1024: i1, in_$i1025: i32, in_$i1026: i1, in_$i1027: i32, in_$i1028: i1, in_$i1029: i32, in_$i1030: i1, in_$i1031: i32, in_$i1032: i1, in_$i1033: i32, in_$i1034: i1, in_$i1035: i32, in_$i1036: i1, in_$i1037: i32, in_$i1038: i1, in_$i1039: i32, in_$i1040: i1, in_$i1041: i32, in_$i1042: i1, in_$i1043: i32, in_$i1044: i1, in_$i1045: i32, in_$i1046: i1, in_$i1047: i32, in_$i1048: i1, in_$i1049: i32, in_$i1050: i1, in_$i1022: i32, in_$i1051: i32, in_$i1052: i1, in_$i1053: i64, in_$p1054: ref, in_$p1055: ref, in_$p1056: ref, in_$i1057: i32, in_$i1058: i64, in_$i1059: i64, in_$p1060: ref, in_$p1061: ref, in_$p1062: ref, in_$i1063: i64, in_$p1064: ref, in_$p1065: ref, in_$p1066: ref, in_$i1067: i64, in_$p1068: ref, in_$p1069: ref, in_$p1070: ref, in_$i1071: i64, in_$i1072: i64, in_$p1073: ref, in_$p1074: ref, in_$p1075: ref, in_$i1076: i64, in_$p1077: ref, in_$i1078: i64, in_$i1079: i1, in_$i1080: i32, in_$i1081: i32, in_$i1082: i32, in_$i1144: i64, in_$p1145: ref, in_$p1146: ref, in_$p1147: ref, in_$i1148: i64, in_$i1149: i64, in_$p1150: ref, in_$p1151: ref, in_$p1152: ref, in_$i1153: i64, in_$i1155: i64, in_cmdloc_dummy_var_46: [ref]i8, in_cmdloc_dummy_var_47: [ref]i8, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i1013: i32, out_$i1014: i1, out_$i1015: i32, out_$i1016: i1, out_$i1017: i32, out_$i1018: i32, out_$i1019: i32, out_$i1020: i32, out_$i1021: i1, out_$i1023: i32, out_$i1024: i1, out_$i1025: i32, out_$i1026: i1, out_$i1027: i32, out_$i1028: i1, out_$i1029: i32, out_$i1030: i1, out_$i1031: i32, out_$i1032: i1, out_$i1033: i32, out_$i1034: i1, out_$i1035: i32, out_$i1036: i1, out_$i1037: i32, out_$i1038: i1, out_$i1039: i32, out_$i1040: i1, out_$i1041: i32, out_$i1042: i1, out_$i1043: i32, out_$i1044: i1, out_$i1045: i32, out_$i1046: i1, out_$i1047: i32, out_$i1048: i1, out_$i1049: i32, out_$i1050: i1, out_$i1022: i32, out_$i1051: i32, out_$i1052: i1, out_$i1053: i64, out_$p1054: ref, out_$p1055: ref, out_$p1056: ref, out_$i1057: i32, out_$i1058: i64, out_$i1059: i64, out_$p1060: ref, out_$p1061: ref, out_$p1062: ref, out_$i1063: i64, out_$p1064: ref, out_$p1065: ref, out_$p1066: ref, out_$i1067: i64, out_$p1068: ref, out_$p1069: ref, out_$p1070: ref, out_$i1071: i64, out_$i1072: i64, out_$p1073: ref, out_$p1074: ref, out_$p1075: ref, out_$i1076: i64, out_$p1077: ref, out_$i1078: i64, out_$i1079: i1, out_$i1080: i32, out_$i1081: i32, out_$i1082: i32, out_$i1144: i64, out_$p1145: ref, out_$p1146: ref, out_$p1147: ref, out_$i1148: i64, out_$i1149: i64, out_$p1150: ref, out_$p1151: ref, out_$p1152: ref, out_$i1153: i64, out_$i1155: i64, out_cmdloc_dummy_var_46: [ref]i8, out_cmdloc_dummy_var_47: [ref]i8, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$i1017, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$i1038, out_$i1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$i1022, out_$i1051, out_$i1052, out_$i1053, out_$p1054, out_$p1055, out_$p1056, out_$i1057, out_$i1058, out_$i1059, out_$p1060, out_$p1061, out_$p1062, out_$i1063, out_$p1064, out_$p1065, out_$p1066, out_$i1067, out_$p1068, out_$p1069, out_$p1070, out_$i1071, out_$i1072, out_$p1073, out_$p1074, out_$p1075, out_$i1076, out_$p1077, out_$i1078, out_$i1079, out_$i1080, out_$i1081, out_$i1082, out_$i1144, out_$p1145, out_$p1146, out_$p1147, out_$i1148, out_$i1149, out_$p1150, out_$p1151, out_$p1152, out_$i1153, out_$i1155, out_cmdloc_dummy_var_46, out_cmdloc_dummy_var_47, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := in_$i2, in_$i119, in_$i14, in_$i1013, in_$i1014, in_$i1015, in_$i1016, in_$i1017, in_$i1018, in_$i1019, in_$i1020, in_$i1021, in_$i1023, in_$i1024, in_$i1025, in_$i1026, in_$i1027, in_$i1028, in_$i1029, in_$i1030, in_$i1031, in_$i1032, in_$i1033, in_$i1034, in_$i1035, in_$i1036, in_$i1037, in_$i1038, in_$i1039, in_$i1040, in_$i1041, in_$i1042, in_$i1043, in_$i1044, in_$i1045, in_$i1046, in_$i1047, in_$i1048, in_$i1049, in_$i1050, in_$i1022, in_$i1051, in_$i1052, in_$i1053, in_$p1054, in_$p1055, in_$p1056, in_$i1057, in_$i1058, in_$i1059, in_$p1060, in_$p1061, in_$p1062, in_$i1063, in_$p1064, in_$p1065, in_$p1066, in_$i1067, in_$p1068, in_$p1069, in_$p1070, in_$i1071, in_$i1072, in_$p1073, in_$p1074, in_$p1075, in_$i1076, in_$p1077, in_$i1078, in_$i1079, in_$i1080, in_$i1081, in_$i1082, in_$i1144, in_$p1145, in_$p1146, in_$p1147, in_$i1148, in_$i1149, in_$p1150, in_$p1151, in_$p1152, in_$i1153, in_$i1155, in_cmdloc_dummy_var_46, in_cmdloc_dummy_var_47, in_vslice_dummy_var_169, in_vslice_dummy_var_170;
    goto $bb662, exit;

  $bb662:
    assume {:verifier.code 0} true;
    out_$i1013 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7416;

  $bb757:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb757_dummy;

  $bb756:
    assume {:verifier.code 0} true;
    out_$i14 := 7;
    assume {:branchcond 1} true;
    goto $bb757;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto $bb756;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb756;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} out_vslice_dummy_var_169 := printk.ref.i64(.str.32, out_$i1155);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    out_$i1155 := $zext.i32.i64(out_$i1019);
    goto corral_source_split_7479;

  $bb735:
    assume out_$i1052 == 1;
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i1052 := $eq.i32(out_$i1051, 15);
    goto corral_source_split_7476;

  $bb734:
    assume {:verifier.code 0} true;
    goto corral_source_split_7475;

  $bb733:
    assume {:verifier.code 0} true;
    out_$i1051 := 15;
    goto $bb734;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$i1051 := out_$i1022;
    goto $bb734;

  $bb675:
    assume {:verifier.code 0} true;
    goto corral_source_split_7431;

  $bb731:
    assume {:verifier.code 0} true;
    assume out_$i1050 == 1;
    goto $bb675;

  $bb727:
    assume {:verifier.code 0} true;
    assume out_$i1048 == 1;
    goto $bb675;

  $bb723:
    assume {:verifier.code 0} true;
    assume out_$i1046 == 1;
    goto $bb675;

  $bb719:
    assume {:verifier.code 0} true;
    assume out_$i1044 == 1;
    goto $bb675;

  $bb715:
    assume {:verifier.code 0} true;
    assume out_$i1042 == 1;
    goto $bb675;

  $bb711:
    assume {:verifier.code 0} true;
    assume out_$i1040 == 1;
    goto $bb675;

  $bb707:
    assume {:verifier.code 0} true;
    assume out_$i1038 == 1;
    goto $bb675;

  $bb703:
    assume {:verifier.code 0} true;
    assume out_$i1036 == 1;
    goto $bb675;

  $bb699:
    assume {:verifier.code 0} true;
    assume out_$i1034 == 1;
    goto $bb675;

  $bb695:
    assume {:verifier.code 0} true;
    assume out_$i1032 == 1;
    goto $bb675;

  $bb691:
    assume {:verifier.code 0} true;
    assume out_$i1030 == 1;
    goto $bb675;

  $bb687:
    assume {:verifier.code 0} true;
    assume out_$i1028 == 1;
    goto $bb675;

  $bb683:
    assume {:verifier.code 0} true;
    assume out_$i1026 == 1;
    goto $bb675;

  $bb679:
    assume {:verifier.code 0} true;
    assume out_$i1024 == 1;
    goto $bb675;

  $bb674:
    assume {:verifier.code 0} true;
    assume out_$i1021 == 1;
    goto $bb675;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i1022 := 0;
    assume true;
    goto $bb674, $bb676;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i1021 := $eq.i32(out_$i1020, out_$i1019);
    goto corral_source_split_7429;

  $bb673:
    assume {:verifier.code 0} true;
    out_$i1020 := $load.i32($M.13, products);
    goto corral_source_split_7428;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb672;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} out_$i1019 := inl(out_$i1018);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$i1018 := $add.i32(out_$i1017, 3200);
    goto corral_source_split_7425;

  $bb671:
    assume {:verifier.code 0} true;
    out_$i1017 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7424;

  $bb670:
    assume !(out_$i1016 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$i2 := 7;
    assume true;
    goto $bb670;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i1016 := $eq.i32(out_$i1015, $sub.i32(0, 1));
    goto corral_source_split_7422;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} out_$i1015 := alloc_cpqarray_hba();
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb666:
    assume out_$i1014 == 1;
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i119 := 7;
    assume true;
    goto $bb666;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$i1014 := $ne.i32(out_$i1013, 0);
    goto corral_source_split_7417;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i1022 := 1;
    assume true;
    goto $bb679, $bb680;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i1024 := $eq.i32(out_$i1023, out_$i1019);
    goto corral_source_split_7434;

  $bb678:
    assume {:verifier.code 0} true;
    out_$i1023 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7433;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb676:
    assume !(out_$i1021 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i1022 := 2;
    assume true;
    goto $bb683, $bb684;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i1026 := $eq.i32(out_$i1025, out_$i1019);
    goto corral_source_split_7437;

  $bb682:
    assume {:verifier.code 0} true;
    out_$i1025 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7436;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb680:
    assume !(out_$i1024 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$i1022 := 3;
    assume true;
    goto $bb687, $bb688;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$i1028 := $eq.i32(out_$i1027, out_$i1019);
    goto corral_source_split_7440;

  $bb686:
    assume {:verifier.code 0} true;
    out_$i1027 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7439;

  $bb685:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb684:
    assume !(out_$i1026 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    out_$i1022 := 4;
    assume true;
    goto $bb691, $bb692;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$i1030 := $eq.i32(out_$i1029, out_$i1019);
    goto corral_source_split_7443;

  $bb690:
    assume {:verifier.code 0} true;
    out_$i1029 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7442;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb688:
    assume !(out_$i1028 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$i1022 := 5;
    assume true;
    goto $bb695, $bb696;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i1032 := $eq.i32(out_$i1031, out_$i1019);
    goto corral_source_split_7446;

  $bb694:
    assume {:verifier.code 0} true;
    out_$i1031 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7445;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb692:
    assume !(out_$i1030 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    out_$i1022 := 6;
    assume true;
    goto $bb699, $bb700;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i1034 := $eq.i32(out_$i1033, out_$i1019);
    goto corral_source_split_7449;

  $bb698:
    assume {:verifier.code 0} true;
    out_$i1033 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7448;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb696:
    assume !(out_$i1032 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$i1022 := 7;
    assume true;
    goto $bb703, $bb704;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$i1036 := $eq.i32(out_$i1035, out_$i1019);
    goto corral_source_split_7452;

  $bb702:
    assume {:verifier.code 0} true;
    out_$i1035 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7451;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb700:
    assume !(out_$i1034 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$i1022 := 8;
    assume true;
    goto $bb707, $bb708;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i1038 := $eq.i32(out_$i1037, out_$i1019);
    goto corral_source_split_7455;

  $bb706:
    assume {:verifier.code 0} true;
    out_$i1037 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7454;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb704:
    assume !(out_$i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    out_$i1022 := 9;
    assume true;
    goto $bb711, $bb712;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i1040 := $eq.i32(out_$i1039, out_$i1019);
    goto corral_source_split_7458;

  $bb710:
    assume {:verifier.code 0} true;
    out_$i1039 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7457;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb708:
    assume !(out_$i1038 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i1022 := 10;
    assume true;
    goto $bb715, $bb716;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$i1042 := $eq.i32(out_$i1041, out_$i1019);
    goto corral_source_split_7461;

  $bb714:
    assume {:verifier.code 0} true;
    out_$i1041 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7460;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb712:
    assume !(out_$i1040 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$i1022 := 11;
    assume true;
    goto $bb719, $bb720;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$i1044 := $eq.i32(out_$i1043, out_$i1019);
    goto corral_source_split_7464;

  $bb718:
    assume {:verifier.code 0} true;
    out_$i1043 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7463;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb716:
    assume !(out_$i1042 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$i1022 := 12;
    assume true;
    goto $bb723, $bb724;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    out_$i1046 := $eq.i32(out_$i1045, out_$i1019);
    goto corral_source_split_7467;

  $bb722:
    assume {:verifier.code 0} true;
    out_$i1045 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7466;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb720:
    assume !(out_$i1044 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$i1022 := 13;
    assume true;
    goto $bb727, $bb728;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i1048 := $eq.i32(out_$i1047, out_$i1019);
    goto corral_source_split_7470;

  $bb726:
    assume {:verifier.code 0} true;
    out_$i1047 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7469;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb724:
    assume !(out_$i1046 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i1022 := 14;
    assume true;
    goto $bb731, $bb732;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i1050 := $eq.i32(out_$i1049, out_$i1019);
    goto corral_source_split_7473;

  $bb730:
    assume {:verifier.code 0} true;
    out_$i1049 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7472;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb728:
    assume !(out_$i1048 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb732:
    assume !(out_$i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} free_hba(out_$i1015);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} out_vslice_dummy_var_170 := printk.ref.i64.i64(.str.73, out_$i1148, out_$i1153);
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i1153 := $load.i64($M.0, out_$p1152);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$p1152 := $add.ref($add.ref(out_$p1151, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7522;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$p1151 := $load.ref($M.6, out_$p1150);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$p1150 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1149, 8));
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    out_$i1149 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    out_$i1148 := $load.i64($M.0, out_$p1147);
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p1147 := $add.ref($add.ref(out_$p1146, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    out_$p1146 := $load.ref($M.6, out_$p1145);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p1145 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1144, 8));
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$i1144 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7514;

  $bb738:
    assume out_$i1079 == 1;
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$i1080, out_$i1081, out_$i1082 := out_$i1015, out_$i1019, out_$i1051;
    assume true;
    goto $bb738;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i1079 := $eq.i64(out_$i1078, 0);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i1078 := $p2i.ref.i64(out_$p1077);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} out_$p1077 := __request_region(ioport_resource, out_$i1071, out_$i1076, .str.30, 0);
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    out_$i1076 := $load.i64($M.0, out_$p1075);
    goto corral_source_split_7508;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$p1075 := $add.ref($add.ref(out_$p1074, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$p1074 := $load.ref($M.6, out_$p1073);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$p1073 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1072, 8));
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i1072 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$i1071 := $load.i64($M.0, out_$p1070);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$p1070 := $add.ref($add.ref(out_$p1069, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$p1069 := $load.ref($M.6, out_$p1068);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$p1068 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1067, 8));
    goto corral_source_split_7500;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i1067 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p1066, 2047);
    goto corral_source_split_7498;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$p1066 := $add.ref($add.ref(out_$p1065, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$p1065 := $load.ref($M.6, out_$p1064);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$p1064 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1063, 8));
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$i1063 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p1062, out_$i1058);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p1062 := $add.ref($add.ref(out_$p1061, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$p1061 := $load.ref($M.6, out_$p1060);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$p1060 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1059, 8));
    goto corral_source_split_7490;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i1059 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i1058 := $sext.i32.i64(out_$i1057);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$i1057 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1184} out_cmdloc_dummy_var_47 := $memset.i8(out_cmdloc_dummy_var_46, out_$p1056, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_47;
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$p1056 := $bitcast.ref.ref(out_$p1055);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$p1055 := $load.ref($M.6, out_$p1054);
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$p1054 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1053, 8));
    goto corral_source_split_7483;

  $bb737:
    assume {:verifier.code 0} true;
    out_$i1053 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_7482;

  $bb736:
    assume !(out_$i1052 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb757_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$i1017, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$i1038, out_$i1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$i1022, out_$i1051, out_$i1052, out_$i1053, out_$p1054, out_$p1055, out_$p1056, out_$i1057, out_$i1058, out_$i1059, out_$p1060, out_$p1061, out_$p1062, out_$i1063, out_$p1064, out_$p1065, out_$p1066, out_$i1067, out_$p1068, out_$p1069, out_$p1070, out_$i1071, out_$i1072, out_$p1073, out_$p1074, out_$p1075, out_$i1076, out_$p1077, out_$i1078, out_$i1079, out_$i1080, out_$i1081, out_$i1082, out_$i1144, out_$p1145, out_$p1146, out_$p1147, out_$i1148, out_$i1149, out_$p1150, out_$p1151, out_$p1152, out_$i1153, out_$i1155, out_cmdloc_dummy_var_46, out_cmdloc_dummy_var_47, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := cpqarray_eisa_detect_loop_$bb662(out_$i2, out_$i119, out_$i14, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$i1017, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1023, out_$i1024, out_$i1025, out_$i1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$i1031, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$i1038, out_$i1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$i1022, out_$i1051, out_$i1052, out_$i1053, out_$p1054, out_$p1055, out_$p1056, out_$i1057, out_$i1058, out_$i1059, out_$p1060, out_$p1061, out_$p1062, out_$i1063, out_$p1064, out_$p1065, out_$p1066, out_$i1067, out_$p1068, out_$p1069, out_$p1070, out_$i1071, out_$i1072, out_$p1073, out_$p1074, out_$p1075, out_$i1076, out_$p1077, out_$i1078, out_$i1079, out_$i1080, out_$i1081, out_$i1082, out_$i1144, out_$p1145, out_$p1146, out_$p1147, out_$i1148, out_$i1149, out_$p1150, out_$p1151, out_$p1152, out_$i1153, out_$i1155, out_cmdloc_dummy_var_46, out_cmdloc_dummy_var_47, out_vslice_dummy_var_169, out_vslice_dummy_var_170);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb662(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i1013: i32, in_$i1014: i1, in_$i1015: i32, in_$i1016: i1, in_$i1017: i32, in_$i1018: i32, in_$i1019: i32, in_$i1020: i32, in_$i1021: i1, in_$i1023: i32, in_$i1024: i1, in_$i1025: i32, in_$i1026: i1, in_$i1027: i32, in_$i1028: i1, in_$i1029: i32, in_$i1030: i1, in_$i1031: i32, in_$i1032: i1, in_$i1033: i32, in_$i1034: i1, in_$i1035: i32, in_$i1036: i1, in_$i1037: i32, in_$i1038: i1, in_$i1039: i32, in_$i1040: i1, in_$i1041: i32, in_$i1042: i1, in_$i1043: i32, in_$i1044: i1, in_$i1045: i32, in_$i1046: i1, in_$i1047: i32, in_$i1048: i1, in_$i1049: i32, in_$i1050: i1, in_$i1022: i32, in_$i1051: i32, in_$i1052: i1, in_$i1053: i64, in_$p1054: ref, in_$p1055: ref, in_$p1056: ref, in_$i1057: i32, in_$i1058: i64, in_$i1059: i64, in_$p1060: ref, in_$p1061: ref, in_$p1062: ref, in_$i1063: i64, in_$p1064: ref, in_$p1065: ref, in_$p1066: ref, in_$i1067: i64, in_$p1068: ref, in_$p1069: ref, in_$p1070: ref, in_$i1071: i64, in_$i1072: i64, in_$p1073: ref, in_$p1074: ref, in_$p1075: ref, in_$i1076: i64, in_$p1077: ref, in_$i1078: i64, in_$i1079: i1, in_$i1080: i32, in_$i1081: i32, in_$i1082: i32, in_$i1144: i64, in_$p1145: ref, in_$p1146: ref, in_$p1147: ref, in_$i1148: i64, in_$i1149: i64, in_$p1150: ref, in_$p1151: ref, in_$p1152: ref, in_$i1153: i64, in_$i1155: i64, in_cmdloc_dummy_var_46: [ref]i8, in_cmdloc_dummy_var_47: [ref]i8, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i1013: i32, out_$i1014: i1, out_$i1015: i32, out_$i1016: i1, out_$i1017: i32, out_$i1018: i32, out_$i1019: i32, out_$i1020: i32, out_$i1021: i1, out_$i1023: i32, out_$i1024: i1, out_$i1025: i32, out_$i1026: i1, out_$i1027: i32, out_$i1028: i1, out_$i1029: i32, out_$i1030: i1, out_$i1031: i32, out_$i1032: i1, out_$i1033: i32, out_$i1034: i1, out_$i1035: i32, out_$i1036: i1, out_$i1037: i32, out_$i1038: i1, out_$i1039: i32, out_$i1040: i1, out_$i1041: i32, out_$i1042: i1, out_$i1043: i32, out_$i1044: i1, out_$i1045: i32, out_$i1046: i1, out_$i1047: i32, out_$i1048: i1, out_$i1049: i32, out_$i1050: i1, out_$i1022: i32, out_$i1051: i32, out_$i1052: i1, out_$i1053: i64, out_$p1054: ref, out_$p1055: ref, out_$p1056: ref, out_$i1057: i32, out_$i1058: i64, out_$i1059: i64, out_$p1060: ref, out_$p1061: ref, out_$p1062: ref, out_$i1063: i64, out_$p1064: ref, out_$p1065: ref, out_$p1066: ref, out_$i1067: i64, out_$p1068: ref, out_$p1069: ref, out_$p1070: ref, out_$i1071: i64, out_$i1072: i64, out_$p1073: ref, out_$p1074: ref, out_$p1075: ref, out_$i1076: i64, out_$p1077: ref, out_$i1078: i64, out_$i1079: i1, out_$i1080: i32, out_$i1081: i32, out_$i1082: i32, out_$i1144: i64, out_$p1145: ref, out_$p1146: ref, out_$p1147: ref, out_$i1148: i64, out_$i1149: i64, out_$p1150: ref, out_$p1151: ref, out_$p1152: ref, out_$i1153: i64, out_$i1155: i64, out_cmdloc_dummy_var_46: [ref]i8, out_cmdloc_dummy_var_47: [ref]i8, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb568(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i32, in_$i875: i32, in_$i876: i32, in_$i877: i1, in_$i879: i32, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$i883: i32, in_$i884: i1, in_$i885: i32, in_$i886: i1, in_$i887: i32, in_$i888: i1, in_$i889: i32, in_$i890: i1, in_$i891: i32, in_$i892: i1, in_$i893: i32, in_$i894: i1, in_$i895: i32, in_$i896: i1, in_$i897: i32, in_$i898: i1, in_$i899: i32, in_$i900: i1, in_$i901: i32, in_$i902: i1, in_$i903: i32, in_$i904: i1, in_$i905: i32, in_$i906: i1, in_$i878: i32, in_$i907: i32, in_$i908: i1, in_$i909: i64, in_$p910: ref, in_$p911: ref, in_$p912: ref, in_$i913: i32, in_$i914: i64, in_$i915: i64, in_$p916: ref, in_$p917: ref, in_$p918: ref, in_$i919: i64, in_$p920: ref, in_$p921: ref, in_$p922: ref, in_$i923: i64, in_$p924: ref, in_$p925: ref, in_$p926: ref, in_$i927: i64, in_$i928: i64, in_$p929: ref, in_$p930: ref, in_$p931: ref, in_$i932: i64, in_$p933: ref, in_$i934: i64, in_$i935: i1, in_$i936: i32, in_$i937: i32, in_$i938: i32, in_$i1000: i64, in_$p1001: ref, in_$p1002: ref, in_$p1003: ref, in_$i1004: i64, in_$i1005: i64, in_$p1006: ref, in_$p1007: ref, in_$p1008: ref, in_$i1009: i64, in_$i1011: i64, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i32, out_$i875: i32, out_$i876: i32, out_$i877: i1, out_$i879: i32, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$i883: i32, out_$i884: i1, out_$i885: i32, out_$i886: i1, out_$i887: i32, out_$i888: i1, out_$i889: i32, out_$i890: i1, out_$i891: i32, out_$i892: i1, out_$i893: i32, out_$i894: i1, out_$i895: i32, out_$i896: i1, out_$i897: i32, out_$i898: i1, out_$i899: i32, out_$i900: i1, out_$i901: i32, out_$i902: i1, out_$i903: i32, out_$i904: i1, out_$i905: i32, out_$i906: i1, out_$i878: i32, out_$i907: i32, out_$i908: i1, out_$i909: i64, out_$p910: ref, out_$p911: ref, out_$p912: ref, out_$i913: i32, out_$i914: i64, out_$i915: i64, out_$p916: ref, out_$p917: ref, out_$p918: ref, out_$i919: i64, out_$p920: ref, out_$p921: ref, out_$p922: ref, out_$i923: i64, out_$p924: ref, out_$p925: ref, out_$p926: ref, out_$i927: i64, out_$i928: i64, out_$p929: ref, out_$p930: ref, out_$p931: ref, out_$i932: i64, out_$p933: ref, out_$i934: i64, out_$i935: i1, out_$i936: i32, out_$i937: i32, out_$i938: i32, out_$i1000: i64, out_$p1001: ref, out_$p1002: ref, out_$p1003: ref, out_$i1004: i64, out_$i1005: i64, out_$p1006: ref, out_$p1007: ref, out_$p1008: ref, out_$i1009: i64, out_$i1011: i64, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i878, out_$i907, out_$i908, out_$i909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$i915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$p921, out_$p922, out_$i923, out_$p924, out_$p925, out_$p926, out_$i927, out_$i928, out_$p929, out_$p930, out_$p931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i1000, out_$p1001, out_$p1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$p1007, out_$p1008, out_$i1009, out_$i1011, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_vslice_dummy_var_165, out_vslice_dummy_var_166 := in_$i2, in_$i119, in_$i14, in_$i869, in_$i870, in_$i871, in_$i872, in_$i873, in_$i874, in_$i875, in_$i876, in_$i877, in_$i879, in_$i880, in_$i881, in_$i882, in_$i883, in_$i884, in_$i885, in_$i886, in_$i887, in_$i888, in_$i889, in_$i890, in_$i891, in_$i892, in_$i893, in_$i894, in_$i895, in_$i896, in_$i897, in_$i898, in_$i899, in_$i900, in_$i901, in_$i902, in_$i903, in_$i904, in_$i905, in_$i906, in_$i878, in_$i907, in_$i908, in_$i909, in_$p910, in_$p911, in_$p912, in_$i913, in_$i914, in_$i915, in_$p916, in_$p917, in_$p918, in_$i919, in_$p920, in_$p921, in_$p922, in_$i923, in_$p924, in_$p925, in_$p926, in_$i927, in_$i928, in_$p929, in_$p930, in_$p931, in_$i932, in_$p933, in_$i934, in_$i935, in_$i936, in_$i937, in_$i938, in_$i1000, in_$p1001, in_$p1002, in_$p1003, in_$i1004, in_$i1005, in_$p1006, in_$p1007, in_$p1008, in_$i1009, in_$i1011, in_cmdloc_dummy_var_41, in_cmdloc_dummy_var_42, in_vslice_dummy_var_165, in_vslice_dummy_var_166;
    goto $bb568, exit;

  $bb568:
    assume {:verifier.code 0} true;
    out_$i869 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7225;

  $bb664:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb664_dummy;

  $bb663:
    assume {:verifier.code 0} true;
    out_$i14 := 6;
    assume {:branchcond 1} true;
    goto $bb664;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_vslice_dummy_var_165 := printk.ref.i64(.str.32, out_$i1011);
    goto corral_source_split_7289;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$i1011 := $zext.i32.i64(out_$i875);
    goto corral_source_split_7288;

  $bb641:
    assume out_$i908 == 1;
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb641, $bb642;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i908 := $eq.i32(out_$i907, 15);
    goto corral_source_split_7285;

  $bb640:
    assume {:verifier.code 0} true;
    goto corral_source_split_7284;

  $bb639:
    assume {:verifier.code 0} true;
    out_$i907 := 15;
    goto $bb640;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i907 := out_$i878;
    goto $bb640;

  $bb581:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  $bb637:
    assume {:verifier.code 0} true;
    assume out_$i906 == 1;
    goto $bb581;

  $bb633:
    assume {:verifier.code 0} true;
    assume out_$i904 == 1;
    goto $bb581;

  $bb629:
    assume {:verifier.code 0} true;
    assume out_$i902 == 1;
    goto $bb581;

  $bb625:
    assume {:verifier.code 0} true;
    assume out_$i900 == 1;
    goto $bb581;

  $bb621:
    assume {:verifier.code 0} true;
    assume out_$i898 == 1;
    goto $bb581;

  $bb617:
    assume {:verifier.code 0} true;
    assume out_$i896 == 1;
    goto $bb581;

  $bb613:
    assume {:verifier.code 0} true;
    assume out_$i894 == 1;
    goto $bb581;

  $bb609:
    assume {:verifier.code 0} true;
    assume out_$i892 == 1;
    goto $bb581;

  $bb605:
    assume {:verifier.code 0} true;
    assume out_$i890 == 1;
    goto $bb581;

  $bb601:
    assume {:verifier.code 0} true;
    assume out_$i888 == 1;
    goto $bb581;

  $bb597:
    assume {:verifier.code 0} true;
    assume out_$i886 == 1;
    goto $bb581;

  $bb593:
    assume {:verifier.code 0} true;
    assume out_$i884 == 1;
    goto $bb581;

  $bb589:
    assume {:verifier.code 0} true;
    assume out_$i882 == 1;
    goto $bb581;

  $bb585:
    assume {:verifier.code 0} true;
    assume out_$i880 == 1;
    goto $bb581;

  $bb580:
    assume {:verifier.code 0} true;
    assume out_$i877 == 1;
    goto $bb581;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i878 := 0;
    assume true;
    goto $bb580, $bb582;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$i877 := $eq.i32(out_$i876, out_$i875);
    goto corral_source_split_7238;

  $bb579:
    assume {:verifier.code 0} true;
    out_$i876 := $load.i32($M.13, products);
    goto corral_source_split_7237;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} out_$i875 := inl(out_$i874);
    goto corral_source_split_7235;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i874 := $add.i32(out_$i873, 3200);
    goto corral_source_split_7234;

  $bb577:
    assume {:verifier.code 0} true;
    out_$i873 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7233;

  $bb576:
    assume !(out_$i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    out_$i2 := 6;
    assume true;
    goto $bb576;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    out_$i872 := $eq.i32(out_$i871, $sub.i32(0, 1));
    goto corral_source_split_7231;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} out_$i871 := alloc_cpqarray_hba();
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb572:
    assume out_$i870 == 1;
    goto corral_source_split_7228;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    out_$i119 := 6;
    assume true;
    goto $bb572;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$i870 := $ne.i32(out_$i869, 0);
    goto corral_source_split_7226;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    out_$i878 := 1;
    assume true;
    goto $bb585, $bb586;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i880 := $eq.i32(out_$i879, out_$i875);
    goto corral_source_split_7243;

  $bb584:
    assume {:verifier.code 0} true;
    out_$i879 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7242;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb582:
    assume !(out_$i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    out_$i878 := 2;
    assume true;
    goto $bb589, $bb590;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$i882 := $eq.i32(out_$i881, out_$i875);
    goto corral_source_split_7246;

  $bb588:
    assume {:verifier.code 0} true;
    out_$i881 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7245;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb586:
    assume !(out_$i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    out_$i878 := 3;
    assume true;
    goto $bb593, $bb594;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    out_$i884 := $eq.i32(out_$i883, out_$i875);
    goto corral_source_split_7249;

  $bb592:
    assume {:verifier.code 0} true;
    out_$i883 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7248;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb590:
    assume !(out_$i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i878 := 4;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    out_$i886 := $eq.i32(out_$i885, out_$i875);
    goto corral_source_split_7252;

  $bb596:
    assume {:verifier.code 0} true;
    out_$i885 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7251;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb594:
    assume !(out_$i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$i878 := 5;
    assume true;
    goto $bb601, $bb602;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    out_$i888 := $eq.i32(out_$i887, out_$i875);
    goto corral_source_split_7255;

  $bb600:
    assume {:verifier.code 0} true;
    out_$i887 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7254;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb598:
    assume !(out_$i886 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i878 := 6;
    assume true;
    goto $bb605, $bb606;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$i890 := $eq.i32(out_$i889, out_$i875);
    goto corral_source_split_7258;

  $bb604:
    assume {:verifier.code 0} true;
    out_$i889 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7257;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb602:
    assume !(out_$i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb603;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i878 := 7;
    assume true;
    goto $bb609, $bb610;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i892 := $eq.i32(out_$i891, out_$i875);
    goto corral_source_split_7261;

  $bb608:
    assume {:verifier.code 0} true;
    out_$i891 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7260;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb606:
    assume !(out_$i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$i878 := 8;
    assume true;
    goto $bb613, $bb614;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$i894 := $eq.i32(out_$i893, out_$i875);
    goto corral_source_split_7264;

  $bb612:
    assume {:verifier.code 0} true;
    out_$i893 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7263;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb610:
    assume !(out_$i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i878 := 9;
    assume true;
    goto $bb617, $bb618;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i896 := $eq.i32(out_$i895, out_$i875);
    goto corral_source_split_7267;

  $bb616:
    assume {:verifier.code 0} true;
    out_$i895 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7266;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb614:
    assume !(out_$i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i878 := 10;
    assume true;
    goto $bb621, $bb622;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i898 := $eq.i32(out_$i897, out_$i875);
    goto corral_source_split_7270;

  $bb620:
    assume {:verifier.code 0} true;
    out_$i897 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7269;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb618:
    assume !(out_$i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i878 := 11;
    assume true;
    goto $bb625, $bb626;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$i900 := $eq.i32(out_$i899, out_$i875);
    goto corral_source_split_7273;

  $bb624:
    assume {:verifier.code 0} true;
    out_$i899 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7272;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb622:
    assume !(out_$i898 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i878 := 12;
    assume true;
    goto $bb629, $bb630;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i902 := $eq.i32(out_$i901, out_$i875);
    goto corral_source_split_7276;

  $bb628:
    assume {:verifier.code 0} true;
    out_$i901 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7275;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb626:
    assume !(out_$i900 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i878 := 13;
    assume true;
    goto $bb633, $bb634;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i904 := $eq.i32(out_$i903, out_$i875);
    goto corral_source_split_7279;

  $bb632:
    assume {:verifier.code 0} true;
    out_$i903 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7278;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb630:
    assume !(out_$i902 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$i878 := 14;
    assume true;
    goto $bb637, $bb638;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$i906 := $eq.i32(out_$i905, out_$i875);
    goto corral_source_split_7282;

  $bb636:
    assume {:verifier.code 0} true;
    out_$i905 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7281;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb634:
    assume !(out_$i904 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb638:
    assume !(out_$i906 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} free_hba(out_$i871);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} out_vslice_dummy_var_166 := printk.ref.i64.i64(.str.73, out_$i1004, out_$i1009);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i1009 := $load.i64($M.0, out_$p1008);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$p1008 := $add.ref($add.ref(out_$p1007, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$p1007 := $load.ref($M.6, out_$p1006);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$p1006 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1005, 8));
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i1005 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i1004 := $load.i64($M.0, out_$p1003);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p1003 := $add.ref($add.ref(out_$p1002, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p1002 := $load.ref($M.6, out_$p1001);
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$p1001 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i1000, 8));
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$i1000 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7323;

  $bb644:
    assume out_$i935 == 1;
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i936, out_$i937, out_$i938 := out_$i871, out_$i875, out_$i907;
    assume true;
    goto $bb644;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$i935 := $eq.i64(out_$i934, 0);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i934 := $p2i.ref.i64(out_$p933);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} out_$p933 := __request_region(ioport_resource, out_$i927, out_$i932, .str.30, 0);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$i932 := $load.i64($M.0, out_$p931);
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$p931 := $add.ref($add.ref(out_$p930, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$p930 := $load.ref($M.6, out_$p929);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$p929 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i928, 8));
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$i928 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$i927 := $load.i64($M.0, out_$p926);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p926 := $add.ref($add.ref(out_$p925, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7311;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$p925 := $load.ref($M.6, out_$p924);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$p924 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i923, 8));
    goto corral_source_split_7309;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$i923 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p922, 2047);
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$p922 := $add.ref($add.ref(out_$p921, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$p921 := $load.ref($M.6, out_$p920);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$p920 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i919, 8));
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$i919 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p918, out_$i914);
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$p918 := $add.ref($add.ref(out_$p917, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    out_$p917 := $load.ref($M.6, out_$p916);
    goto corral_source_split_7300;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$p916 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i915, 8));
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i915 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i914 := $sext.i32.i64(out_$i913);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i913 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 1172} out_cmdloc_dummy_var_42 := $memset.i8(out_cmdloc_dummy_var_41, out_$p912, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_42;
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$p912 := $bitcast.ref.ref(out_$p911);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$p911 := $load.ref($M.6, out_$p910);
    goto corral_source_split_7293;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$p910 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i909, 8));
    goto corral_source_split_7292;

  $bb643:
    assume {:verifier.code 0} true;
    out_$i909 := $sext.i32.i64(out_$i871);
    goto corral_source_split_7291;

  $bb642:
    assume !(out_$i908 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb664_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i878, out_$i907, out_$i908, out_$i909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$i915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$p921, out_$p922, out_$i923, out_$p924, out_$p925, out_$p926, out_$i927, out_$i928, out_$p929, out_$p930, out_$p931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i1000, out_$p1001, out_$p1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$p1007, out_$p1008, out_$i1009, out_$i1011, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_vslice_dummy_var_165, out_vslice_dummy_var_166 := cpqarray_eisa_detect_loop_$bb568(out_$i2, out_$i119, out_$i14, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i878, out_$i907, out_$i908, out_$i909, out_$p910, out_$p911, out_$p912, out_$i913, out_$i914, out_$i915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$p921, out_$p922, out_$i923, out_$p924, out_$p925, out_$p926, out_$i927, out_$i928, out_$p929, out_$p930, out_$p931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i1000, out_$p1001, out_$p1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$p1007, out_$p1008, out_$i1009, out_$i1011, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_vslice_dummy_var_165, out_vslice_dummy_var_166);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb568(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i32, in_$i875: i32, in_$i876: i32, in_$i877: i1, in_$i879: i32, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$i883: i32, in_$i884: i1, in_$i885: i32, in_$i886: i1, in_$i887: i32, in_$i888: i1, in_$i889: i32, in_$i890: i1, in_$i891: i32, in_$i892: i1, in_$i893: i32, in_$i894: i1, in_$i895: i32, in_$i896: i1, in_$i897: i32, in_$i898: i1, in_$i899: i32, in_$i900: i1, in_$i901: i32, in_$i902: i1, in_$i903: i32, in_$i904: i1, in_$i905: i32, in_$i906: i1, in_$i878: i32, in_$i907: i32, in_$i908: i1, in_$i909: i64, in_$p910: ref, in_$p911: ref, in_$p912: ref, in_$i913: i32, in_$i914: i64, in_$i915: i64, in_$p916: ref, in_$p917: ref, in_$p918: ref, in_$i919: i64, in_$p920: ref, in_$p921: ref, in_$p922: ref, in_$i923: i64, in_$p924: ref, in_$p925: ref, in_$p926: ref, in_$i927: i64, in_$i928: i64, in_$p929: ref, in_$p930: ref, in_$p931: ref, in_$i932: i64, in_$p933: ref, in_$i934: i64, in_$i935: i1, in_$i936: i32, in_$i937: i32, in_$i938: i32, in_$i1000: i64, in_$p1001: ref, in_$p1002: ref, in_$p1003: ref, in_$i1004: i64, in_$i1005: i64, in_$p1006: ref, in_$p1007: ref, in_$p1008: ref, in_$i1009: i64, in_$i1011: i64, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i32, out_$i875: i32, out_$i876: i32, out_$i877: i1, out_$i879: i32, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$i883: i32, out_$i884: i1, out_$i885: i32, out_$i886: i1, out_$i887: i32, out_$i888: i1, out_$i889: i32, out_$i890: i1, out_$i891: i32, out_$i892: i1, out_$i893: i32, out_$i894: i1, out_$i895: i32, out_$i896: i1, out_$i897: i32, out_$i898: i1, out_$i899: i32, out_$i900: i1, out_$i901: i32, out_$i902: i1, out_$i903: i32, out_$i904: i1, out_$i905: i32, out_$i906: i1, out_$i878: i32, out_$i907: i32, out_$i908: i1, out_$i909: i64, out_$p910: ref, out_$p911: ref, out_$p912: ref, out_$i913: i32, out_$i914: i64, out_$i915: i64, out_$p916: ref, out_$p917: ref, out_$p918: ref, out_$i919: i64, out_$p920: ref, out_$p921: ref, out_$p922: ref, out_$i923: i64, out_$p924: ref, out_$p925: ref, out_$p926: ref, out_$i927: i64, out_$i928: i64, out_$p929: ref, out_$p930: ref, out_$p931: ref, out_$i932: i64, out_$p933: ref, out_$i934: i64, out_$i935: i1, out_$i936: i32, out_$i937: i32, out_$i938: i32, out_$i1000: i64, out_$p1001: ref, out_$p1002: ref, out_$p1003: ref, out_$i1004: i64, out_$i1005: i64, out_$p1006: ref, out_$p1007: ref, out_$p1008: ref, out_$i1009: i64, out_$i1011: i64, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb474(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i725: i32, in_$i726: i1, in_$i727: i32, in_$i728: i1, in_$i729: i32, in_$i730: i32, in_$i731: i32, in_$i732: i32, in_$i733: i1, in_$i735: i32, in_$i736: i1, in_$i737: i32, in_$i738: i1, in_$i739: i32, in_$i740: i1, in_$i741: i32, in_$i742: i1, in_$i743: i32, in_$i744: i1, in_$i745: i32, in_$i746: i1, in_$i747: i32, in_$i748: i1, in_$i749: i32, in_$i750: i1, in_$i751: i32, in_$i752: i1, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i32, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i32, in_$i762: i1, in_$i734: i32, in_$i763: i32, in_$i764: i1, in_$i765: i64, in_$p766: ref, in_$p767: ref, in_$p768: ref, in_$i769: i32, in_$i770: i64, in_$i771: i64, in_$p772: ref, in_$p773: ref, in_$p774: ref, in_$i775: i64, in_$p776: ref, in_$p777: ref, in_$p778: ref, in_$i779: i64, in_$p780: ref, in_$p781: ref, in_$p782: ref, in_$i783: i64, in_$i784: i64, in_$p785: ref, in_$p786: ref, in_$p787: ref, in_$i788: i64, in_$p789: ref, in_$i790: i64, in_$i791: i1, in_$i792: i32, in_$i793: i32, in_$i794: i32, in_$i856: i64, in_$p857: ref, in_$p858: ref, in_$p859: ref, in_$i860: i64, in_$i861: i64, in_$p862: ref, in_$p863: ref, in_$p864: ref, in_$i865: i64, in_$i867: i64, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i725: i32, out_$i726: i1, out_$i727: i32, out_$i728: i1, out_$i729: i32, out_$i730: i32, out_$i731: i32, out_$i732: i32, out_$i733: i1, out_$i735: i32, out_$i736: i1, out_$i737: i32, out_$i738: i1, out_$i739: i32, out_$i740: i1, out_$i741: i32, out_$i742: i1, out_$i743: i32, out_$i744: i1, out_$i745: i32, out_$i746: i1, out_$i747: i32, out_$i748: i1, out_$i749: i32, out_$i750: i1, out_$i751: i32, out_$i752: i1, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i32, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i32, out_$i762: i1, out_$i734: i32, out_$i763: i32, out_$i764: i1, out_$i765: i64, out_$p766: ref, out_$p767: ref, out_$p768: ref, out_$i769: i32, out_$i770: i64, out_$i771: i64, out_$p772: ref, out_$p773: ref, out_$p774: ref, out_$i775: i64, out_$p776: ref, out_$p777: ref, out_$p778: ref, out_$i779: i64, out_$p780: ref, out_$p781: ref, out_$p782: ref, out_$i783: i64, out_$i784: i64, out_$p785: ref, out_$p786: ref, out_$p787: ref, out_$i788: i64, out_$p789: ref, out_$i790: i64, out_$i791: i1, out_$i792: i32, out_$i793: i32, out_$i794: i32, out_$i856: i64, out_$p857: ref, out_$p858: ref, out_$p859: ref, out_$i860: i64, out_$i861: i64, out_$p862: ref, out_$p863: ref, out_$p864: ref, out_$i865: i64, out_$i867: i64, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i734, out_$i763, out_$i764, out_$i765, out_$p766, out_$p767, out_$p768, out_$i769, out_$i770, out_$i771, out_$p772, out_$p773, out_$p774, out_$i775, out_$p776, out_$p777, out_$p778, out_$i779, out_$p780, out_$p781, out_$p782, out_$i783, out_$i784, out_$p785, out_$p786, out_$p787, out_$i788, out_$p789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i856, out_$p857, out_$p858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$p864, out_$i865, out_$i867, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_161, out_vslice_dummy_var_162 := in_$i2, in_$i119, in_$i14, in_$i725, in_$i726, in_$i727, in_$i728, in_$i729, in_$i730, in_$i731, in_$i732, in_$i733, in_$i735, in_$i736, in_$i737, in_$i738, in_$i739, in_$i740, in_$i741, in_$i742, in_$i743, in_$i744, in_$i745, in_$i746, in_$i747, in_$i748, in_$i749, in_$i750, in_$i751, in_$i752, in_$i753, in_$i754, in_$i755, in_$i756, in_$i757, in_$i758, in_$i759, in_$i760, in_$i761, in_$i762, in_$i734, in_$i763, in_$i764, in_$i765, in_$p766, in_$p767, in_$p768, in_$i769, in_$i770, in_$i771, in_$p772, in_$p773, in_$p774, in_$i775, in_$p776, in_$p777, in_$p778, in_$i779, in_$p780, in_$p781, in_$p782, in_$i783, in_$i784, in_$p785, in_$p786, in_$p787, in_$i788, in_$p789, in_$i790, in_$i791, in_$i792, in_$i793, in_$i794, in_$i856, in_$p857, in_$p858, in_$p859, in_$i860, in_$i861, in_$p862, in_$p863, in_$p864, in_$i865, in_$i867, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_vslice_dummy_var_161, in_vslice_dummy_var_162;
    goto $bb474, exit;

  $bb474:
    assume {:verifier.code 0} true;
    out_$i725 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7034;

  $bb570:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb570_dummy;

  $bb569:
    assume {:verifier.code 0} true;
    out_$i14 := 5;
    assume {:branchcond 1} true;
    goto $bb570;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} out_vslice_dummy_var_161 := printk.ref.i64(.str.32, out_$i867);
    goto corral_source_split_7098;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i867 := $zext.i32.i64(out_$i731);
    goto corral_source_split_7097;

  $bb547:
    assume out_$i764 == 1;
    goto corral_source_split_7096;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$i764 := $eq.i32(out_$i763, 15);
    goto corral_source_split_7094;

  $bb546:
    assume {:verifier.code 0} true;
    goto corral_source_split_7093;

  $bb545:
    assume {:verifier.code 0} true;
    out_$i763 := 15;
    goto $bb546;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i763 := out_$i734;
    goto $bb546;

  $bb487:
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;

  $bb543:
    assume {:verifier.code 0} true;
    assume out_$i762 == 1;
    goto $bb487;

  $bb539:
    assume {:verifier.code 0} true;
    assume out_$i760 == 1;
    goto $bb487;

  $bb535:
    assume {:verifier.code 0} true;
    assume out_$i758 == 1;
    goto $bb487;

  $bb531:
    assume {:verifier.code 0} true;
    assume out_$i756 == 1;
    goto $bb487;

  $bb527:
    assume {:verifier.code 0} true;
    assume out_$i754 == 1;
    goto $bb487;

  $bb523:
    assume {:verifier.code 0} true;
    assume out_$i752 == 1;
    goto $bb487;

  $bb519:
    assume {:verifier.code 0} true;
    assume out_$i750 == 1;
    goto $bb487;

  $bb515:
    assume {:verifier.code 0} true;
    assume out_$i748 == 1;
    goto $bb487;

  $bb511:
    assume {:verifier.code 0} true;
    assume out_$i746 == 1;
    goto $bb487;

  $bb507:
    assume {:verifier.code 0} true;
    assume out_$i744 == 1;
    goto $bb487;

  $bb503:
    assume {:verifier.code 0} true;
    assume out_$i742 == 1;
    goto $bb487;

  $bb499:
    assume {:verifier.code 0} true;
    assume out_$i740 == 1;
    goto $bb487;

  $bb495:
    assume {:verifier.code 0} true;
    assume out_$i738 == 1;
    goto $bb487;

  $bb491:
    assume {:verifier.code 0} true;
    assume out_$i736 == 1;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    assume out_$i733 == 1;
    goto $bb487;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$i734 := 0;
    assume true;
    goto $bb486, $bb488;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$i733 := $eq.i32(out_$i732, out_$i731);
    goto corral_source_split_7047;

  $bb485:
    assume {:verifier.code 0} true;
    out_$i732 := $load.i32($M.13, products);
    goto corral_source_split_7046;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} out_$i731 := inl(out_$i730);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i730 := $add.i32(out_$i729, 3200);
    goto corral_source_split_7043;

  $bb483:
    assume {:verifier.code 0} true;
    out_$i729 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7042;

  $bb482:
    assume !(out_$i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i2 := 5;
    assume true;
    goto $bb482;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i728 := $eq.i32(out_$i727, $sub.i32(0, 1));
    goto corral_source_split_7040;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} out_$i727 := alloc_cpqarray_hba();
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb478:
    assume out_$i726 == 1;
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i119 := 5;
    assume true;
    goto $bb478;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$i726 := $ne.i32(out_$i725, 0);
    goto corral_source_split_7035;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i734 := 1;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i736 := $eq.i32(out_$i735, out_$i731);
    goto corral_source_split_7052;

  $bb490:
    assume {:verifier.code 0} true;
    out_$i735 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7051;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb488:
    assume !(out_$i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$i734 := 2;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i738 := $eq.i32(out_$i737, out_$i731);
    goto corral_source_split_7055;

  $bb494:
    assume {:verifier.code 0} true;
    out_$i737 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7054;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb492:
    assume !(out_$i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i734 := 3;
    assume true;
    goto $bb499, $bb500;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    out_$i740 := $eq.i32(out_$i739, out_$i731);
    goto corral_source_split_7058;

  $bb498:
    assume {:verifier.code 0} true;
    out_$i739 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7057;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb496:
    assume !(out_$i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$i734 := 4;
    assume true;
    goto $bb503, $bb504;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i742 := $eq.i32(out_$i741, out_$i731);
    goto corral_source_split_7061;

  $bb502:
    assume {:verifier.code 0} true;
    out_$i741 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7060;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb500:
    assume !(out_$i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i734 := 5;
    assume true;
    goto $bb507, $bb508;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$i744 := $eq.i32(out_$i743, out_$i731);
    goto corral_source_split_7064;

  $bb506:
    assume {:verifier.code 0} true;
    out_$i743 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7063;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb504:
    assume !(out_$i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i734 := 6;
    assume true;
    goto $bb511, $bb512;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i746 := $eq.i32(out_$i745, out_$i731);
    goto corral_source_split_7067;

  $bb510:
    assume {:verifier.code 0} true;
    out_$i745 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7066;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb508:
    assume !(out_$i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i734 := 7;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i748 := $eq.i32(out_$i747, out_$i731);
    goto corral_source_split_7070;

  $bb514:
    assume {:verifier.code 0} true;
    out_$i747 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7069;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb512:
    assume !(out_$i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$i734 := 8;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$i750 := $eq.i32(out_$i749, out_$i731);
    goto corral_source_split_7073;

  $bb518:
    assume {:verifier.code 0} true;
    out_$i749 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7072;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb516:
    assume !(out_$i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i734 := 9;
    assume true;
    goto $bb523, $bb524;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i752 := $eq.i32(out_$i751, out_$i731);
    goto corral_source_split_7076;

  $bb522:
    assume {:verifier.code 0} true;
    out_$i751 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7075;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb520:
    assume !(out_$i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i734 := 10;
    assume true;
    goto $bb527, $bb528;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$i754 := $eq.i32(out_$i753, out_$i731);
    goto corral_source_split_7079;

  $bb526:
    assume {:verifier.code 0} true;
    out_$i753 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7078;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb524:
    assume !(out_$i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    out_$i734 := 11;
    assume true;
    goto $bb531, $bb532;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    out_$i756 := $eq.i32(out_$i755, out_$i731);
    goto corral_source_split_7082;

  $bb530:
    assume {:verifier.code 0} true;
    out_$i755 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7081;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb528:
    assume !(out_$i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    out_$i734 := 12;
    assume true;
    goto $bb535, $bb536;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$i758 := $eq.i32(out_$i757, out_$i731);
    goto corral_source_split_7085;

  $bb534:
    assume {:verifier.code 0} true;
    out_$i757 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7084;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb532:
    assume !(out_$i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$i734 := 13;
    assume true;
    goto $bb539, $bb540;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    out_$i760 := $eq.i32(out_$i759, out_$i731);
    goto corral_source_split_7088;

  $bb538:
    assume {:verifier.code 0} true;
    out_$i759 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7087;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb536:
    assume !(out_$i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$i734 := 14;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i762 := $eq.i32(out_$i761, out_$i731);
    goto corral_source_split_7091;

  $bb542:
    assume {:verifier.code 0} true;
    out_$i761 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_7090;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb540:
    assume !(out_$i760 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb544:
    assume !(out_$i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} free_hba(out_$i727);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} out_vslice_dummy_var_162 := printk.ref.i64.i64(.str.73, out_$i860, out_$i865);
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$i865 := $load.i64($M.0, out_$p864);
    goto corral_source_split_7141;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$p864 := $add.ref($add.ref(out_$p863, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$p863 := $load.ref($M.6, out_$p862);
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$p862 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i861, 8));
    goto corral_source_split_7138;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i861 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$i860 := $load.i64($M.0, out_$p859);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$p859 := $add.ref($add.ref(out_$p858, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$p858 := $load.ref($M.6, out_$p857);
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    out_$p857 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i856, 8));
    goto corral_source_split_7133;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    out_$i856 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7132;

  $bb550:
    assume out_$i791 == 1;
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i792, out_$i793, out_$i794 := out_$i727, out_$i731, out_$i763;
    assume true;
    goto $bb550;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i791 := $eq.i64(out_$i790, 0);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$i790 := $p2i.ref.i64(out_$p789);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} out_$p789 := __request_region(ioport_resource, out_$i783, out_$i788, .str.30, 0);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i788 := $load.i64($M.0, out_$p787);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$p787 := $add.ref($add.ref(out_$p786, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$p786 := $load.ref($M.6, out_$p785);
    goto corral_source_split_7124;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    out_$p785 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i784, 8));
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i784 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$i783 := $load.i64($M.0, out_$p782);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$p782 := $add.ref($add.ref(out_$p781, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$p781 := $load.ref($M.6, out_$p780);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$p780 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i779, 8));
    goto corral_source_split_7118;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$i779 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p778, 2047);
    goto corral_source_split_7116;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$p778 := $add.ref($add.ref(out_$p777, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$p777 := $load.ref($M.6, out_$p776);
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$p776 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i775, 8));
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    out_$i775 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7112;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p774, out_$i770);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$p774 := $add.ref($add.ref(out_$p773, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_7110;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$p773 := $load.ref($M.6, out_$p772);
    goto corral_source_split_7109;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$p772 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i771, 8));
    goto corral_source_split_7108;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i771 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$i770 := $sext.i32.i64(out_$i769);
    goto corral_source_split_7106;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$i769 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1160} out_cmdloc_dummy_var_37 := $memset.i8(out_cmdloc_dummy_var_36, out_$p768, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_37;
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$p768 := $bitcast.ref.ref(out_$p767);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$p767 := $load.ref($M.6, out_$p766);
    goto corral_source_split_7102;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$p766 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i765, 8));
    goto corral_source_split_7101;

  $bb549:
    assume {:verifier.code 0} true;
    out_$i765 := $sext.i32.i64(out_$i727);
    goto corral_source_split_7100;

  $bb548:
    assume !(out_$i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb570_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i734, out_$i763, out_$i764, out_$i765, out_$p766, out_$p767, out_$p768, out_$i769, out_$i770, out_$i771, out_$p772, out_$p773, out_$p774, out_$i775, out_$p776, out_$p777, out_$p778, out_$i779, out_$p780, out_$p781, out_$p782, out_$i783, out_$i784, out_$p785, out_$p786, out_$p787, out_$i788, out_$p789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i856, out_$p857, out_$p858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$p864, out_$i865, out_$i867, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_161, out_vslice_dummy_var_162 := cpqarray_eisa_detect_loop_$bb474(out_$i2, out_$i119, out_$i14, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i734, out_$i763, out_$i764, out_$i765, out_$p766, out_$p767, out_$p768, out_$i769, out_$i770, out_$i771, out_$p772, out_$p773, out_$p774, out_$i775, out_$p776, out_$p777, out_$p778, out_$i779, out_$p780, out_$p781, out_$p782, out_$i783, out_$i784, out_$p785, out_$p786, out_$p787, out_$i788, out_$p789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i856, out_$p857, out_$p858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$p864, out_$i865, out_$i867, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_161, out_vslice_dummy_var_162);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb474(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i725: i32, in_$i726: i1, in_$i727: i32, in_$i728: i1, in_$i729: i32, in_$i730: i32, in_$i731: i32, in_$i732: i32, in_$i733: i1, in_$i735: i32, in_$i736: i1, in_$i737: i32, in_$i738: i1, in_$i739: i32, in_$i740: i1, in_$i741: i32, in_$i742: i1, in_$i743: i32, in_$i744: i1, in_$i745: i32, in_$i746: i1, in_$i747: i32, in_$i748: i1, in_$i749: i32, in_$i750: i1, in_$i751: i32, in_$i752: i1, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i32, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i32, in_$i762: i1, in_$i734: i32, in_$i763: i32, in_$i764: i1, in_$i765: i64, in_$p766: ref, in_$p767: ref, in_$p768: ref, in_$i769: i32, in_$i770: i64, in_$i771: i64, in_$p772: ref, in_$p773: ref, in_$p774: ref, in_$i775: i64, in_$p776: ref, in_$p777: ref, in_$p778: ref, in_$i779: i64, in_$p780: ref, in_$p781: ref, in_$p782: ref, in_$i783: i64, in_$i784: i64, in_$p785: ref, in_$p786: ref, in_$p787: ref, in_$i788: i64, in_$p789: ref, in_$i790: i64, in_$i791: i1, in_$i792: i32, in_$i793: i32, in_$i794: i32, in_$i856: i64, in_$p857: ref, in_$p858: ref, in_$p859: ref, in_$i860: i64, in_$i861: i64, in_$p862: ref, in_$p863: ref, in_$p864: ref, in_$i865: i64, in_$i867: i64, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i725: i32, out_$i726: i1, out_$i727: i32, out_$i728: i1, out_$i729: i32, out_$i730: i32, out_$i731: i32, out_$i732: i32, out_$i733: i1, out_$i735: i32, out_$i736: i1, out_$i737: i32, out_$i738: i1, out_$i739: i32, out_$i740: i1, out_$i741: i32, out_$i742: i1, out_$i743: i32, out_$i744: i1, out_$i745: i32, out_$i746: i1, out_$i747: i32, out_$i748: i1, out_$i749: i32, out_$i750: i1, out_$i751: i32, out_$i752: i1, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i32, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i32, out_$i762: i1, out_$i734: i32, out_$i763: i32, out_$i764: i1, out_$i765: i64, out_$p766: ref, out_$p767: ref, out_$p768: ref, out_$i769: i32, out_$i770: i64, out_$i771: i64, out_$p772: ref, out_$p773: ref, out_$p774: ref, out_$i775: i64, out_$p776: ref, out_$p777: ref, out_$p778: ref, out_$i779: i64, out_$p780: ref, out_$p781: ref, out_$p782: ref, out_$i783: i64, out_$i784: i64, out_$p785: ref, out_$p786: ref, out_$p787: ref, out_$i788: i64, out_$p789: ref, out_$i790: i64, out_$i791: i1, out_$i792: i32, out_$i793: i32, out_$i794: i32, out_$i856: i64, out_$p857: ref, out_$p858: ref, out_$p859: ref, out_$i860: i64, out_$i861: i64, out_$p862: ref, out_$p863: ref, out_$p864: ref, out_$i865: i64, out_$i867: i64, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb380(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i581: i32, in_$i582: i1, in_$i583: i32, in_$i584: i1, in_$i585: i32, in_$i586: i32, in_$i587: i32, in_$i588: i32, in_$i589: i1, in_$i591: i32, in_$i592: i1, in_$i593: i32, in_$i594: i1, in_$i595: i32, in_$i596: i1, in_$i597: i32, in_$i598: i1, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i602: i1, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i32, in_$i608: i1, in_$i609: i32, in_$i610: i1, in_$i611: i32, in_$i612: i1, in_$i613: i32, in_$i614: i1, in_$i615: i32, in_$i616: i1, in_$i617: i32, in_$i618: i1, in_$i590: i32, in_$i619: i32, in_$i620: i1, in_$i621: i64, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$i625: i32, in_$i626: i64, in_$i627: i64, in_$p628: ref, in_$p629: ref, in_$p630: ref, in_$i631: i64, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$i635: i64, in_$p636: ref, in_$p637: ref, in_$p638: ref, in_$i639: i64, in_$i640: i64, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i64, in_$p645: ref, in_$i646: i64, in_$i647: i1, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i712: i64, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i716: i64, in_$i717: i64, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$i721: i64, in_$i723: i64, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i581: i32, out_$i582: i1, out_$i583: i32, out_$i584: i1, out_$i585: i32, out_$i586: i32, out_$i587: i32, out_$i588: i32, out_$i589: i1, out_$i591: i32, out_$i592: i1, out_$i593: i32, out_$i594: i1, out_$i595: i32, out_$i596: i1, out_$i597: i32, out_$i598: i1, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i602: i1, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i32, out_$i608: i1, out_$i609: i32, out_$i610: i1, out_$i611: i32, out_$i612: i1, out_$i613: i32, out_$i614: i1, out_$i615: i32, out_$i616: i1, out_$i617: i32, out_$i618: i1, out_$i590: i32, out_$i619: i32, out_$i620: i1, out_$i621: i64, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$i625: i32, out_$i626: i64, out_$i627: i64, out_$p628: ref, out_$p629: ref, out_$p630: ref, out_$i631: i64, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$i635: i64, out_$p636: ref, out_$p637: ref, out_$p638: ref, out_$i639: i64, out_$i640: i64, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i64, out_$p645: ref, out_$i646: i64, out_$i647: i1, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i712: i64, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i716: i64, out_$i717: i64, out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$i721: i64, out_$i723: i64, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i581, out_$i582, out_$i583, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$i590, out_$i619, out_$i620, out_$i621, out_$p622, out_$p623, out_$p624, out_$i625, out_$i626, out_$i627, out_$p628, out_$p629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$i635, out_$p636, out_$p637, out_$p638, out_$i639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$i646, out_$i647, out_$i648, out_$i649, out_$i650, out_$i712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i723, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := in_$i2, in_$i119, in_$i14, in_$i581, in_$i582, in_$i583, in_$i584, in_$i585, in_$i586, in_$i587, in_$i588, in_$i589, in_$i591, in_$i592, in_$i593, in_$i594, in_$i595, in_$i596, in_$i597, in_$i598, in_$i599, in_$i600, in_$i601, in_$i602, in_$i603, in_$i604, in_$i605, in_$i606, in_$i607, in_$i608, in_$i609, in_$i610, in_$i611, in_$i612, in_$i613, in_$i614, in_$i615, in_$i616, in_$i617, in_$i618, in_$i590, in_$i619, in_$i620, in_$i621, in_$p622, in_$p623, in_$p624, in_$i625, in_$i626, in_$i627, in_$p628, in_$p629, in_$p630, in_$i631, in_$p632, in_$p633, in_$p634, in_$i635, in_$p636, in_$p637, in_$p638, in_$i639, in_$i640, in_$p641, in_$p642, in_$p643, in_$i644, in_$p645, in_$i646, in_$i647, in_$i648, in_$i649, in_$i650, in_$i712, in_$p713, in_$p714, in_$p715, in_$i716, in_$i717, in_$p718, in_$p719, in_$p720, in_$i721, in_$i723, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_vslice_dummy_var_157, in_vslice_dummy_var_158;
    goto $bb380, exit;

  $bb380:
    assume {:verifier.code 0} true;
    out_$i581 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6843;

  $bb476:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb476_dummy;

  $bb475:
    assume {:verifier.code 0} true;
    out_$i14 := 4;
    assume {:branchcond 1} true;
    goto $bb476;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_vslice_dummy_var_157 := printk.ref.i64(.str.32, out_$i723);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i723 := $zext.i32.i64(out_$i587);
    goto corral_source_split_6906;

  $bb453:
    assume out_$i620 == 1;
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$i620 := $eq.i32(out_$i619, 15);
    goto corral_source_split_6903;

  $bb452:
    assume {:verifier.code 0} true;
    goto corral_source_split_6902;

  $bb451:
    assume {:verifier.code 0} true;
    out_$i619 := 15;
    goto $bb452;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    out_$i619 := out_$i590;
    goto $bb452;

  $bb393:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  $bb449:
    assume {:verifier.code 0} true;
    assume out_$i618 == 1;
    goto $bb393;

  $bb445:
    assume {:verifier.code 0} true;
    assume out_$i616 == 1;
    goto $bb393;

  $bb441:
    assume {:verifier.code 0} true;
    assume out_$i614 == 1;
    goto $bb393;

  $bb437:
    assume {:verifier.code 0} true;
    assume out_$i612 == 1;
    goto $bb393;

  $bb433:
    assume {:verifier.code 0} true;
    assume out_$i610 == 1;
    goto $bb393;

  $bb429:
    assume {:verifier.code 0} true;
    assume out_$i608 == 1;
    goto $bb393;

  $bb425:
    assume {:verifier.code 0} true;
    assume out_$i606 == 1;
    goto $bb393;

  $bb421:
    assume {:verifier.code 0} true;
    assume out_$i604 == 1;
    goto $bb393;

  $bb417:
    assume {:verifier.code 0} true;
    assume out_$i602 == 1;
    goto $bb393;

  $bb413:
    assume {:verifier.code 0} true;
    assume out_$i600 == 1;
    goto $bb393;

  $bb409:
    assume {:verifier.code 0} true;
    assume out_$i598 == 1;
    goto $bb393;

  $bb405:
    assume {:verifier.code 0} true;
    assume out_$i596 == 1;
    goto $bb393;

  $bb401:
    assume {:verifier.code 0} true;
    assume out_$i594 == 1;
    goto $bb393;

  $bb397:
    assume {:verifier.code 0} true;
    assume out_$i592 == 1;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    assume out_$i589 == 1;
    goto $bb393;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i590 := 0;
    assume true;
    goto $bb392, $bb394;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i589 := $eq.i32(out_$i588, out_$i587);
    goto corral_source_split_6856;

  $bb391:
    assume {:verifier.code 0} true;
    out_$i588 := $load.i32($M.13, products);
    goto corral_source_split_6855;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} out_$i587 := inl(out_$i586);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i586 := $add.i32(out_$i585, 3200);
    goto corral_source_split_6852;

  $bb389:
    assume {:verifier.code 0} true;
    out_$i585 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6851;

  $bb388:
    assume !(out_$i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i2 := 4;
    assume true;
    goto $bb388;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i584 := $eq.i32(out_$i583, $sub.i32(0, 1));
    goto corral_source_split_6849;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_$i583 := alloc_cpqarray_hba();
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb384:
    assume out_$i582 == 1;
    goto corral_source_split_6846;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i119 := 4;
    assume true;
    goto $bb384;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i582 := $ne.i32(out_$i581, 0);
    goto corral_source_split_6844;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$i590 := 1;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i592 := $eq.i32(out_$i591, out_$i587);
    goto corral_source_split_6861;

  $bb396:
    assume {:verifier.code 0} true;
    out_$i591 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6860;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb394:
    assume !(out_$i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i590 := 2;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i594 := $eq.i32(out_$i593, out_$i587);
    goto corral_source_split_6864;

  $bb400:
    assume {:verifier.code 0} true;
    out_$i593 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6863;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb398:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i590 := 3;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i596 := $eq.i32(out_$i595, out_$i587);
    goto corral_source_split_6867;

  $bb404:
    assume {:verifier.code 0} true;
    out_$i595 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6866;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb402:
    assume !(out_$i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$i590 := 4;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$i598 := $eq.i32(out_$i597, out_$i587);
    goto corral_source_split_6870;

  $bb408:
    assume {:verifier.code 0} true;
    out_$i597 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6869;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb406:
    assume !(out_$i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i590 := 5;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i600 := $eq.i32(out_$i599, out_$i587);
    goto corral_source_split_6873;

  $bb412:
    assume {:verifier.code 0} true;
    out_$i599 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6872;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb410:
    assume !(out_$i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i590 := 6;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$i602 := $eq.i32(out_$i601, out_$i587);
    goto corral_source_split_6876;

  $bb416:
    assume {:verifier.code 0} true;
    out_$i601 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6875;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb414:
    assume !(out_$i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i590 := 7;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i604 := $eq.i32(out_$i603, out_$i587);
    goto corral_source_split_6879;

  $bb420:
    assume {:verifier.code 0} true;
    out_$i603 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6878;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb418:
    assume !(out_$i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i590 := 8;
    assume true;
    goto $bb425, $bb426;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i606 := $eq.i32(out_$i605, out_$i587);
    goto corral_source_split_6882;

  $bb424:
    assume {:verifier.code 0} true;
    out_$i605 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6881;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb422:
    assume !(out_$i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i590 := 9;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i608 := $eq.i32(out_$i607, out_$i587);
    goto corral_source_split_6885;

  $bb428:
    assume {:verifier.code 0} true;
    out_$i607 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6884;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb426:
    assume !(out_$i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i590 := 10;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$i610 := $eq.i32(out_$i609, out_$i587);
    goto corral_source_split_6888;

  $bb432:
    assume {:verifier.code 0} true;
    out_$i609 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6887;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb430:
    assume !(out_$i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    out_$i590 := 11;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i612 := $eq.i32(out_$i611, out_$i587);
    goto corral_source_split_6891;

  $bb436:
    assume {:verifier.code 0} true;
    out_$i611 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6890;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb434:
    assume !(out_$i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i590 := 12;
    assume true;
    goto $bb441, $bb442;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i614 := $eq.i32(out_$i613, out_$i587);
    goto corral_source_split_6894;

  $bb440:
    assume {:verifier.code 0} true;
    out_$i613 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6893;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb438:
    assume !(out_$i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$i590 := 13;
    assume true;
    goto $bb445, $bb446;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i616 := $eq.i32(out_$i615, out_$i587);
    goto corral_source_split_6897;

  $bb444:
    assume {:verifier.code 0} true;
    out_$i615 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6896;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb442:
    assume !(out_$i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i590 := 14;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i618 := $eq.i32(out_$i617, out_$i587);
    goto corral_source_split_6900;

  $bb448:
    assume {:verifier.code 0} true;
    out_$i617 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6899;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb446:
    assume !(out_$i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb450:
    assume !(out_$i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} free_hba(out_$i583);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} out_vslice_dummy_var_158 := printk.ref.i64.i64(.str.73, out_$i716, out_$i721);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i721 := $load.i64($M.0, out_$p720);
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$p720 := $add.ref($add.ref(out_$p719, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$p719 := $load.ref($M.6, out_$p718);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$p718 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i717, 8));
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i717 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i716 := $load.i64($M.0, out_$p715);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$p715 := $add.ref($add.ref(out_$p714, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$p714 := $load.ref($M.6, out_$p713);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p713 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i712, 8));
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i712 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6941;

  $bb456:
    assume out_$i647 == 1;
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i648, out_$i649, out_$i650 := out_$i583, out_$i587, out_$i619;
    assume true;
    goto $bb456;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i647 := $eq.i64(out_$i646, 0);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i646 := $p2i.ref.i64(out_$p645);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_$p645 := __request_region(ioport_resource, out_$i639, out_$i644, .str.30, 0);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$i644 := $load.i64($M.0, out_$p643);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(out_$p642, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$p642 := $load.ref($M.6, out_$p641);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i640, 8));
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i640 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i639 := $load.i64($M.0, out_$p638);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$p638 := $add.ref($add.ref(out_$p637, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$p637 := $load.ref($M.6, out_$p636);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$p636 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i635, 8));
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i635 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p634, 2047);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref(out_$p633, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$p633 := $load.ref($M.6, out_$p632);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i631, 8));
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i631 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p630, out_$i626);
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$p630 := $add.ref($add.ref(out_$p629, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$p629 := $load.ref($M.6, out_$p628);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$p628 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i627, 8));
    goto corral_source_split_6917;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    out_$i627 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$i626 := $sext.i32.i64(out_$i625);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i625 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1148} out_cmdloc_dummy_var_32 := $memset.i8(out_cmdloc_dummy_var_31, out_$p624, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$p624 := $bitcast.ref.ref(out_$p623);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$p623 := $load.ref($M.6, out_$p622);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i621, 8));
    goto corral_source_split_6910;

  $bb455:
    assume {:verifier.code 0} true;
    out_$i621 := $sext.i32.i64(out_$i583);
    goto corral_source_split_6909;

  $bb454:
    assume !(out_$i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb476_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i581, out_$i582, out_$i583, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$i590, out_$i619, out_$i620, out_$i621, out_$p622, out_$p623, out_$p624, out_$i625, out_$i626, out_$i627, out_$p628, out_$p629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$i635, out_$p636, out_$p637, out_$p638, out_$i639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$i646, out_$i647, out_$i648, out_$i649, out_$i650, out_$i712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i723, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := cpqarray_eisa_detect_loop_$bb380(out_$i2, out_$i119, out_$i14, out_$i581, out_$i582, out_$i583, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$i590, out_$i619, out_$i620, out_$i621, out_$p622, out_$p623, out_$p624, out_$i625, out_$i626, out_$i627, out_$p628, out_$p629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$i635, out_$p636, out_$p637, out_$p638, out_$i639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$i646, out_$i647, out_$i648, out_$i649, out_$i650, out_$i712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$p718, out_$p719, out_$p720, out_$i721, out_$i723, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_vslice_dummy_var_157, out_vslice_dummy_var_158);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb380(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i581: i32, in_$i582: i1, in_$i583: i32, in_$i584: i1, in_$i585: i32, in_$i586: i32, in_$i587: i32, in_$i588: i32, in_$i589: i1, in_$i591: i32, in_$i592: i1, in_$i593: i32, in_$i594: i1, in_$i595: i32, in_$i596: i1, in_$i597: i32, in_$i598: i1, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i602: i1, in_$i603: i32, in_$i604: i1, in_$i605: i32, in_$i606: i1, in_$i607: i32, in_$i608: i1, in_$i609: i32, in_$i610: i1, in_$i611: i32, in_$i612: i1, in_$i613: i32, in_$i614: i1, in_$i615: i32, in_$i616: i1, in_$i617: i32, in_$i618: i1, in_$i590: i32, in_$i619: i32, in_$i620: i1, in_$i621: i64, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$i625: i32, in_$i626: i64, in_$i627: i64, in_$p628: ref, in_$p629: ref, in_$p630: ref, in_$i631: i64, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$i635: i64, in_$p636: ref, in_$p637: ref, in_$p638: ref, in_$i639: i64, in_$i640: i64, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i64, in_$p645: ref, in_$i646: i64, in_$i647: i1, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i712: i64, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i716: i64, in_$i717: i64, in_$p718: ref, in_$p719: ref, in_$p720: ref, in_$i721: i64, in_$i723: i64, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i581: i32, out_$i582: i1, out_$i583: i32, out_$i584: i1, out_$i585: i32, out_$i586: i32, out_$i587: i32, out_$i588: i32, out_$i589: i1, out_$i591: i32, out_$i592: i1, out_$i593: i32, out_$i594: i1, out_$i595: i32, out_$i596: i1, out_$i597: i32, out_$i598: i1, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i602: i1, out_$i603: i32, out_$i604: i1, out_$i605: i32, out_$i606: i1, out_$i607: i32, out_$i608: i1, out_$i609: i32, out_$i610: i1, out_$i611: i32, out_$i612: i1, out_$i613: i32, out_$i614: i1, out_$i615: i32, out_$i616: i1, out_$i617: i32, out_$i618: i1, out_$i590: i32, out_$i619: i32, out_$i620: i1, out_$i621: i64, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$i625: i32, out_$i626: i64, out_$i627: i64, out_$p628: ref, out_$p629: ref, out_$p630: ref, out_$i631: i64, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$i635: i64, out_$p636: ref, out_$p637: ref, out_$p638: ref, out_$i639: i64, out_$i640: i64, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i64, out_$p645: ref, out_$i646: i64, out_$i647: i1, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i712: i64, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i716: i64, out_$i717: i64, out_$p718: ref, out_$p719: ref, out_$p720: ref, out_$i721: i64, out_$i723: i64, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb286(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$i441: i32, in_$i442: i32, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i455: i32, in_$i456: i1, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i1, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$i446: i32, in_$i475: i32, in_$i476: i1, in_$i477: i64, in_$p478: ref, in_$p479: ref, in_$p480: ref, in_$i481: i32, in_$i482: i64, in_$i483: i64, in_$p484: ref, in_$p485: ref, in_$p486: ref, in_$i487: i64, in_$p488: ref, in_$p489: ref, in_$p490: ref, in_$i491: i64, in_$p492: ref, in_$p493: ref, in_$p494: ref, in_$i495: i64, in_$i496: i64, in_$p497: ref, in_$p498: ref, in_$p499: ref, in_$i500: i64, in_$p501: ref, in_$i502: i64, in_$i503: i1, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i568: i64, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$i572: i64, in_$i573: i64, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$i579: i64, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$i441: i32, out_$i442: i32, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i455: i32, out_$i456: i1, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i1, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$i446: i32, out_$i475: i32, out_$i476: i1, out_$i477: i64, out_$p478: ref, out_$p479: ref, out_$p480: ref, out_$i481: i32, out_$i482: i64, out_$i483: i64, out_$p484: ref, out_$p485: ref, out_$p486: ref, out_$i487: i64, out_$p488: ref, out_$p489: ref, out_$p490: ref, out_$i491: i64, out_$p492: ref, out_$p493: ref, out_$p494: ref, out_$i495: i64, out_$i496: i64, out_$p497: ref, out_$p498: ref, out_$p499: ref, out_$i500: i64, out_$p501: ref, out_$i502: i64, out_$i503: i1, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i568: i64, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$i572: i64, out_$i573: i64, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$i579: i64, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i446, out_$i475, out_$i476, out_$i477, out_$p478, out_$p479, out_$p480, out_$i481, out_$i482, out_$i483, out_$p484, out_$p485, out_$p486, out_$i487, out_$p488, out_$p489, out_$p490, out_$i491, out_$p492, out_$p493, out_$p494, out_$i495, out_$i496, out_$p497, out_$p498, out_$p499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i568, out_$p569, out_$p570, out_$p571, out_$i572, out_$i573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i579, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_153, out_vslice_dummy_var_154 := in_$i2, in_$i119, in_$i14, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i474, in_$i446, in_$i475, in_$i476, in_$i477, in_$p478, in_$p479, in_$p480, in_$i481, in_$i482, in_$i483, in_$p484, in_$p485, in_$p486, in_$i487, in_$p488, in_$p489, in_$p490, in_$i491, in_$p492, in_$p493, in_$p494, in_$i495, in_$i496, in_$p497, in_$p498, in_$p499, in_$i500, in_$p501, in_$i502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i568, in_$p569, in_$p570, in_$p571, in_$i572, in_$i573, in_$p574, in_$p575, in_$p576, in_$i577, in_$i579, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_vslice_dummy_var_153, in_vslice_dummy_var_154;
    goto $bb286, exit;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i437 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6652;

  $bb382:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb382_dummy;

  $bb381:
    assume {:verifier.code 0} true;
    out_$i14 := 3;
    assume {:branchcond 1} true;
    goto $bb382;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_vslice_dummy_var_153 := printk.ref.i64(.str.32, out_$i579);
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$i579 := $zext.i32.i64(out_$i443);
    goto corral_source_split_6715;

  $bb359:
    assume out_$i476 == 1;
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 15);
    goto corral_source_split_6712;

  $bb358:
    assume {:verifier.code 0} true;
    goto corral_source_split_6711;

  $bb357:
    assume {:verifier.code 0} true;
    out_$i475 := 15;
    goto $bb358;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    out_$i475 := out_$i446;
    goto $bb358;

  $bb299:
    assume {:verifier.code 0} true;
    goto corral_source_split_6667;

  $bb355:
    assume {:verifier.code 0} true;
    assume out_$i474 == 1;
    goto $bb299;

  $bb351:
    assume {:verifier.code 0} true;
    assume out_$i472 == 1;
    goto $bb299;

  $bb347:
    assume {:verifier.code 0} true;
    assume out_$i470 == 1;
    goto $bb299;

  $bb343:
    assume {:verifier.code 0} true;
    assume out_$i468 == 1;
    goto $bb299;

  $bb339:
    assume {:verifier.code 0} true;
    assume out_$i466 == 1;
    goto $bb299;

  $bb335:
    assume {:verifier.code 0} true;
    assume out_$i464 == 1;
    goto $bb299;

  $bb331:
    assume {:verifier.code 0} true;
    assume out_$i462 == 1;
    goto $bb299;

  $bb327:
    assume {:verifier.code 0} true;
    assume out_$i460 == 1;
    goto $bb299;

  $bb323:
    assume {:verifier.code 0} true;
    assume out_$i458 == 1;
    goto $bb299;

  $bb319:
    assume {:verifier.code 0} true;
    assume out_$i456 == 1;
    goto $bb299;

  $bb315:
    assume {:verifier.code 0} true;
    assume out_$i454 == 1;
    goto $bb299;

  $bb311:
    assume {:verifier.code 0} true;
    assume out_$i452 == 1;
    goto $bb299;

  $bb307:
    assume {:verifier.code 0} true;
    assume out_$i450 == 1;
    goto $bb299;

  $bb303:
    assume {:verifier.code 0} true;
    assume out_$i448 == 1;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    assume out_$i445 == 1;
    goto $bb299;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$i446 := 0;
    assume true;
    goto $bb298, $bb300;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i445 := $eq.i32(out_$i444, out_$i443);
    goto corral_source_split_6665;

  $bb297:
    assume {:verifier.code 0} true;
    out_$i444 := $load.i32($M.13, products);
    goto corral_source_split_6664;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_$i443 := inl(out_$i442);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i442 := $add.i32(out_$i441, 3200);
    goto corral_source_split_6661;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i441 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6660;

  $bb294:
    assume !(out_$i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    out_$i2 := 3;
    assume true;
    goto $bb294;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i439, $sub.i32(0, 1));
    goto corral_source_split_6658;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_$i439 := alloc_cpqarray_hba();
    goto corral_source_split_6657;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume out_$i438 == 1;
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i119 := 3;
    assume true;
    goto $bb290;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i438 := $ne.i32(out_$i437, 0);
    goto corral_source_split_6653;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i446 := 1;
    assume true;
    goto $bb303, $bb304;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, out_$i443);
    goto corral_source_split_6670;

  $bb302:
    assume {:verifier.code 0} true;
    out_$i447 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6669;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb300:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i446 := 2;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i450 := $eq.i32(out_$i449, out_$i443);
    goto corral_source_split_6673;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i449 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6672;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb304:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i446 := 3;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, out_$i443);
    goto corral_source_split_6676;

  $bb310:
    assume {:verifier.code 0} true;
    out_$i451 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6675;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$i446 := 4;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i453, out_$i443);
    goto corral_source_split_6679;

  $bb314:
    assume {:verifier.code 0} true;
    out_$i453 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6678;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb312:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i446 := 5;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, out_$i443);
    goto corral_source_split_6682;

  $bb318:
    assume {:verifier.code 0} true;
    out_$i455 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6681;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb316:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$i446 := 6;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i457, out_$i443);
    goto corral_source_split_6685;

  $bb322:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6684;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb320:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$i446 := 7;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$i460 := $eq.i32(out_$i459, out_$i443);
    goto corral_source_split_6688;

  $bb326:
    assume {:verifier.code 0} true;
    out_$i459 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6687;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb324:
    assume !(out_$i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    out_$i446 := 8;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i461, out_$i443);
    goto corral_source_split_6691;

  $bb330:
    assume {:verifier.code 0} true;
    out_$i461 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6690;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb328:
    assume !(out_$i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i446 := 9;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$i464 := $eq.i32(out_$i463, out_$i443);
    goto corral_source_split_6694;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i463 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6693;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i446 := 10;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, out_$i443);
    goto corral_source_split_6697;

  $bb338:
    assume {:verifier.code 0} true;
    out_$i465 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6696;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb336:
    assume !(out_$i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i446 := 11;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$i468 := $eq.i32(out_$i467, out_$i443);
    goto corral_source_split_6700;

  $bb342:
    assume {:verifier.code 0} true;
    out_$i467 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6699;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb340:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i446 := 12;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i469, out_$i443);
    goto corral_source_split_6703;

  $bb346:
    assume {:verifier.code 0} true;
    out_$i469 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6702;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb344:
    assume !(out_$i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i446 := 13;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i471, out_$i443);
    goto corral_source_split_6706;

  $bb350:
    assume {:verifier.code 0} true;
    out_$i471 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6705;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb348:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i446 := 14;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i474 := $eq.i32(out_$i473, out_$i443);
    goto corral_source_split_6709;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i473 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6708;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb352:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb356:
    assume !(out_$i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} free_hba(out_$i439);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} out_vslice_dummy_var_154 := printk.ref.i64.i64(.str.73, out_$i572, out_$i577);
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$i577 := $load.i64($M.0, out_$p576);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(out_$p575, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$p575 := $load.ref($M.6, out_$p574);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i573, 8));
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$i573 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6755;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i572 := $load.i64($M.0, out_$p571);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$p571 := $add.ref($add.ref(out_$p570, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$p570 := $load.ref($M.6, out_$p569);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$p569 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i568, 8));
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i568 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6750;

  $bb362:
    assume out_$i503 == 1;
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i504, out_$i505, out_$i506 := out_$i439, out_$i443, out_$i475;
    assume true;
    goto $bb362;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i503 := $eq.i64(out_$i502, 0);
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i502 := $p2i.ref.i64(out_$p501);
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_$p501 := __request_region(ioport_resource, out_$i495, out_$i500, .str.30, 0);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i500 := $load.i64($M.0, out_$p499);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$p499 := $add.ref($add.ref(out_$p498, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$p498 := $load.ref($M.6, out_$p497);
    goto corral_source_split_6742;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$p497 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i496, 8));
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i496 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i495 := $load.i64($M.0, out_$p494);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$p494 := $add.ref($add.ref(out_$p493, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$p493 := $load.ref($M.6, out_$p492);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$p492 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i491, 8));
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i491 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p490, 2047);
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$p490 := $add.ref($add.ref(out_$p489, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$p489 := $load.ref($M.6, out_$p488);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$p488 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i487, 8));
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i487 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p486, out_$i482);
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$p486 := $add.ref($add.ref(out_$p485, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$p485 := $load.ref($M.6, out_$p484);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i483, 8));
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i483 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i482 := $sext.i32.i64(out_$i481);
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i481 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1136} out_cmdloc_dummy_var_27 := $memset.i8(out_cmdloc_dummy_var_26, out_$p480, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_27;
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$p480 := $bitcast.ref.ref(out_$p479);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$p479 := $load.ref($M.6, out_$p478);
    goto corral_source_split_6720;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    out_$p478 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i477, 8));
    goto corral_source_split_6719;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i477 := $sext.i32.i64(out_$i439);
    goto corral_source_split_6718;

  $bb360:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb382_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i446, out_$i475, out_$i476, out_$i477, out_$p478, out_$p479, out_$p480, out_$i481, out_$i482, out_$i483, out_$p484, out_$p485, out_$p486, out_$i487, out_$p488, out_$p489, out_$p490, out_$i491, out_$p492, out_$p493, out_$p494, out_$i495, out_$i496, out_$p497, out_$p498, out_$p499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i568, out_$p569, out_$p570, out_$p571, out_$i572, out_$i573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i579, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_153, out_vslice_dummy_var_154 := cpqarray_eisa_detect_loop_$bb286(out_$i2, out_$i119, out_$i14, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i446, out_$i475, out_$i476, out_$i477, out_$p478, out_$p479, out_$p480, out_$i481, out_$i482, out_$i483, out_$p484, out_$p485, out_$p486, out_$i487, out_$p488, out_$p489, out_$p490, out_$i491, out_$p492, out_$p493, out_$p494, out_$i495, out_$i496, out_$p497, out_$p498, out_$p499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i568, out_$p569, out_$p570, out_$p571, out_$i572, out_$i573, out_$p574, out_$p575, out_$p576, out_$i577, out_$i579, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_153, out_vslice_dummy_var_154);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb286(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$i441: i32, in_$i442: i32, in_$i443: i32, in_$i444: i32, in_$i445: i1, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i455: i32, in_$i456: i1, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i1, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$i446: i32, in_$i475: i32, in_$i476: i1, in_$i477: i64, in_$p478: ref, in_$p479: ref, in_$p480: ref, in_$i481: i32, in_$i482: i64, in_$i483: i64, in_$p484: ref, in_$p485: ref, in_$p486: ref, in_$i487: i64, in_$p488: ref, in_$p489: ref, in_$p490: ref, in_$i491: i64, in_$p492: ref, in_$p493: ref, in_$p494: ref, in_$i495: i64, in_$i496: i64, in_$p497: ref, in_$p498: ref, in_$p499: ref, in_$i500: i64, in_$p501: ref, in_$i502: i64, in_$i503: i1, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i568: i64, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$i572: i64, in_$i573: i64, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$i579: i64, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$i441: i32, out_$i442: i32, out_$i443: i32, out_$i444: i32, out_$i445: i1, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i455: i32, out_$i456: i1, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i1, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$i446: i32, out_$i475: i32, out_$i476: i1, out_$i477: i64, out_$p478: ref, out_$p479: ref, out_$p480: ref, out_$i481: i32, out_$i482: i64, out_$i483: i64, out_$p484: ref, out_$p485: ref, out_$p486: ref, out_$i487: i64, out_$p488: ref, out_$p489: ref, out_$p490: ref, out_$i491: i64, out_$p492: ref, out_$p493: ref, out_$p494: ref, out_$i495: i64, out_$i496: i64, out_$p497: ref, out_$p498: ref, out_$p499: ref, out_$i500: i64, out_$p501: ref, out_$i502: i64, out_$i503: i1, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i568: i64, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$i572: i64, out_$i573: i64, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$i579: i64, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb192(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$i302: i32, in_$i331: i32, in_$i332: i1, in_$i333: i64, in_$p334: ref, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i64, in_$i339: i64, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$i343: i64, in_$p344: ref, in_$p345: ref, in_$p346: ref, in_$i347: i64, in_$p348: ref, in_$p349: ref, in_$p350: ref, in_$i351: i64, in_$i352: i64, in_$p353: ref, in_$p354: ref, in_$p355: ref, in_$i356: i64, in_$p357: ref, in_$i358: i64, in_$i359: i1, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i424: i64, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$i429: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i435: i64, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$i302: i32, out_$i331: i32, out_$i332: i1, out_$i333: i64, out_$p334: ref, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i64, out_$i339: i64, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$i343: i64, out_$p344: ref, out_$p345: ref, out_$p346: ref, out_$i347: i64, out_$p348: ref, out_$p349: ref, out_$p350: ref, out_$i351: i64, out_$i352: i64, out_$p353: ref, out_$p354: ref, out_$p355: ref, out_$i356: i64, out_$p357: ref, out_$i358: i64, out_$i359: i1, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i424: i64, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$i429: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i435: i64, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i302, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$p342, out_$i343, out_$p344, out_$p345, out_$p346, out_$i347, out_$p348, out_$p349, out_$p350, out_$i351, out_$i352, out_$p353, out_$p354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i435, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_149, out_vslice_dummy_var_150 := in_$i2, in_$i119, in_$i14, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i302, in_$i331, in_$i332, in_$i333, in_$p334, in_$p335, in_$p336, in_$i337, in_$i338, in_$i339, in_$p340, in_$p341, in_$p342, in_$i343, in_$p344, in_$p345, in_$p346, in_$i347, in_$p348, in_$p349, in_$p350, in_$i351, in_$i352, in_$p353, in_$p354, in_$p355, in_$i356, in_$p357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i424, in_$p425, in_$p426, in_$p427, in_$i428, in_$i429, in_$p430, in_$p431, in_$p432, in_$i433, in_$i435, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_vslice_dummy_var_149, in_vslice_dummy_var_150;
    goto $bb192, exit;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6461;

  $bb288:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb288_dummy;

  $bb287:
    assume {:verifier.code 0} true;
    out_$i14 := 2;
    assume {:branchcond 1} true;
    goto $bb288;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_vslice_dummy_var_149 := printk.ref.i64(.str.32, out_$i435);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$i435 := $zext.i32.i64(out_$i299);
    goto corral_source_split_6524;

  $bb265:
    assume out_$i332 == 1;
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 15);
    goto corral_source_split_6521;

  $bb264:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i331 := 15;
    goto $bb264;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i331 := out_$i302;
    goto $bb264;

  $bb205:
    assume {:verifier.code 0} true;
    goto corral_source_split_6476;

  $bb261:
    assume {:verifier.code 0} true;
    assume out_$i330 == 1;
    goto $bb205;

  $bb257:
    assume {:verifier.code 0} true;
    assume out_$i328 == 1;
    goto $bb205;

  $bb253:
    assume {:verifier.code 0} true;
    assume out_$i326 == 1;
    goto $bb205;

  $bb249:
    assume {:verifier.code 0} true;
    assume out_$i324 == 1;
    goto $bb205;

  $bb245:
    assume {:verifier.code 0} true;
    assume out_$i322 == 1;
    goto $bb205;

  $bb241:
    assume {:verifier.code 0} true;
    assume out_$i320 == 1;
    goto $bb205;

  $bb237:
    assume {:verifier.code 0} true;
    assume out_$i318 == 1;
    goto $bb205;

  $bb233:
    assume {:verifier.code 0} true;
    assume out_$i316 == 1;
    goto $bb205;

  $bb229:
    assume {:verifier.code 0} true;
    assume out_$i314 == 1;
    goto $bb205;

  $bb225:
    assume {:verifier.code 0} true;
    assume out_$i312 == 1;
    goto $bb205;

  $bb221:
    assume {:verifier.code 0} true;
    assume out_$i310 == 1;
    goto $bb205;

  $bb217:
    assume {:verifier.code 0} true;
    assume out_$i308 == 1;
    goto $bb205;

  $bb213:
    assume {:verifier.code 0} true;
    assume out_$i306 == 1;
    goto $bb205;

  $bb209:
    assume {:verifier.code 0} true;
    assume out_$i304 == 1;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    assume out_$i301 == 1;
    goto $bb205;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i302 := 0;
    assume true;
    goto $bb204, $bb206;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, out_$i299);
    goto corral_source_split_6474;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i300 := $load.i32($M.13, products);
    goto corral_source_split_6473;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} out_$i299 := inl(out_$i298);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i298 := $add.i32(out_$i297, 3200);
    goto corral_source_split_6470;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6469;

  $bb200:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$i2 := 2;
    assume true;
    goto $bb200;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, $sub.i32(0, 1));
    goto corral_source_split_6467;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i295 := alloc_cpqarray_hba();
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume out_$i294 == 1;
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i119 := 2;
    assume true;
    goto $bb196;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i294 := $ne.i32(out_$i293, 0);
    goto corral_source_split_6462;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i302 := 1;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, out_$i299);
    goto corral_source_split_6479;

  $bb208:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6478;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i302 := 2;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, out_$i299);
    goto corral_source_split_6482;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6481;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb210:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i302 := 3;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, out_$i299);
    goto corral_source_split_6485;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6484;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i302 := 4;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, out_$i299);
    goto corral_source_split_6488;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6487;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb218:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i302 := 5;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, out_$i299);
    goto corral_source_split_6491;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6490;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb222:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$i302 := 6;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, out_$i299);
    goto corral_source_split_6494;

  $bb228:
    assume {:verifier.code 0} true;
    out_$i313 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6493;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$i302 := 7;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, out_$i299);
    goto corral_source_split_6497;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6496;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i302 := 8;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, out_$i299);
    goto corral_source_split_6500;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6499;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb234:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$i302 := 9;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, out_$i299);
    goto corral_source_split_6503;

  $bb240:
    assume {:verifier.code 0} true;
    out_$i319 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6502;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb238:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$i302 := 10;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, out_$i299);
    goto corral_source_split_6506;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6505;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i302 := 11;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, out_$i299);
    goto corral_source_split_6509;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i323 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6508;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb246:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i302 := 12;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, out_$i299);
    goto corral_source_split_6512;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i325 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6511;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb250:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i302 := 13;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, out_$i299);
    goto corral_source_split_6515;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6514;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb254:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i302 := 14;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, out_$i299);
    goto corral_source_split_6518;

  $bb260:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6517;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb258:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb262:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} free_hba(out_$i295);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_vslice_dummy_var_150 := printk.ref.i64.i64(.str.73, out_$i428, out_$i433);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i64($M.0, out_$p432);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(out_$p431, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$p431 := $load.ref($M.6, out_$p430);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i429, 8));
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i429 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i428 := $load.i64($M.0, out_$p427);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p427 := $add.ref($add.ref(out_$p426, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$p426 := $load.ref($M.6, out_$p425);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$p425 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i424, 8));
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i424 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6559;

  $bb268:
    assume out_$i359 == 1;
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i360, out_$i361, out_$i362 := out_$i295, out_$i299, out_$i331;
    assume true;
    goto $bb268;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i64(out_$i358, 0);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i358 := $p2i.ref.i64(out_$p357);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_$p357 := __request_region(ioport_resource, out_$i351, out_$i356, .str.30, 0);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i356 := $load.i64($M.0, out_$p355);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref($add.ref(out_$p354, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$p354 := $load.ref($M.6, out_$p353);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p353 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i352, 8));
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i352 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$i351 := $load.i64($M.0, out_$p350);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(out_$p349, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$p349 := $load.ref($M.6, out_$p348);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$p348 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i347, 8));
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i347 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p346, 2047);
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref(out_$p345, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p345 := $load.ref($M.6, out_$p344);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i343, 8));
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p342, out_$i338);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref(out_$p341, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$p341 := $load.ref($M.6, out_$p340);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p340 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i339, 8));
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i339 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i338 := $sext.i32.i64(out_$i337);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$i337 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 1124} out_cmdloc_dummy_var_22 := $memset.i8(out_cmdloc_dummy_var_21, out_$p336, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_22;
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$p336 := $bitcast.ref.ref(out_$p335);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$p335 := $load.ref($M.6, out_$p334);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p334 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i333, 8));
    goto corral_source_split_6528;

  $bb267:
    assume {:verifier.code 0} true;
    out_$i333 := $sext.i32.i64(out_$i295);
    goto corral_source_split_6527;

  $bb266:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb288_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i302, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$p342, out_$i343, out_$p344, out_$p345, out_$p346, out_$i347, out_$p348, out_$p349, out_$p350, out_$i351, out_$i352, out_$p353, out_$p354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i435, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_149, out_vslice_dummy_var_150 := cpqarray_eisa_detect_loop_$bb192(out_$i2, out_$i119, out_$i14, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i302, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$p340, out_$p341, out_$p342, out_$i343, out_$p344, out_$p345, out_$p346, out_$i347, out_$p348, out_$p349, out_$p350, out_$i351, out_$i352, out_$p353, out_$p354, out_$p355, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i424, out_$p425, out_$p426, out_$p427, out_$i428, out_$i429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i435, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_149, out_vslice_dummy_var_150);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb192(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$i302: i32, in_$i331: i32, in_$i332: i1, in_$i333: i64, in_$p334: ref, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i64, in_$i339: i64, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$i343: i64, in_$p344: ref, in_$p345: ref, in_$p346: ref, in_$i347: i64, in_$p348: ref, in_$p349: ref, in_$p350: ref, in_$i351: i64, in_$i352: i64, in_$p353: ref, in_$p354: ref, in_$p355: ref, in_$i356: i64, in_$p357: ref, in_$i358: i64, in_$i359: i1, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i424: i64, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$i429: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i435: i64, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$i302: i32, out_$i331: i32, out_$i332: i1, out_$i333: i64, out_$p334: ref, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i64, out_$i339: i64, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$i343: i64, out_$p344: ref, out_$p345: ref, out_$p346: ref, out_$i347: i64, out_$p348: ref, out_$p349: ref, out_$p350: ref, out_$i351: i64, out_$i352: i64, out_$p353: ref, out_$p354: ref, out_$p355: ref, out_$i356: i64, out_$p357: ref, out_$i358: i64, out_$i359: i1, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i424: i64, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$i429: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i435: i64, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb42(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i158: i32, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$i203: i64, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$i207: i64, in_$i208: i64, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i64, in_$p213: ref, in_$i214: i64, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i280: i64, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i64, in_$i285: i64, in_$p286: ref, in_$p287: ref, in_$p288: ref, in_$i289: i64, in_$i291: i64, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i158: i32, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$i203: i64, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$i207: i64, out_$i208: i64, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i64, out_$p213: ref, out_$i214: i64, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i280: i64, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i64, out_$i285: i64, out_$p286: ref, out_$p287: ref, out_$p288: ref, out_$i289: i64, out_$i291: i64, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32)
{

  entry:
    out_$i2, out_$i119, out_$i14, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i158, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$p286, out_$p287, out_$p288, out_$i289, out_$i291, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := in_$i2, in_$i119, in_$i14, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i158, in_$i187, in_$i188, in_$i189, in_$p190, in_$p191, in_$p192, in_$i193, in_$i194, in_$i195, in_$p196, in_$p197, in_$p198, in_$i199, in_$p200, in_$p201, in_$p202, in_$i203, in_$p204, in_$p205, in_$p206, in_$i207, in_$i208, in_$p209, in_$p210, in_$p211, in_$i212, in_$p213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i280, in_$p281, in_$p282, in_$p283, in_$i284, in_$i285, in_$p286, in_$p287, in_$p288, in_$i289, in_$i291, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_vslice_dummy_var_145, in_vslice_dummy_var_146;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6225;

  $bb194:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb194_dummy;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i14 := 1;
    assume {:branchcond 1} true;
    goto $bb194;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} out_vslice_dummy_var_145 := printk.ref.i64(.str.32, out_$i291);
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    out_$i291 := $zext.i32.i64(out_$i155);
    goto corral_source_split_6333;

  $bb171:
    assume out_$i188 == 1;
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 15);
    goto corral_source_split_6330;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i187 := 15;
    goto $bb170;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i158;
    goto $bb170;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  $bb167:
    assume {:verifier.code 0} true;
    assume out_$i186 == 1;
    goto $bb111;

  $bb163:
    assume {:verifier.code 0} true;
    assume out_$i184 == 1;
    goto $bb111;

  $bb159:
    assume {:verifier.code 0} true;
    assume out_$i182 == 1;
    goto $bb111;

  $bb155:
    assume {:verifier.code 0} true;
    assume out_$i180 == 1;
    goto $bb111;

  $bb151:
    assume {:verifier.code 0} true;
    assume out_$i178 == 1;
    goto $bb111;

  $bb147:
    assume {:verifier.code 0} true;
    assume out_$i176 == 1;
    goto $bb111;

  $bb143:
    assume {:verifier.code 0} true;
    assume out_$i174 == 1;
    goto $bb111;

  $bb139:
    assume {:verifier.code 0} true;
    assume out_$i172 == 1;
    goto $bb111;

  $bb135:
    assume {:verifier.code 0} true;
    assume out_$i170 == 1;
    goto $bb111;

  $bb131:
    assume {:verifier.code 0} true;
    assume out_$i168 == 1;
    goto $bb111;

  $bb127:
    assume {:verifier.code 0} true;
    assume out_$i166 == 1;
    goto $bb111;

  $bb123:
    assume {:verifier.code 0} true;
    assume out_$i164 == 1;
    goto $bb111;

  $bb119:
    assume {:verifier.code 0} true;
    assume out_$i162 == 1;
    goto $bb111;

  $bb115:
    assume {:verifier.code 0} true;
    assume out_$i160 == 1;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    assume out_$i157 == 1;
    goto $bb111;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i158 := 0;
    assume true;
    goto $bb110, $bb112;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, out_$i155);
    goto corral_source_split_6283;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i32($M.13, products);
    goto corral_source_split_6282;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} out_$i155 := inl(out_$i154);
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i153, 3200);
    goto corral_source_split_6279;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6278;

  $bb106:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$i2 := 1;
    assume true;
    goto $bb106;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, $sub.i32(0, 1));
    goto corral_source_split_6276;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} out_$i151 := alloc_cpqarray_hba();
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume out_$i150 == 1;
    goto corral_source_split_6273;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i119 := 1;
    assume true;
    goto $bb102;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i32(out_$i149, 0);
    goto corral_source_split_6226;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i158 := 1;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, out_$i155);
    goto corral_source_split_6288;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6287;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i158 := 2;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, out_$i155);
    goto corral_source_split_6291;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6290;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$i158 := 3;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, out_$i155);
    goto corral_source_split_6294;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6293;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i158 := 4;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, out_$i155);
    goto corral_source_split_6297;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6296;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i158 := 5;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, out_$i155);
    goto corral_source_split_6300;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6299;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb128:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i158 := 6;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, out_$i155);
    goto corral_source_split_6303;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6302;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$i158 := 7;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, out_$i155);
    goto corral_source_split_6306;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6305;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb136:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i158 := 8;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, out_$i155);
    goto corral_source_split_6309;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6308;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb140:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$i158 := 9;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, out_$i155);
    goto corral_source_split_6312;

  $bb146:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6311;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i158 := 10;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, out_$i155);
    goto corral_source_split_6315;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6314;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb148:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i158 := 11;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, out_$i155);
    goto corral_source_split_6318;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6317;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb152:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i158 := 12;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, out_$i155);
    goto corral_source_split_6321;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6320;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$i158 := 13;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, out_$i155);
    goto corral_source_split_6324;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6323;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb160:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    out_$i158 := 14;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, out_$i155);
    goto corral_source_split_6327;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6326;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb164:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb168:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} free_hba(out_$i151);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_vslice_dummy_var_146 := printk.ref.i64.i64(.str.73, out_$i284, out_$i289);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i64($M.0, out_$p288);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(out_$p287, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$p287 := $load.ref($M.6, out_$p286);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i285, 8));
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i285 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i64($M.0, out_$p283);
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(out_$p282, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$p282 := $load.ref($M.6, out_$p281);
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i280, 8));
    goto corral_source_split_6369;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$i280 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6368;

  $bb174:
    assume out_$i215 == 1;
    goto corral_source_split_6367;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i216, out_$i217, out_$i218 := out_$i151, out_$i155, out_$i187;
    assume true;
    goto $bb174;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i64(out_$i214, 0);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    out_$i214 := $p2i.ref.i64(out_$p213);
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_$p213 := __request_region(ioport_resource, out_$i207, out_$i212, .str.30, 0);
    goto corral_source_split_6363;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i64($M.0, out_$p211);
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p210, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    out_$p210 := $load.ref($M.6, out_$p209);
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i208, 8));
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$i208 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i64($M.0, out_$p206);
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(out_$p205, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$p205 := $load.ref($M.6, out_$p204);
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i203, 8));
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$i203 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p202, 2047);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(out_$p201, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6351;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$p201 := $load.ref($M.6, out_$p200);
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i199, 8));
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p198, out_$i194);
    goto corral_source_split_6347;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p197, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6346;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    out_$p197 := $load.ref($M.6, out_$p196);
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i195, 8));
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$i195 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(out_$i193);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.84, $add.ref($add.ref(eisa, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1112} out_cmdloc_dummy_var_17 := $memset.i8(out_cmdloc_dummy_var_16, out_$p192, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_17;
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$p192 := $bitcast.ref.ref(out_$p191);
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.6, out_$p190);
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i189, 8));
    goto corral_source_split_6337;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i189 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6336;

  $bb172:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb194_dummy:
    call {:si_unique_call 1} out_$i2, out_$i119, out_$i14, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i158, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$p286, out_$p287, out_$p288, out_$i289, out_$i291, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := cpqarray_eisa_detect_loop_$bb42(out_$i2, out_$i119, out_$i14, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i158, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$p286, out_$p287, out_$p288, out_$i289, out_$i291, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_145, out_vslice_dummy_var_146);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb42(in_$i2: i32, in_$i119: i32, in_$i14: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i158: i32, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$i203: i64, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$i207: i64, in_$i208: i64, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i64, in_$p213: ref, in_$i214: i64, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i280: i64, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i64, in_$i285: i64, in_$p286: ref, in_$p287: ref, in_$p288: ref, in_$i289: i64, in_$i291: i64, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$i2: i32, out_$i119: i32, out_$i14: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i158: i32, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$i203: i64, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$i207: i64, out_$i208: i64, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i64, out_$p213: ref, out_$i214: i64, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i280: i64, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i64, out_$i285: i64, out_$p286: ref, out_$p287: ref, out_$p288: ref, out_$i289: i64, out_$i291: i64, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32);
  modifies $M.6, $CurrAddr, $M.0;



implementation cpqarray_eisa_detect_loop_$bb20(in_$i0: i32, in_$i1: i1, in_$i2: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i14: i32, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i14: i32, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i42, out_$i43, out_$i44, out_$i117, out_$i118, out_$i119, out_$i14, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_vslice_dummy_var_141, out_vslice_dummy_var_142 := in_$i0, in_$i1, in_$i2, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i42, in_$i43, in_$i44, in_$i117, in_$i118, in_$i119, in_$i14, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_vslice_dummy_var_141, in_vslice_dummy_var_142;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.84, eisa);
    goto corral_source_split_6095;

  $bb19:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb19_dummy;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i14 := 0;
    assume {:branchcond 1} true;
    goto $bb19;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_vslice_dummy_var_141 := printk.ref.i64(.str.32, out_$i12);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i6);
    goto corral_source_split_6092;

  $bb16:
    assume out_$i11 == 1;
    goto corral_source_split_6091;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 15);
    goto corral_source_split_6086;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i10 := 15;
    goto $bb13;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i9;
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  $bb99:
    assume {:verifier.code 0} true;
    assume out_$i148 == 1;
    goto $bb11;

  $bb95:
    assume {:verifier.code 0} true;
    assume out_$i146 == 1;
    goto $bb11;

  $bb91:
    assume {:verifier.code 0} true;
    assume out_$i144 == 1;
    goto $bb11;

  $bb87:
    assume {:verifier.code 0} true;
    assume out_$i142 == 1;
    goto $bb11;

  $bb83:
    assume {:verifier.code 0} true;
    assume out_$i140 == 1;
    goto $bb11;

  $bb79:
    assume {:verifier.code 0} true;
    assume out_$i138 == 1;
    goto $bb11;

  $bb75:
    assume {:verifier.code 0} true;
    assume out_$i136 == 1;
    goto $bb11;

  $bb71:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb11;

  $bb67:
    assume {:verifier.code 0} true;
    assume out_$i132 == 1;
    goto $bb11;

  $bb63:
    assume {:verifier.code 0} true;
    assume out_$i130 == 1;
    goto $bb11;

  $bb59:
    assume {:verifier.code 0} true;
    assume out_$i128 == 1;
    goto $bb11;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i126 == 1;
    goto $bb11;

  $bb51:
    assume {:verifier.code 0} true;
    assume out_$i124 == 1;
    goto $bb11;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb11;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$i9 := 0;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, out_$i6);
    goto corral_source_split_6081;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.13, products);
    goto corral_source_split_6080;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} out_$i6 := inl(out_$i5);
    call {:si_unique_call 1095} {:cexpr "board_id"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i5 := $add.i32(out_$i4, 3200);
    goto corral_source_split_6077;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $load.i32($M.84, eisa);
    goto corral_source_split_6076;

  $bb5:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i2 := 0;
    assume true;
    goto $bb5;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$i1 := $eq.i32(out_$i0, $sub.i32(0, 1));
    goto corral_source_split_6070;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_$i0 := alloc_cpqarray_hba();
    call {:si_unique_call 1093} {:cexpr "ctlr"} boogie_si_record_i32(out_$i0);
    goto corral_source_split_6069;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb43:
    assume out_$i118 == 1;
    goto corral_source_split_6228;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i119 := 0;
    assume true;
    goto $bb43;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_6096;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$i9 := 1;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, out_$i6);
    goto corral_source_split_6089;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(1, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6088;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i9 := 2;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, out_$i6);
    goto corral_source_split_6235;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(2, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6234;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i9 := 3;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, out_$i6);
    goto corral_source_split_6238;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(3, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6237;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$i9 := 4;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, out_$i6);
    goto corral_source_split_6241;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(4, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6240;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    out_$i9 := 5;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, out_$i6);
    goto corral_source_split_6244;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(5, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6243;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i9 := 6;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, out_$i6);
    goto corral_source_split_6247;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(6, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6246;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    out_$i9 := 7;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, out_$i6);
    goto corral_source_split_6250;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(7, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6249;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    out_$i9 := 8;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, out_$i6);
    goto corral_source_split_6253;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(8, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6252;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    out_$i9 := 9;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, out_$i6);
    goto corral_source_split_6256;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(9, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6255;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    out_$i9 := 10;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, out_$i6);
    goto corral_source_split_6259;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(10, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6258;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    out_$i9 := 11;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, out_$i6);
    goto corral_source_split_6262;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(11, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6261;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    out_$i9 := 12;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, out_$i6);
    goto corral_source_split_6265;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(12, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6264;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    out_$i9 := 13;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, out_$i6);
    goto corral_source_split_6268;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(13, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6267;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    out_$i9 := 14;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, out_$i6);
    goto corral_source_split_6271;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.13, $add.ref($add.ref($add.ref(products, $mul.ref(0, 360)), $mul.ref(14, 24)), $mul.ref(0, 1)));
    goto corral_source_split_6270;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb100:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} free_hba(out_$i0);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} out_vslice_dummy_var_142 := printk.ref.i64.i64(.str.73, out_$i49, out_$i54);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.0, out_$p53);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.6, out_$p51);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i50, 8));
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.6, out_$p46);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i45, 8));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6132;

  $bb24:
    assume out_$i41 == 1;
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43, out_$i44 := out_$i0, out_$i6, out_$i10;
    assume true;
    goto $bb24;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$p39 := __request_region(ioport_resource, out_$i33, out_$i38, .str.30, 0);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.6, out_$p35);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i34, 8));
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.6, out_$p30);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i29, 8));
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p28, 2047);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 824)), $mul.ref(96, 1));
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.6, out_$p26);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i25, 8));
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p24, out_$i20);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 824)), $mul.ref(88, 1));
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.6, out_$p22);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i21, 8));
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.84, eisa);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 1097} out_cmdloc_dummy_var_12 := $memset.i8(out_cmdloc_dummy_var_11, out_$p18, 0, 824, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_12;
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.6, out_$p16);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(hba, $mul.ref(0, 64)), $mul.ref(out_$i15, 8));
    goto corral_source_split_6101;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i0);
    goto corral_source_split_6100;

  $bb17:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i42, out_$i43, out_$i44, out_$i117, out_$i118, out_$i119, out_$i14, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_vslice_dummy_var_141, out_vslice_dummy_var_142 := cpqarray_eisa_detect_loop_$bb20(out_$i0, out_$i1, out_$i2, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i42, out_$i43, out_$i44, out_$i117, out_$i118, out_$i119, out_$i14, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_vslice_dummy_var_141, out_vslice_dummy_var_142);
    return;

  exit:
    return;
}



procedure cpqarray_eisa_detect_loop_$bb20(in_$i0: i32, in_$i1: i1, in_$i2: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i14: i32, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i14: i32, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32);
  modifies $M.6, $CurrAddr, $M.0;


